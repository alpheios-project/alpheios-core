{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///../node_modules/axios/index.js","webpack:///../node_modules/axios/lib/adapters/xhr.js","webpack:///../node_modules/axios/lib/axios.js","webpack:///../node_modules/axios/lib/cancel/Cancel.js","webpack:///../node_modules/axios/lib/cancel/CancelToken.js","webpack:///../node_modules/axios/lib/cancel/isCancel.js","webpack:///../node_modules/axios/lib/core/Axios.js","webpack:///../node_modules/axios/lib/core/InterceptorManager.js","webpack:///../node_modules/axios/lib/core/createError.js","webpack:///../node_modules/axios/lib/core/dispatchRequest.js","webpack:///../node_modules/axios/lib/core/enhanceError.js","webpack:///../node_modules/axios/lib/core/settle.js","webpack:///../node_modules/axios/lib/core/transformData.js","webpack:///../node_modules/axios/lib/defaults.js","webpack:///../node_modules/axios/lib/helpers/bind.js","webpack:///../node_modules/axios/lib/helpers/btoa.js","webpack:///../node_modules/axios/lib/helpers/buildURL.js","webpack:///../node_modules/axios/lib/helpers/combineURLs.js","webpack:///../node_modules/axios/lib/helpers/cookies.js","webpack:///../node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///../node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///../node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///../node_modules/axios/lib/helpers/parseHeaders.js","webpack:///../node_modules/axios/lib/helpers/spread.js","webpack:///../node_modules/axios/lib/utils.js","webpack:///../node_modules/is-buffer/index.js","webpack:///../node_modules/process/browser.js","webpack:///../node_modules/webpack/buildin/module.js","webpack:///../node_modules/xmltojson/lib/xmlToJSON.js","webpack:///./alpheiostb/adapter.js","webpack:///./alpheiostb/config-data.js","webpack:///./base-adapter.js","webpack:///./client-adapters.js","webpack:///./index.js","webpack:///./tufts/adapter.js","webpack:///./tufts/config-data.js","webpack:///./tufts/engine/aramorph.js","webpack:///./tufts/engine/hazm.js","webpack:///./tufts/engine/morpheusgrc.js","webpack:///./tufts/engine/traces.js","webpack:///./tufts/engine/whitakers.js","webpack:///./tufts/engines-set.js","webpack:///./tufts/lib.js","webpack:///./tufts/transform-adapter.js","webpack:///external \"alpheios-data-models\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,uDAAa,E;;;;;;;;;;;;ACAzB;;AAEb,YAAY,mBAAO,CAAC,sDAAY;AAChC,aAAa,mBAAO,CAAC,kEAAkB;AACvC,eAAe,mBAAO,CAAC,4EAAuB;AAC9C,mBAAmB,mBAAO,CAAC,oFAA2B;AACtD,sBAAsB,mBAAO,CAAC,0FAA8B;AAC5D,kBAAkB,mBAAO,CAAC,0EAAqB;AAC/C,yFAAyF,mBAAO,CAAC,oEAAmB;;AAEpH;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,IAA+B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,0EAAsB;;AAElD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACnLa;;AAEb,YAAY,mBAAO,CAAC,mDAAS;AAC7B,WAAW,mBAAO,CAAC,iEAAgB;AACnC,YAAY,mBAAO,CAAC,6DAAc;AAClC,eAAe,mBAAO,CAAC,yDAAY;;AAEnC;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,mEAAiB;AACxC,oBAAoB,mBAAO,CAAC,6EAAsB;AAClD,iBAAiB,mBAAO,CAAC,uEAAmB;;AAE5C;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,qEAAkB;;AAEzC;;AAEA;AACA;;;;;;;;;;;;;ACnDa;;AAEb;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;AClBa;;AAEb,aAAa,mBAAO,CAAC,4DAAU;;AAE/B;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACxDa;;AAEb;AACA;AACA;;;;;;;;;;;;;ACJa;;AAEb,eAAe,mBAAO,CAAC,4DAAe;AACtC,YAAY,mBAAO,CAAC,sDAAY;AAChC,yBAAyB,mBAAO,CAAC,kFAAsB;AACvD,sBAAsB,mBAAO,CAAC,4EAAmB;;AAEjD;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,kCAAkC,cAAc;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;;;;;;;;;;;;;AC9Ea;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;;ACnDa;;AAEb,mBAAmB,mBAAO,CAAC,sEAAgB;;AAE3C;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;AAChC,oBAAoB,mBAAO,CAAC,wEAAiB;AAC7C,eAAe,mBAAO,CAAC,wEAAoB;AAC3C,eAAe,mBAAO,CAAC,0DAAa;AACpC,oBAAoB,mBAAO,CAAC,sFAA4B;AACxD,kBAAkB,mBAAO,CAAC,kFAA0B;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;;;;;;;;;;;;ACrFa;;AAEb;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBa;;AAEb,kBAAkB,mBAAO,CAAC,oEAAe;;AAEzC;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;;;ACnBA,+CAAa;;AAEb,YAAY,mBAAO,CAAC,mDAAS;AAC7B,0BAA0B,mBAAO,CAAC,+FAA+B;;AAEjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,iEAAgB;AACtC,GAAG;AACH;AACA,cAAc,mBAAO,CAAC,kEAAiB;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO,YAAY;AACnB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;;AC/Fa;;AAEb;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVa;;AAEb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnCa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACjEa;;AAEb;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACba;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wCAAwC;AACxC,OAAO;;AAEP;AACA,0DAA0D,wBAAwB;AAClF;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,gCAAgC;AAChC,6BAA6B,aAAa,EAAE;AAC5C;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACpDa;;AAEb;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACba;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACnEa;;AAEb,YAAY,mBAAO,CAAC,oDAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACXa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,eAAe;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;;;ACpDa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1Ba;;AAEb,WAAW,mBAAO,CAAC,iEAAgB;AACnC,eAAe,mBAAO,CAAC,qDAAW;;AAElC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,GAAG,SAAS;AAC5C,2BAA2B;AAC3B;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9SA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACpBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;ACvLtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB,wCAAwC;AACjE;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;;AAEA;AACA;AACA,uDAAuD,sCAAsC;AAC7F;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,gDAAgD;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2BAA2B;AACpC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,CAAC,SAAS;;AAEV,IAAI,IAA4B;AAChC,SAAS,IAA0C,EAAE,mCAAO,aAAa,mBAAmB;AAAA,oGAAC;;;;;;;;;;;;;;ACjP7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyK;AACjI;;AAEY;AACH;AAChB;;AAEjC,sCAAsC,qDAAW;AACjD,0BAA0B;AAC1B;AACA,sBAAsB,+DAAU,SAAS,oDAAa;AACtD,mBAAmB,QAAQ,uEAAkB,SAAS,uEAAkB;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,yEAAG;AAC1B,gCAAgC,SAAS;AACzC,sBAAsB,gDAAS;AAC/B,mEAAmE,QAAQ,mBAAmB;;AAE9F;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,qEAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAK;AACzB,uBAAuB,2DAAM;AAC7B,yBAAyB,+DAAU;AACnC;AACA,8BAA8B,4DAAO,CAAC,4DAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAO,EAAE,qEAAgB;AACxC;AACA;;AAEe,sFAAuB;;;;;;;;;;;;;ACxFtC;AAAA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,yEAAU;;;;;;;;;;;;;;;;;;;;;;;;ACdzB;AAAA;AAAA;AAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,qDAAqD,IAAI;AACzD;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,4CAAK;AAC3B;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEe,0EAAW;;;;;;;;;;;;;AC5C1B;AAAA;AAAkD;;AAElD;AACA;AACA,6BAA6B,sDAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,6EAAc;;;;;;;;;;;;;ACf7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACQ;;AAEZ;;AAE0B;;;;;;;;;;;;;ACLxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmF;;AAE3C;AACgB;;AAET;AACH;AACA;;AAE5C,mCAAmC,qDAAW;AAC9C,0BAA0B;AAC1B;AACA,sBAAsB,0DAAU,SAAS,+CAAa;AACtD,yBAAyB,0DAAU;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,gEAAgB;;AAEjD;;AAEA;AACA;AACA,6BAA6B,2DAAM,2BAA2B,4DAAO,kBAAkB,4DAAO;AAC9F;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yEAAG;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEe,mFAAoB;;;;;;;;;;;;;ACnDnC;AAAA;AAAA;AAA6E;;AAE7E;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yEAAG;;AAEtB,qBAAqB,8DAAS;AAC9B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,yEAAU;;;;;;;;;;;;;;;;;;;;;;;;ACvEzB;AAAA;AAAA;AAAA;AAA+B;AACe;;AAE9C,eAAe,4CAAU,CAAC,wEAA0B;;AAErC,mEAAI;;;;;;;;;;;;;ACLnB;AAAA;AAAA;AAAA;AAA+B;AACe;;AAE9C,eAAe,4CAAU,CAAC,yEAA2B;;AAErD;AACA,wCAAwC,oCAAoC;;AAE7D,mEAAI;;;;;;;;;;;;;ACRnB;AAAA;AAAA;AAAA;AAA+B;AACe;;AAE9C,eAAe,4CAAU,CAAC,uEAAyB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,4DAAc;AAC9B,+BAA+B,8DAAgB,sBAAsB,8DAAgB;;AAErF,gBAAgB,4DAAc;AAC9B,sBAAsB,8DAAgB,eAAe,8DAAgB;;AAEtD,mEAAI;;;;;;;;;;;;;ACnBnB;AAAA;AAAA;AAAA;AAA+B;AACe;;AAE9C,eAAe,4CAAU,CAAC,sEAAwB;;AAEnC,mEAAI;;;;;;;;;;;;;ACLnB;AAAA;AAAA;AAAA;AAA+B;AACe;;AAE9C,eAAe,4CAAU,CAAC,uEAAyB;;AAEnD;AACA;AACA,4BAA4B,4DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB,4DAAc;AAC9B,mBAAmB,8DAAgB,sBAAsB,8DAAgB;AACzE,gBAAgB,8DAAgB,sBAAsB,8DAAgB,qBAAqB,8DAAgB;;AAE3G,gBAAgB,4DAAc;AAC9B,yBAAyB,8DAAgB;;AAEzC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,sBAAsB,8DAAgB;AACtC,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4DAAc;AAChD,mCAAmC,4DAAc;AACjD,mCAAmC,4DAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4DAAc,oDAAoD,4DAAc;AACrH;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAY;AAC7B;;AAEA;AACA,CAAC;;AAEc,mEAAI;;;;;;;;;;;;;AC3GnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACI;AACN;AACR;AACI;;AAEwB;;AAElE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,+DAAS,EAAE,iEAAW,EAAE,8DAAQ,EAAE,0DAAI,EAAE,4DAAM,gBAAgB,yBAAyB;AACzH;AACA;AACA;;AAEA;AACA,qBAAqB,yEAAG;AACxB;AACA;AACA;;AAEe,yEAAU;;;;;;;;;;;;;AC3BzB;AAAA;AAAA;AAAA;AACA;AACA;AACsE;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY,0DAAK;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAO;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0CAA0C,cAAc,gBAAgB,YAAY,QAAQ,mBAAmB,cAAc,mBAAmB;AAChJ;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,0CAA0C,mBAAmB,gBAAgB,YAAY,QAAQ,mBAAmB,cAAc,mBAAmB;AACrJ;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,oEAAe;;AAEpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS,qEAAqE,EAAE;AAClH,2BAA2B,4DAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,WAAW;AACxB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,yEAAU;;;;;;;;;;;;;ACzNzB;AAAA;AAAA;AAAoH;;AAEpH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAgB;AACvC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA,4CAA4C,8DAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAgB;AAC3C,kBAAkB,+DAAU;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,qEAAgB;AACnC,kBAAkB,+DAAU;AAC5B,WAAW;AACX;AACA;AACA,2BAA2B,2DAAM;;AAEjC;AACA,uBAAuB,qEAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAU;AACvC;AACA,oCAAoC,4DAAO,CAAC,4DAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA,uBAAuB,4DAAO;AAC9B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B,qBAAqB,4DAAO;AAC5B;AACA;AACA;AACA;AACA,8BAA8B,4DAAO;AACrC;AACA;AACA;AACA,8BAA8B,4DAAO;AACrC,6BAA6B,4DAAO,+BAA+B,4DAAO,gCAAgC,4DAAO;AACjH;AACA;AACA;AACA,8BAA8B,4DAAO;AACrC,6BAA6B,4DAAO,+BAA+B,4DAAO,gCAAgC,4DAAO;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAO;AACxB,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,iDAAiD,aAAa;AAC9D;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,2BAA2B,2DAAM;AACjC;AACA,uBAAuB,qEAAgB;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,4DAAO;AACxB,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,WAAW,qEAAgB,wBAAwB,+DAAU;AAC7D;;AAEA;AACA;;AAEA;AACA,eAAe,qEAAgB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAS;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAU;;AAErC;AACA,kCAAkC,4DAAO,CAAC,4DAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uCAAuC,KAAK;AAC5C;AACA;;AAEA;AACA,qBAAqB,4DAAO;AAC5B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B,mBAAmB,4DAAO;AAC1B;AACA;AACA;AACA;AACA,4BAA4B,4DAAO;AACnC;AACA;AACA;AACA,4BAA4B,4DAAO;AACnC,2BAA2B,4DAAO,+BAA+B,4DAAO,gCAAgC,4DAAO;AAC/G;AACA;AACA;AACA,4BAA4B,4DAAO;AACnC,2BAA2B,4DAAO,+BAA+B,4DAAO,gCAAgC,4DAAO;AAC/G;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEe,+EAAgB;;;;;;;;;;;;ACvY/B,kE","file":"alpheios-client-adapters.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"alpheios-data-models\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"alpheios-data-models\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"alpheios-data-models\")) : factory(root[\"alpheios-data-models\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE_alpheios_data_models__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/* Copyright 2015 William Summers, MetaTribal LLC\n * adapted from https://developer.mozilla.org/en-US/docs/JXON\n *\n * Licensed under the MIT License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/MIT\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @author William Summers\n *\n */\n\nvar xmlToJSON = (function () {\n\n    this.version = \"1.3.5\";\n\n    var options = { // set up the default options\n        mergeCDATA: true, // extract cdata and merge with text\n        grokAttr: true, // convert truthy attributes to boolean, etc\n        grokText: true, // convert truthy text/attr to boolean, etc\n        normalize: true, // collapse multiple spaces to single space\n        xmlns: true, // include namespaces as attribute in output\n        namespaceKey: '_ns', // tag name for namespace objects\n        textKey: '_text', // tag name for text nodes\n        valueKey: '_value', // tag name for attribute values\n        attrKey: '_attr', // tag for attr groups\n        cdataKey: '_cdata', // tag for cdata nodes (ignored if mergeCDATA is true)\n        attrsAsObject: true, // if false, key is used as prefix to name, set prefix to '' to merge children and attrs.\n        stripAttrPrefix: true, // remove namespace prefixes from attributes\n        stripElemPrefix: true, // for elements of same name in diff namespaces, you can enable namespaces and access the nskey property\n        childrenAsArray: true // force children into arrays\n    };\n\n    var prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n    var trimMatch = new RegExp(/^\\s+|\\s+$/g);\n\n    this.grokType = function (sValue) {\n        if (/^\\s*$/.test(sValue)) {\n            return null;\n        }\n        if (/^(?:true|false)$/i.test(sValue)) {\n            return sValue.toLowerCase() === \"true\";\n        }\n        if (isFinite(sValue)) {\n            return parseFloat(sValue);\n        }\n        return sValue;\n    };\n\n    this.parseString = function (xmlString, opt) {\n        return this.parseXML(this.stringToXML(xmlString), opt);\n    }\n\n    this.parseXML = function (oXMLParent, opt) {\n\n        // initialize options\n        for (var key in opt) {\n            options[key] = opt[key];\n        }\n\n        var vResult = {},\n            nLength = 0,\n            sCollectedTxt = \"\";\n\n        // parse namespace information\n        if (options.xmlns && oXMLParent.namespaceURI) {\n            vResult[options.namespaceKey] = oXMLParent.namespaceURI;\n        }\n\n        // parse attributes\n        // using attributes property instead of hasAttributes method to support older browsers\n        if (oXMLParent.attributes && oXMLParent.attributes.length > 0) {\n            var vAttribs = {};\n\n            for (nLength; nLength < oXMLParent.attributes.length; nLength++) {\n                var oAttrib = oXMLParent.attributes.item(nLength);\n                vContent = {};\n                var attribName = '';\n\n                if (options.stripAttrPrefix) {\n                    attribName = oAttrib.name.replace(prefixMatch, '');\n\n                } else {\n                    attribName = oAttrib.name;\n                }\n\n                if (options.grokAttr) {\n                    vContent[options.valueKey] = this.grokType(oAttrib.value.replace(trimMatch, ''));\n                } else {\n                    vContent[options.valueKey] = oAttrib.value.replace(trimMatch, '');\n                }\n\n                if (options.xmlns && oAttrib.namespaceURI) {\n                    vContent[options.namespaceKey] = oAttrib.namespaceURI;\n                }\n\n                if (options.attrsAsObject) { // attributes with same local name must enable prefixes\n                    vAttribs[attribName] = vContent;\n                } else {\n                    vResult[options.attrKey + attribName] = vContent;\n                }\n            }\n\n            if (options.attrsAsObject) {\n                vResult[options.attrKey] = vAttribs;\n            } else { }\n        }\n\n        // iterate over the children\n        if (oXMLParent.hasChildNodes()) {\n            for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {\n                oNode = oXMLParent.childNodes.item(nItem);\n\n                if (oNode.nodeType === 4) {\n                    if (options.mergeCDATA) {\n                        sCollectedTxt += oNode.nodeValue;\n                    } else {\n                        if (vResult.hasOwnProperty(options.cdataKey)) {\n                            if (vResult[options.cdataKey].constructor !== Array) {\n                                vResult[options.cdataKey] = [vResult[options.cdataKey]];\n                            }\n                            vResult[options.cdataKey].push(oNode.nodeValue);\n\n                        } else {\n                            if (options.childrenAsArray) {\n                                vResult[options.cdataKey] = [];\n                                vResult[options.cdataKey].push(oNode.nodeValue);\n                            } else {\n                                vResult[options.cdataKey] = oNode.nodeValue;\n                            }\n                        }\n                    }\n                } /* nodeType is \"CDATASection\" (4) */\n                else if (oNode.nodeType === 3) {\n                    sCollectedTxt += oNode.nodeValue;\n                } /* nodeType is \"Text\" (3) */\n                else if (oNode.nodeType === 1) { /* nodeType is \"Element\" (1) */\n\n                    if (nLength === 0) {\n                        vResult = {};\n                    }\n\n                    // using nodeName to support browser (IE) implementation with no 'localName' property\n                    if (options.stripElemPrefix) {\n                        sProp = oNode.nodeName.replace(prefixMatch, '');\n                    } else {\n                        sProp = oNode.nodeName;\n                    }\n\n                    vContent = xmlToJSON.parseXML(oNode);\n\n                    if (vResult.hasOwnProperty(sProp)) {\n                        if (vResult[sProp].constructor !== Array) {\n                            vResult[sProp] = [vResult[sProp]];\n                        }\n                        vResult[sProp].push(vContent);\n\n                    } else {\n                        if (options.childrenAsArray) {\n                            vResult[sProp] = [];\n                            vResult[sProp].push(vContent);\n                        } else {\n                            vResult[sProp] = vContent;\n                        }\n                        nLength++;\n                    }\n                }\n            }\n        } else if (!sCollectedTxt) { // no children and no text, return null\n            if (options.childrenAsArray) {\n                vResult[options.textKey] = [];\n                vResult[options.textKey].push(null);\n            } else {\n                vResult[options.textKey] = null;\n            }\n        }\n\n        if (sCollectedTxt) {\n            if (options.grokText) {\n                var value = this.grokType(sCollectedTxt.replace(trimMatch, ''));\n                if (value !== null && value !== undefined) {\n                    vResult[options.textKey] = value;\n                }\n            } else if (options.normalize) {\n                vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '').replace(/\\s+/g, \" \");\n            } else {\n                vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '');\n            }\n        }\n\n        return vResult;\n    }\n\n\n    // Convert xmlDocument to a string\n    // Returns null on failure\n    this.xmlToString = function (xmlDoc) {\n        try {\n            var xmlString = xmlDoc.xml ? xmlDoc.xml : (new XMLSerializer()).serializeToString(xmlDoc);\n            return xmlString;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    // Convert a string to XML Node Structure\n    // Returns null on failure\n    this.stringToXML = function (xmlString) {\n        try {\n            var xmlDoc = null;\n\n            if (window.DOMParser) {\n\n                var parser = new DOMParser();\n                xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n\n                return xmlDoc;\n            } else {\n                xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                xmlDoc.async = false;\n                xmlDoc.loadXML(xmlString);\n\n                return xmlDoc;\n            }\n        } catch (e) {\n            return null;\n        }\n    }\n\n    return this;\n}).call({});\n\nif (typeof module != \"undefined\" && module !== null && module.exports) module.exports = xmlToJSON;\nelse if (typeof define === \"function\" && define.amd) define(function () { return xmlToJSON });\n","import { LanguageModelFactory as LMF, LatinLanguageModel, GreekLanguageModel, ResourceProvider, Lexeme, Lemma, Feature, Inflection, Homonym } from 'alpheios-data-models'\r\nimport BaseAdapter from '@/base-adapter'\r\n\r\nimport DefaultConfig from '@/alpheiostb/config.json'\r\nimport ConfigData from '@/alpheiostb/config-data'\r\nimport xmlToJSON from 'xmltojson'\r\n\r\nclass AlpheiosTreebankAdapter extends BaseAdapter {\r\n  constructor (config = {}) {\r\n    super()\r\n    this.config = new ConfigData(config, DefaultConfig)\r\n    this.models = { 'lat': LatinLanguageModel, 'grc': GreekLanguageModel }\r\n  }\r\n\r\n  async getHomonym (languageID, word) {\r\n    let url = this.prepareRequestUrl(word)\r\n\r\n    if (url) {\r\n      let xmlString = await this.fetch(url, 'xml')\r\n      if (xmlString) {\r\n        let langCode = LMF.getLanguageCodeFromId(languageID)\r\n        console.log(`LangCode ${langCode}`)\r\n        let jsonObj = xmlToJSON.parseString(xmlString)\r\n        jsonObj.words[0].word[0].entry[0].dict[0].hdwd[0]._attr = { lang: { _value: langCode } }\r\n\r\n        let homonym = this.transform(jsonObj, jsonObj.words[0].word[0].form[0]._text)\r\n        return homonym\r\n      } else {\r\n      // No data found for this word\r\n        return undefined\r\n      }\r\n    }\r\n  }\r\n\r\n  prepareRequestUrl (word) {\r\n    let [text, fragment] = word.split(/#/)\r\n    let url\r\n\r\n    if (this.config.texts.includes(text)) {\r\n      url = this.config.url.replace('r_TEXT', text)\r\n      url = url.replace('r_WORD', fragment).replace('r_CLIENT', this.config.clientId)\r\n    }\r\n    return url\r\n  }\r\n\r\n  transform (jsonObj, targetWord) {\r\n    'use strict'\r\n    let providerUri = this.config.providerUri\r\n    let providerRights = this.config.providerRights\r\n    let provider = new ResourceProvider(providerUri, providerRights)\r\n    let hdwd = jsonObj.words[0].word[0].entry[0].dict[0].hdwd[0]\r\n    let lemmaText = hdwd._text\r\n    // the Alpheios v1 treebank data kept trailing digits on the lemmas\r\n    // these won't match morphology service lemmas which have them stripped\r\n    lemmaText = lemmaText.replace(/\\d+$/, '')\r\n    let model = this.models[hdwd._attr.lang._value]\r\n    let lemma = new Lemma(lemmaText, model.languageCode)\r\n    let lexmodel = new Lexeme(lemma, [])\r\n    let inflection = new Inflection(lemmaText, model.languageID, null, null, null)\r\n    let infl = jsonObj.words[0].word[0].entry[0].infl[0]\r\n    inflection.addFeature(new Feature(Feature.types.fullForm, targetWord, model.languageID))\r\n    let features = [\r\n      ['pofs', 'part', true],\r\n      ['case', 'grmCase', false],\r\n      ['num', 'number', false],\r\n      ['gend', 'gender', false],\r\n      ['voice', 'voice', false],\r\n      ['mood', 'mood', false],\r\n      ['pers', 'person', false],\r\n      ['comp', 'comparison', false]\r\n    ]\r\n    for (let feature of features) {\r\n      let localName = feature[0]\r\n      let featureType = feature[1]\r\n      let addToLemma = feature[2]\r\n      if (infl[localName]) {\r\n        let obj = model.typeFeature(Feature.types[featureType]).createFeatures(infl[localName][0]._text, 1)\r\n        inflection.addFeature(obj)\r\n        if (addToLemma) {\r\n          lemma.addFeature(obj)\r\n        }\r\n      }\r\n    }\r\n    lexmodel.inflections = [ inflection ]\r\n    return new Homonym([ResourceProvider.getProxy(provider, lexmodel)], targetWord)\r\n  }\r\n}\r\n\r\nexport default AlpheiosTreebankAdapter\r\n","class ConfigData {\r\n  constructor (config, defaultConfig) {\r\n    Object.keys(config).forEach(configKey => {\r\n      this[configKey] = config[configKey]\r\n    })\r\n\r\n    Object.keys(defaultConfig).forEach(configKey => {\r\n      if (this[configKey] === undefined) {\r\n        this[configKey] = defaultConfig[configKey]\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default ConfigData\r\n","import axios from 'axios'\r\n\r\nclass BaseAdapter {\r\n  async fetchWindow (url, type = 'json') {\r\n    if (url) {\r\n      try {\r\n        console.info('****************inside fetchWindow 1', url)\r\n        let response = await window.fetch(url)\r\n        console.info('****************inside fetchWindow 2', response)\r\n        if (type === 'xml') {\r\n          return response.text()\r\n        } else {\r\n          return response.json()\r\n        }\r\n      } catch (error) {\r\n        console.error(`Unable to get data from url ${url}`)\r\n      }\r\n    } else {\r\n      console.error(`Unable to prepare parser request url`)\r\n    }\r\n  }\r\n\r\n  async fetchAxios (url) {\r\n    try {\r\n      let res = await axios.get(encodeURI(url))\r\n      return res.data\r\n    } catch (error) {\r\n      console.error(`Unable to prepare parser request url`, url, error.message)\r\n    }\r\n  }\r\n\r\n  async fetch (url, type) {\r\n    let res\r\n\r\n    if (typeof window !== 'undefined') {\r\n      res = await this.fetchWindow(url, type)\r\n    } else {\r\n      res = await this.fetchAxios(url)\r\n    }\r\n\r\n    return res\r\n  }\r\n}\r\n\r\nexport default BaseAdapter\r\n","import AlpheiosTuftsAdapter from '@/tufts/adapter'\r\n\r\nclass ClientAdapters {\r\n  static async maAdapter (options) {\r\n    let localMaAdapter = new AlpheiosTuftsAdapter()\r\n    console.info('********************options', options)\r\n    if (options.type === 'getHomonym') {\r\n      let homonym = await localMaAdapter.getHomonym(options.languageID, options.word)\r\n      console.info('*******************maAdapter homonym', homonym)\r\n      return homonym\r\n    }\r\n    return null\r\n  }\r\n}\r\n\r\nexport default ClientAdapters\r\n","import AlpheiosTuftsAdapter from '@/tufts/adapter'\r\nimport AlpheiosTreebankAdapter from '@/alpheiostb/adapter'\r\n\r\nimport ClientAdapters from '@/client-adapters'\r\n\r\nexport { AlpheiosTuftsAdapter, AlpheiosTreebankAdapter, ClientAdapters }\r\n","import { LanguageModelFactory as LMF, Lexeme, Feature } from 'alpheios-data-models'\r\n\r\nimport BaseAdapter from '@/base-adapter'\r\nimport TransformAdapter from '@/tufts/transform-adapter'\r\n\r\nimport DefaultConfig from '@/tufts/config.json'\r\nimport EnginesSet from '@/tufts/engines-set'\r\nimport ConfigData from '@/tufts/config-data'\r\n\r\nclass AlpheiosTuftsAdapter extends BaseAdapter {\r\n  constructor (config = {}) {\r\n    super()\r\n    this.config = new ConfigData(config, DefaultConfig)\r\n    this.engineSet = new EnginesSet(this.config.engine)\r\n  }\r\n\r\n  async getHomonym (languageID, word) {\r\n    let url = this.prepareRequestUrl(languageID, word)\r\n    console.info('***************async getHomonym1', languageID, word, url)\r\n    let jsonObj = await this.fetch(url)\r\n    console.info('***************async getHomonym2', jsonObj)\r\n\r\n    if (jsonObj) {\r\n      let transformAdapter = new TransformAdapter(this.engineSet, this.config)\r\n\r\n      console.info('***************async getHomonym3', jsonObj.RDF.Annotation, word)\r\n\r\n      let homonym = transformAdapter.transformData(jsonObj, word)\r\n      if (homonym && homonym.lexemes) {\r\n        homonym.lexemes.sort(Lexeme.getSortByTwoLemmaFeatures(Feature.types.frequency, Feature.types.part))\r\n      }\r\n      console.info('***************async getHomonym4', homonym)\r\n      return homonym\r\n    } else {\r\n      // No data found for this word\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  prepareRequestUrl (languageID, word) {\r\n    let engine = this.engineSet.getEngineByCode(languageID)\r\n    let langCode = LMF.getLanguageCodeFromId(languageID)\r\n    if (engine) {\r\n      let code = engine.engine\r\n      return this.config.url.replace('r_WORD', word).replace('r_ENGINE', code).replace('r_LANG', langCode).replace('r_CLIENT', this.config.clientId)\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlpheiosTuftsAdapter\r\n","import { LanguageModelFactory as LMF, Constants } from 'alpheios-data-models'\r\n\r\nclass ConfigData {\r\n  constructor (config, defaultConfig) {\r\n    Object.keys(config).forEach(configKey => {\r\n      this[configKey] = config[configKey]\r\n    })\r\n\r\n    Object.keys(defaultConfig).forEach(configKey => {\r\n      if (configKey === 'engine') {\r\n        this.uploadEngines(defaultConfig[configKey])\r\n      } else {\r\n        if (this[configKey] === undefined) {\r\n          this[configKey] = defaultConfig[configKey]\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  uploadEngines (enginesConfig) {\r\n    if (this.engine === undefined) {\r\n      this.engine = {}\r\n    }\r\n    Object.keys(enginesConfig).forEach(langCode => {\r\n      let langID = LMF.getLanguageIdFromCode(langCode)\r\n\r\n      if (langID !== Constants.LANG_UNDEFINED && this.engine[langID] === undefined) {\r\n        this.engine[langID] = enginesConfig[langCode]\r\n      }\r\n    })\r\n  }\r\n\r\n  get featuresArray () {\r\n    return [\r\n      ['pofs', 'part'],\r\n      ['case', 'grmCase'],\r\n      ['gend', 'gender'],\r\n      ['decl', 'declension'],\r\n      ['conj', 'conjugation'],\r\n      ['area', 'area'],\r\n      ['age', 'age'],\r\n      ['geo', 'geo'],\r\n      ['freq', 'frequency'],\r\n      ['note', 'note'],\r\n      ['pron', 'pronunciation'],\r\n      ['kind', 'kind'],\r\n      ['src', 'source']\r\n    ]\r\n  }\r\n\r\n  get featuresArrayAll () {\r\n    return [\r\n      ['pofs', 'part'],\r\n      ['case', 'grmCase'],\r\n      ['decl', 'declension'],\r\n      ['num', 'number'],\r\n      ['gend', 'gender'],\r\n      ['conj', 'conjugation'],\r\n      ['tense', 'tense'],\r\n      ['voice', 'voice'],\r\n      ['mood', 'mood'],\r\n      ['pers', 'person'],\r\n      ['comp', 'comparison'],\r\n      ['stemtype', 'stemtype'],\r\n      ['derivtype', 'derivtype'],\r\n      ['dial', 'dialect'],\r\n      ['morph', 'morph']\r\n    ]\r\n  }\r\n}\r\n\r\nexport default ConfigData\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.ArabicLanguageModel, 'aramorph')\r\n\r\nexport default data\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.PersianLanguageModel, 'hazm')\r\n\r\n// hazm allow all lemmas in without respect features as all we use it for is lemmatizing\r\ndata.setLexemeFilter(function (lexeme) { return Boolean(lexeme.lemma.word) })\r\n\r\nexport default data\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.GreekLanguageModel, 'morpheusgrc')\r\n\r\n/*\r\nBelow are value conversion maps for each grammatical feature to be parsed.\r\nFormat:\r\ndata.addFeature(typeName).add(providerValueName, LibValueName);\r\n(functions are chainable)\r\nTypes and values that are unknown (undefined) will be skipped during parsing.\r\n */\r\n\r\ndata.addFeature(Models.Feature.types.gender).importer\r\n  .map('masculine feminine', [[Models.Constants.GEND_MASCULINE, 1], [Models.Constants.GEND_FEMININE, 2]])\r\n\r\ndata.addFeature(Models.Feature.types.declension).importer\r\n  .map('1st & 2nd', [[Models.Constants.ORD_1ST, 1], [Models.Constants.ORD_2ND, 2]])\r\n\r\nexport default data\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.GeezLanguageModel, 'traces')\r\n\r\nexport default data\r\n","import ImportData from '../lib'\r\nimport * as Models from 'alpheios-data-models'\r\n\r\nlet data = new ImportData(Models.LatinLanguageModel, 'whitakerLat')\r\n\r\n// Whitaker's has weird inflection data for conjugation, we prefer\r\n// the dictionary entry's conjugation if it's available\r\ndata.inflectionOverrides = [Models.Feature.types.conjugation]\r\n\r\n/*\r\nBelow are value conversion maps for each grammatical feature to be parsed.\r\nFormat:\r\ndata.addFeature(typeName).add(providerValueName, LibValueName);\r\n(functions are chainable)\r\nTypes and values that are unknown (undefined) will be skipped during parsing.\r\n */\r\n\r\n// TODO  - per inflections.xsd\r\n// Whitakers Words uses packon and tackon in POFS, not sure how\r\n\r\ndata.addFeature(Models.Feature.types.gender).importer\r\n  .map('common', [[Models.Constants.GEND_MASCULINE, 1], [Models.Constants.GEND_FEMININE, 2]])\r\n  .map('all', [[Models.Constants.GEND_MASCULINE, 1], [Models.Constants.GEND_FEMININE, 2], [Models.Constants.GEND_NEUTER, 3]])\r\n\r\ndata.addFeature(Models.Feature.types.tense).importer\r\n  .map('future_perfect', Models.Constants.TENSE_FUTURE_PERFECT)\r\n\r\ndata.setPropertyParser(function (propertyName, propertyValue) {\r\n  let propertyValues = []\r\n  if (propertyName === 'decl') {\r\n    propertyValues = propertyValue.split('&').map((p) => p.trim())\r\n  } else if (propertyName === 'comp' && propertyValue === 'positive') {\r\n    propertyValues = []\r\n  } else if (propertyName === 'conj' && propertyValue.match(/5th|6th|7th|8th/)) {\r\n    // these are irregular verbs\r\n    propertyValues = [Models.Constants.TYPE_IRREGULAR]\r\n  } else {\r\n    propertyValues = [propertyValue]\r\n  }\r\n  return propertyValues\r\n})\r\n\r\ndata.setLexemeAggregator(function (lexemeSet, inflections) {\r\n  let lexemes = []\r\n  for (let lex of lexemeSet) {\r\n    if (this.reportLexeme(lex)) {\r\n      if (lex.meaning.shortDefs.length === 0 && lexemeSet.length > 1) {\r\n        for (let otherLex of lexemeSet) {\r\n          // same headword and same part of speech\r\n          if (otherLex.meaning.shortDefs.length > 0 && otherLex.lemma.isFullHomonym(lex.lemma)) {\r\n            let featuresMatch = true\r\n            for (let feature of Object.entries(lex.lemma.features)) {\r\n              // check the other features excluding frequency, source and age\r\n              if ((feature[0] !== Models.Feature.types.frequency) &&\r\n                   (feature[0] !== Models.Feature.types.source) &&\r\n                   (feature[0] !== Models.Feature.types.age) &&\r\n                   !(feature[1].isEqual(otherLex.lemma.features[feature[0]]))) {\r\n                featuresMatch = false\r\n                break\r\n              }\r\n            }\r\n            // same lemma, same features, must be principal parts mismatch\r\n            if (featuresMatch) {\r\n              // if this lemma has a higher frequency, make it the main lemma of the Lexeme and the existing one an alternative\r\n              if (lex.lemma.features[Models.Feature.types.frequency].compareTo(otherLex.lemma.features[Models.Feature.types.frequency]) < 1) {\r\n                otherLex.addAltLemma(otherLex.lemma)\r\n                otherLex.lemma = lex.lemma\r\n              } else {\r\n                // otherwise just add it to the alternative lemmas\r\n                otherLex.addAltLemma(lex.lemma)\r\n              }\r\n            } else {\r\n              lex.inflections = inflections\r\n              lexemes.push(lex)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        lex.inflections = inflections\r\n        lexemes.push(lex)\r\n      }\r\n    }\r\n  }\r\n  return lexemes\r\n}\r\n)\r\n\r\ndata.setLemmaParser(function (lemma) {\r\n  // Whitaker's Words returns principal parts for some words\r\n  // and sometimes has a space separted stem and suffix\r\n  let parsed, primary\r\n  let parts = []\r\n  let lemmas = lemma.split(', ')\r\n  for (let [index, l] of lemmas.entries()) {\r\n    let normalized = l.split(' ')[0]\r\n    if (index === 0) {\r\n      primary = normalized\r\n    }\r\n    parts.push(normalized)\r\n  }\r\n  if (primary) {\r\n    parsed = new Models.Lemma(primary, this.model.languageCode, parts)\r\n  }\r\n\r\n  return parsed\r\n})\r\n\r\nexport default data\r\n","import Whitakers from '@/tufts/engine/whitakers'\r\nimport Morpheusgrc from '@/tufts/engine/morpheusgrc'\r\nimport Aramorph from '@/tufts/engine/aramorph'\r\nimport Hazm from '@/tufts/engine/hazm'\r\nimport Traces from '@/tufts/engine/traces'\r\n\r\nimport { LanguageModelFactory as LMF } from 'alpheios-data-models'\r\n\r\nclass EnginesSet {\r\n  constructor (adapterConfigEngines) {\r\n    this.engine = adapterConfigEngines\r\n  }\r\n\r\n  getEngineByCode (languageID) {\r\n    if (this.engine[languageID]) {\r\n      let engineCode = this.engine[languageID][0]\r\n      let allEngines = new Map(([ Whitakers, Morpheusgrc, Aramorph, Hazm, Traces ]).map((e) => { return [ e.engine, e ] }))\r\n      return allEngines.get(engineCode)\r\n    }\r\n  }\r\n\r\n  getEngineByCodeFromLangCode (languageCode) {\r\n    let languageID = LMF.getLanguageIdFromCode(languageCode)\r\n    return this.getEngineByCode(languageID)\r\n  }\r\n}\r\n\r\nexport default EnginesSet\r\n","/*\r\nObjects of a morphology analyzer's library\r\n */\r\nimport { Feature, Lemma, FeatureImporter } from 'alpheios-data-models'\r\n\r\n/**\r\n * Holds all information required to transform from morphological analyzer's grammatical feature values to the\r\n * library standards. There is one ImportData object per language.\r\n */\r\nclass ImportData {\r\n  /**\r\n     * Creates an ImportData object for the language provided.\r\n     * @param {Function<LanguageModel>} model - A language model of the import data.\r\n     * @param {string} engine - engine code\r\n     */\r\n  constructor (model, engine) {\r\n    'use strict'\r\n    this.model = model\r\n    this.engine = engine\r\n    // add all the features that the language supports so that we\r\n    // can return the default values if we don't need to import a mapping\r\n    for (let featureName of Object.keys(this.model.features)) {\r\n      this.addFeature(featureName)\r\n    }\r\n    // may be overridden by specific engine to handle vagaries in reporting of dictionary entries\r\n    // default just returns them as provided\r\n    this.aggregateLexemes = function (lexemeSet, inflections) {\r\n      let lexemes = []\r\n      for (let lex of lexemeSet) {\r\n        // only process if we have a lemma that differs from the target\r\n        // word or if we have at least a part of speech\r\n        if (this.reportLexeme(lex)) {\r\n          lex.inflections = inflections\r\n          lexemes.push(lex)\r\n        }\r\n      }\r\n      return lexemes\r\n    }\r\n    // may be overridden by specific engine use via setLemmaParser\r\n    this.parseLemma = function (lemma) { return new Lemma(lemma, this.model.languageID) }\r\n    // may be overridden by specific engine use via setPropertyParser - default just returns the property value\r\n    // as a list\r\n    this.parseProperty = function (propertyName, propertyValue) {\r\n      let propertyValues = []\r\n      if (propertyName === 'decl') {\r\n        propertyValues = propertyValue.split('&').map((p) => p.trim())\r\n      } else if (propertyName === 'comp' && propertyValue === 'positive') {\r\n        propertyValues = []\r\n      } else {\r\n        propertyValues = [propertyValue]\r\n      }\r\n      return propertyValues\r\n    }\r\n    // may be overridden by specifc engine use via setLexemeFilter - default assumes we will have a part of speech\r\n    this.reportLexeme = function (lexeme) {\r\n      return lexeme.lemma.features[Feature.types.part]\r\n    }\r\n\r\n    // may be overriden by specific engine use to a list of of featureTypes which\r\n    // should be overridden in the inflection data from the lemma data\r\n    this.inflectionOverrides = []\r\n  }\r\n\r\n  /**\r\n     * Adds a grammatical feature whose values to be mapped.\r\n     * @param {string} featureName - A name of a grammatical feature (i.e. declension, number, etc.)\r\n     * @return {Object} An object that represent a newly created grammatical feature.\r\n     */\r\n  addFeature (featureName) {\r\n    this[featureName] = {}\r\n    let model = this.model\r\n\r\n    this[featureName].add = function add (providerValue, alpheiosValue) {\r\n      this[providerValue] = alpheiosValue\r\n      return this\r\n    }\r\n\r\n    this[featureName].get = function get (providerValue, sortOrder = 1, allowUnknownValues = false) {\r\n      let mappedValue = []\r\n      if (!this.importer.has(providerValue)) {\r\n        // if the providerValue matches the model value or the model value\r\n        // is unrestricted, return a feature with the providerValue and order\r\n        if (model.typeFeature(featureName).hasValue(providerValue) ||\r\n            model.typeFeature(featureName).valuesUnrestricted) {\r\n          mappedValue = model.typeFeature(featureName).createFeature(providerValue, sortOrder)\r\n        } else {\r\n          let message = `Unknown value \"${providerValue}\" of feature \"${featureName}\" for ${model.languageCode} (allowed = ${allowUnknownValues})`\r\n          if (allowUnknownValues) {\r\n            console.log(message)\r\n            mappedValue = model.typeFeature(featureName).createFeature(providerValue, sortOrder)\r\n          } else {\r\n            throw new Error(message)\r\n          }\r\n        }\r\n      } else {\r\n        let tempValue = this.importer.get(providerValue)\r\n        if (Array.isArray(tempValue)) {\r\n          mappedValue = model.typeFeature(featureName).createFeatures(tempValue, sortOrder)\r\n        } else {\r\n          mappedValue = model.typeFeature(featureName).createFeature(tempValue, sortOrder)\r\n        }\r\n      }\r\n      return mappedValue\r\n    }\r\n\r\n    /**\r\n     * @param {Object[]} data - An array of objects with `providerData` (an item value) and `sortOrder` fields\r\n     * @param allowUnknownValues\r\n     * @return {Feature}\r\n     */\r\n    this[featureName].getMultiple = function get (data, allowUnknownValues = false) {\r\n      let values = [] // Converts values from `data` into `values` array\r\n      for (const item of data) {\r\n        if (this.importer.has(item.providerValue)) {\r\n          let value = this.importer.get(item.providerValue)\r\n          if (Array.isArray(value)) {\r\n            // if the import returns an array, it should already have the sortOrder\r\n            values = value\r\n          } else {\r\n            values = [[value, item.sortOrder]]\r\n          }\r\n        } else if (model.typeFeature(featureName).hasValue(item.providerValue) ||\r\n          model.typeFeature(featureName).valuesUnrestricted) {\r\n          values.push([item.providerValue, item.sortOrder])\r\n        } else {\r\n          let message = `Unknown value \"${item.providerValue}\" of feature \"${featureName}\" for ${model.languageCode} (allowed = ${allowUnknownValues})`\r\n          if (allowUnknownValues) {\r\n            console.log(message)\r\n            values.push([item.providerValue, item.sortOrder])\r\n          } else {\r\n            throw new Error(message)\r\n          }\r\n        }\r\n      }\r\n      return model.typeFeature(featureName).createFeatures(values)\r\n    }\r\n\r\n    this[featureName].importer = new FeatureImporter()\r\n\r\n    return this[featureName]\r\n  }\r\n\r\n  /**\r\n   * Add an engine-specific lexeme aggregator\r\n   */\r\n  setLexemeAggregator (callback) {\r\n    this.aggregateLexemes = callback\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * Add an engine-specific lemma parser\r\n   */\r\n  setLemmaParser (callback) {\r\n    this.parseLemma = callback\r\n  }\r\n\r\n  /**\r\n   * Add an engine-specific property parser\r\n   */\r\n  setPropertyParser (callback) {\r\n    this.parseProperty = callback\r\n  }\r\n\r\n  /**\r\n   * Add an engine-specific lexeme filter\r\n   */\r\n  setLexemeFilter (callback) {\r\n    this.reportLexeme = callback\r\n  }\r\n\r\n  /**\r\n   * Maps property of a single feature type to a single Feature object with one or more values\r\n   * (if this feature has multiple values). Feature is stored as a property of the supplied model object.\r\n   * @param {object} model the model object to which the feature will be added\r\n   * @param {object} inputElem the input data element\r\n   * @param {object} inputName the  property name in the input data\r\n   * @param {string} featureName the name of the feature it will be mapped to\r\n   * @param {boolean} allowUnknownValues flag to indicate if unknown values are allowed\r\n   */\r\n  mapFeature (model, inputElem, inputName, featureName, allowUnknownValues) {\r\n    let inputItem = inputElem[inputName]\r\n    if (inputItem && (Array.isArray(inputItem) || inputItem.$)) {\r\n      let values = []\r\n      if (Array.isArray(inputItem)) {\r\n        // There are multiple values of this feature\r\n        for (let e of inputItem) {\r\n          values.push(...this.parseProperty(inputName, e.$))\r\n        }\r\n      } else {\r\n        values = this.parseProperty(inputName, inputItem.$)\r\n      }\r\n      // `values` is always an array as an array is a return value of `parseProperty`\r\n      if (values.length > 0) {\r\n        // There are some values found\r\n        values = values.map(v => { return { providerValue: v, sortOrder: inputItem.order ? inputItem.order : 1 } })\r\n        let feature = this[Feature.types[featureName]].getMultiple(values, allowUnknownValues)\r\n        model.addFeature(feature)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Overrides feature data from an inflection with feature data from the lemma\r\n   * if required by an engine-specific list of featureTypes\r\n   * @param {String} featureType the feature type name\r\n   * @param {Inflection} inflection the inflection object\r\n   * @param {Lemma[]} lemmas the lemma objects\r\n   */\r\n  overrideInflectionFeatureIfRequired (featureType, inflection, lemmas) {\r\n    if (this.inflectionOverrides.includes(featureType)) {\r\n      for (let lemma of lemmas.filter(l => l.features[featureType])) {\r\n        inflection.addFeature(lemma.features[featureType])\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default ImportData\r\n","import { ResourceProvider, Definition, Lexeme, Constants, Feature, Inflection, Homonym } from 'alpheios-data-models'\r\n\r\nclass TransformAdapter {\r\n  constructor (engineSet, config) {\r\n    this.engineSet = engineSet\r\n    this.config = config\r\n  }\r\n\r\n  transformData (jsonObj, targetWord) {\r\n    let lexemes = []\r\n    let annotationBody = jsonObj.RDF.Annotation.Body\r\n    if (!Array.isArray(annotationBody)) {\r\n      /*\r\n      If only one lexeme is returned, Annotation Body will not be an array but rather a single object.\r\n      Let's convert it to an array so we can work with it in the same way no matter what format it is.\r\n      */\r\n      if (annotationBody) {\r\n        annotationBody = [annotationBody]\r\n      } else {\r\n        annotationBody = []\r\n      }\r\n    }\r\n    let providerUri = jsonObj.RDF.Annotation.creator.Agent.about\r\n    let providerRights = ''\r\n    if (jsonObj.RDF.Annotation.rights) {\r\n      providerRights = jsonObj.RDF.Annotation.rights.$\r\n    }\r\n    let provider = new ResourceProvider(providerUri, providerRights)\r\n    for (let lexeme of annotationBody) {\r\n      let inflectionsJSON = lexeme.rest.entry.infl\r\n      if (!inflectionsJSON) {\r\n        inflectionsJSON = []\r\n      } else if (!Array.isArray(inflectionsJSON)) {\r\n        // If only one inflection returned, it is a single object, not an array of objects.\r\n        // Convert it to an array for uniformity.\r\n        inflectionsJSON = [inflectionsJSON]\r\n      }\r\n      let lemmaElements\r\n      let features = [\r\n        ['pofs', 'part'],\r\n        ['case', 'grmCase'],\r\n        ['gend', 'gender'],\r\n        ['decl', 'declension'],\r\n        ['conj', 'conjugation'],\r\n        ['area', 'area'],\r\n        ['age', 'age'],\r\n        ['geo', 'geo'],\r\n        ['freq', 'frequency'],\r\n        ['note', 'note'],\r\n        ['pron', 'pronunciation'],\r\n        ['kind', 'kind'],\r\n        ['src', 'source']\r\n      ]\r\n      let reconstructHdwd = []\r\n      if (lexeme.rest.entry.dict) {\r\n        if (Array.isArray(lexeme.rest.entry.dict)) {\r\n          lemmaElements = lexeme.rest.entry.dict\r\n        } else {\r\n          if (!lexeme.rest.entry.dict.hdwd && inflectionsJSON[0].term) {\r\n            lexeme.rest.entry.dict.hdwd = {}\r\n            lexeme.rest.entry.dict.hdwd.lang = inflectionsJSON[0].term.lang\r\n            reconstructHdwd.push(inflectionsJSON[0].term.prefix ? inflectionsJSON[0].term.prefix.$ : '')\r\n            reconstructHdwd.push(inflectionsJSON[0].term.stem ? inflectionsJSON[0].term.stem.$ : '')\r\n            reconstructHdwd.push(inflectionsJSON[0].term.suff ? inflectionsJSON[0].term.suff.$ : '')\r\n          }\r\n          lemmaElements = [lexeme.rest.entry.dict]\r\n        }\r\n      } else if (inflectionsJSON.length > 0 && inflectionsJSON[0].term) {\r\n        lemmaElements = [ inflectionsJSON[0].term ]\r\n      }\r\n      // in rare cases (e.g. conditum in Whitakers) multiple dict entries\r\n      // exist - always use the lemma and language from the first\r\n      let language = lemmaElements[0].hdwd ? lemmaElements[0].hdwd.lang : lemmaElements[0].lang\r\n      // Get importer based on the language\r\n      let mappingData = this.getEngineLanguageMap(language)\r\n      if (!mappingData) {\r\n        console.log(`No mapping data found for ${language}`)\r\n        continue\r\n      }\r\n      if (reconstructHdwd.length > 0) {\r\n        if (mappingData.model.direction === Constants.LANG_DIR_RTL) {\r\n          reconstructHdwd.reverse()\r\n        }\r\n        lexeme.rest.entry.dict.hdwd.$ = reconstructHdwd.join('')\r\n      }\r\n      let lemmas = []\r\n      let lexemeSet = []\r\n      for (let entry of lemmaElements.entries()) {\r\n        let shortdefs = []\r\n        let index = entry[0]\r\n        let elem = entry[1]\r\n        let lemmaText\r\n        if (elem.hdwd) {\r\n          lemmaText = elem.hdwd.$\r\n        }\r\n        if (!lemmaText || !language) {\r\n          console.log('No lemma or language found')\r\n          continue\r\n        }\r\n        let lemma = mappingData.parseLemma(lemmaText, language)\r\n        lemmas.push(lemma)\r\n        for (let feature of features) {\r\n          mappingData.mapFeature(lemma, elem, ...feature, this.config.allowUnknownValues)\r\n        }\r\n        let meanings = lexeme.rest.entry.mean\r\n        if (!Array.isArray(meanings)) {\r\n          meanings = [meanings]\r\n        }\r\n        meanings = meanings.filter((m) => m)\r\n        // if we have multiple dictionary elements, take the meaning with the matching index\r\n        if (lemmaElements.length > 1) {\r\n          if (meanings && meanings[index]) {\r\n            let meaning = meanings[index]\r\n            // TODO: convert a source-specific language code to ISO 639-3 if don't match\r\n            let lang = meaning.lang ? meaning.lang : 'eng'\r\n            shortdefs.push(ResourceProvider.getProxy(provider,\r\n              new Definition(meaning.$, lang, 'text/plain', lemmas[index].word)))\r\n          }\r\n        } else {\r\n          // Changed to prevent some weird \"Array Iterator.prototype.next called on incompatible receiver [object Unknown]\" error\r\n          let sDefs = meanings.map(meaning => {\r\n            let lang = meaning.lang ? meaning.lang : 'eng'\r\n            return ResourceProvider.getProxy(provider,\r\n              new Definition(meaning.$, lang, 'text/plain', lemma.word))\r\n          })\r\n          shortdefs.push(...sDefs)\r\n        }\r\n        let lexmodel = new Lexeme(lemma, [])\r\n\r\n        lexmodel.meaning.appendShortDefs(shortdefs)\r\n        lexemeSet.push(ResourceProvider.getProxy(provider, lexmodel))\r\n      }\r\n      if (lemmas.length === 0) {\r\n        continue\r\n      }\r\n      let inflections = []\r\n      for (let inflectionJSON of inflectionsJSON) {\r\n        let stem = inflectionJSON.term.stem ? inflectionJSON.term.stem.$ : null\r\n        let suffix = inflectionJSON.term.suff ? inflectionJSON.term.suff.$ : null\r\n        let prefix = inflectionJSON.term.pref ? inflectionJSON.term.pref.$ : null\r\n        let xmpl = inflectionJSON.xmpl ? inflectionJSON.xmpl.$ : null\r\n        let inflection = new Inflection(stem, mappingData.model.languageID, suffix, prefix, xmpl)\r\n        if (targetWord) {\r\n          inflection.addFeature(new Feature(Feature.types.fullForm, targetWord, mappingData.model.languageID))\r\n        }\r\n        // Parse whatever grammatical features we're interested in and are provided\r\n        for (let f of [\r\n          ['pofs', 'part'],\r\n          ['case', 'grmCase'],\r\n          ['decl', 'declension'],\r\n          ['num', 'number'],\r\n          ['gend', 'gender'],\r\n          ['conj', 'conjugation'],\r\n          ['tense', 'tense'],\r\n          ['voice', 'voice'],\r\n          ['mood', 'mood'],\r\n          ['pers', 'person'],\r\n          ['comp', 'comparison'],\r\n          ['stemtype', 'stemtype'],\r\n          ['derivtype', 'derivtype'],\r\n          ['dial', 'dialect'],\r\n          ['morph', 'morph']\r\n        ]) {\r\n          try {\r\n            mappingData.mapFeature(inflection, inflectionJSON, ...f, this.config.allowUnknownValues)\r\n            mappingData.overrideInflectionFeatureIfRequired(f[1], inflection, lemmas)\r\n          } catch (e) {\r\n            console.log(`Unable to map ${f[0]}`, e)\r\n          }\r\n        }\r\n        // we only use the inflection if it tells us something the dictionary details do not\r\n        if (inflection[Feature.types.grmCase] ||\r\n          inflection[Feature.types.tense] ||\r\n          inflection[Feature.types.mood] ||\r\n          inflection[Feature.types.voice] ||\r\n          inflection[Feature.types.person] ||\r\n          inflection[Feature.types.comparison] ||\r\n          inflection[Feature.types.stemtype] ||\r\n          inflection[Feature.types.derivtype] ||\r\n          inflection[Feature.types.dialect] ||\r\n          inflection[Feature.types.morph] ||\r\n          inflection[Feature.types.example]) {\r\n          inflections.push(inflection)\r\n        }\r\n        // inflection can provide lemma decl, pofs, conj\r\n        for (let lemma of lemmas) {\r\n          if (!lemma.features[Feature.types.part]) {\r\n            mappingData.mapFeature(lemma, inflectionJSON, 'pofs', 'part', this.config.allowUnknownValues)\r\n          }\r\n          // only take declension from inflection if lemma has no part of speech or its the same as the inflection\r\n          if (!lemma.features[Feature.types.declension] &&\r\n            (!lemma.features[Feature.types.part] || lemma.features[Feature.types.part].isEqual(inflection[Feature.types.part]))) {\r\n            mappingData.mapFeature(lemma, inflectionJSON, 'decl', 'declension', this.config.allowUnknownValues)\r\n          }\r\n          // only take conjugation from inflection if lemma has a part of speech and its the same as the inflection\r\n          if (!lemma.features[Feature.types.conjugation] &&\r\n            (!lemma.features[Feature.types.part] || lemma.features[Feature.types.part].isEqual(inflection[Feature.types.part]))) {\r\n            mappingData.mapFeature(lemma, inflectionJSON, 'conj', 'conjugation', this.config.allowUnknownValues)\r\n          }\r\n        }\r\n      }\r\n      let aggregated = mappingData.aggregateLexemes(lexemeSet, inflections)\r\n      lexemes.push(...aggregated)\r\n    }\r\n    if (lexemes.length > 0) {\r\n      return new Homonym(lexemes, targetWord)\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  transformDataBackup (annotation, targetWord) {\r\n    let lexemes = []\r\n    let provider = this.getProviderFromAnnotation(annotation)\r\n    let annotationBody = this.checkAndConvertToArray(annotation.Body)\r\n\r\n    let features = this.config.featuresArray\r\n\r\n    for (let lexeme of annotationBody) {\r\n      console.info('*********************lexeme.rest', annotationBody, lexeme, lexeme.rest)\r\n      let shortdefs = []\r\n      let inflectionsJSON = this.checkAndConvertToArray(lexeme.rest.entry.infl)\r\n      let lemmaElements = this.getLemmasFromEntryDict(lexeme.rest.entry.dict, inflectionsJSON)\r\n\r\n      let meanings = this.checkAndConvertToArray(lexeme.rest.entry.mean).filter((m) => m)\r\n\r\n      let languageCode = lemmaElements[0].hdwd ? lemmaElements[0].hdwd.lang : lemmaElements[0].lang\r\n\r\n      let mappingData = this.engineSet.getEngineByCodeFromLangCode(languageCode)\r\n      if (!mappingData) {\r\n        console.log(`No mapping data found for ${languageCode}`)\r\n        continue\r\n      }\r\n\r\n      this.updateReconstructHdwdFromDict(lexeme.rest.entry.dict, inflectionsJSON)\r\n\r\n      let lemmas = []\r\n      let lexemeSet = []\r\n\r\n      for (const [index, elem] of lemmaElements.entries()) {\r\n        let lemmaText = elem.hdwd ? elem.hdwd.$ : undefined\r\n\r\n        if (!lemmaText || !languageCode) {\r\n          console.log('No lemma or language found')\r\n          continue\r\n        }\r\n\r\n        let lemma = mappingData.parseLemma(lemmaText, languageCode)\r\n        lemmas.push(lemma)\r\n\r\n        for (let feature of features) {\r\n          mappingData.mapFeature(lemma, elem, ...feature, this.config.allowUnknownValues)\r\n        }\r\n\r\n        if (lemmaElements.length > 1) {\r\n          if (meanings && meanings[index]) {\r\n            shortdefs.push(this.getDefinitionFromProvider(provider, meanings[index], lemmas[index].word))\r\n          }\r\n        } else {\r\n          let sDefs = meanings.map(meaning => this.getDefinitionFromProvider(provider, meaning, lemma.word))\r\n          shortdefs.push(...sDefs)\r\n        }\r\n\r\n        let lexmodel = new Lexeme(lemma, [])\r\n        lexmodel.meaning.appendShortDefs(shortdefs)\r\n        lexemeSet.push(ResourceProvider.getProxy(provider, lexmodel))\r\n      }\r\n\r\n      if (lemmas.length === 0) {\r\n        continue\r\n      }\r\n\r\n      let inflections = this.getInflections(inflectionsJSON, mappingData, lemmas, targetWord)\r\n      let aggregated = mappingData.aggregateLexemes(lexemeSet, inflections)\r\n      lexemes.push(...aggregated)\r\n    }\r\n\r\n    if (lexemes.length > 0) {\r\n      return new Homonym(lexemes, targetWord)\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  getDefinitionFromProvider (provider, meaning, word) {\r\n    let lang = meaning.lang ? meaning.lang : 'eng'\r\n    return ResourceProvider.getProxy(provider, new Definition(meaning.$, lang, 'text/plain', word))\r\n  }\r\n\r\n  getProviderFromAnnotation (annotation) {\r\n    let providerUri = annotation.creator.Agent.about\r\n\r\n    let providerRights = annotation.rights ? annotation.rights.$ : ''\r\n    return new ResourceProvider(providerUri, providerRights)\r\n  }\r\n\r\n  checkAndConvertToArray (value) {\r\n    if (Array.isArrayvalue) {\r\n      return value\r\n    }\r\n    if (value) {\r\n      return [value]\r\n    }\r\n    return []\r\n  }\r\n\r\n  getLemmasFromEntryDict (entryDict, inflectionsJSON) {\r\n    if (entryDict) {\r\n      return this.checkAndConvertToArray(entryDict)\r\n    } else if (inflectionsJSON.length > 0 && inflectionsJSON[0].term) {\r\n      return [ inflectionsJSON[0].term ]\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  updateReconstructHdwdFromDict (entryDict, inflectionsJSON, mappingData) {\r\n    let reconstructHdwd = []\r\n    if (entryDict && !Array.isArray(entryDict) && !entryDict.hdwd && inflectionsJSON[0].term) {\r\n      entryDict.hdwd = {}\r\n      entryDict.hdwd.lang = inflectionsJSON[0].term.lang\r\n      reconstructHdwd.push(inflectionsJSON[0].term.prefix ? inflectionsJSON[0].term.prefix.$ : '')\r\n      reconstructHdwd.push(inflectionsJSON[0].term.stem ? inflectionsJSON[0].term.stem.$ : '')\r\n      reconstructHdwd.push(inflectionsJSON[0].term.suff ? inflectionsJSON[0].term.suff.$ : '')\r\n    }\r\n    if (reconstructHdwd.length > 0) {\r\n      if (mappingData.model.direction === Constants.LANG_DIR_RTL) {\r\n        reconstructHdwd.reverse()\r\n      }\r\n      entryDict.hdwd.$ = reconstructHdwd.join('')\r\n    }\r\n  }\r\n\r\n  getInflections (inflectionsJSON, mappingData, lemmas, targetWord) {\r\n    let inflections = []\r\n    for (let inflectionJSON of inflectionsJSON) {\r\n      let stem = inflectionJSON.term.stem ? inflectionJSON.term.stem.$ : null\r\n      let suffix = inflectionJSON.term.suff ? inflectionJSON.term.suff.$ : null\r\n      let prefix = inflectionJSON.term.pref ? inflectionJSON.term.pref.$ : null\r\n      let xmpl = inflectionJSON.xmpl ? inflectionJSON.xmpl.$ : null\r\n      let inflection = new Inflection(stem, mappingData.model.languageID, suffix, prefix, xmpl)\r\n\r\n      if (targetWord) {\r\n        inflection.addFeature(new Feature(Feature.types.fullForm, targetWord, mappingData.model.languageID))\r\n      }\r\n      // Parse whatever grammatical features we're interested in and are provided\r\n      for (let f of this.config.featuresArrayAll) {\r\n        try {\r\n          mappingData.mapFeature(inflection, inflectionJSON, ...f, this.config.allowUnknownValues)\r\n          mappingData.overrideInflectionFeatureIfRequired(f[1], inflection, lemmas)\r\n        } catch (e) {\r\n          console.log(`Unable to map ${f[0]}`, e)\r\n        }\r\n      }\r\n\r\n      // we only use the inflection if it tells us something the dictionary details do not\r\n      if (inflection[Feature.types.grmCase] ||\r\n        inflection[Feature.types.tense] ||\r\n        inflection[Feature.types.mood] ||\r\n        inflection[Feature.types.voice] ||\r\n        inflection[Feature.types.person] ||\r\n        inflection[Feature.types.comparison] ||\r\n        inflection[Feature.types.stemtype] ||\r\n        inflection[Feature.types.derivtype] ||\r\n        inflection[Feature.types.dialect] ||\r\n        inflection[Feature.types.morph] ||\r\n        inflection[Feature.types.example]) {\r\n        inflections.push(inflection)\r\n      }\r\n      // inflection can provide lemma decl, pofs, conj\r\n      for (let lemma of lemmas) {\r\n        if (!lemma.features[Feature.types.part]) {\r\n          mappingData.mapFeature(lemma, inflectionJSON, 'pofs', 'part', this.config.allowUnknownValues)\r\n        }\r\n        // only take declension from inflection if lemma has no part of speech or its the same as the inflection\r\n        if (!lemma.features[Feature.types.declension] &&\r\n          (!lemma.features[Feature.types.part] || lemma.features[Feature.types.part].isEqual(inflection[Feature.types.part]))) {\r\n          mappingData.mapFeature(lemma, inflectionJSON, 'decl', 'declension', this.config.allowUnknownValues)\r\n        }\r\n        // only take conjugation from inflection if lemma has a part of speech and its the same as the inflection\r\n        if (!lemma.features[Feature.types.conjugation] &&\r\n          (!lemma.features[Feature.types.part] || lemma.features[Feature.types.part].isEqual(inflection[Feature.types.part]))) {\r\n          mappingData.mapFeature(lemma, inflectionJSON, 'conj', 'conjugation', this.config.allowUnknownValues)\r\n        }\r\n      }\r\n    }\r\n\r\n    return inflections\r\n  }\r\n}\r\n\r\nexport default TransformAdapter\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_alpheios_data_models__;"],"sourceRoot":""}