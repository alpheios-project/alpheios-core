{"version":3,"file":"alpheios-data-models.js","sources":["../src/constants.js","../src/definition.js","../src/definition-set.js","../src/feature_importer.js","../src/feature_type.js","../src/inflection_grouping_key.js","../src/inflection_group.js","../src/language_model.js","../src/latin_language_model.js","../src/greek_language_model.js","../src/arabic_language_model.js","../src/persian_language_model.js","../src/language_model_factory.js","../src/i18n.js","../src/feature.js","../src/feature_list.js","../src/lemma.js","../src/inflection.js","../src/lexeme.js","../src/homonym.js","../src/resource_provider.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport const LANG_UNIT_WORD = Symbol('word')\nexport const LANG_UNIT_CHAR = Symbol('char')\nexport const LANG_DIR_LTR = Symbol('ltr')\nexport const LANG_DIR_RTL = Symbol('rtl')\nexport const LANG_LATIN = Symbol('latin')\nexport const LANG_GREEK = Symbol('greek')\nexport const LANG_ARABIC = Symbol('arabic')\nexport const LANG_PERSIAN = Symbol('persian')\nexport const STR_LANG_CODE_LAT = 'lat'\nexport const STR_LANG_CODE_LA = 'la'\nexport const STR_LANG_CODE_GRC = 'grc'\nexport const STR_LANG_CODE_ARA = 'ara'\nexport const STR_LANG_CODE_AR = 'ar'\nexport const STR_LANG_CODE_FAS = 'fas'\nexport const STR_LANG_CODE_PER = 'per'\nexport const STR_LANG_CODE_FA_IR = 'fa-IR'\nexport const STR_LANG_CODE_FA = 'fa'\n// parts of speech\nexport const POFS_ADJECTIVE = 'adjective'\nexport const POFS_ADVERB = 'adverb'\nexport const POFS_ADVERBIAL = 'adverbial'\nexport const POFS_ARTICLE = 'article'\nexport const POFS_CONJUNCTION = 'conjunction'\nexport const POFS_EXCLAMATION = 'exclamation'\nexport const POFS_INTERJECTION = 'interjection'\nexport const POFS_NOUN = 'noun'\nexport const POFS_NUMERAL = 'numeral'\nexport const POFS_PARTICLE = 'particle'\nexport const POFS_PREFIX = 'prefix'\nexport const POFS_PREPOSITION = 'preposition'\nexport const POFS_PRONOUN = 'pronoun'\nexport const POFS_SUFFIX = 'suffix'\nexport const POFS_SUPINE = 'supine'\nexport const POFS_VERB = 'verb'\nexport const POFS_VERB_PARTICIPLE = 'verb participle'\n// gender\nexport const GEND_MASCULINE = 'masculine'\nexport const GEND_FEMININE = 'feminine'\nexport const GEND_NEUTER = 'neuter'\nexport const GEND_COMMON = 'common'\nexport const GEND_ANIMATE = 'animate'\nexport const GEND_INANIMATE = 'inanimate'\n// Polish gender types\nexport const GEND_PERSONAL_MASCULINE = 'personal masculine'\nexport const GEND_ANIMATE_MASCULINE = 'animate masculine'\nexport const GEND_INANIMATE_MASCULINE = 'inanimate masculine'\n// comparative\nexport const COMP_POSITIVE = 'positive'\nexport const COMP_COMPARITIVE = 'comparative'\nexport const COMP_SUPERLATIVE = 'superlative'\n// case\nexport const CASE_ABESSIVE = 'abessive'\nexport const CASE_ABLATIVE = 'ablative'\nexport const CASE_ABSOLUTIVE = 'absolutive'\nexport const CASE_ACCUSATIVE = 'accusative'\nexport const CASE_ADDIRECTIVE = 'addirective'\nexport const CASE_ADELATIVE = 'adelative'\nexport const CASE_ADESSIVE = 'adessive'\nexport const CASE_ADVERBIAL = 'adverbial'\nexport const CASE_ALLATIVE = 'allative'\nexport const CASE_ANTESSIVE = 'antessive'\nexport const CASE_APUDESSIVE = 'apudessive'\nexport const CASE_AVERSIVE = 'aversive'\nexport const CASE_BENEFACTIVE = 'benefactive'\nexport const CASE_CARITIVE = 'caritive'\nexport const CASE_CAUSAL = 'causal'\nexport const CASE_CAUSAL_FINAL = 'causal-final'\nexport const CASE_COMITATIVE = 'comitative'\nexport const CASE_DATIVE = 'dative'\nexport const CASE_DELATIVE = 'delative'\nexport const CASE_DIRECT = 'direct'\nexport const CASE_DISTRIBUTIVE = 'distributive'\nexport const CASE_DISTRIBUTIVE_TEMPORAL = 'distributive-temporal'\nexport const CASE_ELATIVE = 'elative'\nexport const CASE_ERGATIVE = 'ergative'\nexport const CASE_ESSIVE = 'essive'\nexport const CASE_ESSIVE_FORMAL = 'essive-formal'\nexport const CASE_ESSIVE_MODAL = 'essive-modal'\nexport const CASE_EQUATIVE = 'equative'\nexport const CASE_EVITATIVE = 'evitative'\nexport const CASE_EXESSIVE = 'exessive'\nexport const CASE_FINAL = 'final'\nexport const CASE_FORMAL = 'formal'\nexport const CASE_GENITIVE = 'genitive'\nexport const CASE_ILLATIVE = 'illative'\nexport const CASE_INELATIVE = 'inelative'\nexport const CASE_INESSIVE = 'inessive'\nexport const CASE_INSTRUCTIVE = 'instructive'\nexport const CASE_INSTRUMENTAL = 'instrumental'\nexport const CASE_INSTRUMENTAL_COMITATIVE = 'instrumental-comitative'\nexport const CASE_INTRANSITIVE = 'intransitive'\nexport const CASE_LATIVE = 'lative'\nexport const CASE_LOCATIVE = 'locative'\nexport const CASE_MODAL = 'modal'\nexport const CASE_MULTIPLICATIVE = 'multiplicative'\nexport const CASE_NOMINATIVE = 'nominative'\nexport const CASE_PARTITIVE = 'partitive'\nexport const CASE_PEGATIVE = 'pegative'\nexport const CASE_PERLATIVE = 'perlative'\nexport const CASE_POSSESSIVE = 'possessive'\nexport const CASE_POSTELATIVE = 'postelative'\nexport const CASE_POSTDIRECTIVE = 'postdirective'\nexport const CASE_POSTESSIVE = 'postessive'\nexport const CASE_POSTPOSITIONAL = 'postpositional'\nexport const CASE_PREPOSITIONAL = 'prepositional'\nexport const CASE_PRIVATIVE = 'privative'\nexport const CASE_PROLATIVE = 'prolative'\nexport const CASE_PROSECUTIVE = 'prosecutive'\nexport const CASE_PROXIMATIVE = 'proximative'\nexport const CASE_SEPARATIVE = 'separative'\nexport const CASE_SOCIATIVE = 'sociative'\nexport const CASE_SUBDIRECTIVE = 'subdirective'\nexport const CASE_SUBESSIVE = 'subessive'\nexport const CASE_SUBELATIVE = 'subelative'\nexport const CASE_SUBLATIVE = 'sublative'\nexport const CASE_SUPERDIRECTIVE = 'superdirective'\nexport const CASE_SUPERESSIVE = 'superessive'\nexport const CASE_SUPERLATIVE = 'superlative'\nexport const CASE_SUPPRESSIVE = 'suppressive'\nexport const CASE_TEMPORAL = 'temporal'\nexport const CASE_TERMINATIVE = 'terminative'\nexport const CASE_TRANSLATIVE = 'translative'\nexport const CASE_VIALIS = 'vialis'\nexport const CASE_VOCATIVE = 'vocative'\nexport const MOOD_ADMIRATIVE = 'admirative'\nexport const MOOD_COHORTATIVE = 'cohortative'\nexport const MOOD_CONDITIONAL = 'conditional'\nexport const MOOD_DECLARATIVE = 'declarative'\nexport const MOOD_DUBITATIVE = 'dubitative'\nexport const MOOD_ENERGETIC = 'energetic'\nexport const MOOD_EVENTIVE = 'eventive'\nexport const MOOD_GENERIC = 'generic'\nexport const MOOD_GERUNDIVE = 'gerundive'\nexport const MOOD_HYPOTHETICAL = 'hypothetical'\nexport const MOOD_IMPERATIVE = 'imperative'\nexport const MOOD_INDICATIVE = 'indicative'\nexport const MOOD_INFERENTIAL = 'inferential'\nexport const MOOD_INFINITIVE = 'infinitive'\nexport const MOOD_INTERROGATIVE = 'interrogative'\nexport const MOOD_JUSSIVE = 'jussive'\nexport const MOOD_NEGATIVE = 'negative'\nexport const MOOD_OPTATIVE = 'optative'\nexport const MOOD_PARTICIPLE = 'participle'\nexport const MOOD_PRESUMPTIVE = 'presumptive'\nexport const MOOD_RENARRATIVE = 'renarrative'\nexport const MOOD_SUBJUNCTIVE = 'subjunctive'\nexport const MOOD_SUPINE = 'supine'\nexport const NUM_SINGULAR = 'singular'\nexport const NUM_PLURAL = 'plural'\nexport const NUM_DUAL = 'dual'\nexport const NUM_TRIAL = 'trial'\nexport const NUM_PAUCAL = 'paucal'\nexport const NUM_SINGULATIVE = 'singulative'\nexport const NUM_COLLECTIVE = 'collective'\nexport const NUM_DISTRIBUTIVE_PLURAL = 'distributive plural'\nexport const NRL_CARDINAL = 'cardinal'\nexport const NRL_ORDINAL = 'ordinal'\nexport const NRL_DISTRIBUTIVE = 'distributive'\nexport const NURL_NUMERAL_ADVERB = 'numeral adverb'\nexport const ORD_1ST = '1st'\nexport const ORD_2ND = '2nd'\nexport const ORD_3RD = '3rd'\nexport const ORD_4TH = '4th'\nexport const ORD_5TH = '5th'\nexport const ORD_6TH = '6th'\nexport const ORD_7TH = '7th'\nexport const ORD_8TH = '8th'\nexport const ORD_9TH = '9th'\nexport const TENSE_AORIST = 'aorist'\nexport const TENSE_FUTURE = 'future'\nexport const TENSE_FUTURE_PERFECT = 'future perfect'\nexport const TENSE_IMPERFECT = 'imperfect'\nexport const TENSE_PAST_ABSOLUTE = 'past absolute'\nexport const TENSE_PERFECT = 'perfect'\nexport const TENSE_PLUPERFECT = 'pluperfect'\nexport const TENSE_PRESENT = 'present'\nexport const VKIND_TO_BE = 'to be'\nexport const VKIND_COMPOUNDS_OF_TO_BE = 'compounds of to be'\nexport const VKIND_TAKING_ABLATIVE = 'taking ablative'\nexport const VKIND_TAKING_DATIVE = 'taking dative'\nexport const VKIND_TAKING_GENITIVE = 'taking genitive'\nexport const VKIND_TRANSITIVE = 'transitive'\nexport const VKIND_INTRANSITIVE = 'intransitive'\nexport const VKIND_IMPERSONAL = 'impersonal'\nexport const VKIND_DEPONENT = 'deponent'\nexport const VKIND_SEMIDEPONENT = 'semideponent'\nexport const VKIND_PERFECT_DEFINITE = 'perfect definite'\nexport const VOICE_ACTIVE = 'active'\nexport const VOICE_PASSIVE = 'passive'\nexport const VOICE_MEDIOPASSIVE = 'mediopassive'\nexport const VOICE_IMPERSONAL_PASSIVE = 'impersonal passive'\nexport const VOICE_MIDDLE = 'middle'\nexport const VOICE_ANTIPASSIVE = 'antipassive'\nexport const VOICE_REFLEXIVE = 'reflexive'\nexport const VOICE_RECIPROCAL = 'reciprocal'\nexport const VOICE_CAUSATIVE = 'causative'\nexport const VOICE_ADJUTATIVE = 'adjutative'\nexport const VOICE_APPLICATIVE = 'applicative'\nexport const VOICE_CIRCUMSTANTIAL = 'circumstantial'\nexport const VOICE_DEPONENT = 'deponent'\nexport const TYPE_IRREGULAR = 'irregular'\nexport const TYPE_REGULAR = 'regular'\n/* eslit-enable no-unused-vars */\n","class Definition {\n  constructor (text, language, format, lemmaText) {\n    this.text = text\n    this.language = language\n    this.format = format\n    this.lemmaText = lemmaText\n  }\n\n  static readObject (jsonObject) {\n    return new Definition(jsonObject.text, jsonObject.language, jsonObject.format, jsonObject.lemmaText)\n  }\n}\nexport default Definition\n","import Definition from './definition'\n\nexport default class DefinitionSet {\n  constructor (lemmaWord, languageID) {\n    this.lemmaWord = lemmaWord\n    this.languageID = languageID\n\n    this.shortDefs = []\n    this.fullDefs = []\n  }\n\n  /**\n   * A function that is used to instantiate a DefinitionSet object from a JSON object.\n   * @param {Object} jsonObject - A JSON object representing DefinitionSet data.\n   * @return {DefinitionSet} A DefinitionSet object populated with data from JSON object.\n   */\n  static readObject (jsonObject) {\n    let definitionSet = new DefinitionSet(jsonObject.lemmaWord, jsonObject.languageID)\n\n    for (let shortDef of jsonObject.shortDefs) {\n      definitionSet.shortDefs.push(Definition.readObject(shortDef))\n    }\n    for (let fullDef of jsonObject.fullDefs) {\n      definitionSet.fullDefs.push(Definition.readObject(fullDef))\n    }\n\n    return definitionSet\n  }\n\n  /**\n   * Appends one or more definitions to a list of short definitions.\n   * @param {Definition | Definition[]} definitions - One or more definition objects to add.\n   * @return {Definition[]} A list of short definitions this object has.\n   */\n  appendShortDefs (definitions) {\n    // TODO: check for duplicates?\n    if (definitions) {\n      if (!Array.isArray(definitions)) { definitions = [definitions] }\n      this.shortDefs = this.shortDefs.concat(definitions)\n    }\n    return this.shortDefs\n  }\n\n  /**\n   * Appends one or more definitions to a list of full definitions.\n   * @param {Definition | Definition[]} definitions - One or more definition objects to add.\n   * @return {Definition[]} A list of full definitions this object has.\n   */\n  appendFullDefs (definitions) {\n    // TODO: check for duplicates?\n    if (definitions) {\n      if (!Array.isArray(definitions)) { definitions = [definitions] }\n      this.fullDefs = this.fullDefs.concat(definitions)\n    }\n    return this.fullDefs\n  }\n}\n","class FeatureImporter {\n  constructor (defaults = []) {\n    this.hash = {}\n    for (let value of defaults) {\n      this.map(value, value)\n    }\n    return this\n  }\n\n    /**\n     * Sets mapping between external imported value and one or more library standard values. If an importedValue\n     * is already in a hash table, old libraryValue will be overwritten with the new one.\n     * @param {string} importedValue - External value\n     * @param {Object | Object[] | string | string[]} libraryValue - Library standard value\n     */\n  map (importedValue, libraryValue) {\n    if (!importedValue) {\n      throw new Error('Imported value should not be empty.')\n    }\n\n    if (!libraryValue) {\n      throw new Error('Library value should not be empty.')\n    }\n\n    this.hash[importedValue] = libraryValue\n    return this\n  }\n\n    /**\n     * Checks if value is in a map.\n     * @param {string} importedValue - A value to test.\n     * @returns {boolean} - Tru if value is in a map, false otherwise.\n     */\n  has (importedValue) {\n    return this.hash.hasOwnProperty(importedValue)\n  }\n\n    /**\n     * Returns one or more library standard values that match an external value\n     * @param {string} importedValue - External value\n     * @returns {Object | string} One or more of library standard values\n     */\n  get (importedValue) {\n    if (this.has(importedValue)) {\n      return this.hash[importedValue]\n    } else {\n      throw new Error('A value \"' + importedValue + '\" is not found in the importer.')\n    }\n  }\n}\nexport default FeatureImporter\n","import Feature from './feature.js'\nimport FeatureImporter from './feature_importer.js'\n\n/**\n * Definition class for a (grammatical) feature. Stores type information and (optionally) all possible values of the feature.\n * It serves as a feature generator. If list of possible values is provided, it can generate a Feature object\n * each time a property that corresponds to a feature value is accessed. If no list of possible values provided,\n * a Feature object can be generated with get(value) method.\n *\n * An order of values determines a default sort and grouping order. If two values should have the same order,\n * they should be grouped within an array: value1, [value2, value3], value4. Here 'value2' and 'value3' have\n * the same priority for sorting and grouping.\n */\nclass FeatureType {\n    // TODO: value checking\n    /**\n     * Creates and initializes a Feature Type object.\n     * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n     * @param {string[] | string[][]} values - A list of allowed values for this feature type.\n     * If an empty array is provided, there will be no\n     * allowed values as well as no ordering (can be used for items that do not need or have a simple order,\n     * such as footnotes).\n     * @param {string} language - A language of a feature, allowed values are specified in 'languages' object.\n     */\n  constructor (type, values, language) {\n    if (!Feature.types.isAllowed(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!values || !Array.isArray(values)) {\n      throw new Error('Values should be an array (or an empty array) of values.')\n    }\n    if (!language) {\n      throw new Error('FeatureType constructor requires a language')\n    }\n\n    this.type = type\n    this.language = language\n\n        /*\n         This is a sort order index for a grammatical feature values. It is determined by the order of values in\n         a 'values' array.\n         */\n    this._orderIndex = []\n    this._orderLookup = {}\n\n    for (const [index, value] of values.entries()) {\n      this._orderIndex.push(value)\n      if (Array.isArray(value)) {\n        for (let element of value) {\n          this[element] = new Feature(element, this.type, this.language)\n          this._orderLookup[element] = index\n        }\n      } else {\n        this[value] = new Feature(value, this.type, this.language)\n        this._orderLookup[value] = index\n      }\n    }\n  };\n\n  /**\n   * test to see if this FeatureType allows unrestricted values\n   * @returns {boolean} true if unrestricted false if not\n   */\n  hasUnrestrictedValue () {\n    return this.orderedValues.length === 1 && this.orderedValues[0] === FeatureType.UNRESTRICTED_VALUE\n  }\n\n    /**\n     * Return a Feature with an arbitrary value. This value would not be necessarily present among FeatureType values.\n     * This can be especially useful for features that do not set: a list of predefined values, such as footnotes.\n     * @param value\n     * @param {int} sortOrder\n     * @returns {Feature}\n     */\n  get (value, sortOrder = 1) {\n    if (value) {\n      return new Feature(value, this.type, this.language, sortOrder)\n    } else {\n      throw new Error('A non-empty value should be provided.')\n    }\n  }\n\n  getFromImporter (importerName, value) {\n    let mapped\n    try {\n      mapped = this.importer[importerName].get(value)\n    } catch (e) {\n      // quietly catch not found and replace with default\n      mapped = this.get(value)\n    }\n    return mapped\n  }\n\n    /**\n     * Creates and returns a new importer with a specific name. If an importer with this name already exists,\n     * an existing Importer object will be returned.\n     * @param {string} name - A name of an importer object\n     * @returns {Importer} A new or existing Importer object that matches a name provided\n     */\n  addImporter (name) {\n    if (!name) {\n      throw new Error('Importer should have a non-empty name.')\n    }\n    this.importer = this.importer || {}\n    this.importer[name] = this.importer[name] || new FeatureImporter()\n    return this.importer[name]\n  }\n\n    /**\n     * Return copies of all feature values as Feature objects in a sorted array, according to feature type's sort order.\n     * For a similar function that returns strings instead of Feature objects see orderedValues().\n     * @returns {Feature[] | Feature[][]} Array of feature values sorted according to orderIndex.\n     * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n     * an array of Feature objects will be returned instead of a single Feature object, as for single feature values.\n     */\n  get orderedFeatures () {\n    return this.orderedValues.map((value) => new Feature(value, this.type, this.language))\n  }\n\n    /**\n     * Return all feature values as strings in a sorted array, according to feature type's sort order.\n     * This is a main method that specifies a sort order of the feature type. orderedFeatures() relies\n     * on this method in providing a sorted array of feature values. If you want to create\n     * a custom sort order for a particular feature type that will depend on some options that are not type-related,\n     * create a wrapper around this function providing it with options arguments so it will be able to decide\n     * in what order those features will be based on those arguments.\n     * For a similar function that returns Feature objects instead of strings see orderedValues().\n     * @returns {string[]} Array of feature values sorted according to orderIndex.\n     * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n     * an array of strings will be returned instead of a single strings, as for single feature values.\n     */\n  get orderedValues () {\n    return this._orderIndex\n  }\n\n    /**\n     * Returns a lookup table for type values as:\n     *  {value1: order1, value2: order2}, where order is a sort order of an item. If two items have the same sort order,\n     *  their order value will be the same.\n     * @returns {object}\n     */\n  get orderLookup () {\n    return this._orderLookup\n  }\n\n    /**\n     * Sets an order of grammatical feature values for a grammatical feature. Used mostly for sorting, filtering,\n     * and displaying.\n     *\n     * @param {Feature[] | Feature[][]} values - a list of grammatical features that specify their order for\n     * sorting and filtering. Some features can be grouped as [[genders.masculine, genders.feminine], LibLatin.genders.neuter].\n     * It means that genders.masculine and genders.feminine belong to the same group. They will have the same index\n     * and will be stored inside an _orderIndex as an array. genders.masculine and genders.feminine will be grouped together\n     * during filtering and will be in the same bin during sorting.\n     *\n     */\n  set order (values) {\n    if (!values || (Array.isArray(values) && values.length === 0)) {\n      throw new Error('A non-empty list of values should be provided.')\n    }\n\n        // If a single value is provided, convert it into an array\n    if (!Array.isArray(values)) {\n      values = [values]\n    }\n\n    for (let value of values) {\n      if (Array.isArray(value)) {\n        for (let element of value) {\n          if (!this.hasOwnProperty(element.value)) {\n            throw new Error('Trying to order an element with \"' + element.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n          }\n\n          if (element.type !== this.type) {\n            throw new Error('Trying to order an element with type \"' + element.type + '\" that is different from \"' + this.type + '\".')\n          }\n\n          if (element.language !== this.language) {\n            throw new Error('Trying to order an element with language \"' + element.language + '\" that is different from \"' + this.language + '\".')\n          }\n        }\n      } else {\n        if (!this.hasOwnProperty(value.value)) {\n          throw new Error('Trying to order an element with \"' + value.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n        }\n\n        if (value.type !== this.type) {\n          throw new Error('Trying to order an element with type \"' + value.type + '\" that is different from \"' + this.type + '\".')\n        }\n\n        if (value.language !== this.language) {\n          throw new Error('Trying to order an element with language \"' + value.language + '\" that is different from \"' + this.language + '\".')\n        }\n      }\n    }\n\n        // Erase whatever sort order was set previously\n    this._orderLookup = {}\n    this._orderIndex = []\n\n        // Define a new sort order\n    for (const [index, element] of values.entries()) {\n      if (Array.isArray(element)) {\n                // If it is an array, all values should have the same order\n        let elements = []\n        for (const subElement of element) {\n          this._orderLookup[subElement.value] = index\n          elements.push(subElement.value)\n        }\n        this._orderIndex[index] = elements\n      } else {\n                // If is a single value\n        this._orderLookup[element.value] = index\n        this._orderIndex[index] = element.value\n      }\n    }\n  }\n}\nFeatureType.UNRESTRICTED_VALUE = Symbol('unrestricted')\nexport default FeatureType\n","class InflectionGroupingKey {\n  /**\n   * @constructor\n   * @param {Inflection} infl inflection with features which are used as a grouping key\n   * @param {string[]} features array of feature names which are used as the key\n   * @param {Map} extras extra property name and value pairs used in the key\n   */\n  constructor (infl, features, extras = {}) {\n    for (let feature of features) {\n      this[feature] = infl[feature]\n    }\n    Object.assign(this, extras)\n  }\n\n  /**\n   * checks if a feature with a specific value\n   * is included in the grouping key\n   * @returns {boolean} true if found, false if not\n   */\n  hasFeatureValue (feature, value) {\n    for (let f of this[feature]) {\n      if (f.hasValue(value)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Return this key as a string\n   * @returns {string} string representation of the key\n   */\n  toString () {\n    let values = []\n    for (let prop of Object.getOwnPropertyNames(this).sort()) {\n      if (Array.isArray(this[prop])) {\n        values.push(this[prop].map((x) => x.toString()).sort().join(','))\n      } else {\n        values.push(this[prop])\n      }\n    }\n    return values.join(' ')\n  }\n}\n\nexport default InflectionGroupingKey\n","class InflectionGroup {\n  /**\n   * A group of inflections or groups of inflections\n   *\n   * @param {InflectionGroupingKey} groupingKey features of the inflections in the group\n   * @param {Inflection[]|InflectionGroup[]} inflections array of Inflections or InflectionGroups in this group\n   */\n  constructor (groupingKey, inflections = [], sortKey = null) {\n    this.groupingKey = groupingKey\n    this.inflections = inflections\n  }\n\n  /**\n   * Add an Inflection or InflectionGroup to the group\n   * @param {Inflection|InflectionGroup} inflection\n   */\n  append (inflection) {\n    this.inflections.push(inflection)\n  }\n}\nexport default InflectionGroup\n","import * as Constants from './constants.js'\nimport Feature from './feature.js'\nimport FeatureType from './feature_type.js'\nimport InflectionGroupingKey from './inflection_grouping_key.js'\nimport InflectionGroup from './inflection_group.js'\n\n/**\n * @class  LanguageModel is the base class for language-specific behavior\n */\nclass LanguageModel {\n   /**\n   */\n  constructor () {\n    this.sourceLanguage = null\n    this.contextForward = 0\n    this.context_backward = 0\n    this.direction = Constants.LANG_DIR_LTR\n    this.baseUnit = Constants.LANG_UNIT_WORD\n    this.codes = []\n  }\n\n  _initializeFeatures () {\n    let features = {}\n    let code = this.toCode()\n    features[Feature.types.part] = new FeatureType(Feature.types.part,\n      [ Constants.POFS_ADVERB,\n        Constants.POFS_ADVERBIAL,\n        Constants.POFS_ADJECTIVE,\n        Constants.POFS_ARTICLE,\n        Constants.POFS_CONJUNCTION,\n        Constants.POFS_EXCLAMATION,\n        Constants.POFS_INTERJECTION,\n        Constants.POFS_NOUN,\n        Constants.POFS_NUMERAL,\n        Constants.POFS_PARTICLE,\n        Constants.POFS_PREFIX,\n        Constants.POFS_PREPOSITION,\n        Constants.POFS_PRONOUN,\n        Constants.POFS_SUFFIX,\n        Constants.POFS_SUPINE,\n        Constants.POFS_VERB,\n        Constants.POFS_VERB_PARTICIPLE ], code)\n    features[Feature.types.gender] = new FeatureType(Feature.types.gender,\n      [ Constants.GEND_MASCULINE, Constants.GEND_FEMININE, Constants.GEND_NEUTER ], code)\n    features[Feature.types.type] = new FeatureType(Feature.types.type,\n      [Constants.TYPE_REGULAR, Constants.TYPE_IRREGULAR], code)\n    features[Feature.types.person] = new FeatureType(Feature.types.person,\n      [Constants.ORD_1ST, Constants.ORD_2ND, Constants.ORD_3RD], code)\n    // some general, non-language specific grammatical features\n    features[Feature.types.age] = new FeatureType(Feature.types.age,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.area] = new FeatureType(Feature.types.area,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.source] = new FeatureType(Feature.types.source,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.frequency] = new FeatureType(Feature.types.frequency,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.geo] = new FeatureType(Feature.types.geo,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.source] = new FeatureType(Feature.types.source,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.pronunciation] = new FeatureType(Feature.types.pronunciation,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.kind] = new FeatureType(Feature.types.kind,\n      [FeatureType.UNRESTRICTED_VALUE], code)\n    features[Feature.types.comparison] = new FeatureType(Feature.types.comparison,\n      [Constants.COMP_POSITIVE, Constants.COMP_SUPERLATIVE, Constants.COMP_COMPARITIVE], code)\n    return features\n  }\n\n  /**\n   * Identify the morphological features which should be linked to a grammar.\n   * @returns {String[]} Array of Feature types\n   */\n  grammarFeatures () {\n    return []\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return false\n  }\n\n  /**\n   * Check to see if the supplied language code is supported by this tool\n   * @param {string} code the language code\n   * @returns true if supported false if not\n   * @type Boolean\n   */\n  static supportsLanguage (code) {\n    return this.codes.includes[code]\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {string} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    return word\n  }\n\n  /**\n   * Return alternate encodings for a word\n   * @param {string} word the word\n   * @param {string} preceding optional preceding word\n   * @param {string} following optional following word\n   * @param {string} encoding optional encoding name to filter the response to\n   * @returns an array of alternate encodinges\n   */\n  alternateWordEncodings (word, preceding = null, folloiwng = null, encoding = null) {\n    return []\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n\n  toString () {\n    return String(this.sourceLanguage)\n  }\n\n  isEqual (model) {\n    return this.sourceLanguage === model.sourceLanguage\n  }\n\n  toCode () {\n    return null\n  }\n\n  /*\n  There are two types of language identificators: language IDs and language code. Language ID is a symbol constant\n  defined in constants.js, such as LANG_LATIN or LANG_GREEK. Language code is a string containing (usually)\n  a three-letter language codes such as 'lat' or 'la' for latin. There can be multiple language codes that identify\n  the same language, but there is only one unique language ID for each language.\n   */\n\n  /**\n   * Returns an array of language codes that represents the language.\n   * @return {String[]} An array of language codes that matches the language.\n   */\n  static get codes () {\n    return []\n  }\n\n  /**\n   * Checks wither a language has a particular language code in its list of codes\n   * @param {String} languageCode - A language code to check\n   * @param {String[]} codes - Array of language codes a specific language has\n   * @return {boolean} Wither this language code exists in a language code list\n   */\n  static hasCodeInList (languageCode, codes) {\n    if (LanguageModel.isLanguageCode(languageCode)) {\n      return codes.includes(languageCode)\n    } else {\n      throw new Error(`Format of a \"${languageCode}\" is incorrect`)\n    }\n  }\n\n  /**\n   * Tests wither a provided language identificator is a language ID.\n   * @param {Symbol | string} language - A language identificator, either a Symbol or a string language code.\n   * @return {boolean} True if language identificator provided is a language ID.\n   */\n  static isLanguageID (language) {\n    return (typeof language === 'symbol')\n  }\n\n  /**\n   * Tests wither a provided language identificator is a language code.\n   * @param {Symbol | string} language - A language identificator, either a Symbol or a string language code.\n   * @return {boolean} - True if language identificator provided is a language code.\n   */\n  static isLanguageCode (language) {\n    return !LanguageModel.isLanguageID(language)\n  }\n\n  /**\n   * Groups a set of inflections according to a language-specific display paradigm\n   * The default groups according to the following logic:\n   *   1. groups of groups with unique stem, prefix, suffix, part of speech dialect and comparison\n   *     2. groups of those groups with unique\n   *          number, if it's an inflection with a grammatical case\n   *          tense, if it's an inflection with tense but no case (i.e. a verb)\n   *          verbs without tense or case\n   *          adverbs\n   *          everything else\n   *       3. groups of those groups with unique voice and tense\n   *         4. groups of inflections with unique gender, person, mood, and sort\n   */\n  groupInflectionsForDisplay (inflections) {\n    let grouped = new Map()\n\n    // group inflections by part of speech\n    for (let infl of inflections) {\n      let groupingKey = new InflectionGroupingKey(infl,\n        [Feature.types.part, Feature.types.dialect, Feature.types.comparison],\n        { prefix: infl.prefix,\n          suffix: infl.suffix,\n          stem: infl.stem\n        }\n        )\n      let groupingKeyStr = groupingKey.toString()\n      if (grouped.has(groupingKeyStr)) {\n        grouped.get(groupingKeyStr).append(infl)\n      } else {\n        grouped.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n      }\n    }\n\n    // iterate through each group key to group the inflections in that group\n    for (let kv of grouped) {\n      let inflgrp = new Map()\n      for (let infl of kv[1].inflections) {\n        let keyprop\n        let isCaseInflectionSet = false\n        if (infl[Feature.types.grmCase]) {\n          // grouping on number if case is defined\n          keyprop = Feature.types.number\n          isCaseInflectionSet = true\n        } else if (infl[Feature.types.tense]) {\n          // grouping on tense if tense is defined but not case\n          keyprop = Feature.types.tense\n        } else if (infl[Feature.types.part] === Constants.POFS_VERB) {\n          // grouping on no case or tense but a verb\n          keyprop = Feature.types.part\n        } else if (infl[Feature.types.part] === Constants.POFS_ADVERB) {\n          keyprop = Feature.types.part\n          // grouping on adverbs without case or tense\n        } else {\n          keyprop = 'misc'\n          // grouping on adverbs without case or tense\n          // everything else\n        }\n        let groupingKey = new InflectionGroupingKey(infl, [keyprop], {isCaseInflectionSet: isCaseInflectionSet})\n        let groupingKeyStr = groupingKey.toString()\n        if (inflgrp.has(groupingKeyStr)) {\n          inflgrp.get(groupingKeyStr).append(infl)\n        } else {\n          inflgrp.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n        }\n      }\n      // inflgrp is now a map of groups of inflections grouped by\n      //  inflections with number\n      //  inflections without number but with tense\n      //  inflections of verbs without tense\n      //  inflections of adverbs\n      //  everything else\n      // iterate through each inflection group key to group the inflections in that group by tense and voice\n      for (let kv of inflgrp) {\n        let nextGroup = new Map()\n        let sortOrder = new Map()\n        for (let infl of kv[1].inflections) {\n          let sortkey = infl[Feature.types.grmCase] ? Math.max(infl[Feature.types.grmCase].map((f) => { return f.sortOrder })) : 1\n          let groupingKey = new InflectionGroupingKey(infl, [Feature.types.tense, Feature.types.voice])\n          let groupingKeyStr = groupingKey.toString()\n          if (nextGroup.has(groupingKeyStr)) {\n            nextGroup.get(groupingKeyStr).append(infl)\n          } else {\n            nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl], sortkey))\n            sortOrder.set(groupingKeyStr, sortkey)\n          }\n        }\n        kv[1].inflections = []\n        let sortedKeys = Array.from(nextGroup.keys()).sort(\n          (a, b) => {\n            let orderA = sortOrder.get(a)\n            let orderB = sortOrder.get(b)\n            return orderA > orderB ? -1 : orderB > orderA ? 1 : 0\n          }\n        )\n        for (let groupkey of sortedKeys) {\n          kv[1].inflections.push(nextGroup.get(groupkey))\n        }\n      }\n\n      // inflgrp is now a Map of groups of groups of inflections\n\n      for (let kv of inflgrp) {\n        let groups = kv[1]\n        for (let group of groups.inflections) {\n          let nextGroup = new Map()\n          for (let infl of group.inflections) {\n            // set key is case comp gend pers mood sort\n            let groupingKey = new InflectionGroupingKey(infl,\n              [Feature.types.grmCase, Feature.types.comparison, Feature.types.gender, Feature.types.number, Feature.types.person,\n                Feature.types.tense, Feature.types.mood, Feature.types.sort, Feature.types.voice])\n            let groupingKeyStr = groupingKey.toString()\n            if (nextGroup.has(groupingKeyStr)) {\n              nextGroup.get(groupingKeyStr).append(infl)\n            } else {\n              nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n            }\n          }\n          group.inflections = Array.from(nextGroup.values()) // now a group of inflection groups\n        }\n      }\n      kv[1].inflections = Array.from(inflgrp.values())\n    }\n    return Array.from(grouped.values())\n  }\n}\n\nexport default LanguageModel\n","import LanguageModel from './language_model.js'\nimport Feature from './feature.js'\nimport FeatureType from './feature_type.js'\nimport * as Constants from './constants.js'\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nclass LatinLanguageModel extends LanguageModel {\n   /**\n   */\n  constructor () {\n    super()\n    this.sourceLanguage = LatinLanguageModel.sourceLanguage // For compatibility, should use a static method instead\n    this.contextForward = 0\n    this.contextBackward = 0\n    this.direction = Constants.LANG_DIR_LTR\n    this.baseUnit = Constants.LANG_UNIT_WORD\n    this.codes = LatinLanguageModel.codes // To keep compatibility with existing code\n    this.features = this._initializeFeatures()\n  }\n\n  static get sourceLanguage () {\n    return Constants.LANG_LATIN\n  }\n\n  static get codes () {\n    return [Constants.STR_LANG_CODE_LA, Constants.STR_LANG_CODE_LAT]\n  }\n\n  /**\n   * Checks wither a language has a particular language code in its list of codes\n   * @param {String} languageCode - A language code to check\n   * @return {boolean} Wither this language code exists in a language code list\n   */\n  static hasCode (languageCode) {\n    return LanguageModel.hasCodeInList(languageCode, LatinLanguageModel.codes)\n  }\n\n  _initializeFeatures () {\n    let features = super._initializeFeatures()\n    let code = this.toCode()\n    features[Feature.types.number] = new FeatureType(Feature.types.number, [Constants.NUM_SINGULAR, Constants.NUM_PLURAL], code)\n    features[Feature.types.grmCase] = new FeatureType(Feature.types.grmCase,\n      [ Constants.CASE_NOMINATIVE,\n        Constants.CASE_GENITIVE,\n        Constants.CASE_DATIVE,\n        Constants.CASE_ACCUSATIVE,\n        Constants.CASE_ABLATIVE,\n        Constants.CASE_LOCATIVE,\n        Constants.CASE_VOCATIVE\n      ], code)\n    features[Feature.types.declension] = new FeatureType(Feature.types.declension,\n      [ Constants.ORD_1ST, Constants.ORD_2ND, Constants.ORD_3RD, Constants.ORD_4TH, Constants.ORD_5TH ], code)\n    features[Feature.types.tense] = new FeatureType(Feature.types.tense,\n      [ Constants.TENSE_PRESENT,\n        Constants.TENSE_IMPERFECT,\n        Constants.TENSE_FUTURE,\n        Constants.TENSE_PERFECT,\n        Constants.TENSE_PLUPERFECT,\n        Constants.TENSE_FUTURE_PERFECT\n      ], code)\n    features[Feature.types.voice] = new FeatureType(Feature.types.voice, [Constants.VOICE_PASSIVE, Constants.VOICE_ACTIVE], code)\n    features[Feature.types.mood] = new FeatureType(Feature.types.mood,\n      [ Constants.MOOD_INDICATIVE,\n        Constants.MOOD_SUBJUNCTIVE,\n        Constants.MOOD_IMPERATIVE,\n        Constants.MOOD_PARTICIPLE\n      ], code)\n    features[Feature.types.conjugation] = new FeatureType(Feature.types.conjugation,\n      [ Constants.ORD_1ST,\n        Constants.ORD_2ND,\n        Constants.ORD_3RD,\n        Constants.ORD_4TH\n      ], code)\n    return features\n  }\n\n  /**\n   * @override LanguageModel#grammarFeatures\n   */\n  grammarFeatures () {\n    // TODO this ideally might be grammar specific\n    return [Feature.types.part, Feature.types.grmCase, Feature.types.mood, Feature.types.declension, Feature.types.tense]\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return true\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {String} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    return word\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n\n  // For compatibility with existing code, can be replaced with a static version\n  toCode () {\n    return LatinLanguageModel.toCode()\n  }\n\n  static toCode () {\n    return Constants.STR_LANG_CODE_LAT\n  }\n}\nexport default LatinLanguageModel\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\nimport Feature from './feature.js'\nimport FeatureType from './feature_type.js'\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nclass GreekLanguageModel extends LanguageModel {\n   /**\n   * @constructor\n   */\n  constructor () {\n    super()\n    this.sourceLanguage = GreekLanguageModel.sourceLanguage\n    this.contextForward = 0\n    this.contextBackward = 0\n    this.direction = Constants.LANG_DIR_LTR\n    this.baseUnit = Constants.LANG_UNIT_WORD\n    this.languageCodes = GreekLanguageModel.codes\n    this.features = this._initializeFeatures()\n  }\n\n  _initializeFeatures () {\n    let features = super._initializeFeatures()\n    let code = this.toCode()\n    features[Feature.types.number] = new FeatureType(Feature.types.number, [Constants.NUM_SINGULAR, Constants.NUM_PLURAL, Constants.NUM_DUAL], code)\n    features[Feature.types.grmCase] = new FeatureType(Feature.types.grmCase,\n      [ Constants.CASE_NOMINATIVE,\n        Constants.CASE_GENITIVE,\n        Constants.CASE_DATIVE,\n        Constants.CASE_ACCUSATIVE,\n        Constants.CASE_VOCATIVE\n      ], code)\n    features[Feature.types.declension] = new FeatureType(Feature.types.declension,\n      [ Constants.ORD_1ST, Constants.ORD_2ND, Constants.ORD_3RD ], code)\n    features[Feature.types.tense] = new FeatureType(Feature.types.tense,\n      [ Constants.TENSE_PRESENT,\n        Constants.TENSE_IMPERFECT,\n        Constants.TENSE_FUTURE,\n        Constants.TENSE_PERFECT,\n        Constants.TENSE_PLUPERFECT,\n        Constants.TENSE_FUTURE_PERFECT,\n        Constants.TENSE_AORIST\n      ], code)\n    features[Feature.types.voice] = new FeatureType(Feature.types.voice,\n      [ Constants.VOICE_PASSIVE,\n        Constants.VOICE_ACTIVE,\n        Constants.VOICE_MEDIOPASSIVE,\n        Constants.VOICE_MIDDLE\n      ], code)\n    features[Feature.types.mood] = new FeatureType(Feature.types.mood,\n      [ Constants.MOOD_INDICATIVE,\n        Constants.MOOD_SUBJUNCTIVE,\n        Constants.MOOD_OPTATIVE,\n        Constants.MOOD_IMPERATIVE\n      ], code)\n    // TODO full list of greek dialects\n    features[Feature.types.dialect] = new FeatureType(Feature.types.dialect, ['attic', 'epic', 'doric'], code)\n    return features\n  }\n\n  static get sourceLanguage () {\n    return Constants.LANG_GREEK\n  }\n\n  static get codes () {\n    return [Constants.STR_LANG_CODE_GRC]\n  }\n\n  /**\n   * Checks wither a language has a particular language code in its list of codes\n   * @param {String} languageCode - A language code to check\n   * @return {boolean} Wither this language code exists in a language code list\n   */\n  static hasCode (languageCode) {\n    return LanguageModel.hasCodeInList(languageCode, GreekLanguageModel.codes)\n  }\n\n  // For compatibility with existing code, can be replaced with a static version\n  toCode () {\n    return GreekLanguageModel.toCode()\n  }\n\n  static toCode () {\n    return Constants.STR_LANG_CODE_GRC\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return true\n  }\n  /**\n   * @override LanguageModel#grammarFeatures\n   */\n  grammarFeatures () {\n    // TODO this ideally might be grammar specific\n    return [Feature.types.part, Feature.types.grmCase, Feature.types.mood, Feature.types.declension, Feature.types.tense, Feature.types.voice]\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {String} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    // we normalize greek to NFC - Normalization Form Canonical Composition\n    return word.normalize('NFC')\n  }\n\n  /**\n   * @override LanguageModel#alternateWordEncodings\n   */\n  alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    // the original alpheios code used the following normalizations\n    // 1. When looking up a lemma\n    //    stripped vowel length\n    //    stripped caps\n    //    then if failed, tried again with out these\n    // 2. when adding to a word list\n    //    precombined unicode (vowel length/diacritics preserved)\n    // 2. When looking up a verb in the verb paradigm tables\n    //    it set e_normalize to false, otherwise it was true...\n    // make sure it's normalized to NFC and in lower case\n    let normalized = this.normalizeWord(word).toLocaleLowerCase()\n    let strippedVowelLength = normalized.replace(\n      /[\\u{1FB0}\\u{1FB1}]/ug, '\\u{03B1}').replace(\n      /[\\u{1FB8}\\u{1FB9}]/ug, '\\u{0391}').replace(\n      /[\\u{1FD0}\\u{1FD1}]/ug, '\\u{03B9}').replace(\n      /[\\u{1FD8}\\u{1FD9}]/ug, '\\u{0399}').replace(\n      /[\\u{1FE0}\\u{1FE1}]/ug, '\\u{03C5}').replace(\n      /[\\u{1FE8}\\u{1FE9}]/ug, '\\u{03A5}').replace(\n      /[\\u{00AF}\\u{0304}\\u{0306}]/ug, '')\n    let strippedDiaeresis = normalized.replace(\n      /\\u{0390}/ug, '\\u{03AF}').replace(\n      /\\u{03AA}/ug, '\\u{0399}').replace(\n      /\\u{03AB}/ug, '\\u{03A5}').replace(\n      /\\u{03B0}/ug, '\\u{03CD}').replace(\n      /\\u{03CA}/ug, '\\u{03B9}').replace(\n      /\\u{03CB}/ug, '\\u{03C5}').replace(\n      /\\u{1FD2}/ug, '\\u{1F76}').replace(\n      /\\u{1FD3}/ug, '\\u{1F77}').replace(\n      /\\u{1FD7}/ug, '\\u{1FD6}').replace(\n      /\\u{1FE2}/ug, '\\u{1F7A}').replace(\n      /\\u{1FE3}/ug, '\\u{1F7B}').replace(\n      /\\u{1FE7}/ug, '\\u{1FE6}').replace(\n      /\\u{1FC1}/ug, '\\u{1FC0}').replace(\n      /\\u{1FED}/ug, '\\u{1FEF}').replace(\n      /\\u{1FEE}/ug, '\\u{1FFD}').replace(\n      /[\\u{00A8}\\u{0308}]/ug, '')\n    if (encoding === 'strippedDiaeresis') {\n      return [strippedDiaeresis]\n    } else {\n      return [strippedVowelLength]\n    }\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n}\nexport default GreekLanguageModel\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nclass ArabicLanguageModel extends LanguageModel {\n   /**\n   * @constructor\n   */\n  constructor () {\n    super()\n    this.sourceLanguage = ArabicLanguageModel.sourceLanguage\n    this.contextForward = 0\n    this.contextBackward = 0\n    this.direction = Constants.LANG_DIR_RTL\n    this.baseUnit = Constants.LANG_UNIT_WORD\n    this.languageCodes = ArabicLanguageModel.codes\n    this._initializeFeatures()\n  }\n\n  _initializeFeatures () {\n    this.features = super._initializeFeatures()\n  }\n\n  static get sourceLanguage () {\n    return Constants.LANG_ARABIC\n  }\n\n  static get codes () {\n    return [Constants.STR_LANG_CODE_ARA, Constants.STR_LANG_CODE_AR]\n  }\n\n  // For compatibility with existing code, can be replaced with a static version\n  toCode () {\n    return ArabicLanguageModel.toCode()\n  }\n\n  static toCode () {\n    return Constants.STR_LANG_CODE_ARA\n  }\n\n  /**\n   * Checks wither a language has a particular language code in its list of codes\n   * @param {String} languageCode - A language code to check\n   * @return {boolean} Wither this language code exists in a language code list\n   */\n  static hasCode (languageCode) {\n    return LanguageModel.hasCodeInList(languageCode, ArabicLanguageModel.codes)\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return false\n  }\n\n  /**\n   * @override LanguageModel#alternateWordEncodings\n   */\n  alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    // tanwin (& tatweel) - drop FATHATAN, DAMMATAN, KASRATAN, TATWEEL\n    let tanwin = word.replace(/[\\u{064B}\\u{064C}\\u{064D}\\u{0640}]/ug, '')\n    // hamzas - replace ALEF WITH MADDA ABOVE, ALEF WITH HAMZA ABOVE/BELOW with ALEF\n    let hamza = tanwin.replace(/[\\u{0622}\\u{0623}\\u{0625}]/ug, '\\u{0627}')\n    // harakat - drop FATHA, DAMMA, KASRA, SUPERSCRIPT ALEF, ALEF WASLA\n    let harakat = hamza.replace(/[\\u{064E}\\u{064F}\\u{0650}\\u{0670}\\u{0671}]/ug, '')\n    // shadda\n    let shadda = harakat.replace(/\\u{0651}/ug, '')\n    // sukun\n    let sukun = shadda.replace(/\\u{0652}/ug, '')\n    // alef\n    let alef = sukun.replace(/\\u{0627}/ug, '')\n    let alternates = new Map([\n      ['tanwin', tanwin],\n      ['hamza', hamza],\n      ['harakat', harakat],\n      ['shadda', shadda],\n      ['sukun', sukun],\n      ['alef', alef]\n    ])\n    if (encoding !== null && alternates.has(encoding)) {\n      return [alternates.get(encoding)]\n    } else {\n      return Array.from(alternates.values())\n    }\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n}\nexport default ArabicLanguageModel\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\n\n/**\n * @class  PersianLanguageModel is the lass for Persian specific behavior\n */\nclass PersianLanguageModel extends LanguageModel {\n   /**\n   * @constructor\n   */\n  constructor () {\n    super()\n    this.sourceLanguage = PersianLanguageModel.sourceLanguage\n    this.contextForward = 0\n    this.contextBackward = 0\n    this.direction = Constants.LANG_DIR_RTL\n    this.baseUnit = Constants.LANG_UNIT_WORD\n    this.languageCodes = PersianLanguageModel.codes\n    this._initializeFeatures()\n  }\n\n  _initializeFeatures () {\n    this.features = super._initializeFeatures()\n  }\n\n  static get sourceLanguage () {\n    return Constants.LANG_PERSIAN\n  }\n\n  static get codes () {\n    return [Constants.STR_LANG_CODE_PER, Constants.STR_LANG_CODE_FAS, Constants.STR_LANG_CODE_FA, Constants.STR_LANG_CODE_FA_IR]\n  }\n\n  // For compatibility with existing code, can be replaced with a static version\n  toCode () {\n    return PersianLanguageModel.toCode()\n  }\n\n  static toCode () {\n    return Constants.STR_LANG_CODE_PER\n  }\n\n  /**\n   * Checks wither a language has a particular language code in its list of codes\n   * @param {String} languageCode - A language code to check\n   * @return {boolean} Wither this language code exists in a language code list\n   */\n  static hasCode (languageCode) {\n    return LanguageModel.hasCodeInList(languageCode, PersianLanguageModel.codes)\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return false\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n}\nexport default PersianLanguageModel\n","import LanguageModel from './language_model.js'\nimport LatinLanguageModel from './latin_language_model.js'\nimport GreekLanguageModel from './greek_language_model.js'\nimport ArabicLanguageModel from './arabic_language_model.js'\nimport PersianLanguageModel from './persian_language_model.js'\nimport * as Constants from './constants.js'\n\nconst MODELS = new Map([\n  [ Constants.STR_LANG_CODE_LA, LatinLanguageModel ],\n  [ Constants.STR_LANG_CODE_LAT, LatinLanguageModel ],\n  [ Constants.STR_LANG_CODE_GRC, GreekLanguageModel ],\n  [ Constants.STR_LANG_CODE_ARA, ArabicLanguageModel ],\n  [ Constants.STR_LANG_CODE_AR, ArabicLanguageModel ],\n  [ Constants.STR_LANG_CODE_PER, PersianLanguageModel ]\n])\n\nclass LanguageModelFactory {\n  static supportsLanguage (code) {\n    return MODELS.has(code)\n  }\n\n  static getLanguageForCode (code = null) {\n    let Model = MODELS.get(code)\n    if (Model) {\n      return new Model()\n    }\n    // for now return a default Model\n    // TODO may want to throw an error\n    return new LanguageModel()\n  }\n\n  /**\n   * Converts an ISO 639-3 language code to a language ID\n   * @param {String} languageCode - An ISO 639-3 language code\n   * @return {Symbol | undefined} A language ID or undefined if language ID is not found\n   */\n  static getLanguageIdFromCode (languageCode) {\n    for (const languageModel of MODELS.values()) {\n      if (languageModel.hasCode(languageCode)) {\n        return languageModel.sourceLanguage\n      }\n    }\n  }\n\n  /**\n   * Converts a language ID to an default ISO 639-3 language code for that language\n   * @param {Symbol} languageID - A language ID\n   * @return {String | undefined} An ISO 639-3 language code or undefined if language code is not found\n   */\n  static getLanguageCodeFromId (languageID) {\n    for (const languageModel of MODELS.values()) {\n      if (languageModel.sourceLanguage === languageID) {\n        return languageModel.toCode()\n      }\n    }\n  }\n}\nexport default LanguageModelFactory\n","/**\n * This is a temporary placeholder for an i18n library\n */\nexport const i18n = {\n  en: {\n    feminine: {\n      full: 'feminine',\n      abbr: 'f'\n    },\n    masculine: {\n      full: 'masculine',\n      abbr: 'm'\n    },\n    neuter: {\n      full: 'neuter',\n      abbr: 'n'\n    }\n  }\n}\n","import LMF from './language_model_factory.js'\nimport * as i18n from './i18n.js'\n/**\n * Wrapper class for a (grammatical, usually) feature, such as part of speech or declension. Keeps both value and type information.\n */\nclass Feature {\n    /**\n     * Initializes a Feature object\n     * @param {string | string[]} value - A single feature value or, if this feature could have multiple\n     * values, an array of values.\n     * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n     * @param {string} language - A language of a feature, allowed values are specified in 'languages' object.\n     * @param {int} sortOrder - an integer used for sorting\n     */\n  constructor (value, type, language, sortOrder = 1) {\n    if (!Feature.types.isAllowed(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!value) {\n      throw new Error('Feature should have a non-empty value.')\n    }\n    if (!type) {\n      throw new Error('Feature should have a non-empty type.')\n    }\n    if (!language) {\n      throw new Error('Feature constructor requires a language')\n    }\n    this.value = value\n    this.type = type\n    this.language = language\n    this.languageCode = language\n    this.languageID = LMF.getLanguageIdFromCode(this.languageCode)\n    this.sortOrder = sortOrder\n  };\n\n  isEqual (feature) {\n    if (Array.isArray(feature.value)) {\n      if (!Array.isArray(this.value) || this.value.length !== feature.value.length) {\n        return false\n      }\n      let equal = this.type === feature.type && this.language === feature.language\n      equal = equal && this.value.every(function (element, index) {\n        return element === feature.value[index]\n      })\n      return equal\n    } else {\n      return this.value === feature.value && this.type === feature.type && this.language === feature.language\n    }\n  }\n\n  /**\n   * examine the feature for a specific value\n   * @param {string} value\n   * @returns {boolean} true if the value is included in the feature's values\n   */\n  hasValue (value) {\n    if (Array.isArray(this.value)) {\n      return this.value.includes(value)\n    } else {\n      return this.value === value\n    }\n  }\n\n  /**\n   * string representation of a feature\n   * @return {string}\n   */\n  toString () {\n    if (Array.isArray(this.value)) {\n      return this.value.join(',')\n    } else {\n      return this.value\n    }\n  }\n\n  /**\n   * a locale-specific abbreviation for a feature's values\n   * @return {string}\n   */\n  toLocaleStringAbbr (lang = 'en') {\n    if (Array.isArray(this.value)) {\n      return this.value.map((v) => this.toLocaleStringAbbr(v, lang))\n    } else {\n      return i18n.i18n[lang][this.value].abbr\n    }\n  }\n}\n// Should have no spaces in values in order to be used in HTML templates\nFeature.types = {\n  word: 'word',\n  part: 'part of speech', // Part of speech\n  number: 'number',\n  grmCase: 'case',\n  declension: 'declension',\n  gender: 'gender',\n  type: 'type',\n  conjugation: 'conjugation',\n  comparison: 'comparison',\n  tense: 'tense',\n  voice: 'voice',\n  mood: 'mood',\n  person: 'person',\n  frequency: 'frequency', // How frequent this word is\n  meaning: 'meaning', // Meaning of a word\n  source: 'source', // Source of word definition\n  footnote: 'footnote', // A footnote for a word's ending\n  dialect: 'dialect', // a dialect iderntifier\n  note: 'note', // a general note\n  pronunciation: 'pronunciation',\n  age: 'age',\n  area: 'area',\n  geo: 'geo', // geographical data\n  kind: 'kind', // verb kind informatin\n  derivtype: 'derivtype',\n  stemtype: 'stemtype',\n  morph: 'morph', // general morphological information\n  var: 'var', // variance?\n  isAllowed (value) {\n    let v = `${value}`\n    return Object.values(this).includes(v)\n  }\n}\nexport default Feature\n","/**\n * A list of grammatical features that characterizes a language unit. Has some additional service methods,\n * compared with standard storage objects.\n */\nclass FeatureList {\n    /**\n     * Initializes a feature list.\n     * @param {FeatureType[]} features - Features that build the list (optional, can be set later).\n     */\n  constructor (features = []) {\n    this._features = []\n    this._types = {}\n    this.add(features)\n  }\n\n  add (features) {\n    if (!features || !Array.isArray(features)) {\n      throw new Error('Features must be defined and must come in an array.')\n    }\n\n    for (let feature of features) {\n      this._features.push(feature)\n      this._types[feature.type] = feature\n    }\n  }\n\n    /**\n     * Returns an array of grouping features.\n     * @returns {FeatureType[]} - An array of grouping features.\n     */\n  get items () {\n    return this._features\n  }\n\n  forEach (callback) {\n    this._features.forEach(callback)\n  }\n\n    /**\n     * Returns a feature of a particular type. If such feature does not exist in a list, returns undefined.\n     * @param {string} type - Feature type as defined in `types` object.\n     * @return {FeatureType | undefined} A feature if a particular type if contains it. Undefined otherwise.\n     */\n  ofType (type) {\n    if (this.hasType(type)) {\n      return this._types[type]\n    }\n  }\n\n    /**\n     * Checks whether a feature list has a feature of a specific type.\n     * @param {string} type - Feature type as defined in `types` object.\n     * @return {boolean} Whether a feature list has a feature of a particular type.\n     */\n  hasType (type) {\n    return this._types.hasOwnProperty(type)\n  }\n}\nexport default FeatureList\n","import LMF from './language_model_factory'\nimport Feature from './feature.js'\n\n/**\n * Lemma, a canonical form of a word.\n */\nclass Lemma {\n  /**\n   * Initializes a Lemma object.\n   * @param {string} word - A word.\n   * @param {string} language - A language code of a word. TODO: Switch to using Language ID instead\n   * @param {Array[string]} principalParts - the principalParts of a lemma\n   * @param {Object} features - the grammatical features of a lemma\n   */\n  constructor (word, language, principalParts = [], features = {}) {\n    if (!word) {\n      throw new Error('Word should not be empty.')\n    }\n\n    if (!language) {\n      throw new Error('Language should not be empty.')\n    }\n\n    // if (!languages.isAllowed(language)) {\n    //    throw new Error('Language \"' + language + '\" is not supported.');\n    // }\n\n    this.word = word\n    this.language = language // For compatibility, should probably use language ID instead\n    this.languageCode = language\n    this.languageID = LMF.getLanguageIdFromCode(this.languageCode)\n    this.principalParts = principalParts\n    this.features = {}\n  }\n\n  static readObject (jsonObject) {\n    return new Lemma(jsonObject.word, jsonObject.language, jsonObject.principalParts, jsonObject.pronunciation)\n  }\n\n  /**\n   * Sets a grammatical feature for a lemma. Some features can have multiple values, In this case\n   * an array of Feature objects will be provided.\n   * Values are taken from features and stored in a 'feature.type' property as an array of values.\n   * @param {Feature | Feature[]} data\n   */\n  set feature (data) {\n    if (!data) {\n      throw new Error('feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data]\n    }\n\n    let type = data[0].type\n    this.features[type] = []\n    for (let element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('feature data must be a Feature object.')\n      }\n\n      if (element.languageID !== this.languageID) {\n        throw new Error('Language \"' + element.languageID + '\" of a feature does not match a language \"' +\n                this.languageID + '\" of a Lemma object.')\n      }\n\n      this.features[type].push(element)\n    }\n  }\n\n  /**\n   * Get a string which can be used as a unique key to identify this lemma\n   * @return {string} the key\n   */\n  get key () {\n    return [this.word, this.languageCode, ...Object.values(this.features)].join('-')\n  }\n}\n\nexport default Lemma\n","import Feature from './feature.js'\nimport LanguageModelFactory from './language_model_factory.js'\n/*\n Hierarchical structure of return value of a morphological analyzer:\n\n Homonym (a group of words that are written the same way, https://en.wikipedia.org/wiki/Homonym)\n    Lexeme 1 (a unit of lexical meaning, https://en.wikipedia.org/wiki/Lexeme)\n        Have a lemma and one or more inflections\n        Lemma (also called a headword, a canonical form of a group of words https://en.wikipedia.org/wiki/Lemma_(morphology) )\n        Inflection 1\n            Stem\n            Suffix (also called ending)\n        Inflection 2\n            Stem\n            Suffix\n    Lexeme 2\n        Lemma\n        Inflection 1\n            Stem\n            Suffix\n */\n\n/**\n * Represents an inflection of a word\n */\nclass Inflection {\n    /**\n     * Initializes an Inflection object.\n     * @param {string} stem - A stem of a word.\n     * @param {string} language - A word's language.\n     * @param {string} suffix - a suffix of a word\n     * @param {prefix} prefix - a prefix of a word\n     * @param {example} example - example\n     */\n  constructor (stem, language, suffix = null, prefix = null, example = null) {\n    if (!stem) {\n      throw new Error('Stem should not be empty.')\n    }\n\n    if (!language) {\n      throw new Error('Langauge should not be empty.')\n    }\n\n    if (!LanguageModelFactory.supportsLanguage(language)) {\n      throw new Error(`language ${language} not supported.`)\n    }\n\n    this.stem = stem\n    this.language = language\n\n    // Suffix may not be present in every word. If missing, it will set to null.\n    this.suffix = suffix\n\n    // Prefix may not be present in every word. If missing, it will set to null.\n    this.prefix = prefix\n\n    // Example may not be provided\n    this.example = example\n  }\n\n  static readObject (jsonObject) {\n    let inflection =\n      new Inflection(\n        jsonObject.stem, jsonObject.language, jsonObject.suffix, jsonObject.prefix, jsonObject.example)\n    return inflection\n  }\n\n    /**\n     * Sets a grammatical feature in an inflection. Some features can have multiple values, In this case\n     * an array of Feature objects will be provided.\n     * Values are taken from features and stored in a 'feature.type' property as an array of values.\n     * @param {Feature | Feature[]} data\n     */\n  set feature (data) {\n    if (!data) {\n      throw new Error('Inflection feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data]\n    }\n\n    let type = data[0].type\n    this[type] = []\n    for (let element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('Inflection feature data must be a Feature object.')\n      }\n\n      if (element.language !== this.language) {\n        throw new Error('Language \"' + element.language + '\" of a feature does not match a language \"' +\n                this.language + '\" of an Inflection object.')\n      }\n\n      this[type].push(element)\n    }\n  }\n}\nexport default Inflection\n","import Lemma from './lemma.js'\nimport Inflection from './inflection.js'\nimport DefinitionSet from './definition-set'\nimport LMF from './language_model_factory'\n\n/**\n * A basic unit of lexical meaning. Contains a primary Lemma object, one or more Inflection objects\n * and a DefinitionSet\n */\nclass Lexeme {\n    /**\n     * Initializes a Lexeme object.\n     * @param {Lemma} lemma - A lemma object.\n     * @param {Inflection[]} inflections - An array of inflections.\n     * @param {DefinitionSet} meaning - A set of definitions.\n\n     */\n  constructor (lemma, inflections, meaning = null) {\n    if (!lemma) {\n      throw new Error('Lemma should not be empty.')\n    }\n\n    if (!(lemma instanceof Lemma)) {\n      throw new Error('Lemma should be of Lemma object type.')\n    }\n\n    if (!inflections) {\n      throw new Error('Inflections data should not be empty.')\n    }\n\n    if (!Array.isArray(inflections)) {\n      throw new Error('Inflection data should be provided in an array.')\n    }\n\n    for (let inflection of inflections) {\n      if (!(inflection instanceof Inflection)) {\n        throw new Error('All inflection data should be of Inflection object type.')\n      }\n    }\n\n    this.lemma = lemma\n    this.inflections = inflections\n    this.meaning = meaning || new DefinitionSet(this.lemma.word, this.lemma.languageID)\n  }\n\n  getGroupedInflections () {\n    let lm = LMF.getLanguageForCode(this.lemma.language)\n    return lm.groupInflectionsForDisplay(this.inflections)\n  }\n\n  static readObject (jsonObject) {\n    let lemma = Lemma.readObject(jsonObject.lemma)\n    let inflections = []\n    for (let inflection of jsonObject.inflections) {\n      inflections.push(Inflection.readObject(inflection))\n    }\n\n    let lexeme = new Lexeme(lemma, inflections)\n    lexeme.meaning = DefinitionSet.readObject(jsonObject.meaning)\n    return lexeme\n  }\n\n  /**\n   * Get a sort function for an array of lexemes which applies a primary and secondary\n   * sort logic using the sort order specified for each feature. Sorts in descending order -\n   * higher sort order means it should come first\n   * @param {string} primary feature name to use as primary sort key\n   * @param {string} secondary feature name to use as secondary sort key\n   * @returns {Function} function which can be passed to Array.sort\n   */\n  static getSortByTwoLemmaFeatures (primary, secondary) {\n    return (a, b) => {\n      if (a.lemma.features[primary] && b.lemma.features[primary]) {\n        if (a.lemma.features[primary][0].sortOrder < b.lemma.features[primary][0].sortOrder) {\n          return 1\n        } else if (a.lemma.features[primary][0].sortOrder > b.lemma.features[primary][0].sortOrder) {\n          return -1\n        } else if (a.lemma.features[secondary] && b.lemma.features[secondary]) {\n          if (a.lemma.features[secondary][0].sortOrder < b.lemma.features[secondary][0].sortOrder) {\n            return 1\n          } else if (a.lemma.features[secondary][0].sortOrder > b.lemma.features[secondary][0].sortOrder) {\n            return -1\n          } else if (a.lemma.features[secondary] && !b.lemma.features[secondary]) {\n            return -1\n          } else if (!a.lemma.features[secondary] && b.lemma.features[secondary]) {\n            return 1\n          } else {\n            return 0\n          }\n        }\n      } else if (a.lemma.features[primary] && !b.lemma.features[primary]) {\n        return -1\n      } else if (!a.lemma.features[primary] && b.lemma.features[primary]) {\n        return 1\n      } else {\n        return 0\n      }\n    }\n  }\n}\nexport default Lexeme\n","import LMF from './language_model_factory'\nimport Lexeme from './lexeme.js'\n\nclass Homonym {\n    /**\n     * Initializes a Homonym object.\n     * @param {Lexeme[]} lexemes - An array of Lexeme objects.\n     * @param {string} form - the form which produces the homonyms\n     */\n  constructor (lexemes, form) {\n    if (!lexemes) {\n      throw new Error('Lexemes data should not be empty.')\n    }\n\n    if (!Array.isArray(lexemes)) {\n      throw new Error('Lexeme data should be provided in an array.')\n    }\n\n    for (let lexeme of lexemes) {\n      if (!(lexeme instanceof Lexeme)) {\n        throw new Error('All lexeme data should be of Lexeme object type.')\n      }\n    }\n\n    this.lexemes = lexemes\n    this.targetWord = form\n  }\n\n  static readObject (jsonObject) {\n    let lexemes = []\n    if (jsonObject.lexemes) {\n      for (let lexeme of jsonObject.lexemes) {\n        lexemes.push(Lexeme.readObject(lexeme))\n      }\n    }\n    let homonym = new Homonym(lexemes)\n    if (jsonObject.targetWord) {\n      homonym.targetWord = jsonObject.targetWord\n    }\n    return homonym\n  }\n\n    /**\n     * Returns a language code of a homonym (ISO 639-3).\n     * Homonym does not have a language property, only lemmas and inflections do. We assume that all lemmas\n     * and inflections within the same homonym will have the same language, and we can determine a language\n     * by using language property of the first lemma. We chan change this logic in the future if we'll need to.\n     * @returns {string} A language code, as defined in the `languages` object.\n     */\n  get language () {\n    return LMF.getLanguageCodeFromId(this.languageID)\n  }\n\n  /**\n   * Returns a language ID of a homonym.\n   * Homonym does not have a languageID property, only lemmas and inflections do. We assume that all lemmas\n   * and inflections within the same homonym will have the same language, and we can determine a language\n   * by using languageID property of the first lemma. We chan change this logic in the future if we'll need to.\n   * @returns {Symbol} A language ID, as defined in the `LANG_` constants.\n   */\n  get languageID () {\n    if (this.lexemes && this.lexemes[0] && this.lexemes[0].lemma && this.lexemes[0].lemma.languageID) {\n      return this.lexemes[0].lemma.languageID\n    } else {\n      throw new Error('Homonym has not been initialized properly. Unable to obtain language ID information.')\n    }\n  }\n}\nexport default Homonym\n","/**\n * An abstraction of an Alpheios resource provider\n */\nclass ResourceProvider {\n  /**\n   * @constructor\n   * @param {string} uri - a unique resource identifier for this provider\n   * @param {string} rights - rights text\n   * @param {Map} rightsTranslations - optional map of translated rights text - keys should be language of text, values the text\n   */\n  constructor (uri = '', rights = '', rightsTranslations = new Map([['default', rights]])) {\n    this.uri = uri\n    this.rights = rightsTranslations\n    if (!this.rights.has('default')) {\n      this.rights.set('default', rights)\n    }\n  }\n\n  /**\n   * @return a string representation of the resource provider, in the default language\n   */\n  toString () {\n    return this.rights.get('default')\n  }\n\n  /**\n   * Produce a string representation of the resource provider, in the requested locale if available\n   * @param {string} languageCode\n   * @return a string representation of the resource provider, in the requested locale if available\n   */\n  toLocaleString (languageCode) {\n    return this.rights.get(languageCode) || this.rights.get('default')\n  }\n\n  static getProxy (provider = null, target = {}) {\n    return new Proxy(target, {\n      get: function (target, name) {\n        return name === 'provider' ? provider : target[name]\n      }\n    })\n  }\n}\n\nexport default ResourceProvider\n"],"names":["Constants.LANG_DIR_LTR","Constants.LANG_UNIT_WORD","Constants.POFS_ADVERB","Constants.POFS_ADVERBIAL","Constants.POFS_ADJECTIVE","Constants.POFS_ARTICLE","Constants.POFS_CONJUNCTION","Constants.POFS_EXCLAMATION","Constants.POFS_INTERJECTION","Constants.POFS_NOUN","Constants.POFS_NUMERAL","Constants.POFS_PARTICLE","Constants.POFS_PREFIX","Constants.POFS_PREPOSITION","Constants.POFS_PRONOUN","Constants.POFS_SUFFIX","Constants.POFS_SUPINE","Constants.POFS_VERB","Constants.POFS_VERB_PARTICIPLE","Constants.GEND_MASCULINE","Constants.GEND_FEMININE","Constants.GEND_NEUTER","Constants.TYPE_REGULAR","Constants.TYPE_IRREGULAR","Constants.ORD_1ST","Constants.ORD_2ND","Constants.ORD_3RD","Constants.COMP_POSITIVE","Constants.COMP_SUPERLATIVE","Constants.COMP_COMPARITIVE","Constants.LANG_LATIN","Constants.STR_LANG_CODE_LA","Constants.STR_LANG_CODE_LAT","Constants.NUM_SINGULAR","Constants.NUM_PLURAL","Constants.CASE_NOMINATIVE","Constants.CASE_GENITIVE","Constants.CASE_DATIVE","Constants.CASE_ACCUSATIVE","Constants.CASE_ABLATIVE","Constants.CASE_LOCATIVE","Constants.CASE_VOCATIVE","Constants.ORD_4TH","Constants.ORD_5TH","Constants.TENSE_PRESENT","Constants.TENSE_IMPERFECT","Constants.TENSE_FUTURE","Constants.TENSE_PERFECT","Constants.TENSE_PLUPERFECT","Constants.TENSE_FUTURE_PERFECT","Constants.VOICE_PASSIVE","Constants.VOICE_ACTIVE","Constants.MOOD_INDICATIVE","Constants.MOOD_SUBJUNCTIVE","Constants.MOOD_IMPERATIVE","Constants.MOOD_PARTICIPLE","Constants.NUM_DUAL","Constants.TENSE_AORIST","Constants.VOICE_MEDIOPASSIVE","Constants.VOICE_MIDDLE","Constants.MOOD_OPTATIVE","Constants.LANG_GREEK","Constants.STR_LANG_CODE_GRC","Constants.LANG_DIR_RTL","Constants.LANG_ARABIC","Constants.STR_LANG_CODE_ARA","Constants.STR_LANG_CODE_AR","Constants.LANG_PERSIAN","Constants.STR_LANG_CODE_PER","Constants.STR_LANG_CODE_FAS","Constants.STR_LANG_CODE_FA","Constants.STR_LANG_CODE_FA_IR","LMF","i18n.i18n"],"mappings":"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"}