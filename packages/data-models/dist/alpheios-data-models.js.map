{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///../node_modules/uuid/lib/bytesToUuid.js","webpack:///../node_modules/uuid/lib/rng-browser.js","webpack:///../node_modules/uuid/v4.js","webpack:///./arabic_language_model.js","webpack:///./constants.js","webpack:///./definition-set.js","webpack:///./definition.js","webpack:///./driver.js","webpack:///./feature.js","webpack:///./feature_importer.js","webpack:///./feature_list.js","webpack:///./feature_type.js","webpack:///./greek_language_model.js","webpack:///./grm-feature.js","webpack:///./homonym.js","webpack:///./i18n.js","webpack:///./inflection.js","webpack:///./inflection_group.js","webpack:///./inflection_grouping_key.js","webpack:///./language_model.js","webpack:///./language_model_factory.js","webpack:///./latin_language_model.js","webpack:///./lemma.js","webpack:///./lexeme.js","webpack:///./persian_language_model.js","webpack:///./resource_provider.js","webpack:///./translation.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,8BAA8B;AAC9B,+BAA+B;AAC/B,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B;AAC3B,0BAA0B;;AAE1B;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AAChE;AACA,oCAAoC,KAAK,GAAG,KAAK,GAAG,KAAK,UAAU,KAAK;AACxE;AACA,qCAAqC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AAC1E;AACA,qCAAqC,KAAK;AAC1C;AACA,mCAAmC,KAAK;AACxC;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChzNA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,cAAc;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAsBA;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gCAAgC,SAAS,gDAAgD,EAAE;AAC3F;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,MAAM;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,6BAA6B,MAAM;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kDAAkD,OAAO;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;;AAEA;AACA;AACA,aAAa,kBAAkB;AAC/B,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA,8CAA8C,SAAS,yDAAyD,EAAE;AAClH;AACA;AACA;;AAEA;AACA;AACA,aAAa,kBAAkB;AAC/B,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7aA;AAAA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,sCAAsC;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,sBAAsB;AACnC;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,EAAE,6DAA6D;;AAEpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,+BAA+B;AACtC;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yEAAyE,8BAA8B,4BAA4B,2BAA2B;AAC9J;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAuE,4BAA4B,4BAA4B,2BAA2B;AAC1J;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7OA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,8BAA8B;AAC9B,+BAA+B;AAC/B,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B;AAC3B,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,GAAG,KAAK;AAChC;AACA,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,WAAW,KAAK,GAAG,KAAK;AACxB;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClRA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,6DAA6D;AACpE;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7KA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClJA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,gBAAgB;AAC/B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;;AAEA;AACA;AACA;AACA,KAAK,EAAE,6DAA6D;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,8BAA8B;AACnE,wBAAwB,2BAA2B;AACnD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/MA;AAAA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpBA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B;AAC3B,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL,uCAAuC,YAAY,2BAA2B,KAAK;AACnF;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACdcAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kCAAkC,KAAK;AACvC;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kCAAkC,YAAY;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL,sCAAsC,aAAa;AACnD;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oHAAsE,yCAAyC;AAC/G;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AC7kBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,OAAO;AACrB,SAAS,OAAO;AAChB,SAAS,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvHA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,8BAA8B;AAC9B,+BAA+B;AAC/B,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B;AAC3B,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/MA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,aAAa,SAAS;AACtB,aAAa,OAAO;;AAEpB,aAAa,YAAY;AACzB;AACA,mEAAmE;AACnE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK,EAAE,6DAA6D;;AAEpE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AClIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,aAAa;AAC1B,aAAa,cAAc;;AAE3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/GA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B,8BAA8B;;AAE9B,+BAA+B;;AAE/B,gCAAgC;;AAEhC,iCAAiC;;AAEjC,2BAA2B;;AAE3B,0BAA0B;;AAE1B;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;AACA;;;;;;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oEAAoE,mCAAmC;AACvG;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"alpheios-data-models.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./driver.js\");\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\nimport Feature from './feature.js'\n\nlet typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class ArabicLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_ARABIC }\n  static get languageCode () { return Constants.STR_LANG_CODE_ARA }\n  static get languageCodes () { return [Constants.STR_LANG_CODE_ARA, Constants.STR_LANG_CODE_AR] }\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_RTL }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * @override LanguageModel#alternateWordEncodings\n   */\n  static alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    // tanwin (& tatweel) - drop FATHATAN, DAMMATAN, KASRATAN, TATWEEL\n    let tanwin = word.replace(/[\\u{064B}\\u{064C}\\u{064D}\\u{0640}]/ug, '')\n    // hamzas - replace ALEF WITH MADDA ABOVE, ALEF WITH HAMZA ABOVE/BELOW with ALEF\n    let hamza = tanwin.replace(/[\\u{0622}\\u{0623}\\u{0625}]/ug, '\\u{0627}')\n    // harakat - drop FATHA, DAMMA, KASRA, SUPERSCRIPT ALEF, ALEF WASLA\n    let harakat = hamza.replace(/[\\u{064E}\\u{064F}\\u{0650}\\u{0670}\\u{0671}]/ug, '')\n    // shadda\n    let shadda = harakat.replace(/\\u{0651}/ug, '')\n    // sukun\n    let sukun = shadda.replace(/\\u{0652}/ug, '')\n    // alef\n    let alef = sukun.replace(/\\u{0627}/ug, '')\n    let alternates = new Map([\n      ['tanwin', tanwin],\n      ['hamza', hamza],\n      ['harakat', harakat],\n      ['shadda', shadda],\n      ['sukun', sukun],\n      ['alef', alef]\n    ])\n    if (encoding !== null && alternates.has(encoding)) {\n      return [alternates.get(encoding)]\n    } else {\n      return Array.from(alternates.values())\n    }\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n\n  /**\n   * Aggregate inflections for display according to language model characteristics\n   */\n  static aggregateInflectionsForDisplay (inflections) {\n    // TODO at some point we might want to be able to check the provider in here\n    // because this really only applies to the specifics of the Aramorph parser\n    let aggregated = []\n    let aggregates = { [Constants.POFS_NOUN]: [], [Constants.POFS_ADJECTIVE]: [], [Constants.POFS_NOUN_PROPER]: [] }\n    for (let infl of inflections) {\n      if (infl[Feature.types.morph] && infl[Feature.types.morph].value.match(/ADJ[uaiNK]/)) {\n        aggregates[Constants.POFS_ADJECTIVE].push(infl)\n      } else if (infl[Feature.types.morph] && infl[Feature.types.morph].value.match(/NOUN[uaiNK]/)) {\n        aggregates[Constants.POFS_NOUN].push(infl)\n      } else if (infl[Feature.types.morph] && infl[Feature.types.morph].value.match(/NOUN_PROP[uaiNK]/)) {\n        aggregates[Constants.POFS_NOUN_PROPER].push(infl)\n      } else {\n        // we are also going to keep the examples out of the display for now\n        infl.example = null\n        aggregated.push(infl)\n      }\n    }\n    for (let type of Object.keys(aggregates)) {\n      let base = aggregated.filter((i) => i[Feature.types.part].value === type)\n      if (base.length !== 1) {\n        // if we don't have the base form then we don't really know what to do here\n        // so just put the inflection back in the ones available for display\n        aggregated.push(...aggregates[type])\n      }\n      // we may decide we want to keep the extra suffix and morph information\n      // from the alternate inflections but for now we just will drop it from\n      // the inflections that are displayed\n    }\n    return aggregated\n  }\n}\n","/* eslint-disable no-unused-vars */\nexport const LANG_UNIT_WORD = Symbol('word')\nexport const LANG_UNIT_CHAR = Symbol('char')\nexport const LANG_DIR_LTR = Symbol('ltr')\nexport const LANG_DIR_RTL = Symbol('rtl')\nexport const LANG_UNDEFINED = Symbol('undefined')\nexport const LANG_LATIN = Symbol('latin')\nexport const LANG_GREEK = Symbol('greek')\nexport const LANG_ARABIC = Symbol('arabic')\nexport const LANG_PERSIAN = Symbol('persian')\nexport const STR_LANG_CODE_UNDEFINED = 'undefined'\nexport const STR_LANG_CODE_LAT = 'lat'\nexport const STR_LANG_CODE_LA = 'la'\nexport const STR_LANG_CODE_GRC = 'grc'\nexport const STR_LANG_CODE_ARA = 'ara'\nexport const STR_LANG_CODE_AR = 'ar'\nexport const STR_LANG_CODE_FAS = 'fas'\nexport const STR_LANG_CODE_PER = 'per'\nexport const STR_LANG_CODE_FA_IR = 'fa-IR'\nexport const STR_LANG_CODE_FA = 'fa'\n// parts of speech\nexport const POFS_ADJECTIVE = 'adjective'\nexport const POFS_ADVERB = 'adverb'\nexport const POFS_ADVERBIAL = 'adverbial'\nexport const POFS_ARTICLE = 'article'\nexport const POFS_CONJUNCTION = 'conjunction'\nexport const POFS_EXCLAMATION = 'exclamation'\nexport const POFS_INTERJECTION = 'interjection'\nexport const POFS_NOUN = 'noun'\nexport const POFS_NOUN_PROPER = 'proper noun'\nexport const POFS_NUMERAL = 'numeral'\nexport const POFS_PARTICLE = 'particle'\nexport const POFS_PREFIX = 'prefix'\nexport const POFS_PREPOSITION = 'preposition'\nexport const POFS_PRONOUN = 'pronoun'\nexport const POFS_SUFFIX = 'suffix'\nexport const POFS_SUPINE = 'supine'\nexport const POFS_VERB = 'verb'\nexport const POFS_VERB_PARTICIPLE = 'verb participle'\n// gender\nexport const GEND_MASCULINE = 'masculine'\nexport const GEND_FEMININE = 'feminine'\nexport const GEND_NEUTER = 'neuter'\nexport const GEND_COMMON = 'common'\nexport const GEND_ANIMATE = 'animate'\nexport const GEND_INANIMATE = 'inanimate'\n// Polish gender types\nexport const GEND_PERSONAL_MASCULINE = 'personal masculine'\nexport const GEND_ANIMATE_MASCULINE = 'animate masculine'\nexport const GEND_INANIMATE_MASCULINE = 'inanimate masculine'\n// comparative\nexport const COMP_POSITIVE = 'positive'\nexport const COMP_COMPARITIVE = 'comparative'\nexport const COMP_SUPERLATIVE = 'superlative'\n// case\nexport const CASE_ABESSIVE = 'abessive'\nexport const CASE_ABLATIVE = 'ablative'\nexport const CASE_ABSOLUTIVE = 'absolutive'\nexport const CASE_ACCUSATIVE = 'accusative'\nexport const CASE_ADDIRECTIVE = 'addirective'\nexport const CASE_ADELATIVE = 'adelative'\nexport const CASE_ADESSIVE = 'adessive'\nexport const CASE_ADVERBIAL = 'adverbial'\nexport const CASE_ALLATIVE = 'allative'\nexport const CASE_ANTESSIVE = 'antessive'\nexport const CASE_APUDESSIVE = 'apudessive'\nexport const CASE_AVERSIVE = 'aversive'\nexport const CASE_BENEFACTIVE = 'benefactive'\nexport const CASE_CARITIVE = 'caritive'\nexport const CASE_CAUSAL = 'causal'\nexport const CASE_CAUSAL_FINAL = 'causal-final'\nexport const CASE_COMITATIVE = 'comitative'\nexport const CASE_DATIVE = 'dative'\nexport const CASE_DELATIVE = 'delative'\nexport const CASE_DIRECT = 'direct'\nexport const CASE_DISTRIBUTIVE = 'distributive'\nexport const CASE_DISTRIBUTIVE_TEMPORAL = 'distributive-temporal'\nexport const CASE_ELATIVE = 'elative'\nexport const CASE_ERGATIVE = 'ergative'\nexport const CASE_ESSIVE = 'essive'\nexport const CASE_ESSIVE_FORMAL = 'essive-formal'\nexport const CASE_ESSIVE_MODAL = 'essive-modal'\nexport const CASE_EQUATIVE = 'equative'\nexport const CASE_EVITATIVE = 'evitative'\nexport const CASE_EXESSIVE = 'exessive'\nexport const CASE_FINAL = 'final'\nexport const CASE_FORMAL = 'formal'\nexport const CASE_GENITIVE = 'genitive'\nexport const CASE_ILLATIVE = 'illative'\nexport const CASE_INELATIVE = 'inelative'\nexport const CASE_INESSIVE = 'inessive'\nexport const CASE_INSTRUCTIVE = 'instructive'\nexport const CASE_INSTRUMENTAL = 'instrumental'\nexport const CASE_INSTRUMENTAL_COMITATIVE = 'instrumental-comitative'\nexport const CASE_INTRANSITIVE = 'intransitive'\nexport const CASE_LATIVE = 'lative'\nexport const CASE_LOCATIVE = 'locative'\nexport const CASE_MODAL = 'modal'\nexport const CASE_MULTIPLICATIVE = 'multiplicative'\nexport const CASE_NOMINATIVE = 'nominative'\nexport const CASE_PARTITIVE = 'partitive'\nexport const CASE_PEGATIVE = 'pegative'\nexport const CASE_PERLATIVE = 'perlative'\nexport const CASE_POSSESSIVE = 'possessive'\nexport const CASE_POSTELATIVE = 'postelative'\nexport const CASE_POSTDIRECTIVE = 'postdirective'\nexport const CASE_POSTESSIVE = 'postessive'\nexport const CASE_POSTPOSITIONAL = 'postpositional'\nexport const CASE_PREPOSITIONAL = 'prepositional'\nexport const CASE_PRIVATIVE = 'privative'\nexport const CASE_PROLATIVE = 'prolative'\nexport const CASE_PROSECUTIVE = 'prosecutive'\nexport const CASE_PROXIMATIVE = 'proximative'\nexport const CASE_SEPARATIVE = 'separative'\nexport const CASE_SOCIATIVE = 'sociative'\nexport const CASE_SUBDIRECTIVE = 'subdirective'\nexport const CASE_SUBESSIVE = 'subessive'\nexport const CASE_SUBELATIVE = 'subelative'\nexport const CASE_SUBLATIVE = 'sublative'\nexport const CASE_SUPERDIRECTIVE = 'superdirective'\nexport const CASE_SUPERESSIVE = 'superessive'\nexport const CASE_SUPERLATIVE = 'superlative'\nexport const CASE_SUPPRESSIVE = 'suppressive'\nexport const CASE_TEMPORAL = 'temporal'\nexport const CASE_TERMINATIVE = 'terminative'\nexport const CASE_TRANSLATIVE = 'translative'\nexport const CASE_VIALIS = 'vialis'\nexport const CASE_VOCATIVE = 'vocative'\nexport const MOOD_ADMIRATIVE = 'admirative'\nexport const MOOD_COHORTATIVE = 'cohortative'\nexport const MOOD_CONDITIONAL = 'conditional'\nexport const MOOD_DECLARATIVE = 'declarative'\nexport const MOOD_DUBITATIVE = 'dubitative'\nexport const MOOD_ENERGETIC = 'energetic'\nexport const MOOD_EVENTIVE = 'eventive'\nexport const MOOD_GENERIC = 'generic'\nexport const MOOD_GERUNDIVE = 'gerundive'\nexport const MOOD_HYPOTHETICAL = 'hypothetical'\nexport const MOOD_IMPERATIVE = 'imperative'\nexport const MOOD_INDICATIVE = 'indicative'\nexport const MOOD_INFERENTIAL = 'inferential'\nexport const MOOD_INFINITIVE = 'infinitive'\nexport const MOOD_INTERROGATIVE = 'interrogative'\nexport const MOOD_JUSSIVE = 'jussive'\nexport const MOOD_NEGATIVE = 'negative'\nexport const MOOD_OPTATIVE = 'optative'\nexport const MOOD_PARTICIPLE = 'participle'\nexport const MOOD_PRESUMPTIVE = 'presumptive'\nexport const MOOD_RENARRATIVE = 'renarrative'\nexport const MOOD_SUBJUNCTIVE = 'subjunctive'\nexport const MOOD_SUPINE = 'supine'\nexport const NUM_SINGULAR = 'singular'\nexport const NUM_PLURAL = 'plural'\nexport const NUM_DUAL = 'dual'\nexport const NUM_TRIAL = 'trial'\nexport const NUM_PAUCAL = 'paucal'\nexport const NUM_SINGULATIVE = 'singulative'\nexport const NUM_COLLECTIVE = 'collective'\nexport const NUM_DISTRIBUTIVE_PLURAL = 'distributive plural'\nexport const NRL_CARDINAL = 'cardinal'\nexport const NRL_ORDINAL = 'ordinal'\nexport const NRL_DISTRIBUTIVE = 'distributive'\nexport const NURL_NUMERAL_ADVERB = 'numeral adverb'\nexport const ORD_1ST = '1st'\nexport const ORD_2ND = '2nd'\nexport const ORD_3RD = '3rd'\nexport const ORD_4TH = '4th'\nexport const ORD_5TH = '5th'\nexport const ORD_6TH = '6th'\nexport const ORD_7TH = '7th'\nexport const ORD_8TH = '8th'\nexport const ORD_9TH = '9th'\nexport const TENSE_AORIST = 'aorist'\nexport const TENSE_FUTURE = 'future'\nexport const TENSE_FUTURE_PERFECT = 'future perfect'\nexport const TENSE_IMPERFECT = 'imperfect'\nexport const TENSE_PAST_ABSOLUTE = 'past absolute'\nexport const TENSE_PERFECT = 'perfect'\nexport const TENSE_PLUPERFECT = 'pluperfect'\nexport const TENSE_PRESENT = 'present'\nexport const VKIND_TO_BE = 'to be'\nexport const VKIND_COMPOUNDS_OF_TO_BE = 'compounds of to be'\nexport const VKIND_TAKING_ABLATIVE = 'taking ablative'\nexport const VKIND_TAKING_DATIVE = 'taking dative'\nexport const VKIND_TAKING_GENITIVE = 'taking genitive'\nexport const VKIND_TRANSITIVE = 'transitive'\nexport const VKIND_INTRANSITIVE = 'intransitive'\nexport const VKIND_IMPERSONAL = 'impersonal'\nexport const VKIND_DEPONENT = 'deponent'\nexport const VKIND_SEMIDEPONENT = 'semideponent'\nexport const VKIND_PERFECT_DEFINITE = 'perfect definite'\nexport const VOICE_ACTIVE = 'active'\nexport const VOICE_PASSIVE = 'passive'\nexport const VOICE_MEDIOPASSIVE = 'mediopassive'\nexport const VOICE_IMPERSONAL_PASSIVE = 'impersonal passive'\nexport const VOICE_MIDDLE = 'middle'\nexport const VOICE_ANTIPASSIVE = 'antipassive'\nexport const VOICE_REFLEXIVE = 'reflexive'\nexport const VOICE_RECIPROCAL = 'reciprocal'\nexport const VOICE_CAUSATIVE = 'causative'\nexport const VOICE_ADJUTATIVE = 'adjutative'\nexport const VOICE_APPLICATIVE = 'applicative'\nexport const VOICE_CIRCUMSTANTIAL = 'circumstantial'\nexport const VOICE_DEPONENT = 'deponent'\nexport const TYPE_IRREGULAR = 'irregular'\nexport const TYPE_REGULAR = 'regular'\n// Classes\nexport const CLASS_PERSONAL = 'personal'\nexport const CLASS_REFLEXIVE = 'reflexive'\nexport const CLASS_POSSESSIVE = 'possessive'\nexport const CLASS_DEMONSTRATIVE = 'demonstrative'\nexport const CLASS_RELATIVE = 'relative'\nexport const CLASS_INTERROGATIVE = 'interrogative'\nexport const CLASS_GENERAL_RELATIVE = 'general relative'\nexport const CLASS_INDEFINITE = 'indefinite'\nexport const CLASS_INTENSIVE = 'intensive'\nexport const CLASS_RECIPROCAL = 'reciprocal'\n/* eslit-enable no-unused-vars */\n","import Definition from './definition'\n\nexport default class DefinitionSet {\n  constructor (lemmaWord, languageID) {\n    this.lemmaWord = lemmaWord\n    this.languageID = languageID\n\n    this.shortDefs = []\n    this.fullDefs = []\n  }\n\n  /**\n   * A function that is used to instantiate a DefinitionSet object from a JSON object.\n   * @param {Object} jsonObject - A JSON object representing DefinitionSet data.\n   * @return {DefinitionSet} A DefinitionSet object populated with data from JSON object.\n   */\n  static readObject (jsonObject) {\n    let definitionSet = new DefinitionSet(jsonObject.lemmaWord, jsonObject.languageID)\n\n    for (let shortDef of jsonObject.shortDefs) {\n      definitionSet.shortDefs.push(Definition.readObject(shortDef))\n    }\n    for (let fullDef of jsonObject.fullDefs) {\n      definitionSet.fullDefs.push(Definition.readObject(fullDef))\n    }\n\n    return definitionSet\n  }\n\n  /**\n   * Check to see if the DefinitionSet is empty\n   * @return {boolean} true if empty false if there is at least one definition\n   */\n  isEmpty () {\n    return this.shortDefs.length === 0 && this.fullDefs.length === 0\n  }\n\n  /**\n   * Appends one or more definitions to a list of short definitions.\n   * @param {Definition | Definition[]} definitions - One or more definition objects to add.\n   * @return {Definition[]} A list of short definitions this object has.\n   */\n  appendShortDefs (definitions) {\n    // TODO: check for duplicates?\n    if (definitions) {\n      if (!Array.isArray(definitions)) { definitions = [definitions] }\n      this.shortDefs = this.shortDefs.concat(definitions)\n    }\n    return this.shortDefs\n  }\n\n  /**\n   * clear accumulated short definitions\n   */\n  clearShortDefs () {\n    this.shortDefs = []\n  }\n\n  /**\n   * Appends one or more definitions to a list of full definitions.\n   * @param {Definition | Definition[]} definitions - One or more definition objects to add.\n   * @return {Definition[]} A list of full definitions this object has.\n   */\n  appendFullDefs (definitions) {\n    // TODO: check for duplicates?\n    if (definitions) {\n      if (!Array.isArray(definitions)) { definitions = [definitions] }\n      this.fullDefs = this.fullDefs.concat(definitions)\n    }\n    return this.fullDefs\n  }\n\n  /**\n   * clear accumulated full definitions\n   */\n  clearFullDefs () {\n    this.fullDefs = []\n  }\n}\n","class Definition {\n  constructor (text, language, format, lemmaText) {\n    this.text = text\n    this.language = language\n    this.format = format\n    this.lemmaText = lemmaText\n  }\n\n  static readObject (jsonObject) {\n    return new Definition(jsonObject.text, jsonObject.language, jsonObject.format, jsonObject.lemmaText)\n  }\n}\nexport default Definition\n","'use strict'\nimport * as Constants from './constants.js'\nimport Definition from './definition.js'\nimport DefinitionSet from './definition-set'\nimport Feature from './feature.js'\nimport GrmFeature from './grm-feature.js'\nimport FeatureType from './feature_type.js'\nimport FeatureList from './feature_list.js'\nimport FeatureImporter from './feature_importer.js'\nimport LanguageModelFactory from './language_model_factory.js'\nimport Homonym from './homonym.js'\nimport Lexeme from './lexeme.js'\nimport Lemma from './lemma.js'\nimport Inflection from './inflection.js'\nimport LatinLanguageModel from './latin_language_model.js'\nimport GreekLanguageModel from './greek_language_model.js'\nimport ArabicLanguageModel from './arabic_language_model.js'\nimport PersianLanguageModel from './persian_language_model.js'\nimport ResourceProvider from './resource_provider.js'\n\nimport Translation from './translation.js'\n\nexport {\n  Constants,\n  Definition,\n  DefinitionSet,\n  Feature,\n  GrmFeature,\n  FeatureType,\n  FeatureList,\n  FeatureImporter,\n  Inflection,\n  LanguageModelFactory,\n  Homonym,\n  Lexeme,\n  Lemma,\n  LatinLanguageModel,\n  GreekLanguageModel,\n  ArabicLanguageModel,\n  PersianLanguageModel,\n  ResourceProvider,\n\n  Translation }\n","import LanguageModelFactory from './language_model_factory.js'\nimport FeatureImporter from './feature_importer.js'\nimport * as i18n from './i18n.js'\n\n/**\n * A grammatical feature object, that can replace both Feature and FeatureType objects.\n */\nexport default class Feature {\n  /**\n   *\n   * @param {string} type - A type of the feature, allowed values are specified in 'type' getter.\n   * @param {string | string[] | string[][]} data - Single or multiple values, in different combinations.\n   *\n   * If a single value with no sort order is provided, data format will be:\n   *  value\n   *  This value will be assigned a default sort order.\n   *\n   * If a single value with sort order is provided, data format will be:\n   *  [[value, sortOrder]]\n   *\n   * If multiple values without sort order are provided, data format will be:\n   *  [value1, value2, value3, ...]\n   * Items will be assigned a sort order according to their order in an array, starting from one.\n   *\n   * If multiple values with sort order are provided, data format will be:\n   *  [[value1, sortOrder1], [value2, sortOrder2], [value3, sortOrder3], ...]\n   * If a sort order is omitted anywhere, it will be set to a default sort order.\n   *\n   * Each value of a feature has its `sortOrder` property. This value is used to soft values of a feature\n   * between themselves. Feature object has a `sortOrder` property of its own, too. It is used\n   * to compare two Feature objects between themselves.\n   *\n   * @param {symbol} languageID - A language ID of a feature\n   * @param {number} sortOrder - A sort order of a feature when multiple features are compared.\n   * @param allowedValues - If feature has a restricted set of allowed values, here will be a list of those\n   * values. An order of those values can define a sort order.\n   */\n  constructor (type, data, languageID, sortOrder = 1, allowedValues = []) {\n    if (!Feature.isAllowedType(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!data) {\n      throw new Error('Feature should have a non-empty value(s).')\n    }\n    if (!languageID) {\n      throw new Error('No language ID is provided')\n    }\n\n    this.type = type\n    this.languageID = languageID\n    this.sortOrder = sortOrder\n    this.allowedValues = allowedValues\n\n    // `_data` is an array\n    this._data = Feature.dataValuesFromInput(data)\n    this.sort()\n  }\n\n  static dataValuesFromInput (data) {\n    let normalized\n    if (!Array.isArray(data)) {\n      // Single value with no sort order\n      normalized = [[data, this.defaultSortOrder]]\n    } else if (!Array.isArray(data[0])) {\n      // Multiple values without any sort order, default sort order will be used\n      // we reverse because sortOrder is numeric descending (i.e. 2 is before 1)\n      normalized = data.map((v, i) => [v, data.length - i])\n    } else {\n      // Value has all the data, including a sort order\n      normalized = data\n    }\n    return normalized.map(d => { return { value: d[0], sortOrder: Number.parseInt(d[1]) } })\n  }\n\n  /**\n   *\n   * @param featureData\n   */\n  static newFromFtr (featureData) {\n\n  }\n\n  static get types () {\n    return {\n      /**\n       * @deprecated : Use `fullForm` where appropriate instead\n       */\n      word: 'word',\n      fullForm: 'full form',\n      hdwd: 'headword',\n      part: 'part of speech', // Part of speech\n      number: 'number',\n      'case': 'case',\n      grmCase: 'case', // A synonym of `case`\n      declension: 'declension',\n      gender: 'gender',\n      type: 'type',\n      'class': 'class',\n      grmClass: 'class', // A synonym of `class`\n      conjugation: 'conjugation',\n      comparison: 'comparison',\n      tense: 'tense',\n      voice: 'voice',\n      mood: 'mood',\n      person: 'person',\n      frequency: 'frequency', // How frequent this word is\n      meaning: 'meaning', // Meaning of a word\n      source: 'source', // Source of word definition\n      footnote: 'footnote', // A footnote for a word's ending\n      dialect: 'dialect', // a dialect identifier\n      note: 'note', // a general note\n      pronunciation: 'pronunciation',\n      age: 'age',\n      area: 'area',\n      geo: 'geo', // geographical data\n      kind: 'kind', // verb kind information\n      derivtype: 'derivtype',\n      stemtype: 'stemtype',\n      morph: 'morph', // general morphological information\n      var: 'var' // variance?\n    }\n  }\n\n  static isAllowedType (value) {\n    return Object.values(this.types).includes(`${value}`)\n  }\n\n  static get defaultSortOrder () {\n    return 1\n  }\n\n  static get joinSeparator () {\n    return ' '\n  }\n\n  static get defaultImporterName () {\n    return 'default'\n  }\n\n  /**\n   * Test to see if this feature allows unrestricted values.\n   * @returns {boolean} true if unrestricted false if not.\n   */\n  get allowsUnrestrictedValues () {\n    /*\n    If `allowedValues` array is empty then there are no value restrictions\n     */\n    return this.allowedValues.length === 0\n  }\n\n  /**\n   * Defines a sort order of feature values. Values are sorted according to their sort order\n   * (a number starting from one). If several values have the same sort order, they will be\n   * sorted alphabetically according to their values.\n   * Sort order is deterministic.\n   */\n  sort () {\n    this._data.sort((a, b) => a.sortOrder !== b.sortOrder ? b.sortOrder - a.sortOrder : a.value.localeCompare(b.value))\n  }\n\n  /**\n   * Compares a feature's values to another feature's values for sorting\n   * @param {Feature} otherFeature the feature to compare this feature's values to\n   * @return {integer} >=1 if this feature should be sorted first, 0 if they are equal and -1 if this feature should be sorted second\n   */\n  compareTo (otherFeature) {\n    // the data values are sorted upon construction and insertion so we only should need to look at the first values\n    // feature sortOrders are descending (i.e. 5 sorts higher than 1)\n    return otherFeature._data[0].sortOrder - this._data[0].sortOrder\n  }\n\n  get items () {\n    return this._data\n  }\n\n  /**\n   * Returns a single value string. If feature has a single value, this value will be returned.\n   * If it has multiple values, those values will be concatenated with a default separator and\n   * returned in a single string. Values composing this string are sorted according\n   * to each value's sort order.\n   * @return {string} A single value string.\n   */\n  get value () {\n    return this.values.join(this.constructor.joinSeparator)\n  }\n\n  /**\n   * Returns an array of string values of a feature, sorted according to each item's sort order.\n   * If a feature contains a single feature, an array with one value will be returned.\n   * @return {string[]} An array of string values.\n   */\n  get values () {\n    return this._data.map(v => v.value)\n  }\n\n  /**\n   * Retrieves a value object by name. Can be used to update a value object directly.\n   * @param {string} featureVale - A feature value of an object to retrieve.\n   */\n  getValue (featureVale) {\n    return this._data.find(v => v.value === featureVale)\n  }\n\n  /**\n   * Returns a number of feature values.\n   * @retrun {number] A quantity of feature values\n   */\n  get valQty () {\n    return this._data.length\n  }\n\n  get isEmpty () {\n    return this.valQty === 0\n  }\n\n  get isSingle () {\n    return this.valQty === 1\n  }\n\n  get isMultiple () {\n    return this.valQty > 1\n  }\n\n  /**\n   * A string representation of a feature.\n   * @return {string}\n   */\n  toString () {\n    return this.value\n  }\n\n  /**\n   * Examines the feature for a specific value.\n   * @param {string} value\n   * @returns {boolean} true if the value is included in the feature's values.\n   */\n  hasValue (value) {\n    return this.values.includes(value)\n  }\n\n  /**\n   * Checks if this feature has all value from an array.\n   * @param {string[]} values - An array of values to check for.\n   * @returns {boolean} true if the value is included in the feature's values.\n   */\n  hasValues (values) {\n    let hasValues = true\n    for (let value of values) {\n      hasValues = hasValues && this.hasValue(value)\n    }\n    return hasValues\n  }\n\n  /**\n   * Checks if this feature has some value from an array.\n   * @param {string[]} values - An array of values to check for.\n   * @returns {boolean} true if the value is included in the feature's values.\n   */\n  hasSomeValues (values) {\n    let hasValues = false\n    for (let value of values) {\n      hasValues = hasValues || this.hasValue(value)\n    }\n    return hasValues\n  }\n\n  get valuesUnrestricted () {\n    return this.allowedValues.length === 0\n  }\n\n  /**\n   * Two features are considered fully equal if they are of the same type, have the same language,\n   * and the same set of feature values in the same order.\n   * @param {Feature} feature - A GrmFtr object this feature should be compared with.\n   * @return {boolean} True if features are equal, false otherwise.\n   */\n  isEqual (feature) {\n    return this.type === feature.type &&\n      LanguageModelFactory.compareLanguages(this.languageID, feature.languageID) &&\n      this.value === feature.value\n  }\n\n  /**\n   * Adds a single new value to the existing feature object.\n   * This function is chainable.\n   * @param {string} value - A feature value.\n   * @param {number} sortOrder - A sort order.\n   * @return {Feature} - Self reference for chaining.\n   */\n  addValue (value, sortOrder = this.constructor.defaultSortOrder) {\n    if (!this.hasValue(value)) {\n      this._data.push({\n        value: value,\n        sortOrder: sortOrder\n      })\n      this.sort() // Resort an array to place an inserted value to the proper place\n    } else {\n      console.warn(`Value \"${value}\" already exists. If you want to change it, use \"getValue\" to access it directly.`)\n    }\n    return this\n  }\n\n  /**\n   * Adds multiple new values to the existing feature object.\n   * This function is chainable.\n   * @param {string | string[] | string[][]} data - Single or multiple values, in different combinations.\n   * @return {Feature} - Self reference for chaining.\n   */\n  addValues (data) {\n    let normalizedData = this.constructor.dataValuesFromInput(data)\n    let values = normalizedData.map(v => v.value)\n    if (!this.hasSomeValues(values)) {\n      this._data = this._data.concat(normalizedData)\n      this.sort() // Resort an array to place an inserted value to the proper place\n    } else {\n      console.warn(`One or several values from \"${values}\" already exist. If you want to change it, use \"getValue\" to access a value directly.`)\n    }\n    return this\n  }\n\n  /**\n   * Removes a single value from the existing feature object.\n   * @param value\n   */\n  removeValue (value) {\n    // TODO: Do we need it?\n    console.warn(`This feature is not implemented yet`)\n  }\n\n  /**\n   * Creates a new single value Feature object of the same type and same language,\n   * but with a different feature value.\n   * This can be used when one feature defines a type and it is necessary\n   * to create other items of the same type.\n   * @param {string} value - A value of a feature.\n   * @param {number} sortOrder.\n   * @return {Feature} A new Ftr object.\n   */\n  createFeature (value, sortOrder = this.constructor.defaultSortOrder) {\n    // TODO: Add a check of if the value exists in a source Feature object\n    return new Feature(this.type, [[value, sortOrder]], this.languageID, this.sortOrder, this.allowedValues)\n  }\n\n  /**\n   * Creates a multiple value Feature object of the same type and same language,\n   * but with a different feature values.\n   * @param {string | string[] | string[][]} data - Single or multiple values, in different combinations,\n   * formatted according to rules described in a Ftr constructor.\n   * @return {Feature} A new Ftr object.\n   */\n  createFeatures (data) {\n    return new Feature(this.type, data, this.languageID, this.sortOrder, this.allowedValues)\n  }\n\n  /**\n   * Create a copy of the feature object.\n   */\n  getCopy () {\n    let values = this._data.map(item => [item.value, item.sortOrder])\n    return new Feature(this.type, values, this.languageID, this.sortOrder, this.allowedValues.slice())\n  }\n\n  /**\n   * A locale-specific abbreviation for a feature's values.\n   * @return {string[]}\n   */\n  toLocaleStringAbbr (lang = 'en') {\n    return this.values.map(v => i18n.i18n[lang][v] ? i18n.i18n[lang][v].abbr : v).join(this.constructor.joinSeparator)\n  }\n\n  /**\n   * Adds an importer to the internal list.\n   * @param {string} name - A name of an importer.\n   * @param {FeatureImporter} importer - A `FeatureImporter` object.\n   */\n  addImporter (importer = new FeatureImporter(), name = this.constructor.defaultImporterName) {\n    if (!this.importers) {\n      this.importers = new Map()\n    }\n    this.importers.set(name, importer)\n    return importer\n  }\n\n  getImporter (name = this.constructor.defaultImporterName) {\n    if (!this.importers || !this.importers.has(name)) {\n      throw new Error(`Importer \"${name}\" does not exist`)\n    }\n    return this.importers.get(name)\n  }\n\n  /**\n   * Adds feature values from the imported values.\n   * @param {string | string[]} foreignData - A single value or an array of values from a third-party source.\n   * @param {string} name - A name of an importer.\n   * @return {Feature} - A new Ftr object.\n   */\n  addFromImporter (foreignData, name = this.constructor.defaultImporterName) {\n    if (!this.importers || !this.importers.has(name)) {\n      throw new Error(`Importer \"${name}\" does not exist`)\n    }\n    const importer = this.importers.get(name)\n    foreignData = this.constructor.dataValuesFromInput(foreignData)\n    this._data.push(...foreignData.map(fv => { return { value: importer.get(fv.value), sortOrder: fv.sortOrder } }))\n    this.sort()\n    return this\n  }\n\n  /**\n   * Creates a new feature of the same type and with the same language from the imported values.\n   * @param {string | string[]} foreignData - A single value or an array of values from a third-party source.\n   * @param {string} name - A name of an importer.\n   * @return {Feature} - A new Ftr object.\n   */\n  createFromImporter (foreignData, name = this.constructor.defaultImporterName) {\n    if (!this.importers || !this.importers.has(name)) {\n      throw new Error(`Importer \"${name}\" does not exist`)\n    }\n    const importer = this.importers.get(name)\n    if (!Array.isArray(foreignData)) {\n      foreignData = [foreignData]\n    }\n    let values = foreignData.map(fv => importer.get(fv))\n    /*\n    Some values may be mapped into multiple values. For them an importer will return an array of values instead of a single value.\n    The values will be a multidimensional array that will require flattening.\n     */\n    values = values.reduce((acc, cv) => acc.concat(cv), [])\n    return new Feature(this.type, values, this.languageID, this.sortOrder, this.allowedValues)\n  }\n}\n","class FeatureImporter {\n  /**\n   * @param defaults\n   * @param {boolean} returnUnknown - If true, and a source value is not found in the importer,\n   * a source value will be returned without any change (a passthrough). If false, an Error\n   * will be thrown for unknown source values.\n   * @return {FeatureImporter}\n   */\n  constructor (defaults = [], returnUnknown = false) {\n    this.hash = {}\n    for (let value of defaults) {\n      this.map(value, value)\n    }\n    this.returnUnknown = returnUnknown\n    return this\n  }\n\n  /**\n   * Sets mapping between external imported value and one or more library standard values. If an importedValue\n   * is already in a hash table, old libraryValue will be overwritten with the new one.\n   * @param {string} importedValue - External value\n   * @param {Object | Object[] | string | string[]} libraryValue - Library standard value\n   */\n  map (importedValue, libraryValue) {\n    if (!importedValue) {\n      throw new Error('Imported value should not be empty.')\n    }\n\n    if (!libraryValue) {\n      throw new Error('Library value should not be empty.')\n    }\n\n    this.hash[importedValue] = libraryValue\n    return this\n  }\n\n  /**\n   * Checks if value is in a map.\n   * @param {string} importedValue - A value to test.\n   * @returns {boolean} - Tru if value is in a map, false otherwise.\n   */\n  has (importedValue) {\n    return this.hash.hasOwnProperty(importedValue)\n  }\n\n  /**\n   * Returns one or more library standard values that match an external value\n   * @param {string} sourceValue - External value\n   * @returns {Object | string} One or more of library standard values\n   */\n  get (sourceValue) {\n    if (this.has(sourceValue)) {\n      return this.hash[sourceValue]\n    } else if (this.returnUnknown) {\n      return sourceValue\n    } else {\n      throw new Error('A value \"' + sourceValue + '\" is not found in the importer.')\n    }\n  }\n}\nexport default FeatureImporter\n","/**\n * A list of grammatical features that characterizes a language unit. Has some additional service methods,\n * compared with standard storage objects.\n */\nclass FeatureList {\n  /**\n   * Initializes a feature list.\n   * @param {FeatureType[]} features - Features that build the list (optional, can be set later).\n   */\n  constructor (features = []) {\n    this._features = []\n    this._types = {}\n    this.add(features)\n  }\n\n  add (features) {\n    if (!features || !Array.isArray(features)) {\n      throw new Error('Features must be defined and must come in an array.')\n    }\n\n    for (let feature of features) {\n      this._features.push(feature)\n      this._types[feature.type] = feature\n    }\n  }\n\n  /**\n   * Returns an array of grouping features.\n   * @returns {FeatureType[]} - An array of grouping features.\n   */\n  get items () {\n    return this._features\n  }\n\n  forEach (callback) {\n    this._features.forEach(callback)\n  }\n\n  /**\n   * Returns a feature of a particular type. If such feature does not exist in a list, returns undefined.\n   * @param {string} type - Feature type as defined in `types` object.\n   * @return {FeatureType | undefined} A feature if a particular type if contains it. Undefined otherwise.\n   */\n  ofType (type) {\n    if (this.hasType(type)) {\n      return this._types[type]\n    }\n  }\n\n  /**\n   * Checks whether a feature list has a feature of a specific type.\n   * @param {string} type - Feature type as defined in `types` object.\n   * @return {boolean} Whether a feature list has a feature of a particular type.\n   */\n  hasType (type) {\n    return this._types.hasOwnProperty(type)\n  }\n}\nexport default FeatureList\n","import Feature from './feature.js'\nimport FeatureImporter from './feature_importer.js'\nimport LMF from './language_model_factory'\n\n/**\n * Definition class for a (grammatical) feature. Stores type information and (optionally) all possible values of the feature.\n * It serves as a feature generator. If list of possible values is provided, it can generate a Feature object\n * each time a property that corresponds to a feature value is accessed. If no list of possible values provided,\n * a Feature object can be generated with get(value) method.\n *\n * An order of values determines a default sort and grouping order. If two values should have the same order,\n * they should be grouped within an array: value1, [value2, value3], value4. Here 'value2' and 'value3' have\n * the same priority for sorting and grouping.\n */\nclass FeatureType {\n  // TODO: value checking\n  /**\n   * Creates and initializes a Feature Type object.\n   * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n   * @param {string[] | string[][]} values - A list of allowed values for this feature type.\n   * If an empty array is provided, there will be no\n   * allowed values as well as no ordering (can be used for items that do not need or have a simple order,\n   * such as footnotes).\n   * @param {String | Symbol} language - A language of a feature type.\n   */\n  constructor (type, values, language) {\n    if (!values || !Array.isArray(values)) {\n      throw new Error('Values should be an array (or an empty array) of values.')\n    }\n    if (!language) {\n      throw new Error('FeatureType constructor requires a language')\n    }\n\n    this.type = type\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({languageID: this.languageID, languageCode: this.languageCode} = LMF.getLanguageAttrs(language))\n\n    /*\n     This is a sort order index for a grammatical feature values. It is determined by the order of values in\n     a 'values' array.\n     */\n    this._orderIndex = []\n    this._orderLookup = {}\n\n    for (const [index, value] of values.entries()) {\n      this._orderIndex.push(value)\n      if (Array.isArray(value)) {\n        for (let element of value) {\n          this[element] = new Feature(this.type, element, this.languageID)\n          this._orderLookup[element] = index\n        }\n      } else {\n        this[value] = new Feature(this.type, value, this.languageID)\n        this._orderLookup[value] = index\n      }\n    }\n  }\n\n  /**\n   * This is a compatibility function for legacy code.\n   * @return {String} A language code.\n   */\n  get language () {\n    console.warn(`Please use a \"languageID\" instead of a \"language\"`)\n    return this.languageCode\n  }\n\n  /**\n   * test to see if this FeatureType allows unrestricted values\n   * @returns {boolean} true if unrestricted false if not\n   */\n  hasUnrestrictedValue () {\n    return this.orderedValues.length === 1 && this.orderedValues[0] === FeatureType.UNRESTRICTED_VALUE\n  }\n\n  /**\n   * Return a Feature with an arbitrary value. This value would not be necessarily present among FeatureType values.\n   * This can be especially useful for features that do not set: a list of predefined values, such as footnotes.\n   * @param value\n   * @param {int} sortOrder\n   * @returns {Feature}\n   */\n  get (value, sortOrder = 1) {\n    if (value) {\n      return new Feature(this.type, [[value, sortOrder]], this.languageID)\n    } else {\n      throw new Error('A non-empty value should be provided.')\n    }\n  }\n\n  /**\n   *\n   * @param {string[][]} data - An array of value arrays as: [[value1, sortOrder1], [value2, sortOrder2]]\n   * @return {Feature}\n   */\n  getValues (data) {\n    return new Feature(this.type, data, this.languageID)\n  }\n\n  getFromImporter (importerName, value) {\n    let mapped\n    try {\n      mapped = this.importer[importerName].get(value)\n    } catch (e) {\n      // quietly catch not found and replace with default\n      mapped = this.get(value)\n    }\n    return mapped\n  }\n\n  /**\n   * Creates and returns a new importer with a specific name. If an importer with this name already exists,\n   * an existing Importer object will be returned.\n   * @param {string} name - A name of an importer object\n   * @returns {Importer} A new or existing Importer object that matches a name provided\n   */\n  addImporter (name) {\n    if (!name) {\n      throw new Error('Importer should have a non-empty name.')\n    }\n    this.importer = this.importer || {}\n    this.importer[name] = this.importer[name] || new FeatureImporter()\n    return this.importer[name]\n  }\n\n  /**\n   * Return copies of all feature values as Feature objects in a sorted array, according to feature type's sort order.\n   * For a similar function that returns strings instead of Feature objects see orderedValues().\n   * @returns {Feature[] | Feature[][]} Array of feature values sorted according to orderIndex.\n   * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n   * an array of Feature objects will be returned instead of a single Feature object, as for single feature values.\n   */\n  get orderedFeatures () {\n    return this.orderedValues.map((value) => new Feature(this.type, value, this.languageID))\n  }\n\n  /**\n   * Return all feature values as strings in a sorted array, according to feature type's sort order.\n   * This is a main method that specifies a sort order of the feature type. orderedFeatures() relies\n   * on this method in providing a sorted array of feature values. If you want to create\n   * a custom sort order for a particular feature type that will depend on some options that are not type-related,\n   * create a wrapper around this function providing it with options arguments so it will be able to decide\n   * in what order those features will be based on those arguments.\n   * For a similar function that returns Feature objects instead of strings see orderedValues().\n   * @returns {string[]} Array of feature values sorted according to orderIndex.\n   * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n   * an array of strings will be returned instead of a single strings, as for single feature values.\n   */\n  get orderedValues () {\n    return this._orderIndex\n  }\n\n  /**\n   * Returns a lookup table for type values as:\n   *  {value1: order1, value2: order2}, where order is a sort order of an item. If two items have the same sort order,\n   *  their order value will be the same.\n   * @returns {object}\n   */\n  get orderLookup () {\n    return this._orderLookup\n  }\n\n  /**\n   * Sets an order of grammatical feature values for a grammatical feature. Used mostly for sorting, filtering,\n   * and displaying.\n   *\n   * @param {Feature[] | Feature[][]} values - a list of grammatical features that specify their order for\n   * sorting and filtering. Some features can be grouped as [[genders.masculine, genders.feminine], LibLatin.genders.neuter].\n   * It means that genders.masculine and genders.feminine belong to the same group. They will have the same index\n   * and will be stored inside an _orderIndex as an array. genders.masculine and genders.feminine will be grouped together\n   * during filtering and will be in the same bin during sorting.\n   *\n   */\n  set order (values) {\n    if (!values || (Array.isArray(values) && values.length === 0)) {\n      throw new Error('A non-empty list of values should be provided.')\n    }\n\n    // If a single value is provided, convert it into an array\n    if (!Array.isArray(values)) {\n      values = [values]\n    }\n\n    for (let value of values) {\n      if (Array.isArray(value)) {\n        for (let element of value) {\n          if (!this.hasOwnProperty(element.value)) {\n            throw new Error('Trying to order an element with \"' + element.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n          }\n\n          if (element.type !== this.type) {\n            throw new Error('Trying to order an element with type \"' + element.type + '\" that is different from \"' + this.type + '\".')\n          }\n\n          if (!LMF.compareLanguages(element.languageID, this.languageID)) {\n            throw new Error(`Trying to order an element with language \"${element.languageID.toString()}\" that is different from \"${this.languageID.toString()}\"`)\n          }\n        }\n      } else {\n        if (!this.hasOwnProperty(value.value)) {\n          throw new Error('Trying to order an element with \"' + value.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n        }\n\n        if (value.type !== this.type) {\n          throw new Error('Trying to order an element with type \"' + value.type + '\" that is different from \"' + this.type + '\".')\n        }\n\n        if (!LMF.compareLanguages(value.languageID, this.languageID)) {\n          throw new Error(`Trying to order an element with language \"${value.languageID.toString()}\" that is different from \"${this.languageID.toString()}\"`)\n        }\n      }\n    }\n\n    // Erase whatever sort order was set previously\n    this._orderLookup = {}\n    this._orderIndex = []\n\n    // Define a new sort order\n    for (const [index, element] of values.entries()) {\n      if (Array.isArray(element)) {\n        // If it is an array, all values should have the same order\n        let elements = []\n        for (const subElement of element) {\n          this._orderLookup[subElement.value] = index\n          elements.push(subElement.value)\n        }\n        this._orderIndex[index] = elements\n      } else {\n        // If is a single value\n        this._orderLookup[element.value] = index\n        this._orderIndex[index] = element.value\n      }\n    }\n  }\n}\nFeatureType.UNRESTRICTED_VALUE = Symbol('unrestricted')\nexport default FeatureType\n","import LanguageModel from './language_model.js'\nimport LanguageModelFactory from './language_model_factory.js'\nimport * as Constants from './constants.js'\nimport Feature from './feature.js'\n\nlet typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class GreekLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_GREEK }\n  static get languageCode () { return Constants.STR_LANG_CODE_GRC }\n  static get languageCodes () { return [Constants.STR_LANG_CODE_GRC] }\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get featureValues () {\n    /*\n    This could be a static variable, but then it will create a circular reference:\n    Feature -> LanguageModelFactory -> LanguageModel -> Feature\n     */\n    return new Map([\n      ...LanguageModel.featureValues,\n      [\n        Feature.types.grmClass,\n        [\n          Constants.CLASS_DEMONSTRATIVE,\n          Constants.CLASS_GENERAL_RELATIVE,\n          Constants.CLASS_INDEFINITE,\n          Constants.CLASS_INTENSIVE,\n          Constants.CLASS_INTERROGATIVE,\n          Constants.CLASS_PERSONAL,\n          Constants.CLASS_POSSESSIVE,\n          Constants.CLASS_RECIPROCAL,\n          Constants.CLASS_REFLEXIVE,\n          Constants.CLASS_RELATIVE\n        ]\n      ],\n      [\n        Feature.types.number,\n        [\n          Constants.NUM_SINGULAR,\n          Constants.NUM_PLURAL,\n          Constants.NUM_DUAL\n        ]\n      ],\n      [\n        Feature.types.grmCase,\n        [\n          Constants.CASE_NOMINATIVE,\n          Constants.CASE_GENITIVE,\n          Constants.CASE_DATIVE,\n          Constants.CASE_ACCUSATIVE,\n          Constants.CASE_VOCATIVE\n        ]\n      ],\n      [\n        Feature.types.declension,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD\n        ]\n      ],\n      [\n        Feature.types.tense,\n        [\n          Constants.TENSE_PRESENT,\n          Constants.TENSE_IMPERFECT,\n          Constants.TENSE_FUTURE,\n          Constants.TENSE_PERFECT,\n          Constants.TENSE_PLUPERFECT,\n          Constants.TENSE_FUTURE_PERFECT,\n          Constants.TENSE_AORIST\n        ]\n      ],\n      [\n        Feature.types.voice,\n        [\n          Constants.VOICE_PASSIVE,\n          Constants.VOICE_ACTIVE,\n          Constants.VOICE_MEDIOPASSIVE,\n          Constants.VOICE_MIDDLE\n        ]\n      ],\n      [\n        Feature.types.mood,\n        [\n          Constants.MOOD_INDICATIVE,\n          Constants.MOOD_SUBJUNCTIVE,\n          Constants.MOOD_OPTATIVE,\n          Constants.MOOD_IMPERATIVE\n        ]\n      ],\n      [\n        // TODO full list of greek dialects\n        Feature.types.dialect,\n        [\n          'attic',\n          'epic',\n          'doric'\n        ]\n      ]\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  static canInflect (node) {\n    return true\n  }\n\n  /**\n   * @override LanguageModel#grammarFeatures\n   */\n  static grammarFeatures () {\n    // TODO this ideally might be grammar specific\n    return [Feature.types.part, Feature.types.grmCase, Feature.types.mood, Feature.types.declension, Feature.types.tense, Feature.types.voice]\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {string} word the source word\n   * @returns {string} the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type string\n   */\n  static normalizeWord (word) {\n    // we normalize greek to NFC - Normalization Form Canonical Composition\n    if (word) {\n      return word.normalize('NFC')\n    } else {\n      return word\n    }\n  }\n\n  /**\n   * @override LanguageModel#alternateWordEncodings\n   */\n  static alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    // the original alpheios code used the following normalizations\n    // 1. When looking up a lemma\n    //    stripped vowel length\n    //    stripped caps\n    //    then if failed, tried again with out these\n    // 2. when adding to a word list\n    //    precombined unicode (vowel length/diacritics preserved)\n    // 2. When looking up a verb in the verb paradigm tables\n    //    it set e_normalize to false, otherwise it was true...\n    // make sure it's normalized to NFC and in lower case\n    let normalized = GreekLanguageModel.normalizeWord(word).toLocaleLowerCase()\n    let strippedVowelLength = normalized.replace(\n      /[\\u{1FB0}\\u{1FB1}]/ug, '\\u{03B1}').replace(\n      /[\\u{1FB8}\\u{1FB9}]/ug, '\\u{0391}').replace(\n      /[\\u{1FD0}\\u{1FD1}]/ug, '\\u{03B9}').replace(\n      /[\\u{1FD8}\\u{1FD9}]/ug, '\\u{0399}').replace(\n      /[\\u{1FE0}\\u{1FE1}]/ug, '\\u{03C5}').replace(\n      /[\\u{1FE8}\\u{1FE9}]/ug, '\\u{03A5}').replace(\n      /[\\u{00AF}\\u{0304}\\u{0306}]/ug, '')\n    let strippedDiaeresis = normalized.replace(\n      /\\u{0390}/ug, '\\u{03AF}').replace(\n      /\\u{03AA}/ug, '\\u{0399}').replace(\n      /\\u{03AB}/ug, '\\u{03A5}').replace(\n      /\\u{03B0}/ug, '\\u{03CD}').replace(\n      /\\u{03CA}/ug, '\\u{03B9}').replace(\n      /\\u{03CB}/ug, '\\u{03C5}').replace(\n      /\\u{1FD2}/ug, '\\u{1F76}').replace(\n      /\\u{1FD3}/ug, '\\u{1F77}').replace(\n      /\\u{1FD7}/ug, '\\u{1FD6}').replace(\n      /\\u{1FE2}/ug, '\\u{1F7A}').replace(\n      /\\u{1FE3}/ug, '\\u{1F7B}').replace(\n      /\\u{1FE7}/ug, '\\u{1FE6}').replace(\n      /\\u{1FC1}/ug, '\\u{1FC0}').replace(\n      /\\u{1FED}/ug, '\\u{1FEF}').replace(\n      /\\u{1FEE}/ug, '\\u{1FFD}').replace(\n      /[\\u{00A8}\\u{0308}]/ug, '')\n    if (encoding === 'strippedDiaeresis') {\n      return [strippedDiaeresis]\n    } else {\n      return [strippedVowelLength]\n    }\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return '.,;:!?\\'\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r'\n  }\n\n  /**\n   * Sets inflection grammar properties based on its characteristics\n   * @param {Inflection} inflection - An inflection object\n   * @return {Object} Inflection properties\n   */\n  static getInflectionConstraints (inflection) {\n    let constraints = {\n      fullFormBased: false,\n      suffixBased: false,\n      pronounClassRequired: false\n    }\n    if (inflection.hasOwnProperty(Feature.types.part)) {\n      if (inflection[Feature.types.part].value === Constants.POFS_PRONOUN) {\n        constraints.fullFormBased = true\n      } else {\n        constraints.suffixBased = true\n      }\n    } else {\n      console.warn(`Unable to set grammar: part of speech data is missing or is incorrect`, inflection[Feature.types.part])\n    }\n\n    constraints.pronounClassRequired =\n      LanguageModelFactory.compareLanguages(GreekLanguageModel.languageID, inflection.languageID) &&\n      inflection.hasOwnProperty(Feature.types.part) &&\n      inflection[Feature.types.part].value === Constants.POFS_PRONOUN\n\n    return constraints\n  }\n\n  /**\n   * Determines a class of a given word (pronoun) by finding a matching word entry(ies)\n   * in a pronoun source info (`forms`) and getting a single or multiple classes of those entries.\n   * Some morphological analyzers provide class information that is unreliable or do not\n   * provide class information at all. However, class information is essential in\n   * deciding in what table should pronouns be grouped. For this, we have to\n   * determine pronoun classes using this method.\n   * @param {Form[]} forms - An array of known forms of pronouns.\n   * @param {string} word - A word we need to find a matching class for.\n   * @param {boolean} normalize - Whether normalized forms of words shall be used for comparison.\n   * @return {Feature} Matching classes found within a Feature objects. If no matching classes found,\n   * returns undefined.\n   */\n  static getPronounClasses (forms, word, normalize = true) {\n    let matchingValues = new Set() // Will eliminate duplicated values\n    let matchingForms = forms.filter(\n      form => {\n        let match = false\n        if (form.value) {\n          match = normalize\n            ? GreekLanguageModel.normalizeWord(form.value) === GreekLanguageModel.normalizeWord(word)\n            : form.value === word\n        }\n        return match\n      }\n    )\n    for (const matchingForm of matchingForms) {\n      if (matchingForm.features.hasOwnProperty(Feature.types.grmClass)) {\n        for (const value of matchingForm.features[Feature.types.grmClass].values) {\n          matchingValues.add(value)\n        }\n      }\n    }\n    if (matchingValues.size > 0) {\n      return new Feature(Feature.types.grmClass, Array.from(matchingValues), GreekLanguageModel.languageID)\n    }\n  }\n}\n","import LMF from './language_model_factory.js'\nimport Feature from './feature.js'\nimport * as i18n from './i18n.js'\n\n/**\n * Wrapper class for a (grammatical, usually) feature, such as part of speech or declension. Keeps both value and type information.\n */\nclass GrmFeature {\n  /**\n   * Initializes a Feature object\n   * @param {string | string[]} value - A single feature value or, if this feature could have multiple\n   * values, an array of values.\n   * Multiple values do not allow to use a sort order. Because of this, it's better to use\n   * array of multiple Feature objects with single value each instead of a single Feature object\n   * with multiple values.\n   * Multiple values are left for backward compatibility only. Please do not use them as they\n   * will be removed in the future.\n   * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n   * @param {string | symbol} language - A language of a feature, allowed values are specified in 'languages' object.\n   * @param {int} sortOrder - an integer used for sorting\n   */\n  constructor (value, type, language, sortOrder = 1) {\n    if (!GrmFeature.types.isAllowed(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!value) {\n      throw new Error('Feature should have a non-empty value.')\n    }\n    if (!type) {\n      throw new Error('Feature should have a non-empty type.')\n    }\n    if (!language) {\n      throw new Error('Feature constructor requires a language')\n    }\n    this.value = value\n    this.type = type\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({languageID: this.languageID, languageCode: this.languageCode} = LMF.getLanguageAttrs(language))\n    this.sortOrder = sortOrder\n  }\n\n  /**\n   * This is a compatibility function for legacy code.\n   * @return {String} A language code.\n   */\n  get language () {\n    console.warn(`Please use a \"languageID\" instead of a \"language\"`)\n    return this.languageCode\n  }\n\n  isEqual (feature) {\n    if (Array.isArray(feature.value)) {\n      // `feature` is a single object with multiple `value` properties. This feature will be sunset\n      // as it does not allow to use sort order on Feature objects.\n      if (!Array.isArray(this.value) || this.value.length !== feature.value.length) {\n        return false\n      }\n      let equal = this.type === feature.type && LMF.compareLanguages(this.languageID, feature.languageID)\n      equal = equal && this.value.every(function (element, index) {\n        return element === feature.value[index]\n      })\n      return equal\n    } else {\n      return LMF.compareLanguages(this.languageID, feature.languageID) && this.type === feature.type && this.value === feature.value\n    }\n  }\n\n  isSubsetof (features) {\n    if (!Array.isArray(features)) {\n      features = [features] // If `features` is a single value, convert it to an array (a more general case)\n    }\n    // `feature` is an array of feature objects with (possibly) each having a single feature value.\n    let languageID = features[0].languageID // Assume all Feature objects have the same language ID\n    let type = features[0].type // Assume all Feature objects have the same type\n    let values = features.map(f => f.value)\n    if (LMF.compareLanguages(this.languageID, languageID) && this.type === type && values.includes(this.value)) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * examine the feature for a specific value\n   * @param {string} value\n   * @returns {boolean} true if the value is included in the feature's values\n   */\n  hasValue (value) {\n    if (Array.isArray(this.value)) {\n      return this.value.includes(value)\n    } else {\n      return this.value === value\n    }\n  }\n\n  /**\n   * string representation of a feature\n   * @return {string}\n   */\n  toString () {\n    if (Array.isArray(this.value)) {\n      return this.value.join(',')\n    } else {\n      return this.value\n    }\n  }\n\n  /**\n   * a locale-specific abbreviation for a feature's values\n   * @return {string}\n   */\n  toLocaleStringAbbr (lang = 'en') {\n    if (Array.isArray(this.value)) {\n      return this.value.map((v) => this.toLocaleStringAbbr(v, lang))\n    } else {\n      return i18n.i18n[lang][this.value].abbr\n    }\n  }\n\n  static toFeature (sourceFeature) {\n    if (Array.isArray(sourceFeature)) {\n      if (!(sourceFeature[0] instanceof Feature)) {\n        const type = sourceFeature[0].type\n        const languageID = sourceFeature[0].languageID\n        const values = sourceFeature.map(v => v.value)\n        return new Feature(type, values, languageID)\n      }\n    } else {\n      if (!(sourceFeature instanceof Feature)) {\n        return new Feature(sourceFeature.type, sourceFeature.value, sourceFeature.languageID)\n      }\n    }\n    return sourceFeature\n  }\n}\n// Should have no spaces in values in order to be used in HTML templates\nGrmFeature.types = {\n  word: 'word',\n  part: 'part of speech', // Part of speech\n  number: 'number',\n  'case': 'case',\n  grmCase: 'case', // A synonym of `case`\n  declension: 'declension',\n  gender: 'gender',\n  type: 'type',\n  'class': 'class',\n  grmClass: 'class', // A synonym of `class`\n  conjugation: 'conjugation',\n  comparison: 'comparison',\n  tense: 'tense',\n  voice: 'voice',\n  mood: 'mood',\n  person: 'person',\n  frequency: 'frequency', // How frequent this word is\n  meaning: 'meaning', // Meaning of a word\n  source: 'source', // Source of word definition\n  footnote: 'footnote', // A footnote for a word's ending\n  dialect: 'dialect', // a dialect identifier\n  note: 'note', // a general note\n  pronunciation: 'pronunciation',\n  age: 'age',\n  area: 'area',\n  geo: 'geo', // geographical data\n  kind: 'kind', // verb kind information\n  derivtype: 'derivtype',\n  stemtype: 'stemtype',\n  morph: 'morph', // general morphological information\n  var: 'var', // variance?\n  isAllowed (value) {\n    let v = `${value}`\n    return Object.values(this).includes(v)\n  }\n}\nexport default GrmFeature\n","import LMF from './language_model_factory'\r\nimport Lexeme from './lexeme.js'\r\n\r\nclass Homonym {\r\n  /**\r\n   * Initializes a Homonym object.\r\n   * @param {Lexeme[]} lexemes - An array of Lexeme objects.\r\n   * @param {string} form - the form which produces the homonyms\r\n   */\r\n  constructor (lexemes, form) {\r\n    if (!lexemes || (Array.isArray(lexemes) && lexemes.length === 0)) {\r\n      throw new Error('Lexemes data should not be empty.')\r\n    }\r\n\r\n    if (!Array.isArray(lexemes)) {\r\n      throw new Error('Lexeme data should be provided in an array.')\r\n    }\r\n\r\n    for (let lexeme of lexemes) {\r\n      if (!(lexeme instanceof Lexeme)) {\r\n        throw new Error('All lexeme data should be of Lexeme object type.')\r\n      }\r\n    }\r\n\r\n    this.lexemes = lexemes\r\n    this.targetWord = form\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    let lexemes = []\r\n    if (jsonObject.lexemes) {\r\n      for (let lexeme of jsonObject.lexemes) {\r\n        lexemes.push(Lexeme.readObject(lexeme))\r\n      }\r\n    }\r\n    let homonym = new Homonym(lexemes)\r\n    if (jsonObject.targetWord) {\r\n      homonym.targetWord = jsonObject.targetWord\r\n    }\r\n    return homonym\r\n  }\r\n\r\n  /**\r\n   * Returns a language code of a homonym (ISO 639-3).\r\n   * Homonym does not have a language property, only lemmas and inflections do. We assume that all lemmas\r\n   * and inflections within the same homonym will have the same language, and we can determine a language\r\n   * by using language property of the first lemma. We chan change this logic in the future if we'll need to.\r\n   * @returns {string} A language code, as defined in the `languages` object.\r\n   */\r\n  get language () {\r\n    console.warn(`Please use languageID instead`)\r\n    return LMF.getLanguageCodeFromId(this.languageID)\r\n  }\r\n\r\n  /**\r\n   * Returns a language ID of a homonym.\r\n   * Homonym does not have a languageID property, only lemmas and inflections do. We assume that all lemmas\r\n   * and inflections within the same homonym will have the same language, and we can determine a language\r\n   * by using languageID property of the first lemma. We chan change this logic in the future if we'll need to.\r\n   * @returns {Symbol} A language ID, as defined in the `LANG_` constants.\r\n   */\r\n  get languageID () {\r\n    if (this.lexemes && this.lexemes[0] && this.lexemes[0].lemma && this.lexemes[0].lemma.languageID) {\r\n      return this.lexemes[0].lemma.languageID\r\n    } else {\r\n      throw new Error('Homonym has not been initialized properly. Unable to obtain language ID information.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a list of all inflections within all lexemes of a homonym\r\n   * @return {Inflection[]} An array of inflections\r\n   */\r\n  get inflections () {\r\n    let inflections = []\r\n    for (const lexeme of this.lexemes) {\r\n      inflections = inflections.concat(lexeme.inflections)\r\n    }\r\n    return inflections\r\n  }\r\n}\r\nexport default Homonym\r\n","/**\n * This is a temporary placeholder for an i18n library\n */\nexport const i18n = {\n  en: {\n    feminine: {\n      full: 'feminine',\n      abbr: 'f.'\n    },\n    masculine: {\n      full: 'masculine',\n      abbr: 'm.'\n    },\n    neuter: {\n      full: 'neuter',\n      abbr: 'n.'\n    },\n    nominative: {\n      full: 'nominative',\n      abbr: 'nom.'\n    },\n    accusative: {\n      full: 'accusative',\n      abbr: 'acc.'\n    },\n    genitive: {\n      full: 'genitive',\n      abbr: 'gen.'\n    },\n    vocative: {\n      full: 'vocative',\n      abbr: 'voc.'\n    },\n    ablative: {\n      full: 'ablative',\n      abbr: 'abl.'\n    },\n    locative: {\n      full: 'locative',\n      abbr: 'loc.'\n    },\n    dative: {\n      full: 'dative',\n      abbr: 'dat.'\n    },\n    positive: {\n      full: 'positive',\n      abbr: 'pos.'\n    },\n    comparative: {\n      full: 'comparative',\n      abbr: 'com.'\n    },\n    superlative: {\n      full: 'superlative',\n      abbr: 'sup.'\n    },\n    singular: {\n      full: 'singular',\n      abbr: 's.'\n    },\n    plural: {\n      full: 'plural',\n      abbr: 'p.'\n    },\n    dual: {\n      full: 'dual',\n      abbr: 'dl.'\n    },\n    present: {\n      full: 'present',\n      abbr: 'pr.'\n    },\n    imperfect: {\n      full: 'imperfect',\n      abbr: 'imp.'\n    },\n    perfect: {\n      full: 'perfect',\n      abbr: 'perf.'\n    },\n    plusquamperfect: {\n      full: 'plusquamperfect',\n      abbr: 'pqpf.'\n    },\n    'future perfect': {\n      full: 'future perfect',\n      abbr: 'fex.'\n    },\n    future: {\n      full: 'future',\n      abbr: 'fut.'\n    },\n    aorist: {\n      full: 'aorist',\n      abbr: 'aor.'\n    },\n    indicative: {\n      full: 'indicative',\n      abbr: 'ind.'\n    },\n    subjunctive: {\n      full: 'subjunctive',\n      abbr: 'sub.'\n    },\n    infinitive: {\n      full: 'infinitive',\n      abbr: 'inf.'\n    },\n    imperative: {\n      full: 'imperative',\n      abbr: 'imp.'\n    },\n    supine: {\n      full: 'supine',\n      abbr: 'sup.'\n    },\n    participle: {\n      full: 'participle',\n      abbr: 'par.'\n    },\n    optative: {\n      full: 'optative',\n      abbr: 'opt.'\n    },\n    active: {\n      full: 'active',\n      abbr: 'act.'\n    },\n    passive: {\n      full: 'passive',\n      abbr: 'pass.'\n    },\n    middle: {\n      full: 'middle',\n      abbr: 'mid.'\n    },\n    mediopassive: {\n      full: 'mediopassive',\n      abbr: 'mp.'\n    },\n    deponens: {\n      full: 'deponens',\n      abbr: 'dep.'\n    }\n  }\n}\n","import Feature from './feature.js'\nimport LMF from './language_model_factory.js'\nimport * as Constants from './constants.js'\n/*\n Hierarchical structure of return value of a morphological analyzer:\n\n Homonym (a group of words that are written the same way, https://en.wikipedia.org/wiki/Homonym)\n    Lexeme 1 (a unit of lexical meaning, https://en.wikipedia.org/wiki/Lexeme)\n        Have a lemma and one or more inflections\n        Lemma (also called a headword, a canonical form of a group of words https://en.wikipedia.org/wiki/Lemma_(morphology) )\n        Inflection 1\n            Stem\n            Suffix (also called ending)\n        Inflection 2\n            Stem\n            Suffix\n    Lexeme 2\n        Lemma\n        Inflection 1\n            Stem\n            Suffix\n */\n\n/**\n * Represents an inflection of a word\n */\nclass Inflection {\n  /**\n     * Initializes an Inflection object.\n     * @param {string} stem - A stem of a word.\n     * @param {string | symbol} language - A word's language.\n     * @param {string} suffix - a suffix of a word\n     * @param {prefix} prefix - a prefix of a word\n     * @param {example} example - example\n     */\n  constructor (stem = null, language, suffix = null, prefix = null, example = null) {\n    if (!stem && !suffix) {\n      throw new Error('At least stem or suffix must be defined')\n    }\n    if (!language) {\n      throw new Error('Language should not be empty.')\n    }\n\n    if (!LMF.supportsLanguage(language)) {\n      throw new Error(`language ${language} not supported.`)\n    }\n\n    this.stem = stem\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({languageID: this.languageID, languageCode: this.languageCode} = LMF.getLanguageAttrs(language))\n    this.model = LMF.getLanguageModel(this.languageID)\n\n    // A grammar constraints object\n    this.constraints = {\n      fullFormBased: false, // True this inflection stores and requires to use a full form of a word\n      suffixBased: false, // True if only suffix is enough to identify this inflection\n      obligatoryMatches: [], // Names of features that should be matched in order to include a form or suffix to an inflection table\n      optionalMatches: [] // Names of features that will be recorded but are not important for inclusion of a form or suffix to an inflection table\n    }\n\n    // Suffix may not be present in every word. If missing, it will be set to null.\n    this.suffix = suffix\n\n    // Prefix may not be present in every word. If missing, it will be set to null.\n    this.prefix = prefix\n\n    // Example may not be provided\n    this.example = example\n  }\n\n  get form () {\n    let form, prefix, suffix, divider, stem\n\n    stem = this.stem ? this.stem : ''\n    divider = this.stem ? ' - ' : ''\n\n    if (this.model.direction === Constants.LANG_DIR_RTL) {\n      prefix = this.prefix ? divider + this.prefix : ''\n      suffix = this.suffix ? this.suffix + divider : ''\n\n      form = suffix + stem + prefix\n    } else {\n      prefix = this.prefix ? this.prefix + divider : ''\n      suffix = this.suffix ? divider + this.suffix : ''\n\n      form = prefix + stem + suffix\n    }\n\n    return form\n  }\n\n  /**\n   * This is a compatibility function for legacy code.\n   * @return {String} A language code.\n   */\n  get language () {\n    console.warn(`Please use a \"languageID\" instead of a \"language\"`)\n    return this.languageCode\n  }\n\n  /**\n   * Sets grammar properties based on inflection info\n   */\n  setConstraints () {\n    if (this.model.hasOwnProperty('getInflectionConstraints')) {\n      let constraintData = this.model.getInflectionConstraints(this)\n      this.constraints = Object.assign(this.constraints, constraintData)\n    }\n  }\n\n  compareWithWord (word, normalize = true) {\n    const model = LMF.getLanguageModel(this.languageID)\n    const value = this.constraints.suffixBased ? this.suffix : this.form\n    return normalize\n      ? model.normalizeWord(value) === model.normalizeWord(word)\n      : value === word\n  }\n\n  static readObject (jsonObject) {\n    let inflection =\n      new Inflection(\n        jsonObject.stem, jsonObject.languageCode, jsonObject.suffix, jsonObject.prefix, jsonObject.example)\n    inflection.languageID = LMF.getLanguageIdFromCode(inflection.languageCode)\n    return inflection\n  }\n\n  /**\n   * @deprecated Use `addFeature` instead\n   * Sets a grammatical feature in an inflection. Some features can have multiple values, In this case\n   * an array of Feature objects will be provided.\n   * Values are taken from features and stored in a 'feature.type' property as an array of values.\n   * @param {Feature | Feature[]} data\n   */\n  set feature (data) {\n    console.warn(`Please use \"addFeature\" instead.`)\n    if (!data) {\n      throw new Error('Inflection feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data]\n    }\n\n    let type = data[0].type\n    this[type] = []\n    for (let element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('Inflection feature data must be a Feature object.')\n      }\n\n      if (!LMF.compareLanguages(element.languageID, this.languageID)) {\n        throw new Error(`Language \"${element.languageID.toString()}\" of a feature does not match\n          a language \"${this.languageID.toString()}\" of an Inflection object.`)\n      }\n\n      this[type].push(element)\n    }\n  }\n\n  /**\n   * Sets a grammatical feature of an inflection. Feature is stored in a `feature.type` property.\n   * @param {Feature} feature - A feature object with one or multiple values.\n   */\n  addFeature (feature) {\n    if (!feature) {\n      throw new Error('feature data cannot be empty.')\n    }\n\n    if (!(feature instanceof Feature)) {\n      throw new Error('feature data must be a Feature object.')\n    }\n\n    if (!LMF.compareLanguages(feature.languageID, this.languageID)) {\n      throw new Error('Language \"' + feature.languageID.toString() + '\" of a feature does not match a language \"' +\n        this.languageID.toString() + '\" of a Lemma object.')\n    }\n\n    this[feature.type] = feature\n  }\n\n  /**\n   * Sets multiple grammatical features of an inflection.\n   * @param {Feature[]} features - Features to be added.\n   */\n  addFeatures (features) {\n    if (!Array.isArray(features)) {\n      throw new Error(`Features must be in an array`)\n    }\n\n    for (let feature of features) {\n      this.addFeature(feature)\n    }\n  }\n\n  /**\n   * Checks whether an inflection has a feature with `featureName` name and `featureValue` value\n   * @param {string} featureName - A name of a feature\n   * @param {string} featureValue - A value of a feature\n   * @return {boolean} True if an inflection contains a feature, false otherwise\n   */\n  hasFeatureValue (featureName, featureValue) {\n    if (this.hasOwnProperty(featureName)) {\n      return this[featureName].values.includes(featureValue)\n    }\n    return false\n  }\n}\nexport default Inflection\n","class InflectionGroup {\n  /**\n   * A group of inflections or groups of inflections\n   *\n   * @param {InflectionGroupingKey} groupingKey features of the inflections in the group\n   * @param {Inflection[]|InflectionGroup[]} inflections array of Inflections or InflectionGroups in this group\n   */\n  constructor (groupingKey, inflections = [], sortKey = null) {\n    this.groupingKey = groupingKey\n    this.inflections = inflections\n  }\n\n  /**\n   * Add an Inflection or InflectionGroup to the group\n   * @param {Inflection|InflectionGroup} inflection\n   */\n  append (inflection) {\n    this.inflections.push(inflection)\n  }\n}\nexport default InflectionGroup\n","import Feature from './feature.js'\n\nclass InflectionGroupingKey {\n  /**\n   * @constructor\n   * @param {Inflection} infl inflection with features which are used as a grouping key\n   * @param {string[]} features array of feature names which are used as the key\n   * @param {Object} extras extra property name and value pairs used in the key\n   */\n  constructor (infl, features, extras = {}) {\n    for (let feature of features) {\n      this[feature] = infl[feature]\n    }\n    Object.assign(this, extras)\n  }\n\n  /**\n   * checks if a feature with a specific value\n   * is included in the grouping key\n   * @returns {boolean} true if found, false if not\n   */\n  hasFeatureValue (feature, value) {\n    if (this.hasOwnProperty(feature)) {\n      return this[feature].values.includes(value)\n    }\n    return false\n  }\n\n  /**\n   * Return this key as a string\n   * @returns {string} string representation of the key\n   */\n  toString () {\n    let values = []\n    for (let prop of Object.getOwnPropertyNames(this).sort()) {\n      // A prop can be either a Feature object, or a one of the extras of a string type\n      let value = (this[prop] instanceof Feature) ? this[prop].values.sort().join(',') : this[prop]\n      values.push(value)\n    }\n    return values.join(' ')\n  }\n}\n\nexport default InflectionGroupingKey\n","import * as Constants from './constants.js'\nimport LanguageModelFactory from './language_model_factory.js'\nimport Feature from './feature.js'\nimport FeatureType from './feature_type.js'\nimport InflectionGroupingKey from './inflection_grouping_key.js'\nimport InflectionGroup from './inflection_group.js'\n\n/**\n * @class  LanguageModel is the base class for language-specific behavior\n */\nclass LanguageModel {\n  constructor () {\n    // This is just to avoid JavaScript Standard error on `context_backward` getter name. Don't need a constructor otherwise\n    // TODO: `contextBackward` shall be used instead of `context_backward` wherever it is used\n    this.context_backward = LanguageModel.contextBackward\n  }\n\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  /**\n   * @deprecated\n   */\n  get contextForward () {\n    console.warn(`Please use static \"contextForward\" instead`)\n    return this.constructor.contextForward\n  }\n\n  /**\n   * @deprecated\n   */\n  get contextBackward () {\n    console.warn(`Please use static \"contextBackward\" instead`)\n    return this.constructor.contextBackward\n  }\n\n  /**\n   * @deprecated\n   */\n  get direction () {\n    console.warn(`Please use static \"direction\" instead`)\n    return this.constructor.direction\n  }\n\n  /**\n   * @deprecated\n   */\n  get baseUnit () {\n    console.warn(`Please use static \"baseUnit\" instead`)\n    return this.constructor.baseUnit\n  }\n\n  /**\n   * @deprecated\n   */\n  get features () {\n    console.warn(`Please use individual \"getFeatureType\" or static \"features\" instead`)\n    return this.constructor.features\n  }\n\n  /**\n   * Returns a list of names of feature types that are defined in a language model.\n   * @return {string[]} Names of features that are defined in a model.\n   */\n  static get featureNames () {\n    return this.featureValues.keys()\n  }\n\n  /**\n   * Returns a feature a `featureType` name that is defined for a language. It does not create a new Feature\n   * object instance. It returns the one defined in a language model. To get a new instance of a Feature\n   * object, use `getFeature` instead.\n   * If no feature of `featureType` is defined in a language model, throws an error.\n   * @param {string} featureType - A feature type name.\n   * @return {Feature} A feature object of requested type.\n   */\n  static typeFeature (featureType) {\n    if (this.typeFeatures.has(featureType)) {\n      return this.typeFeatures.get(featureType)\n    } else {\n      throw new Error(`Type feature \"${featureType}\" is not defined within \"${this}\"`)\n    }\n  }\n\n  /**\n   * Returns a map with Feature objects of all features defined in a language. Use this method to get all\n   * Feature objects defined in a language model.\n   * @return {Map} Feature objects for all features defined within a language in a Map object. The key is\n   * a feature type (a string), and the value is a Feature object.\n   */\n  static get typeFeatures () {\n    console.warn(`This getter must be defined in a descendant class`)\n  }\n\n  static get features () {\n    let features = {}\n    for (const featureName of this.featureNames) {\n      features[featureName] = this.getFeature(featureName)\n    }\n    return features\n  }\n\n  static get languageID () {\n    return Constants.LANG_UNDEFINED\n  }\n\n  static get languageCode () {\n    return Constants.STR_LANG_CODE_UNDEFINED\n  }\n\n  /**\n   * Returns an array of language codes that represents the language.\n   * @return {String[]} An array of language codes that matches the language.\n   */\n  static get languageCodes () {\n    return []\n  }\n\n  static get codes () {\n    console.warn(`Use static \"languageCodes\" instead`)\n    return this.languageCodes\n  }\n\n  /**\n   * @deprecated\n   * @return {String[]}\n   */\n  get codes () {\n    console.warn(`Please use a static version of \"codes\" instead`)\n    return this.constructor.languageCodes\n  }\n\n  /**\n   * @deprecated\n   * @return {string}\n   */\n  toCode () {\n    console.warn(`Please use a static \"languageCode\" instead`)\n    return this.constructor.languageCode\n  }\n\n  /**\n   * @deprecated\n   * @return {string}\n   */\n  static toCode () {\n    console.warn(`Please use a static \"languageCode\" instead`)\n    return this.languageCode\n  }\n\n  static get featureValues () {\n    /*\n    This could be a static variable, but then it will create a circular reference:\n    Feature -> LanguageModelFactory -> LanguageModel -> Feature\n     */\n    return new Map([\n      [\n        Feature.types.part,\n        [\n          Constants.POFS_ADVERB,\n          Constants.POFS_ADVERBIAL,\n          Constants.POFS_ADJECTIVE,\n          Constants.POFS_ARTICLE,\n          Constants.POFS_CONJUNCTION,\n          Constants.POFS_EXCLAMATION,\n          Constants.POFS_INTERJECTION,\n          Constants.POFS_NOUN,\n          Constants.POFS_NUMERAL,\n          Constants.POFS_PARTICLE,\n          Constants.POFS_PREFIX,\n          Constants.POFS_PREPOSITION,\n          Constants.POFS_PRONOUN,\n          Constants.POFS_SUFFIX,\n          Constants.POFS_SUPINE,\n          Constants.POFS_VERB,\n          Constants.POFS_VERB_PARTICIPLE\n        ]\n      ],\n      [\n        Feature.types.gender,\n        [\n          Constants.GEND_MASCULINE,\n          Constants.GEND_FEMININE,\n          Constants.GEND_NEUTER\n        ]\n      ],\n      [\n        Feature.types.type,\n        [\n          Constants.TYPE_REGULAR,\n          Constants.TYPE_IRREGULAR\n        ]\n      ],\n      [\n        Feature.types.person,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD\n        ]\n      ],\n      [\n        Feature.types.age,\n        []\n      ],\n      [\n        Feature.types.area,\n        []\n      ],\n      [\n        Feature.types.source,\n        []\n      ],\n      [\n        Feature.types.frequency,\n        []\n      ],\n      [\n        Feature.types.geo,\n        []\n      ],\n      [\n        Feature.types.pronunciation,\n        []\n      ],\n      [\n        Feature.types.kind,\n        []\n      ],\n      [\n        Feature.types.comparison,\n        []\n      ],\n      [\n        Feature.types.morph,\n        []\n      ],\n      [\n        Feature.types.stemtype,\n        []\n      ],\n      [\n        Feature.types.derivtype,\n        []\n      ]\n    ])\n  }\n\n  /**\n   * @deprecated\n   * @return {symbol} Returns a language ID\n   */\n  static get sourceLanguage () {\n    console.warn(`Please use languageID directly`)\n    return this.languageID\n  }\n\n  /**\n   * @deprecated\n   * @return {symbol} Returns a language ID\n   */\n  get sourceLanguage () {\n    console.warn(`Please use languageID directly`)\n    return this.constructor.languageID\n  }\n\n  /**\n   * @deprecated\n   * @param name\n   * @return {FeatureType}\n   */\n  static getFeatureType (name) {\n    console.warn('Please use getFeature instead')\n    let featureValues = this.featureValues\n    if (featureValues.has(name)) {\n      return new FeatureType(name, featureValues.get(name), this.languageID)\n    } else {\n      throw new Error(`Feature \"${name}\" is not defined`)\n    }\n  }\n\n  /**\n   * Returns a new instance of a feature with `featureType`. It uses a feature defined in a language model\n   * as a master.\n   * @param {string} featureType - A name of a feature type.\n   * @return {Feature} - A newly created Feature object.\n   */\n  static getFeature (featureType) {\n    let featureValues = this.featureValues // To cache the values\n    if (featureValues.has(featureType)) {\n      let allowedValues = featureValues.get(featureType)\n      return new Feature(featureType, allowedValues, this.languageID, 1, allowedValues)\n    } else {\n      throw new Error(`Feature \"${featureType}\" is not defined`)\n    }\n  }\n\n  _initializeFeatures () {\n    let features = {}\n    for (const featureName of this.constructor.featureValues.keys()) {\n      features[featureName] = this.constructor.getFeature(featureName)\n    }\n    return features\n  }\n\n  /**\n   * @deprecated\n   */\n  grammarFeatures () {\n    console.warn(`Please use a static version of \"grammarFeatures\" instead`)\n    return this.constructor.grammarFeatures()\n  }\n\n  /**\n   * Identify the morphological features which should be linked to a grammar.\n   * @returns {String[]} Array of Feature types\n   */\n  static grammarFeatures () {\n    return []\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * Check to see if the supplied language code is supported by this tool\n   * @param {string} code the language code\n   * @returns true if supported false if not\n   * @type Boolean\n   */\n  static supportsLanguage (code) {\n    return this.languageCodes.includes[code]\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {string} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  static normalizeWord (word) {\n    return word\n  }\n\n  /**\n   * Returns alternate encodings for a word\n   * @param {string} word the word\n   * @param {string} preceding optional preceding word\n   * @param {string} following optional following word\n   * @param {string} encoding optional encoding name to filter the response to\n   * @returns {Array} an array of alternate encodings\n   */\n  static alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    return []\n  }\n\n  alternateWordEncodings (word, preceding, following, encoding) {\n    console.warn(`Please use static \"alternateWordEncodings\" instead`)\n    return this.constructor.alternateWordEncodings(word, preceding, following, encoding)\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return '.,;:!?\\'\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r'\n  }\n\n  /**\n   * @deprecated\n   * @return {String}\n   */\n  getPunctuation () {\n    console.warn(`Please use a static version of \"getPunctuation\"`)\n    return this.constructor.getPunctuation()\n  }\n\n  toString () {\n    return String(this.constructor.languageCode)\n  }\n\n  isEqual (model) {\n    return LanguageModelFactory.compareLanguages(this.languageID, model.languageID)\n  }\n\n  /*\n  There are two types of language identificators: language IDs and language code. Language ID is a symbol constant\n  defined in constants.js, such as LANG_LATIN or LANG_GREEK. Language code is a string containing (usually)\n  a three-letter language codes such as 'lat' or 'la' for latin. There can be multiple language codes that identify\n  the same language, but there is only one unique language ID for each language.\n   */\n\n  /**\n   * Checks whether a language has a particular language code in its list of codes\n   * @param {String} languageCode - A language code to check\n   * @return {boolean} Whether this language code exists in a language code list\n   */\n  static hasCode (languageCode) {\n    if (this.isLanguageCode(languageCode)) {\n      return this.languageCodes.includes(languageCode)\n    } else {\n      throw new Error(`Format of a \"${languageCode}\" is incorrect`)\n    }\n  }\n\n  /**\n   * Tests wither a provided language identificator is a language ID.\n   * @param {Symbol | string} language - A language identificator, either a Symbol or a string language code.\n   * @return {boolean} True if language identificator provided is a language ID.\n   */\n  static isLanguageID (language) {\n    return (typeof language === 'symbol')\n  }\n\n  /**\n   * Tests wither a provided language identificator is a language code.\n   * @param {Symbol | string} language - A language identificator, either a Symbol or a string language code.\n   * @return {boolean} - True if language identificator provided is a language code.\n   */\n  static isLanguageCode (language) {\n    return !LanguageModel.isLanguageID(language)\n  }\n\n  /**\n   * @deprecated\n   * @param node\n   */\n  canInflect (node) {\n    console.warn(`Please use a static version of \"canInflect\" instead`)\n    return this.constructor.canInflect(node)\n  }\n\n  /**\n   * Groups a set of inflections according to a language-specific display paradigm\n   * The default groups according to the following logic:\n   *   1. groups of groups with unique stem, prefix, suffix, part of speech, declension, dialect and comparison\n   *     2. groups of those groups with unique\n   *          number, if it's an inflection with a grammatical case\n   *          tense, if it's an inflection with tense but no case (i.e. a verb)\n   *          verbs without tense or case\n   *          adverbs\n   *          everything else\n   *       3. groups of those groups with unique voice and tense\n   *         4. groups of inflections with unique gender, person, mood, and sort\n   */\n  static groupInflectionsForDisplay (inflections) {\n    let grouped = new Map()\n    let aggregated = this.aggregateInflectionsForDisplay(inflections)\n\n    // group inflections by part of speech\n    for (let infl of aggregated) {\n      let groupingKey = new InflectionGroupingKey(infl,\n        [Feature.types.part, Feature.types.declension, Feature.types.dialect, Feature.types.comparison],\n        {\n          prefix: infl.prefix,\n          suffix: infl.suffix,\n          stem: infl.stem\n        }\n      )\n      let groupingKeyStr = groupingKey.toString()\n      if (grouped.has(groupingKeyStr)) {\n        grouped.get(groupingKeyStr).append(infl)\n      } else {\n        grouped.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n      }\n    }\n\n    // iterate through each group key to group the inflections in that group\n    for (let kv of grouped) {\n      let inflgrp = new Map()\n      for (let infl of kv[1].inflections) {\n        let keyprop\n        let isCaseInflectionSet = false\n        if (infl[Feature.types.grmCase]) {\n          // grouping on number if case is defined\n          keyprop = Feature.types.number\n          isCaseInflectionSet = true\n        } else if (infl[Feature.types.tense]) {\n          // grouping on tense if tense is defined but not case\n          keyprop = Feature.types.tense\n        } else if (infl[Feature.types.part] === Constants.POFS_VERB) {\n          // grouping on no case or tense but a verb\n          keyprop = Feature.types.part\n        } else if (infl[Feature.types.part] === Constants.POFS_ADVERB) {\n          keyprop = Feature.types.part\n          // grouping on adverbs without case or tense\n        } else {\n          keyprop = 'misc'\n          // grouping on adverbs without case or tense\n          // everything else\n        }\n        let groupingKey = new InflectionGroupingKey(infl, [keyprop], {isCaseInflectionSet: isCaseInflectionSet})\n        let groupingKeyStr = groupingKey.toString()\n        if (inflgrp.has(groupingKeyStr)) {\n          inflgrp.get(groupingKeyStr).append(infl)\n        } else {\n          inflgrp.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n        }\n      }\n      // inflgrp is now a map of groups of inflections grouped by\n      //  inflections with number\n      //  inflections without number but with tense\n      //  inflections of verbs without tense\n      //  inflections of adverbs\n      //  everything else\n      // iterate through each inflection group key to group the inflections in that group by tense and voice\n      for (let kv of inflgrp) {\n        let nextGroup = new Map()\n        let sortOrder = new Map()\n        for (let infl of kv[1].inflections) {\n          let sortkey = infl[Feature.types.grmCase] ? Math.max(infl[Feature.types.grmCase].items.map(f => f.sortOrder)) : 1\n          let groupingKey = new InflectionGroupingKey(infl, [Feature.types.tense, Feature.types.voice])\n          let groupingKeyStr = groupingKey.toString()\n          if (nextGroup.has(groupingKeyStr)) {\n            nextGroup.get(groupingKeyStr).append(infl)\n          } else {\n            nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl], sortkey))\n            sortOrder.set(groupingKeyStr, sortkey)\n          }\n        }\n        kv[1].inflections = []\n        let sortedKeys = Array.from(nextGroup.keys()).sort(\n          (a, b) => {\n            let orderA = sortOrder.get(a)\n            let orderB = sortOrder.get(b)\n            return orderA > orderB ? -1 : orderB > orderA ? 1 : 0\n          }\n        )\n        for (let groupkey of sortedKeys) {\n          kv[1].inflections.push(nextGroup.get(groupkey))\n        }\n      }\n\n      // inflgrp is now a Map of groups of groups of inflections\n\n      for (let kv of inflgrp) {\n        let groups = kv[1]\n        for (let group of groups.inflections) {\n          let nextGroup = new Map()\n          for (let infl of group.inflections) {\n            // set key is case comp gend pers mood sort\n            let groupingKey = new InflectionGroupingKey(infl,\n              [Feature.types.grmCase, Feature.types.comparison, Feature.types.gender, Feature.types.number, Feature.types.person,\n                Feature.types.tense, Feature.types.mood, Feature.types.voice])\n            let groupingKeyStr = groupingKey.toString()\n            if (nextGroup.has(groupingKeyStr)) {\n              nextGroup.get(groupingKeyStr).append(infl)\n            } else {\n              nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n            }\n          }\n          group.inflections = Array.from(nextGroup.values()) // now a group of inflection groups\n        }\n      }\n      kv[1].inflections = Array.from(inflgrp.values())\n    }\n    return Array.from(grouped.values())\n  }\n\n  /**\n   * Aggregate inflections for display according to language model characteristics\n   * @param {Inflection[]} inflections an array of inflections\n   * @return Inflection[] the aggregated inflections\n   */\n  static aggregateInflectionsForDisplay (inflections) {\n    // default is just to do nothing\n    return inflections\n  }\n\n  /**\n   * @deprecated\n   * @param inflections\n   * @return {*}\n   */\n  groupInflectionsForDisplay (inflections) {\n    console.warn(`Please use a static version of \"groupInflectionsForDisplay\" instead`)\n    return this.constructor.groupInflectionsForDisplay(inflections)\n  }\n}\n\nexport default LanguageModel\n","import LanguageModel from './language_model.js'\nimport LatinLanguageModel from './latin_language_model.js'\nimport GreekLanguageModel from './greek_language_model.js'\nimport ArabicLanguageModel from './arabic_language_model.js'\nimport PersianLanguageModel from './persian_language_model.js'\nimport * as Constants from './constants.js'\n\nconst MODELS = new Map([\n  [ Constants.STR_LANG_CODE_LA, LatinLanguageModel ],\n  [ Constants.STR_LANG_CODE_LAT, LatinLanguageModel ],\n  [ Constants.STR_LANG_CODE_GRC, GreekLanguageModel ],\n  [ Constants.STR_LANG_CODE_ARA, ArabicLanguageModel ],\n  [ Constants.STR_LANG_CODE_AR, ArabicLanguageModel ],\n  [ Constants.STR_LANG_CODE_PER, PersianLanguageModel ]\n])\n\nclass LanguageModelFactory {\n  /**\n   * Checks whether a language is supported\n   * @param {string | symbol} language - Language as a language ID (symbol) or a language code (string)\n   * @return {boolean} True if language is supported, false otherwise\n   */\n  static supportsLanguage (language) {\n    language = (typeof language === 'symbol') ? LanguageModelFactory.getLanguageCodeFromId(language) : language\n    return MODELS.has(language)\n  }\n\n  /**\n   * Returns a constructor of language model for a specific language ID.\n   * @param {symbol} languageID - A language ID of a desired language model.\n   * @return {LanguageModel} A language model for a given language ID.\n   */\n  static getLanguageModel (languageID) {\n    let languageCode = LanguageModelFactory.getLanguageCodeFromId(languageID)\n    if (MODELS.has(languageCode)) {\n      return MODELS.get(languageCode)\n    } else {\n      // A default value\n      return LanguageModel\n    }\n  }\n\n  static getLanguageForCode (code = null) {\n    let Model = MODELS.get(code)\n    if (Model) {\n      return new Model()\n    }\n    // for now return a default Model\n    // TODO may want to throw an error\n    return new LanguageModel()\n  }\n\n  /**\n   * Converts an ISO 639-3 language code to a language ID\n   * @param {string} languageCode - An ISO 639-3 language code\n   * @return {symbol | undefined} A language ID or undefined if language ID is not found\n   */\n  static getLanguageIdFromCode (languageCode) {\n    for (const languageModel of MODELS.values()) {\n      if (languageModel.hasCode(languageCode)) {\n        return languageModel.languageID\n      }\n    }\n    // Noting found, return a Symbol with an undefined value (to keep return value type the same)\n    return Constants.LANG_UNDEFINED\n  }\n\n  /**\n   * Converts a language ID to an default ISO 639-3 language code for that language\n   * @param {symbol} languageID - A language ID\n   * @return {string | undefined} An ISO 639-3 language code or undefined if language code is not found\n   */\n  static getLanguageCodeFromId (languageID) {\n    for (const languageModel of MODELS.values()) {\n      if (languageModel.languageID === languageID) {\n        return languageModel.languageCode\n      }\n    }\n    // Noting found, return a string with an undefined value (to keep return value type the same)\n    return Constants.STR_LANG_CODE_UNDEFINED\n  }\n\n  /**\n   * Takes either a language ID or a language code and returns an object with both an ID and a code.\n   * @param {string | symbol} language - Either a language ID (a Symbol) or a language code (a String).\n   * @return {object} An object with the following properties:\n   *    {symbol} languageID\n   *    {string} languageCode\n   */\n  static getLanguageAttrs (language) {\n    if (typeof language === 'symbol') {\n      // `language` is a language ID\n      return {\n        languageID: language,\n        languageCode: LanguageModelFactory.getLanguageCodeFromId(language)\n      }\n    } else {\n      // `language` is a language code\n      return {\n        languageID: LanguageModelFactory.getLanguageIdFromCode(language),\n        languageCode: language\n      }\n    }\n  }\n\n  /**\n   * Compares two languages in either a language ID or a language code format. For this, does conversion of\n   * language IDs to language code. Because fo this, it will work even for language IDs defined in\n   * different modules\n   * @param {string | symbol} languageA - Either a language ID (a symbol) or a language code (a string).\n   * @param {string | symbol} languageB - Either a language ID (a symbol) or a language code (a string).\n   * @return {boolean} True if languages are the same, false otherwise.\n   */\n  static compareLanguages (languageA, languageB) {\n    languageA = (typeof languageA === 'symbol') ? LanguageModelFactory.getLanguageCodeFromId(languageA) : languageA\n    languageB = (typeof languageB === 'symbol') ? LanguageModelFactory.getLanguageCodeFromId(languageB) : languageB\n    return languageA === languageB\n  }\n}\nexport default LanguageModelFactory\n","import LanguageModel from './language_model.js'\nimport Feature from './feature.js'\nimport * as Constants from './constants.js'\n\nlet typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class LatinLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_LATIN }\n  static get languageCode () { return Constants.STR_LANG_CODE_LAT }\n  static get languageCodes () { return [Constants.STR_LANG_CODE_LA, Constants.STR_LANG_CODE_LAT] }\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get featureValues () {\n    /*\n    This could be a static variable, but then it will create a circular reference:\n    Feature -> LanguageModelFactory -> LanguageModel -> Feature\n     */\n    return new Map([\n      ...LanguageModel.featureValues,\n      [\n        Feature.types.grmClass,\n        [\n          Constants.CLASS_PERSONAL,\n          Constants.CLASS_REFLEXIVE,\n          Constants.CLASS_POSSESSIVE,\n          Constants.CLASS_DEMONSTRATIVE,\n          Constants.CLASS_RELATIVE,\n          Constants.CLASS_INTERROGATIVE\n        ]\n      ],\n      [\n        Feature.types.number,\n        [\n          Constants.NUM_SINGULAR,\n          Constants.NUM_PLURAL\n        ]\n      ],\n      [\n        Feature.types.grmCase,\n        [\n          Constants.CASE_NOMINATIVE,\n          Constants.CASE_GENITIVE,\n          Constants.CASE_DATIVE,\n          Constants.CASE_ACCUSATIVE,\n          Constants.CASE_ABLATIVE,\n          Constants.CASE_LOCATIVE,\n          Constants.CASE_VOCATIVE\n        ]\n      ],\n      [\n        Feature.types.declension,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD,\n          Constants.ORD_4TH,\n          Constants.ORD_5TH\n        ]\n      ],\n      [\n        Feature.types.tense,\n        [\n          Constants.TENSE_PRESENT,\n          Constants.TENSE_IMPERFECT,\n          Constants.TENSE_FUTURE,\n          Constants.TENSE_PERFECT,\n          Constants.TENSE_PLUPERFECT,\n          Constants.TENSE_FUTURE_PERFECT\n        ]\n      ],\n      [\n        Feature.types.voice,\n        [\n          Constants.VOICE_ACTIVE,\n          Constants.VOICE_PASSIVE\n        ]\n      ],\n      [\n        Feature.types.mood,\n        [\n          Constants.MOOD_INDICATIVE,\n          Constants.MOOD_SUBJUNCTIVE,\n          Constants.MOOD_IMPERATIVE,\n          Constants.MOOD_PARTICIPLE,\n          Constants.MOOD_SUPINE,\n          Constants.MOOD_GERUNDIVE,\n          Constants.MOOD_PARTICIPLE,\n          Constants.MOOD_INFINITIVE\n        ]\n      ],\n      [\n        Feature.types.conjugation,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD,\n          Constants.ORD_4TH\n        ]\n      ]\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * @override LanguageModel#grammarFeatures\n   */\n  static grammarFeatures () {\n    // TODO this ideally might be grammar specific\n    return [Feature.types.part, Feature.types.grmCase, Feature.types.mood, Feature.types.declension, Feature.types.tense, Feature.types.conjugation]\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  static canInflect (node) {\n    return true\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {String} word the source word\n   * @returns the normalized form of the word (Latin replaces accents and special chars)\n   * @type String\n   */\n  static normalizeWord (word) {\n    if (word) {\n      word = word.replace(/[\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u0100\\u0102]/g, 'A')\n      word = word.replace(/[\\u00c8\\u00c9\\u00ca\\u00cb\\u0112\\u0114]/g, 'E')\n      word = word.replace(/[\\u00cc\\u00cd\\u00ce\\u00cf\\u012a\\u012c]/g, 'I')\n      word = word.replace(/[\\u00d2\\u00d3\\u00d4\\u00df\\u00d6\\u014c\\u014e]/g, 'O')\n      word = word.replace(/[\\u00d9\\u00da\\u00db\\u00dc\\u016a\\u016c]/g, 'U')\n      word = word.replace(/[\\u00c6\\u01e2]/g, 'AE')\n      word = word.replace(/[\\u0152]/g, 'OE')\n      word = word.replace(/[\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u0101\\u0103]/g, 'a')\n      word = word.replace(/[\\u00e8\\u00e9\\u00ea\\u00eb\\u0113\\u0115]/g, 'e')\n      word = word.replace(/[\\u00ec\\u00ed\\u00ee\\u00ef\\u012b\\u012d\\u0129]/g, 'i')\n      word = word.replace(/[\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u014d\\u014f]/g, 'o')\n      word = word.replace(/[\\u00f9\\u00fa\\u00fb\\u00fc\\u016b\\u016d]/g, 'u')\n      word = word.replace(/[\\u00e6\\u01e3]/g, 'ae')\n      word = word.replace(/[\\u0153]/g, 'oe')\n    }\n    return word\n  }\n\n  /**\n   * Returns alternate encodings for a word\n   * @param {string} word the word\n   * @param {string} preceding optional preceding word\n   * @param {string} following optional following word\n   * @param {string} encoding optional encoding name to filter the response to\n   * @returns {Array} an array of alternate encodings\n   */\n  static alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    // Not implemented yet\n    return []\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n\n  /**\n   * Sets inflection grammar properties based on its characteristics\n   * @param {Inflection} inflection - An inflection object\n   * @return {Object} Inflection properties\n   */\n  static getInflectionConstraints (inflection) {\n    let grammar = {\n      fullFormBased: false,\n      suffixBased: false,\n      pronounClassRequired: false\n    }\n    if (inflection.hasOwnProperty(Feature.types.part)) {\n      if (inflection[Feature.types.part].value === Constants.POFS_PRONOUN) {\n        grammar.fullFormBased = true\n      } else {\n        grammar.suffixBased = true\n      }\n    } else {\n      console.warn(`Unable to set grammar: part of speech data is missing or is incorrect`, inflection[Feature.types.part])\n    }\n\n    return grammar\n  }\n}\n","import LMF from './language_model_factory.js'\nimport Feature from './feature.js'\nimport Translation from './translation.js'\nimport uuidv4 from 'uuid/v4'\n\n/**\n * Lemma, a canonical form of a word.\n */\nclass Lemma {\n  /**\n   * Initializes a Lemma object.\n   * @param {string} word - A word.\n   * @param {symbol | string} languageID - A language ID (symbol, please use this) or a language code of a word.\n   * @param {string[]} principalParts - the principalParts of a lemma.\n   * @param {Object} features - the grammatical features of a lemma.\n\n   * @param {Translation} transaltions - translations from python service\n   */\n  constructor (word, languageID, principalParts = [], features = {}) {\n    if (!word) {\n      throw new Error('Word should not be empty.')\n    }\n\n    if (!languageID) {\n      throw new Error('Language should not be empty.')\n    }\n\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({languageID: this.languageID, languageCode: this.languageCode} = LMF.getLanguageAttrs(languageID))\n\n    this.word = word\n    this.principalParts = principalParts\n    this.features = {}\n    this.ID = uuidv4()\n  }\n\n  get language () {\n    console.warn(`Please use \"languageID\" instead of \"language\"`)\n    return this.languageCode\n  }\n\n  static readObject (jsonObject) {\n    return new Lemma(jsonObject.word, jsonObject.language, jsonObject.principalParts, jsonObject.pronunciation)\n  }\n\n  /**\n   * @deprecated Please use `addFeature` instead.\n   * Sets a grammatical feature for a lemma. Some features can have multiple values, In this case\n   * an array of Feature objects will be provided.\n   * Values are taken from features and stored in a 'feature.type' property as an array of values.\n   * @param {Feature | Feature[]} data\n   */\n  set feature (data) {\n    console.warn(`Please use \"addFeature\" instead`)\n    if (!data) {\n      throw new Error('feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data]\n    }\n\n    let type = data[0].type\n    this.features[type] = []\n    for (let element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('feature data must be a Feature object.')\n      }\n\n      if (!LMF.compareLanguages(element.languageID, this.languageID)) {\n        throw new Error('Language \"' + element.languageID.toString() + '\" of a feature does not match a language \"' +\n                this.languageID.toString() + '\" of a Lemma object.')\n      }\n\n      this.features[type].push(element)\n    }\n  }\n\n  /**\n   * Sets a grammatical feature of a lemma. Feature is stored in a `feature.type` property.\n   * @param {Feature} feature - A feature object with one or multiple values.\n   */\n  addFeature (feature) {\n    if (!feature) {\n      throw new Error('feature data cannot be empty.')\n    }\n\n    if (!(feature instanceof Feature)) {\n      throw new Error('feature data must be a Feature object.')\n    }\n\n    if (!LMF.compareLanguages(feature.languageID, this.languageID)) {\n      throw new Error('Language \"' + feature.languageID.toString() + '\" of a feature does not match a language \"' +\n        this.languageID.toString() + '\" of a Lemma object.')\n    }\n\n    this.features[feature.type] = feature\n  }\n\n  /**\n   * Sets multiple grammatical features of a lemma.\n   * @param {Feature[]} features - Features to be added.\n   */\n  addFeatures (features) {\n    if (!Array.isArray(features)) {\n      throw new Error(`Features must be in an array`)\n    }\n\n    for (let feature of features) {\n      this.addFeature(feature)\n    }\n  }\n\n  /**\n   * Sets a translation from python service.\n   * @param {Translation} translation - A translation object\n   */\n  addTranslation (translation) {\n    if (!translation) {\n      throw new Error('translation data cannot be empty.')\n    }\n\n    if (!(translation instanceof Translation)) {\n      throw new Error('translation data must be a Translation object.')\n    }\n\n    this.translation = translation\n  }\n}\n\nexport default Lemma\n","import Lemma from './lemma.js'\r\nimport Inflection from './inflection.js'\r\nimport DefinitionSet from './definition-set'\r\nimport LMF from './language_model_factory'\r\n\r\n/**\r\n * A basic unit of lexical meaning. Contains a primary Lemma object, one or more Inflection objects\r\n * and a DefinitionSet\r\n */\r\nclass Lexeme {\r\n  /**\r\n   * Initializes a Lexeme object.\r\n   * @param {Lemma} lemma - A lemma object.\r\n   * @param {Inflection[]} inflections - An array of inflections.\r\n   * @param {DefinitionSet} meaning - A set of definitions.\r\n\r\n   */\r\n  constructor (lemma, inflections, meaning = null) {\r\n    if (!lemma) {\r\n      throw new Error('Lemma should not be empty.')\r\n    }\r\n\r\n    if (!(lemma instanceof Lemma)) {\r\n      throw new Error('Lemma should be of Lemma object type.')\r\n    }\r\n\r\n    if (!inflections) {\r\n      throw new Error('Inflections data should not be empty.')\r\n    }\r\n\r\n    if (!Array.isArray(inflections)) {\r\n      throw new Error('Inflection data should be provided in an array.')\r\n    }\r\n\r\n    for (let inflection of inflections) {\r\n      if (!(inflection instanceof Inflection)) {\r\n        throw new Error('All inflection data should be of Inflection object type.')\r\n      }\r\n    }\r\n\r\n    if (meaning !== null && !(meaning instanceof DefinitionSet)) {\r\n      throw new Error('Meaning should be of DefinitionSet object type.')\r\n    }\r\n\r\n    this.lemma = lemma\r\n    this.inflections = inflections\r\n    this.meaning = meaning || new DefinitionSet(this.lemma.word, this.lemma.languageID)\r\n  }\r\n\r\n  /**\r\n   * test to see if a lexeme is populated with meaningful data\r\n   * Returns true if any of these are true:\r\n   *   its lemma has morphological features defined\r\n   *   it has one ore more definitions supplied in the meaning\r\n   *   it has one ore more inflections\r\n   * @return {boolean}\r\n   */\r\n  isPopulated () {\r\n    return Object.entries(this.lemma.features).length > 0 ||\r\n      !this.meaning.isEmpty() ||\r\n      this.inflections.length > 0\r\n  }\r\n\r\n  getGroupedInflections () {\r\n    let lm = LMF.getLanguageModel(this.lemma.languageID)\r\n    return lm.groupInflectionsForDisplay(this.inflections)\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    let lemma = Lemma.readObject(jsonObject.lemma)\r\n    let inflections = []\r\n    for (let inflection of jsonObject.inflections) {\r\n      inflections.push(Inflection.readObject(inflection))\r\n    }\r\n\r\n    let lexeme = new Lexeme(lemma, inflections)\r\n    lexeme.meaning = DefinitionSet.readObject(jsonObject.meaning)\r\n    return lexeme\r\n  }\r\n\r\n  /**\r\n   * Get a sort function for an array of lexemes which applies a primary and secondary\r\n   * sort logic using the sort order specified for each feature. Sorts in descending order -\r\n   * higher sort order means it should come first\r\n   * @param {string} primary feature name to use as primary sort key\r\n   * @param {string} secondary feature name to use as secondary sort key\r\n   * @returns {Function} function which can be passed to Array.sort\r\n   */\r\n  static getSortByTwoLemmaFeatures (primary, secondary) {\r\n    return (a, b) => {\r\n      if (a.lemma.features[primary] && b.lemma.features[primary]) {\r\n        let primarySort = a.lemma.features[primary].compareTo(b.lemma.features[primary])\r\n        if (primarySort !== 0) {\r\n          return primarySort\r\n        } else if (a.lemma.features[secondary] && b.lemma.features[secondary]) {\r\n          return a.lemma.features[secondary].compareTo(b.lemma.features[secondary])\r\n        } else if (a.lemma.features[secondary] && !b.lemma.features[secondary]) {\r\n          return -1\r\n        } else if (!a.lemma.features[secondary] && b.lemma.features[secondary]) {\r\n          return 1\r\n        }\r\n      } else if (a.lemma.features[primary] && !b.lemma.features[primary]) {\r\n        return -1\r\n      } else if (!a.lemma.features[primary] && b.lemma.features[primary]) {\r\n        return 1\r\n      } else {\r\n        return 0\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default Lexeme\r\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\n\nlet typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n\n/**\n * @class  PersianLanguageModel is the lass for Persian specific behavior\n */\nexport default class PersianLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_PERSIAN }\n\n  static get languageCode () { return Constants.STR_LANG_CODE_PER }\n\n  static get languageCodes () { return [Constants.STR_LANG_CODE_PER, Constants.STR_LANG_CODE_FAS, Constants.STR_LANG_CODE_FA, Constants.STR_LANG_CODE_FA_IR] }\n\n  static get contextForward () { return 0 }\n\n  static get contextBackward () { return 0 }\n\n  static get direction () { return Constants.LANG_DIR_RTL }\n\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * Returns alternate encodings for a word\n   * @param {string} word the word\n   * @param {string} preceding optional preceding word\n   * @param {string} following optional following word\n   * @param {string} encoding optional encoding name to filter the response to\n   * @returns {Array} an array of alternate encodings\n   */\n  static alternateWordEncodings (word, preceding = null, following = null, encoding = null) {\n    // Not implemented yet\n    return []\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n}\n","/**\n * An abstraction of an Alpheios resource provider\n */\nclass ResourceProvider {\n  /**\n   * @constructor\n   * @param {string} uri - a unique resource identifier for this provider\n   * @param {string} rights - rights text\n   * @param {Map} rightsTranslations - optional map of translated rights text - keys should be language of text, values the text\n   */\n  constructor (uri = '', rights = '', rightsTranslations = new Map([['default', rights]])) {\n    this.uri = uri\n    this.rights = rightsTranslations\n    if (!this.rights.has('default')) {\n      this.rights.set('default', rights)\n    }\n  }\n\n  /**\n   * @return a string representation of the resource provider, in the default language\n   */\n  toString () {\n    return this.rights.get('default')\n  }\n\n  /**\n   * Produce a string representation of the resource provider, in the requested locale if available\n   * @param {string} languageCode\n   * @return a string representation of the resource provider, in the requested locale if available\n   */\n  toLocaleString (languageCode) {\n    return this.rights.get(languageCode) || this.rights.get('default')\n  }\n\n  static getProxy (provider = null, target = {}) {\n    return new Proxy(target, {\n      get: function (target, name) {\n        return name === 'provider' ? provider : target[name]\n      }\n    })\n  }\n}\n\nexport default ResourceProvider\n","/**\n * stores a scope of lemma translations from python service\n * Contains a primary Lemma object\n */\nclass Translation {\n  /**\n   * Initializes a Translation object.\n   * @param {Lemma} lemma - A lemma object.\n   * @param [] meanings - A set of definitions.\n\n   */\n  constructor (lemma, languageCode, translations = []) {\n    if (!lemma) {\n      throw new Error('Lemma should not be empty.')\n    }\n    this.lemmaWord = lemma.word\n    this.languageCode = languageCode\n    this.glosses = translations\n  }\n\n  static readTranslationFromJSONList (lemma, languageCode, translationsList) {\n    if (!translationsList || !Array.isArray(translationsList)) {\n      throw new Error('Recieved not proper translation list', translationsList)\n    }\n    let curTranslations = translationsList.find(function (element) { return element.in === lemma.word })\n    return new Translation(lemma, languageCode, curTranslations.translations)\n  }\n\n  static loadTranslations (lemma, languageCode, translationsList) {\n    lemma.addTranslation(this.readTranslationFromJSONList(lemma, languageCode, translationsList))\n  }\n}\nexport default Translation\n"],"sourceRoot":""}