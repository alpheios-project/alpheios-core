{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./arabic_language_model.js","webpack:///./chinese_language_model.js","webpack:///./constants.js","webpack:///./definition-set.js","webpack:///./definition.js","webpack:///./driver.js","webpack:///./feature.js","webpack:///./feature_importer.js","webpack:///./feature_list.js","webpack:///./feature_type.js","webpack:///./geez_language_model.js","webpack:///./greek_language_model.js","webpack:///./grm-feature.js","webpack:///./homonym-group.js","webpack:///./homonym.js","webpack:///./inflection.js","webpack:///./inflection_group.js","webpack:///./inflection_grouping_key.js","webpack:///./language_model.js","webpack:///./language_model_factory.js","webpack:///./languages/greek-chars.js","webpack:///./latin_language_model.js","webpack:///./lemma.js","webpack:///./lexeme.js","webpack:///./logging/logger.js","webpack:///./persian_language_model.js","webpack:///./ps-events/ps-event-data.js","webpack:///./ps-events/ps-event.js","webpack:///./resource_provider.js","webpack:///./syriac_language_model.js","webpack:///./texts/author.js","webpack:///./texts/text-work.js","webpack:///./texts/word-usage-example.js","webpack:///./translation.js","webpack:///./treebank_data_item.js","webpack:///./w3c/text-quote-selector.js","webpack:///./word-item.js","webpack:///./word-list.js","webpack:///external \"uuid/v4\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACJ;AACT;;AAElC;AACA;;AAEA;AACA;AACA;AACe,kCAAkC,0DAAa;AAC9D,4BAA4B,QAAQ,yDAAqB;AACzD,8BAA8B,QAAQ,+DAA2B;AACjE,+BAA+B,SAAS,+DAA2B,EAAE,8DAA0B;AAC/F,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B,QAAQ,0DAAsB;AACzD,0BAA0B,QAAQ,4DAAwB;;AAE1D;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK;AACR;AACA,qCAAqC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AAClE;AACA,sCAAsC,KAAK,GAAG,KAAK,GAAG,KAAK,UAAU,KAAK;AAC1E;AACA,uCAAuC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AAC5E;AACA,uCAAuC,KAAK;AAC5C;AACA,qCAAqC,KAAK;AAC1C;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE,uDAAmB,QAAQ,4DAAwB,QAAQ,8DAA0B;AAC7G;AACA,eAAe,mDAAO,sBAAsB,mDAAO;AACnD,mBAAmB,4DAAwB;AAC3C,OAAO,eAAe,mDAAO,sBAAsB,mDAAO;AAC1D,mBAAmB,uDAAmB;AACtC,OAAO,eAAe,mDAAO,sBAAsB,mDAAO;AAC1D,mBAAmB,8DAA0B;AAC7C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mDAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACb;AACS;AACH;;AAExC;AACA;;AAEA;AACA;AACA;AACe,mCAAmC,0DAAa;AAC/D,4BAA4B,QAAQ,0DAAsB;AAC1D,8BAA8B,QAAQ,+DAA2B;AACjE;AACA;AACA,MAAM,8DAA0B;AAChC,MAAM,+DAA2B;AACjC,MAAM,mEAA+B;AACrC,MAAM,mEAA+B;AACrC;AACA;;AAEA,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B,QAAQ,0DAAsB;AACzD,0BAA0B,QAAQ,4DAAwB;;AAE1D;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;;AAEA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,oCAAoC,OAAO;AAChH;AACA;AACA,kBAAkB,0DAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEP;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACO;AACA;AACA;AACA;AACA;AACA;AACP;AACO;AACA;AACA;AACP;AACO;AACA;AACA;AACP;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACO;AACA;;;;;;;;;;;;;AC3OP;AAAA;AAAA;AAAA;AAAqC;AACQ;;AAE9B;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,cAAc;AAC7B;AACA;AACA,uBAAuB,kEAAG;;AAE1B;;AAEA;AACA,mCAAmC,mDAAU;AAC7C;AACA;AACA,kCAAkC,mDAAU;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,kEAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAA4B;AACyB;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,8CAAM;AACpB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,6DAAgB;AACvC,aAAa,6DAAgB;AAC7B,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,yEAAU;;;;;;;;;;;;;AC7CzjB;AACX;AACF;AACF;AACU;AACkB;AACA;AACE;AACE;AACN;AACM;AACF;AACP;AACR;AACS;;AAEZ;AACkB;AACA;AACtB;AACK;;AAEN;AACA;;AAEiB;AACd;;AAoCvC;;;;;;;;;;;;;ACxED;AAAA;AAAA;AAAA;AAAA;AAA8D;AACX;AACX;;AAExC;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,OAAO;AACpB,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,+BAA+B;AAC5C,kBAAkB,0BAA0B;AAC5C,gBAAgB,4BAA4B,GAAG;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gCAAgC,SAAS,gDAAgD,EAAE;AAC3F;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iDAAiD,MAAM;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,MAAM,kEAAoB;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,MAAM,0DAAM,8BAA8B,MAAM;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,0DAAM,mDAAmD,OAAO;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B;AACA,8BAA8B,4DAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA,8CAA8C,SAAS,yDAAyD,EAAE;AAClH;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,kEAAoB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,kEAAoB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACzgBA;AAAA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gCAAgC;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACe,8EAAe;;;;;;;;;;;;;AC/D9B;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACe,0EAAW;;;;;;;;;;;;;AC9D1B;AAAA;AAAA;AAAA;AAAA;AAAkC;AACiB;AACT;AACF;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,sBAAsB;AACnC;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,EAAE,+DAA+D,GAAG,+DAAG;;AAE5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,mDAAO;AACrC;AACA;AACA,OAAO;AACP,0BAA0B,mDAAO;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,eAAe;AACf;AACA;AACA;AACA,iBAAiB,mDAAO;AACxB,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,eAAe;AACf;AACA;AACA,eAAe,mDAAO;AACtB;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,4DAAe;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA,iDAAiD,mDAAO;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,+BAA+B;AACtC;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,+DAAG;AAClB,yEAAyE,8BAA8B,4BAA4B,2BAA2B;AAC9J;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,+DAAG;AAChB,uEAAuE,4BAA4B,4BAA4B,2BAA2B;AAC1J;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,0EAAW;;;;;;;;;;;;;ACvP1B;AAAA;AAAA;AAAA;AAAA;AAA+C;AACb;AACS;;AAE3C;AACA;;AAEA;AACA;AACA;AACe,gCAAgC,0DAAa;AAC5D,4BAA4B,QAAQ,uDAAmB;;AAEvD,8BAA8B,QAAQ,+DAA2B;;AAEjE,+BAA+B,SAAS,+DAA2B;;AAEnE,gCAAgC;;AAEhC,iCAAiC;;AAEjC,2BAA2B,QAAQ,0DAAsB;;AAEzD,0BAA0B,QAAQ,4DAAwB;AAC1D;AACA;AACA,SAAS,0DAAa;AACtB;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACe;AACnB;AACT;AACM;;AAEW;;AAEnD;AACA;AACA;AACA;AACA;AACe,iCAAiC,0DAAa;AAC7D,4BAA4B,QAAQ,wDAAoB;AACxD,8BAA8B,QAAQ,+DAA2B;AACjE,+BAA+B,SAAS,+DAA2B;AACnE,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B,QAAQ,0DAAsB;AACzD,0BAA0B,QAAQ,4DAAwB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0DAAa;AACtB;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,iEAA6B;AACvC,UAAU,oEAAgC;AAC1C,UAAU,8DAA0B;AACpC,UAAU,6DAAyB;AACnC,UAAU,iEAA6B;AACvC,UAAU,4DAAwB;AAClC,UAAU,8DAA0B;AACpC,UAAU,8DAA0B;AACpC,UAAU,6DAAyB;AACnC,UAAU,4DAAwB;AAClC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,0DAAsB;AAChC,UAAU,wDAAoB;AAC9B,UAAU,sDAAkB;AAC5B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,6DAAyB;AACnC,UAAU,2DAAuB;AACjC,UAAU,yDAAqB;AAC/B,UAAU,6DAAyB;AACnC,UAAU,2DAAuB;AACjC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,2DAAuB;AACjC,UAAU,6DAAyB;AACnC,UAAU,0DAAsB;AAChC,UAAU,2DAAuB;AACjC,UAAU,8DAA0B;AACpC,UAAU,kEAA8B;AACxC,UAAU,0DAAsB;AAChC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,2DAAuB;AACjC,UAAU,0DAAsB;AAChC,UAAU,gEAA4B;AACtC,UAAU,0DAAsB;AAChC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,6DAAyB;AACnC,UAAU,8DAA0B;AACpC,UAAU,2DAAuB;AACjC,UAAU,6DAAyB;AACnC;AACA;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAO,aAAa,mDAAO,gBAAgB,mDAAO,aAAa,mDAAO,mBAAmB,mDAAO,cAAc,mDAAO;AACjI;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,UAAU,KAAK;AACvC,WAAW,KAAK,GAAG,KAAK,GAAG,KAAK;;AAEhC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,UAAU,KAAK,SAAS,KAAK;AAC7B,WAAW,KAAK,GAAG,KAAK;AACxB;AACA;AACA;AACA,WAAW,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,IAAI;;AAE/C;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,aAAa,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI;AACtE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAsB,EAAE,0DAAsB,EAAE,0DAAsB;AACjG,kCAAkC,mDAAO;AACzC,4CAA4C,mDAAO;AACnD;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,MAAM,0DAAM,wGAAwG,mDAAO;AAC3H;;AAEA;AACA,MAAM,kEAAoB;AAC1B,gCAAgC,mDAAO;AACvC,iBAAiB,mDAAO,uBAAuB,0DAAsB;;AAErE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mDAAO,+BAA+B,mDAAO;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mDAAO;AACtD,kDAAkD,mDAAO;AACzD;AACA;AACA;AACA;AACA;AACA,iBAAiB,mDAAO,CAAC,mDAAO;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,KAAK,iCAAiC,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,WAAW,iEAAU;AACrB;AACA;;;;;;;;;;;;;ACxYA;AAAA;AAAA;AAAA;AAA6C;AACX;AACM;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,+DAA+D,GAAG,kEAAG;AAC5E;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kEAAG;AACnD;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,aAAa,kEAAG;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAG;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,mDAAO;AAC/C;AACA;AACA;AACA,mBAAmB,mDAAO;AAC1B;AACA,KAAK;AACL,qCAAqC,mDAAO;AAC5C,mBAAmB,mDAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACe,yEAAU;;;;;;;;;;;;;ACrKzB;AAAA;AAAA;AAAkC;;AAEnB;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA,0BAA0B,wBAAwB,KAAK;AACvD;AACA;AACA;AACA;AACA;AACA,iCAAiC,8BAA8B;AAC/D;AACA,eAAe,mDAAO;AACtB;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACV;AACF;AACU;;AAExC;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B,kDAAM;AACpC;AACA;AACA;;AAEA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,eAAe,QAAQ;AACvB;AACA;AACA,sBAAsB,iDAAK;AAC3B,uBAAuB,kDAAM;AAC7B;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,kDAAM;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,IAAI,0DAAM;AACV,WAAW,+DAAG;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,kDAAM;;AAE1E,+CAA+C,kBAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,sEAAO;;;;;;;;;;;;;AC5KtB;AAAA;AAAA;AAAA;AAAA;AAAkC;AACW;AACF;AACH;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,kEAAG;AACZ,kCAAkC,SAAS;AAC3C;;AAEA;AACA;AACA;AACA,KAAK,EAAE,+DAA+D,GAAG,kEAAG;AAC5E,iBAAiB,kEAAG;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C,+BAA+B,SAAS;AACxC,gCAAgC,SAAS;AACzC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;;AAEA,iCAAiC,0DAAsB;AACvD;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,iDAAiD;AACjD;AACA,+CAA+C;AAC/C,iDAAiD;;AAEjD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP,qBAAqB,mDAAO,wBAAwB,mDAAO;AAC3D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA,kBAAkB,kEAAG;AACrB;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA,IAAI,0DAAM;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,mDAAO;AACtC;AACA;;AAEA,WAAW,kEAAG;AACd,qCAAqC,8BAA8B;AACnE,wBAAwB,2BAA2B;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,mDAAO;AACpC;AACA;;AAEA,SAAS,kEAAG;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,UAAU,YAAY,YAAY,YAAY,YAAY,YAAY,2BAA2B;AACtI;AACA,mBAAmB,QAAQ,IAAI,oBAAoB;AACnD;AACA;AACA;AACA;AACA,qBAAqB,IAAI,KAAK,MAAM;AACpC,OAAO;AACP,qBAAqB,IAAI,IAAI,MAAM;AACnC;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAG;;AAE/B;AACA;AACA,8BAA8B,mDAAO;AACrC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kEAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,yEAAU;;;;;;;;;;;;;ACvXzB;AAAA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACe,8EAAe;;;;;;;;;;;;;ACtB9B;AAAA;AAAkC;;AAElC;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,2CAA2C,mDAAO;AAClD;AACA;AACA;AACA;AACA;;AAEe,oFAAqB;;;;;;;;;;;;;AC/CpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACmB;AAC5B;AACS;AACqB;AACb;AACX;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B,QAAQ,0DAAsB;AACzD,0BAA0B,QAAQ,4DAAwB;;AAE1D;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL,uCAAuC,YAAY,2BAA2B,KAAK;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA,IAAI,0DAAM;AACV;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,4DAAwB;AACnC;;AAEA;AACA,WAAW,qEAAiC;AAC5C;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,yDAAqB;AAC/B,UAAU,4DAAwB;AAClC,UAAU,4DAAwB;AAClC,UAAU,0DAAsB;AAChC,UAAU,8DAA0B;AACpC,UAAU,8DAA0B;AACpC,UAAU,+DAA2B;AACrC,UAAU,uDAAmB;AAC7B,UAAU,0DAAsB;AAChC,UAAU,2DAAuB;AACjC,UAAU,yDAAqB;AAC/B,UAAU,8DAA0B;AACpC,UAAU,0DAAsB;AAChC,UAAU,yDAAqB;AAC/B,UAAU,yDAAqB;AAC/B,UAAU,uDAAmB;AAC7B,UAAU,kEAA8B;AACxC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,4DAAwB;AAClC,UAAU,2DAAuB;AACjC,UAAU,yDAAqB;AAC/B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,0DAAsB;AAChC,UAAU,4DAAwB;AAClC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,0DAAsB;AAChC,UAAU,wDAAoB;AAC9B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI,0DAAM;AACV;AACA;AACA,iBAAiB,wDAAW;AAC5B,KAAK;AACL,kCAAkC,KAAK;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB,mDAAO;AACxB,KAAK;AACL,kCAAkC,YAAY;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA,GAAG,KAAK;AACR;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,oBAAoB,UAAU;AAC9B;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,kEAAoB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL,sCAAsC,aAAa;AACnD;AACA;;AAEA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,mEAAqB;AACnD,SAAS,mDAAO,aAAa,mDAAO,mBAAmB,mDAAO,gBAAgB,mDAAO;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wCAAwC,4DAAe;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mDAAO;AACxB;AACA,oBAAoB,mDAAO;AAC3B;AACA,SAAS,eAAe,mDAAO;AAC/B;AACA,oBAAoB,mDAAO;AAC3B,SAAS,eAAe,mDAAO,iBAAiB,uDAAmB;AACnE;AACA,oBAAoB,mDAAO;AAC3B,SAAS,eAAe,mDAAO,iBAAiB,yDAAqB;AACrE,oBAAoB,mDAAO;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,mEAAqB,mBAAmB,2CAA2C;AACnH;AACA;AACA;AACA,SAAS;AACT,0CAA0C,4DAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAO,gCAAgC,mDAAO;AAC7E,kCAAkC,mEAAqB,QAAQ,mDAAO,cAAc,mDAAO;AAC3F;AACA;AACA;AACA,WAAW;AACX,8CAA8C,4DAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mEAAqB;AACzD,eAAe,mDAAO,gBAAgB,mDAAO,mBAAmB,mDAAO,eAAe,mDAAO,eAAe,mDAAO;AACnH,gBAAgB,mDAAO,cAAc,mDAAO,aAAa,mDAAO;AAChE;AACA;AACA;AACA,aAAa;AACb,gDAAgD,4DAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI,0DAAM;AACV;AACA;AACA;;AAEe,4EAAa;;;;;;;;;;;;;AC1qB5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACW;AACA;AACE;AACE;AACN;AACM;AACF;AACjB;;AAE3C;AACA,GAAG,8DAA0B,EAAE,gEAAkB;AACjD,GAAG,+DAA2B,EAAE,gEAAkB;AAClD,GAAG,+DAA2B,EAAE,gEAAkB;AAClD,GAAG,+DAA2B,EAAE,iEAAmB;AACnD,GAAG,8DAA0B,EAAE,iEAAmB;AAClD,GAAG,+DAA2B,EAAE,kEAAoB;AACpD,GAAG,+DAA2B,EAAE,+DAAiB;AACjD,GAAG,+DAA2B,EAAE,kEAAoB;AACpD,GAAG,+DAA2B,EAAE,iEAAmB;AACnD,GAAG,+DAA2B,EAAE,iEAAmB;AACnD,GAAG,oEAAgC,EAAE,iEAAmB;AACxD;;AAEA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,0DAAa;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa;AAC5B;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4DAAwB;AACnC;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAiC;AAC5C;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,eAAe,OAAO;AACtB,SAAS,OAAO;AAChB,SAAS,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA,YAAY,uDAAmB,EAAE,yDAAqB,EAAE,0DAAsB;AAC9E;AACA;AACe,mFAAoB;;;;;;;;;;;;;AC3JnC;AAAA;AAAe;AACfzTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACb;AACS;AACH;;AAExC;AACA;;AAEA;AACA;AACA;AACe,iCAAiC,0DAAa;AAC7D,4BAA4B,QAAQ,wDAAoB;AACxD,8BAA8B,QAAQ,+DAA2B;AACjE,+BAA+B,SAAS,8DAA0B,EAAE,+DAA2B;AAC/F,gCAAgC;AAChC,iCAAiC;AACjC,2BAA2B,QAAQ,0DAAsB;AACzD,0BAA0B,QAAQ,4DAAwB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0DAAa;AACtB;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,4DAAwB;AAClC,UAAU,6DAAyB;AACnC,UAAU,8DAA0B;AACpC,UAAU,iEAA6B;AACvC,UAAU,4DAAwB;AAClC,UAAU,iEAA6B;AACvC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,0DAAsB;AAChC,UAAU,wDAAoB;AAC9B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,6DAAyB;AACnC,UAAU,2DAAuB;AACjC,UAAU,yDAAqB;AAC/B,UAAU,6DAAyB;AACnC,UAAU,2DAAuB;AACjC,UAAU,2DAAuB;AACjC,UAAU,2DAAuB;AACjC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,2DAAuB;AACjC,UAAU,6DAAyB;AACnC,UAAU,0DAAsB;AAChC,UAAU,2DAAuB;AACjC,UAAU,8DAA0B;AACpC,UAAU,kEAA8B;AACxC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,0DAAsB;AAChC,UAAU,2DAAuB;AACjC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,6DAAyB;AACnC,UAAU,8DAA0B;AACpC,UAAU,6DAAyB;AACnC,UAAU,6DAAyB;AACnC,UAAU,yDAAqB;AAC/B,UAAU,4DAAwB;AAClC,UAAU,6DAAyB;AACnC,UAAU,6DAAyB;AACnC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B,UAAU,qDAAiB;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAO,aAAa,mDAAO,gBAAgB,mDAAO,aAAa,mDAAO,mBAAmB,mDAAO,cAAc,mDAAO;AACjI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAO;AACzC,WAAW,uDAAmB,EAAE,kEAA8B,EAAE,yDAAqB,EAAE,4DAAwB,sBAAsB,mDAAO;AAC5I;AACA;AACA,OAAO,qBAAqB,mDAAO,uBAAuB,0DAAsB;AAChF;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,MAAM,0DAAM,wGAAwG,mDAAO;AAC3H;;AAEA;AACA;AACA;;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACX;AACQ;AACd;AACY;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,aAAa,SAAS;AACtB,aAAa,OAAO;;AAEpB,aAAa,YAAY;AACzB;AACA,mEAAmE;AACnE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,EAAE,+DAA+D,GAAG,kEAAG;;AAE5E;AACA;AACA;;AAEA,cAAc,8CAAM;AACpB;;AAEA;AACA,IAAI,0DAAM;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,mDAAO;AACnC,OAAO;AACP;;AAEA;AACA,6BAA6B,uDAAW;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA,IAAI,0DAAM;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,mDAAO;AACtC;AACA;;AAEA,WAAW,kEAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,mDAAO;AACpC;AACA;;AAEA,SAAS,kEAAG;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA,yBAAyB,oBAAoB,KAAK;AAClD;AACA,uBAAuB,mDAAO;AAC9B,sBAAsB,mDAAO;AAC7B,qBAAqB,mDAAO,oCAAoC,mDAAO;AACvE;AACA;;AAEA;AACA;AACA,QAAQ,kEAAG;AACX,SAAS,+BAA+B;AACxC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA,sBAAsB,kEAAG;;AAEzB;AACA,mFAAmF,+BAA+B;AAClH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK;;;;;;;;;;;;;ACnQpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACU;AACO;AACF;AACT;AACiB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,aAAa;AAC1B,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,iDAAK;AAChC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,sDAAU;AAC5C;AACA;AACA;;AAEA,iDAAiD,0DAAa;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,0DAAa;AAC/C;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA,+BAA+B,oBAAoB,KAAK;AACxD,wDAAwD,YAAY;AACpE;;AAEA;AACA;AACA;AACA,aAAa,OAAO,0CAA0C;AAC9D;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,0DAAE;AACnE,8CAA8C,kBAAkB;AAChE;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,kEAAG;AAClB;AACA;;AAEA;AACA,kBAAkB,iDAAK;AACvB;AACA;AACA,uBAAuB,sDAAU;AACjC;;AAEA;AACA;AACA,uBAAuB,0DAAa;AACpC;;AAEA;AACA,uBAAuB,6DAAgB;AACvC,aAAa,6DAAgB;AAC7B,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,wDAAwD;;AAEpG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACe,qEAAM;;;;;;;;;;;;;AChRrB;AAAA;AAAA;;AAEA;;AAEA;AACA;AACA;AACe;AACf;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA,gBAAgB,iDAAiD,KAAK;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO,8CAA8C,wBAAwB;AAC1F,eAAe,OAAO;AACtB;AACA,kCAAkC;AAClC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9IA;AAAA;AAAA;AAAA;AAA+C;AACJ;;AAE3C;AACA;;AAEA;AACA;AACA;AACe,mCAAmC,0DAAa;AAC/D,4BAA4B,QAAQ,0DAAsB;;AAE1D,8BAA8B,QAAQ,+DAA2B;;AAEjE,+BAA+B,SAAS,+DAA2B,EAAE,+DAA2B,EAAE,8DAA0B,EAAE,iEAA6B;;AAE3J,gCAAgC;;AAEhC,iCAAiC;;AAEjC,2BAA2B,QAAQ,0DAAsB;;AAEzD,0BAA0B,QAAQ,4DAAwB;;AAE1D;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,4BAA4B,eAAe,GAAG,YAAY,OAAO,UAAU,QAAQ,eAAe,OAAO,UAAU;AACnH;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACkC;;AAE9D;AACA;AACA;AACe;AACf;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA,aAAa,gBAAgB;AAC7B,eAAe,SAAS;AACxB;AACA;AACA,kBAAkB,8CAAM;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO,SAAS;AAC7B,aAAa,OAAO;AACpB;AACA,gBAAgB;AAChB,+CAA+C,uEAAW;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtFA;AAAA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEe,+EAAgB;;;;;;;;;;;;;ACnE/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACb;AACS;AACkB;AACb;;AAEhD;AACA;;AAEA;AACA;AACA;AACe,kCAAkC,0DAAa;AAC9D,4BAA4B,QAAQ,yDAAqB;;AAEzD,8BAA8B,QAAQ,+DAA2B;;AAEjE,+BAA+B,SAAS,+DAA2B,EAAE,+DAA2B,EAAE,oEAAgC;;AAElI,gCAAgC;;AAEhC,iCAAiC;;AAEjC,2BAA2B,QAAQ,0DAAsB;;AAEzD,0BAA0B,QAAQ,4DAAwB;AAC1D;AACA;AACA,SAAS,0DAAa;AACtB;AACA,QAAQ,mDAAO;AACf;AACA,UAAU,yDAAqB;AAC/B,UAAU,4DAAwB;AAClC,UAAU,4DAAwB;AAClC,UAAU,0DAAsB;AAChC,UAAU,8DAA0B;AACpC,UAAU,8DAA0B;AACpC,UAAU,+DAA2B;AACrC,UAAU,uDAAmB;AAC7B,UAAU,0DAAsB;AAChC,UAAU,2DAAuB;AACjC,UAAU,yDAAqB;AAC/B,UAAU,8DAA0B;AACpC,UAAU,0DAAsB;AAChC,UAAU,yDAAqB;AAC/B,UAAU,yDAAqB;AAC/B,UAAU,uDAAmB;AAC7B,UAAU,kEAA8B;AACxC,UAAU,+DAA2B;AACrC;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA,QAAQ,mDAAO;AACf;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,yGAAyG,UAAU;AACnH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,gEAAqB;AACnD,SAAS,mDAAO,aAAa,mDAAO,mBAAmB,mDAAO,cAAc,mDAAO,cAAc,mDAAO;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wCAAwC,yDAAe;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mDAAO;AACxB;AACA,oBAAoB,mDAAO;AAC3B;AACA,SAAS,eAAe,mDAAO;AAC/B;AACA,oBAAoB,mDAAO;AAC3B,SAAS,eAAe,mDAAO,iBAAiB,uDAAmB;AACnE;AACA,oBAAoB,mDAAO;AAC3B,SAAS,eAAe,mDAAO,iBAAiB,yDAAqB;AACrE,oBAAoB,mDAAO;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,gEAAqB,mBAAmB,2CAA2C;AACnH;AACA;AACA;AACA,SAAS;AACT,0CAA0C,yDAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAO,gCAAgC,mDAAO;AAC7E,kCAAkC,gEAAqB,QAAQ,mDAAO,cAAc,mDAAO;AAC3F;AACA;AACA;AACA,WAAW;AACX,8CAA8C,yDAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gEAAqB;AACzD,eAAe,mDAAO,gBAAgB,mDAAO,mBAAmB,mDAAO,eAAe,mDAAO,eAAe,mDAAO;AACnH,gBAAgB,mDAAO,cAAc,mDAAO,aAAa,mDAAO;AAChE;AACA;AACA;AACA,aAAa;AACb,gDAAgD,yDAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/NA;AAAA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO,oCAAoC;AACxD,aAAa,OAAO,2CAA2C;AAC/D,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,qEAAM;;;;;;;;;;;;;AC3DrB;AAAA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO,oCAAoC;AACxD,aAAa,OAAO,2CAA2C;AAC/D,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,uEAAQ;;;;;;;;;;;;;ACtEvB;AAAA;AAAA;AAAA;AAA6D;AACE;;AAEhD,+BAA+B,mEAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,cAAc,YAAY,+DAA+D,oBAAoB,SAAS,YAAY;AAClI;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,kBAAkB,kEAAoB;AACtC;AACA;AACA;;AAEA;AACA,kBAAkB,kEAAoB;AACtC;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sEAAsE,mCAAmC;AACzG;AACA;AACA,aAAa,6DAAgB;AAC7B,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,6DAAgB;AACvC,aAAa,6DAAgB;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACe,0EAAW;;;;;;;;;;;;;AC9D1B;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,sDAAsD,oBAAoB;AACxH;;AAEA,mDAAmD,oDAAoD,oBAAoB;AAC3H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6BAA6B,YAAY,OAAO,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,gBAAgB,yCAAyC;AACzD;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gBAAgB;AAChB,gBAAgB;AAChB,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC4B;;AAEb;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAM;AACpB;;AAEA;AACA,0EAA0E,UAAU;AACpF;AACA;;AAEA,wBAAwB,YAAY,6CAA6C,UAAU,UAAU,YAAY;AACjH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,YAAY,EAAE,UAAU,EAAE,YAAY;AACpE;;AAEA,+BAA+B,gBAAgB,EAAE,cAAc,EAAE,gBAAgB;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAkC;AAC0B;;AAE7C;AACf;AACA;AACA;AACA,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,oBAAoB;AAC1B,MAAM,QAAQ;AACd;AACA,uBAAuB,uGAAuG,qDAAqD;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mDAAO;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mEAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAkC;;AAEnB;AACf;AACA;AACA,aAAa,OAAO;AACpB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,kBAAkB,QAAQ,kBAAkB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,2BAA2B,kDAAQ,EAAE,0DAA0D;AAC/F;AACA,kCAAkC,6BAA6B,oBAAoB,EAAE;AACrF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,cAAc,aAAa,GAAG,yBAAyB;AACvD;AACA;;;;;;;;;;;;ACtGA,qD","file":"alpheios-data-models.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"uuid/v4\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"uuid/v4\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"uuid/v4\")) : factory(root[\"uuid/v4\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function(__WEBPACK_EXTERNAL_MODULE_uuid_v4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./driver.js\");\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\nimport Feature from './feature.js'\n\nconst typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class ArabicLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_ARABIC }\n  static get languageCode () { return Constants.STR_LANG_CODE_ARA }\n  static get languageCodes () { return [Constants.STR_LANG_CODE_ARA, Constants.STR_LANG_CODE_AR] }\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_RTL }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\nfor the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * @override\n   */\n  static alternateWordEncodings ({\n    word = null, preceding = null, following = null, encoding = null,\n    preserveCase = false, includeOriginal = false\n  } = {}) {\n    // tanwin (& tatweel) - drop FATHATAN, DAMMATAN, KASRATAN, TATWEEL\n    const tanwin = word.replace(/[\\u{064B}\\u{064C}\\u{064D}\\u{0640}]/ug, '')\n    // hamzas - replace ALEF WITH MADDA ABOVE, ALEF WITH HAMZA ABOVE/BELOW with ALEF\n    const hamza = tanwin.replace(/[\\u{0622}\\u{0623}\\u{0625}]/ug, '\\u{0627}')\n    // harakat - drop FATHA, DAMMA, KASRA, SUPERSCRIPT ALEF, ALEF WASLA\n    const harakat = hamza.replace(/[\\u{064E}\\u{064F}\\u{0650}\\u{0670}\\u{0671}]/ug, '')\n    // shadda\n    const shadda = harakat.replace(/\\u{0651}/ug, '')\n    // sukun\n    const sukun = shadda.replace(/\\u{0652}/ug, '')\n    // alef\n    const alef = sukun.replace(/\\u{0627}/ug, '')\n    const alternates = new Map([\n      ['tanwin', tanwin],\n      ['hamza', hamza],\n      ['harakat', harakat],\n      ['shadda', shadda],\n      ['sukun', sukun],\n      ['alef', alef]\n    ])\n    let fullList = [] // eslint-disable-line prefer-const\n    if (encoding !== null && alternates.has(encoding)) {\n      fullList = [alternates.get(encoding)]\n    } else {\n      fullList = Array.from(alternates.values())\n    }\n    if (!includeOriginal) {\n      fullList = fullList.filter(w => w !== word)\n    }\n    return fullList\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   *\n   * @returns {string} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\\u200C\\u200D\"\n  }\n\n  /**\n   * Aggregate inflections for display according to language model characteristics\n   *\n   * @param inflections\n   */\n  static aggregateInflectionsForDisplay (inflections) {\n    // TODO at some point we might want to be able to check the provider in here\n    // because this really only applies to the specifics of the Aramorph parser\n    let aggregated = [] // eslint-disable-line prefer-const\n    // eslint-disable-next-line prefer-const\n    let aggregates = { [Constants.POFS_NOUN]: [], [Constants.POFS_ADJECTIVE]: [], [Constants.POFS_NOUN_PROPER]: [] }\n    for (const infl of inflections) {\n      if (infl[Feature.types.morph] && infl[Feature.types.morph].value.match(/ADJ[uaiNK]/)) {\n        aggregates[Constants.POFS_ADJECTIVE].push(infl)\n      } else if (infl[Feature.types.morph] && infl[Feature.types.morph].value.match(/NOUN[uaiNK]/)) {\n        aggregates[Constants.POFS_NOUN].push(infl)\n      } else if (infl[Feature.types.morph] && infl[Feature.types.morph].value.match(/NOUN_PROP[uaiNK]/)) {\n        aggregates[Constants.POFS_NOUN_PROPER].push(infl)\n      } else {\n        // we are also going to keep the examples out of the display for now\n        infl.example = null\n        aggregated.push(infl)\n      }\n    }\n    for (const type of Object.keys(aggregates)) {\n      const base = aggregated.filter((i) => i[Feature.types.part].value === type)\n      if (base.length !== 1) {\n        // if we don't have the base form then we don't really know what to do here\n        // so just put the inflection back in the ones available for display\n        aggregated.push(...aggregates[type])\n      }\n      // we may decide we want to keep the extra suffix and morph information\n      // from the alternate inflections but for now we just will drop it from\n      // the inflections that are displayed\n    }\n    return aggregated\n  }\n}\n","import LanguageModel from './language_model.js'\nimport Feature from './feature.js'\nimport * as Constants from './constants.js'\nimport Logger from './logging/logger.js'\n\nlet typeFeatures = new Map() // eslint-disable-line prefer-const\nlet typeFeaturesInitialized = false\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class ChineseLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_CHINESE }\n  static get languageCode () { return Constants.STR_LANG_CODE_ZHO }\n  static get languageCodes () {\n    return [\n      Constants.STR_LANG_CODE_ZH,\n      Constants.STR_LANG_CODE_ZHO,\n      Constants.STR_LANG_CODE_ZH_HANT,\n      Constants.STR_LANG_CODE_ZH_HANS\n    ]\n  }\n\n  static get contextForward () { return 5 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_CHAR }\n\n  static get featureValues () {\n    return new Map([\n      [\n        Feature.types.fullForm,\n        []\n      ],\n\n      [\n        Feature.types.frequency,\n        []\n      ],\n      [\n        Feature.types.pronunciation,\n        []\n      ],\n      [\n        Feature.types.radical,\n        []\n      ]\n\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  static getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>\\\\\\n\\r\\uFF0C\\u3001\\u3002\\u300C\\u300D\\u300A\\u300B\\u200C\\u200D\"\n  }\n\n  static _isVowel (aLetter) {\n    return ['a', 'e', 'i', 'o', 'u'].includes(aLetter)\n  }\n\n  static formatPinyin (aPinyin) {\n    const _a = ['\\u0101', '\\u00E1', '\\u01CE', '\\u00E0', 'a']\n    const _e = ['\\u0113', '\\u00E9', '\\u011B', '\\u00E8', 'e']\n    const _i = ['\\u012B', '\\u00ED', '\\u01D0', '\\u00EC', 'i']\n    const _o = ['\\u014D', '\\u00F3', '\\u01D2', '\\u00F2', 'o']\n    const _u = ['\\u016B', '\\u00FA', '\\u01D4', '\\u00F9', 'u']\n    const _v = ['\\u01D6', '\\u01D8', '\\u01DA', '\\u01DC', '\\u00FC']\n\n    // Remove spaces before and after split parts; eliminate empty split parts\n    aPinyin = aPinyin.split(/(\\d)/).map(el => el.trim()).filter(el => Boolean(el))\n\n    let formatedPinyin = [] // eslint-disable-line prefer-const\n    const toneFormat = {\n      1: 0, 2: 1, 3: 2, 4: 3\n    }\n\n    for (let j = 0; j < aPinyin.length; j++) {\n      if (j % 2 === 0) {\n        let pin = aPinyin[j]\n        const tone = toneFormat[aPinyin[j + 1]] !== undefined ? toneFormat[aPinyin[j + 1]] : 4\n\n        if (pin.indexOf('a') !== -1) {\n          pin = pin.replace('a', _a[tone])\n        } else if (pin.indexOf('e') !== -1) {\n          pin = pin.replace('e', _e[tone])\n        } else if (pin.indexOf('ou') !== -1) {\n          pin = pin.replace('o', _o[tone])\n        } else {\n          for (let k = pin.length - 1; k >= 0; k--) {\n            if (this._isVowel(pin[k])) {\n              switch (pin[k]) {\n                case 'i':\n                  pin = pin.replace('i', _i[tone])\n                  break\n                case 'o':\n                  pin = pin.replace('o', _o[tone])\n                  break\n                case 'u':\n                  if (k + 1 < pin.length - 1 && pin[k + 1] === ':') { pin = pin.replace('u:', _v[tone]) } else { pin = pin.replace('u', _u[tone]) }\n                  break\n                default:\n                  Logger.getInstance().warn('some kind of weird vowel', pin[k])\n              }\n              break\n            }\n          }\n        }\n        formatedPinyin.push(pin)\n      }\n    }\n    return formatedPinyin.join(' ').trim()\n  }\n}\n","/* eslint-disable no-unused-vars */\nexport const LANG_UNIT_WORD = Symbol('word')\nexport const LANG_UNIT_CHAR = Symbol('char')\nexport const LANG_DIR_LTR = Symbol('ltr')\nexport const LANG_DIR_RTL = Symbol('rtl')\nexport const LANG_UNDEFINED = Symbol('undefined')\nexport const LANG_LATIN = Symbol('latin')\nexport const LANG_GREEK = Symbol('greek')\nexport const LANG_ARABIC = Symbol('arabic')\nexport const LANG_PERSIAN = Symbol('persian')\nexport const LANG_GEEZ = Symbol('ge\\'ez')\nexport const LANG_CHINESE = Symbol('chinese')\nexport const LANG_SYRIAC = Symbol('syriac')\n\nexport const STR_LANG_CODE_UNDEFINED = 'undefined'\nexport const STR_LANG_CODE_LAT = 'lat'\nexport const STR_LANG_CODE_LA = 'la'\nexport const STR_LANG_CODE_GRC = 'grc'\nexport const STR_LANG_CODE_ARA = 'ara'\nexport const STR_LANG_CODE_AR = 'ar'\nexport const STR_LANG_CODE_FAS = 'fas'\nexport const STR_LANG_CODE_PER = 'per'\nexport const STR_LANG_CODE_FA_IR = 'fa-IR'\nexport const STR_LANG_CODE_FA = 'fa'\nexport const STR_LANG_CODE_GEZ = 'gez'\nexport const STR_LANG_CODE_ZHO = 'zho'\nexport const STR_LANG_CODE_ZH = 'zh'\nexport const STR_LANG_CODE_ZH_HANT = 'zh-Hant' // Traditional Chinese\nexport const STR_LANG_CODE_ZH_HANS = 'zh-Hans' // Simplified Chinese\nexport const STR_LANG_CODE_SYC = 'syc'\nexport const STR_LANG_CODE_SYR = 'syr'\nexport const STR_LANG_CODE_SYR_SYRJ = 'syr-Syrj'\nexport const STR_LANG_CODE_ENG = 'eng'\n\n// parts of speech\nexport const POFS_ADJECTIVE = 'adjective'\nexport const POFS_ADVERB = 'adverb'\nexport const POFS_ADVERBIAL = 'adverbial'\nexport const POFS_ARTICLE = 'article'\nexport const POFS_CONJUNCTION = 'conjunction'\nexport const POFS_EXCLAMATION = 'exclamation'\nexport const POFS_INTERJECTION = 'interjection'\nexport const POFS_NOUN = 'noun'\nexport const POFS_NOUN_PROPER = 'proper noun'\nexport const POFS_NUMERAL = 'numeral'\nexport const POFS_PARTICLE = 'particle'\nexport const POFS_PREFIX = 'prefix'\nexport const POFS_PREPOSITION = 'preposition'\nexport const POFS_PRONOUN = 'pronoun'\nexport const POFS_SUFFIX = 'suffix'\nexport const POFS_GERUNDIVE = 'gerundive'\nexport const POFS_SUPINE = 'supine'\nexport const POFS_VERB = 'verb'\nexport const POFS_VERB_PARTICIPLE = 'verb participle'\nexport const POFS_DENOMINATIVE = 'denominative'\n// gender\nexport const GEND_MASCULINE = 'masculine'\nexport const GEND_FEMININE = 'feminine'\nexport const GEND_NEUTER = 'neuter'\nexport const GEND_COMMON = 'common'\nexport const GEND_ANIMATE = 'animate'\nexport const GEND_INANIMATE = 'inanimate'\n// Polish gender types\nexport const GEND_PERSONAL_MASCULINE = 'personal masculine'\nexport const GEND_ANIMATE_MASCULINE = 'animate masculine'\nexport const GEND_INANIMATE_MASCULINE = 'inanimate masculine'\n// comparative\nexport const COMP_POSITIVE = 'positive'\nexport const COMP_COMPARITIVE = 'comparative'\nexport const COMP_SUPERLATIVE = 'superlative'\n// case\nexport const CASE_ABESSIVE = 'abessive'\nexport const CASE_ABLATIVE = 'ablative'\nexport const CASE_ABSOLUTIVE = 'absolutive'\nexport const CASE_ACCUSATIVE = 'accusative'\nexport const CASE_ADDIRECTIVE = 'addirective'\nexport const CASE_ADELATIVE = 'adelative'\nexport const CASE_ADESSIVE = 'adessive'\nexport const CASE_ADVERBIAL = 'adverbial'\nexport const CASE_ALLATIVE = 'allative'\nexport const CASE_ANTESSIVE = 'antessive'\nexport const CASE_APUDESSIVE = 'apudessive'\nexport const CASE_AVERSIVE = 'aversive'\nexport const CASE_BENEFACTIVE = 'benefactive'\nexport const CASE_CARITIVE = 'caritive'\nexport const CASE_CAUSAL = 'causal'\nexport const CASE_CAUSAL_FINAL = 'causal-final'\nexport const CASE_COMITATIVE = 'comitative'\nexport const CASE_DATIVE = 'dative'\nexport const CASE_DELATIVE = 'delative'\nexport const CASE_DIRECT = 'direct'\nexport const CASE_DISTRIBUTIVE = 'distributive'\nexport const CASE_DISTRIBUTIVE_TEMPORAL = 'distributive-temporal'\nexport const CASE_ELATIVE = 'elative'\nexport const CASE_ERGATIVE = 'ergative'\nexport const CASE_ESSIVE = 'essive'\nexport const CASE_ESSIVE_FORMAL = 'essive-formal'\nexport const CASE_ESSIVE_MODAL = 'essive-modal'\nexport const CASE_EQUATIVE = 'equative'\nexport const CASE_EVITATIVE = 'evitative'\nexport const CASE_EXESSIVE = 'exessive'\nexport const CASE_FINAL = 'final'\nexport const CASE_FORMAL = 'formal'\nexport const CASE_GENITIVE = 'genitive'\nexport const CASE_ILLATIVE = 'illative'\nexport const CASE_INELATIVE = 'inelative'\nexport const CASE_INESSIVE = 'inessive'\nexport const CASE_INSTRUCTIVE = 'instructive'\nexport const CASE_INSTRUMENTAL = 'instrumental'\nexport const CASE_INSTRUMENTAL_COMITATIVE = 'instrumental-comitative'\nexport const CASE_INTRANSITIVE = 'intransitive'\nexport const CASE_LATIVE = 'lative'\nexport const CASE_LOCATIVE = 'locative'\nexport const CASE_MODAL = 'modal'\nexport const CASE_MULTIPLICATIVE = 'multiplicative'\nexport const CASE_NOMINATIVE = 'nominative'\nexport const CASE_PARTITIVE = 'partitive'\nexport const CASE_PEGATIVE = 'pegative'\nexport const CASE_PERLATIVE = 'perlative'\nexport const CASE_POSSESSIVE = 'possessive'\nexport const CASE_POSTELATIVE = 'postelative'\nexport const CASE_POSTDIRECTIVE = 'postdirective'\nexport const CASE_POSTESSIVE = 'postessive'\nexport const CASE_POSTPOSITIONAL = 'postpositional'\nexport const CASE_PREPOSITIONAL = 'prepositional'\nexport const CASE_PRIVATIVE = 'privative'\nexport const CASE_PROLATIVE = 'prolative'\nexport const CASE_PROSECUTIVE = 'prosecutive'\nexport const CASE_PROXIMATIVE = 'proximative'\nexport const CASE_SEPARATIVE = 'separative'\nexport const CASE_SOCIATIVE = 'sociative'\nexport const CASE_SUBDIRECTIVE = 'subdirective'\nexport const CASE_SUBESSIVE = 'subessive'\nexport const CASE_SUBELATIVE = 'subelative'\nexport const CASE_SUBLATIVE = 'sublative'\nexport const CASE_SUPERDIRECTIVE = 'superdirective'\nexport const CASE_SUPERESSIVE = 'superessive'\nexport const CASE_SUPERLATIVE = 'superlative'\nexport const CASE_SUPPRESSIVE = 'suppressive'\nexport const CASE_TEMPORAL = 'temporal'\nexport const CASE_TERMINATIVE = 'terminative'\nexport const CASE_TRANSLATIVE = 'translative'\nexport const CASE_VIALIS = 'vialis'\nexport const CASE_VOCATIVE = 'vocative'\nexport const MOOD_ADMIRATIVE = 'admirative'\nexport const MOOD_COHORTATIVE = 'cohortative'\nexport const MOOD_CONDITIONAL = 'conditional'\nexport const MOOD_DECLARATIVE = 'declarative'\nexport const MOOD_DUBITATIVE = 'dubitative'\nexport const MOOD_ENERGETIC = 'energetic'\nexport const MOOD_EVENTIVE = 'eventive'\nexport const MOOD_GENERIC = 'generic'\nexport const MOOD_GERUNDIVE = 'gerundive'\nexport const MOOD_HYPOTHETICAL = 'hypothetical'\nexport const MOOD_IMPERATIVE = 'imperative'\nexport const MOOD_INDICATIVE = 'indicative'\nexport const MOOD_INFERENTIAL = 'inferential'\nexport const MOOD_INFINITIVE = 'infinitive'\nexport const MOOD_INTERROGATIVE = 'interrogative'\nexport const MOOD_JUSSIVE = 'jussive'\nexport const MOOD_NEGATIVE = 'negative'\nexport const MOOD_OPTATIVE = 'optative'\nexport const MOOD_PARTICIPLE = 'participle'\nexport const MOOD_PRESUMPTIVE = 'presumptive'\nexport const MOOD_RENARRATIVE = 'renarrative'\nexport const MOOD_SUBJUNCTIVE = 'subjunctive'\nexport const MOOD_SUPINE = 'supine'\nexport const NUM_SINGULAR = 'singular'\nexport const NUM_PLURAL = 'plural'\nexport const NUM_DUAL = 'dual'\nexport const NUM_TRIAL = 'trial'\nexport const NUM_PAUCAL = 'paucal'\nexport const NUM_SINGULATIVE = 'singulative'\nexport const NUM_COLLECTIVE = 'collective'\nexport const NUM_DISTRIBUTIVE_PLURAL = 'distributive plural'\nexport const NRL_CARDINAL = 'cardinal'\nexport const NRL_ORDINAL = 'ordinal'\nexport const NRL_DISTRIBUTIVE = 'distributive'\nexport const NURL_NUMERAL_ADVERB = 'numeral adverb'\nexport const ORD_1ST = '1st'\nexport const ORD_2ND = '2nd'\nexport const ORD_3RD = '3rd'\nexport const ORD_4TH = '4th'\nexport const ORD_5TH = '5th'\nexport const ORD_6TH = '6th'\nexport const ORD_7TH = '7th'\nexport const ORD_8TH = '8th'\nexport const ORD_9TH = '9th'\nexport const TENSE_AORIST = 'aorist'\nexport const TENSE_FUTURE = 'future'\nexport const TENSE_FUTURE_PERFECT = 'future perfect'\nexport const TENSE_IMPERFECT = 'imperfect'\nexport const TENSE_PAST_ABSOLUTE = 'past absolute'\nexport const TENSE_PERFECT = 'perfect'\nexport const TENSE_PLUPERFECT = 'pluperfect'\nexport const TENSE_PRESENT = 'present'\nexport const VKIND_TO_BE = 'to be'\nexport const VKIND_COMPOUNDS_OF_TO_BE = 'compounds of to be'\nexport const VKIND_TAKING_ABLATIVE = 'taking ablative'\nexport const VKIND_TAKING_DATIVE = 'taking dative'\nexport const VKIND_TAKING_GENITIVE = 'taking genitive'\nexport const VKIND_TRANSITIVE = 'transitive'\nexport const VKIND_INTRANSITIVE = 'intransitive'\nexport const VKIND_IMPERSONAL = 'impersonal'\nexport const VKIND_DEPONENT = 'deponent'\nexport const VKIND_SEMIDEPONENT = 'semideponent'\nexport const VKIND_PERFECT_DEFINITE = 'perfect definite'\nexport const VOICE_ACTIVE = 'active'\nexport const VOICE_PASSIVE = 'passive'\nexport const VOICE_MEDIOPASSIVE = 'mediopassive'\nexport const VOICE_IMPERSONAL_PASSIVE = 'impersonal passive'\nexport const VOICE_MIDDLE = 'middle'\nexport const VOICE_ANTIPASSIVE = 'antipassive'\nexport const VOICE_REFLEXIVE = 'reflexive'\nexport const VOICE_RECIPROCAL = 'reciprocal'\nexport const VOICE_CAUSATIVE = 'causative'\nexport const VOICE_ADJUTATIVE = 'adjutative'\nexport const VOICE_APPLICATIVE = 'applicative'\nexport const VOICE_CIRCUMSTANTIAL = 'circumstantial'\nexport const VOICE_DEPONENT = 'deponent'\nexport const TYPE_IRREGULAR = 'irregular'\nexport const TYPE_REGULAR = 'regular'\n// Classes\nexport const CLASS_PERSONAL = 'personal'\nexport const CLASS_REFLEXIVE = 'reflexive'\nexport const CLASS_POSSESSIVE = 'possessive'\nexport const CLASS_DEMONSTRATIVE = 'demonstrative'\nexport const CLASS_RELATIVE = 'relative'\nexport const CLASS_INTERROGATIVE = 'interrogative'\nexport const CLASS_GENERAL_RELATIVE = 'general relative'\nexport const CLASS_INDEFINITE = 'indefinite'\nexport const CLASS_INTENSIVE = 'intensive'\nexport const CLASS_RECIPROCAL = 'reciprocal'\n// Paradigms\nexport const PARADIGM_CAT_KAYLO = 'kaylo'\nexport const PARADIGM_CAT_STATE = 'state'\n","import Definition from './definition'\nimport LMF from './language_model_factory.js'\n\nexport default class DefinitionSet {\n  constructor (lemmaWord, languageID) {\n    this.lemmaWord = lemmaWord\n    this.languageID = languageID\n\n    this.shortDefs = []\n    this.fullDefs = []\n  }\n\n  /**\n   * A function that is used to instantiate a DefinitionSet object from a JSON object.\n   *\n   * @param {object} jsonObject - A JSON object representing DefinitionSet data.\n   * @returns {DefinitionSet} A DefinitionSet object populated with data from JSON object.\n   */\n  static readObject (jsonObject) {\n    const languageID = LMF.getLanguageIdFromCode(jsonObject.languageCode)\n\n    let definitionSet = new DefinitionSet(jsonObject.lemmaWord, languageID) // eslint-disable-line prefer-const\n\n    for (const shortDef of jsonObject.shortDefs) {\n      definitionSet.shortDefs.push(Definition.readObject(shortDef))\n    }\n    for (const fullDef of jsonObject.fullDefs) {\n      definitionSet.fullDefs.push(Definition.readObject(fullDef))\n    }\n\n    return definitionSet\n  }\n\n  /**\n   * Checks if any short definitions are stored within this object.\n   *\n   * @returns {boolean} - true if any definitions are stored, false otherwise.\n   */\n  get hasShortDefs () {\n    return this.shortDefs.length > 0\n  }\n\n  /**\n   * Checks if any full definitions are stored within this object.\n   *\n   * @returns {boolean} - true if any definitions are stored, false otherwise.\n   */\n  get hasFullDefs () {\n    return this.fullDefs.length > 0\n  }\n\n  /**\n   * Check to see if the DefinitionSet is empty\n   *\n   * @returns {boolean} true if empty false if there is at least one definition\n   */\n  isEmpty () {\n    return this.shortDefs.length === 0 && this.fullDefs.length === 0\n  }\n\n  /**\n   * Appends one or more definitions to a list of short definitions.\n   *\n   * @param {Definition | Definition[]} definitions - One or more definition objects to add.\n   * @returns {Definition[]} A list of short definitions this object has.\n   */\n  appendShortDefs (definitions) {\n    // TODO: check for duplicates?\n    if (definitions) {\n      if (!Array.isArray(definitions)) { definitions = [definitions] }\n      this.shortDefs = this.shortDefs.concat(definitions)\n    }\n    return this.shortDefs\n  }\n\n  /**\n   * clear accumulated short definitions\n   */\n  clearShortDefs () {\n    this.shortDefs = []\n  }\n\n  /**\n   * Appends one or more definitions to a list of full definitions.\n   *\n   * @param {Definition | Definition[]} definitions - One or more definition objects to add.\n   * @returns {Definition[]} A list of full definitions this object has.\n   */\n  appendFullDefs (definitions) {\n    // TODO: check for duplicates?\n    if (definitions) {\n      if (!Array.isArray(definitions)) { definitions = [definitions] }\n      this.fullDefs = this.fullDefs.concat(definitions)\n    }\n    return this.fullDefs\n  }\n\n  /**\n   * clear accumulated full definitions\n   */\n  clearFullDefs () {\n    this.fullDefs = []\n  }\n\n  convertToJSONObject () {\n    const languageCode = LMF.getLanguageCodeFromId(this.languageID)\n    return {\n      lemmaWord: this.lemmaWord,\n      languageCode: languageCode,\n      shortDefs: this.shortDefs.map(def => def.convertToJSONObject()),\n      fullDefs: this.fullDefs.map(def => def.convertToJSONObject())\n    }\n  }\n}\n","import uuidv4 from 'uuid/v4'\nimport ResourceProvider from './resource_provider.js'\n\nclass Definition {\n  constructor (text, language, format, lemmaText) {\n    this.text = text\n    this.language = language\n    this.format = format\n    this.lemmaText = lemmaText\n\n    this.ID = uuidv4()\n  }\n\n  static readObject (jsonObject) {\n    // eslint-disable-next-line prefer-const\n    let definition = new Definition(jsonObject.text, jsonObject.language, jsonObject.format, jsonObject.lemmaText)\n\n    if (jsonObject.ID) {\n      definition.ID = jsonObject.ID\n    }\n\n    if (jsonObject.provider) {\n      const provider = ResourceProvider.readObject(jsonObject.provider)\n      return ResourceProvider.getProxy(provider, definition)\n    } else {\n      return definition\n    }\n  }\n\n  convertToJSONObject () {\n    // eslint-disable-next-line prefer-const\n    let result = {\n      text: this.text,\n      language: this.language,\n      format: this.format,\n      lemmaText: this.lemmaText,\n      ID: this.ID\n    }\n\n    if (this.provider) {\n      result.provider = this.provider.convertToJSONObject()\n    }\n    return result\n  }\n}\nexport default Definition\n","'use strict'\nimport * as Constants from './constants.js'\nimport Definition from './definition.js'\nimport DefinitionSet from './definition-set'\nimport Feature from './feature.js'\nimport GrmFeature from './grm-feature.js'\nimport FeatureType from './feature_type.js'\nimport FeatureList from './feature_list.js'\nimport FeatureImporter from './feature_importer.js'\nimport LanguageModelFactory from './language_model_factory.js'\nimport HomonymGroup from './homonym-group.js'\nimport Homonym from './homonym.js'\nimport Lexeme from './lexeme.js'\nimport Lemma from './lemma.js'\nimport Inflection from './inflection.js'\nimport LatinLanguageModel from './latin_language_model.js'\nimport GreekLanguageModel from './greek_language_model.js'\nimport ArabicLanguageModel from './arabic_language_model.js'\nimport PersianLanguageModel from './persian_language_model.js'\nimport GeezLanguageModel from './geez_language_model.js'\nimport ChineseLanguageModel from './chinese_language_model.js'\nimport SyriacLanguageModel from './syriac_language_model.js'\nimport ResourceProvider from './resource_provider.js'\nimport PsEvent from './ps-events/ps-event.js'\nimport PsEventData from './ps-events/ps-event-data.js'\n\nimport Translation from './translation.js'\nimport TextQuoteSelector from './w3c/text-quote-selector.js'\nimport WordUsageExample from './texts/word-usage-example.js'\nimport Author from './texts/author.js'\nimport TextWork from './texts/text-work.js'\n\nimport WordItem from './word-item.js'\nimport WordList from './word-list.js'\n\nimport TreebankDataItem from './treebank_data_item.js'\nimport Logger from './logging/logger.js'\n\nexport {\n  Constants,\n  Definition,\n  DefinitionSet,\n  Feature,\n  GrmFeature,\n  FeatureType,\n  FeatureList,\n  FeatureImporter,\n  Inflection,\n  LanguageModelFactory,\n  HomonymGroup,\n  Homonym,\n  Lexeme,\n  Lemma,\n  LatinLanguageModel,\n  GreekLanguageModel,\n  ArabicLanguageModel,\n  PersianLanguageModel,\n  GeezLanguageModel,\n  ChineseLanguageModel,\n  SyriacLanguageModel,\n  ResourceProvider,\n  Translation,\n  PsEvent,\n  PsEventData,\n  TextQuoteSelector,\n  WordUsageExample,\n  Author,\n  TextWork,\n  WordItem,\n  WordList,\n  TreebankDataItem,\n  Logger\n}\n","import LanguageModelFactory from './language_model_factory.js'\nimport FeatureImporter from './feature_importer.js'\nimport Logger from './logging/logger.js'\n\n/**\n * A grammatical feature object, that can replace both Feature and FeatureType objects.\n */\nexport default class Feature {\n  /**\n   *\n   * @param {string} type - A type of the feature, allowed values are specified in 'type' getter.\n   * @param {string | string[] | string[][]} data - Single or multiple values, in different combinations.\n   *\n   * If a single value with no sort order is provided, data format will be:\n   *  value\n   *  This value will be assigned a default sort order.\n   *\n   * If a single value with sort order is provided, data format will be:\n   *  [[value, sortOrder]]\n   *\n   * If multiple values without sort order are provided, data format will be:\n   *  [value1, value2, value3, ...]\n   * Items will be assigned a sort order according to their order in an array.\n   * The first item will receive a highest sort order, the last one will receive the lowest, one.\n   *\n   * If multiple values with sort order are provided, data format will be:\n   *  [[value1, sortOrder1], [value2, sortOrder2], [value3, sortOrder3], ...]\n   * If a sort order is omitted anywhere, it will be set to a default sort order.\n   *\n   * Each value of a feature has its `sortOrder` property. This value is used to soft values of a feature\n   * between themselves. Feature object has a `sortOrder` property of its own, too. It is used\n   * to compare two Feature objects between themselves.\n   *\n   * @param {symbol} languageID - A language ID of a feature\n   * @param {number} sortOrder - A sort order of a feature when multiple features are compared.\n   * @param allowedValues - If feature has a restricted set of allowed values, here will be a list of those\n   * values. An order of those values can define a sort order.\n   */\n  constructor (type, data, languageID, sortOrder = 1, allowedValues = []) {\n    if (!Feature.isAllowedType(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!data) {\n      throw new Error('Feature should have a non-empty value(s).')\n    }\n    if (!languageID) {\n      throw new Error('No language ID is provided')\n    }\n\n    this.type = type\n    this.languageID = languageID\n    this.sortOrder = sortOrder\n    this.allowedValues = allowedValues\n\n    /**\n     * Keeps feature values along with their sort order.\n     * Items with higher sort order usually have more importance,\n     * but how to interpret the sortOrder value is ultimately implementation-dependent.\n     *\n     * @type {{sortOrder: number, value: *}[]}\n     * @private\n     */\n    this._data = Feature.dataValuesFromInput(data)\n    this.sort()\n  }\n\n  /**\n   *\n   * @param {string | string[] | string[][]} data - Feature values with, possibly, their sort order.\n   *        @see {@link Feature#constructor} for more details about possible values of `data` parameter.\n   * @returns {{sortOrder: number, value: *}[]} Array of object in a format that will be used to store\n   *          data values along with their sort order within a Feature object\n   */\n  static dataValuesFromInput (data) {\n    let normalized\n    if (!Array.isArray(data)) {\n      // Single value with no sort order\n      normalized = [[data, this.defaultSortOrder]]\n    } else if (!Array.isArray(data[0])) {\n      /*\n      If several values are provided without any explicit sort order, they will be\n      assigned a sort order automatically, according to their array index number.\n      The first value item in an array will receive the highest sort order equal\n      to the length of the array. The last item will have the lowest sort order, one.\n       */\n      normalized = data.map((v, i) => [v, data.length - i])\n    } else {\n      // Value has all the data, including a sort order\n      normalized = data\n    }\n    return normalized.map(d => { return { value: d[0], sortOrder: Number.parseInt(d[1]) } })\n  }\n\n  /**\n   *\n   * @param featureData\n   */\n  static newFromFtr (featureData) {\n\n  }\n\n  static get types () {\n    return {\n      /**\n       * @deprecated : Use `fullForm` where appropriate instead\n       */\n      word: 'word',\n      fullForm: 'full form',\n      hdwd: 'headword',\n      part: 'part of speech', // Part of speech\n      number: 'number',\n      case: 'case',\n      grmCase: 'case', // A synonym of `case`\n      declension: 'declension',\n      gender: 'gender',\n      type: 'type',\n      class: 'class',\n      grmClass: 'class', // A synonym of `class`\n      conjugation: 'conjugation',\n      comparison: 'comparison',\n      tense: 'tense',\n      voice: 'voice',\n      mood: 'mood',\n      person: 'person',\n      frequency: 'frequency', // How frequent this word is\n      meaning: 'meaning', // Meaning of a word\n      source: 'source', // Source of word definition\n      footnote: 'footnote', // A footnote for a word's ending\n      dialect: 'dialect', // a dialect identifier\n      note: 'note', // a general note\n      pronunciation: 'pronunciation',\n      age: 'age',\n      area: 'area',\n      geo: 'geo', // geographical data\n      kind: 'kind', // verb kind information\n      derivtype: 'derivtype',\n      stemtype: 'stemtype',\n      morph: 'morph', // general morphological information\n      var: 'var', // variance?\n      /** for CJK languages only **/\n      radical: 'radical',\n      /** used for Syriac **/\n      kaylo: 'kaylo',\n      state: 'state'\n\n    }\n  }\n\n  static isAllowedType (value) {\n    return Object.values(this.types).includes(`${value}`)\n  }\n\n  static get defaultSortOrder () {\n    return 1\n  }\n\n  static get joinSeparator () {\n    return ' '\n  }\n\n  static get defaultImporterName () {\n    return 'default'\n  }\n\n  /**\n   * Test to see if this feature allows unrestricted values.\n   *\n   * @returns {boolean} true if unrestricted false if not.\n   */\n  get allowsUnrestrictedValues () {\n    /*\n    If `allowedValues` array is empty then there are no value restrictions\n     */\n    return this.allowedValues.length === 0\n  }\n\n  /**\n   * Defines a sort order of feature values. Values are sorted according to their sort order\n   * (a number starting from one). If several values have the same sort order, they will be\n   * sorted alphabetically according to their values.\n   * Sort order is deterministic.\n   */\n  sort () {\n    this._data.sort((a, b) => a.sortOrder !== b.sortOrder ? b.sortOrder - a.sortOrder : a.value.localeCompare(b.value))\n  }\n\n  /**\n   * Compares a feature's values to another feature's values for sorting\n   *\n   * @param {Feature} otherFeature the feature to compare this feature's values to\n   * @returns {number} < 1 if this feature should be sorted first, 0 if they are equal and -1 if this feature should be sorted second\n   */\n  compareTo (otherFeature) {\n    // the data values are sorted upon construction and insertion so we only should need to look at the first values\n    // feature sortOrders are descending (i.e. 5 sorts higher than 1)\n    if (otherFeature) {\n      return otherFeature._data[0].sortOrder - this._data[0].sortOrder\n    } else {\n      // if the other feature isn't defined, this one sorts first\n      return -1\n    }\n  }\n\n  get items () {\n    return this._data\n  }\n\n  /**\n   * Returns a single value string. If feature has a single value, this value will be returned.\n   * If it has multiple values, those values will be concatenated with a default separator and\n   * returned in a single string. Values composing this string are sorted according\n   * to each value's sort order.\n   * NOTE: If object contains a single value and it is a number, it will be converted to a string.\n   *\n   * @returns {string} A single value string.\n   */\n  get value () {\n    return this.values.join(this.constructor.joinSeparator)\n  }\n\n  /**\n   * Returns a feature value, if Feature object contains a single value. If no value is stored,\n   * returns `undefined`. If feature has more than one value, throws an error.\n   * This method allows to avoid conversion of a value to the string type as is the case\n   * with other methods.\n   *\n   * @returns {undefined|*} - A single value in a format in which it is stored or `undefined`\n   *          if feature has no value.\n   */\n  get singleValue () {\n    if (this._data.length === 0) return\n    if (this._data.length > 1) throw new Error(Feature.errMsgs.NO_SINGLE_VALUE)\n    return this._data[0].value\n  }\n\n  /**\n   * Returns an array of string values of a feature, sorted according to each item's sort order.\n   * If a feature contains a single feature, an array with one value will be returned.\n   *\n   * @returns {*[]} An array of values in a format in which they are stored in the Feature object.\n   */\n  get values () {\n    return this._data.map(v => v.value)\n  }\n\n  /**\n   * Retrieves a value object by name. Can be used to update a value object directly.\n   *\n   * @param {string} featureValue - A feature value of an object to retrieve.\n   */\n  getValue (featureValue) {\n    return this._data.find(v => v.value === featureValue)\n  }\n\n  /**\n   * Returns a number of feature values.\n   *\n   * @retrun {number] A quantity of feature values\n   */\n  get valQty () {\n    return this._data.length\n  }\n\n  get isEmpty () {\n    return this.valQty === 0\n  }\n\n  get isSingle () {\n    return this.valQty === 1\n  }\n\n  get isMultiple () {\n    return this.valQty > 1\n  }\n\n  /**\n   * A string representation of a feature.\n   *\n   * @returns {string}\n   */\n  toString () {\n    return this.value\n  }\n\n  /**\n   * Examines the feature for a specific value.\n   *\n   * @param {string} value\n   * @returns {boolean} true if the value is included in the feature's values.\n   */\n  hasValue (value) {\n    return this.values.includes(value)\n  }\n\n  /**\n   * Checks if this feature has all value from an array.\n   *\n   * @param {string[]} values - An array of values to check for.\n   * @returns {boolean} true if the value is included in the feature's values.\n   */\n  hasValues (values) {\n    let hasValues = true\n    for (const value of values) {\n      hasValues = hasValues && this.hasValue(value)\n    }\n    return hasValues\n  }\n\n  /**\n   * Checks if this feature has some value from an array.\n   *\n   * @param {string[]} values - An array of values to check for.\n   * @returns {boolean} true if the value is included in the feature's values.\n   */\n  hasSomeValues (values) {\n    let hasValues = false\n    for (const value of values) {\n      hasValues = hasValues || this.hasValue(value)\n    }\n    return hasValues\n  }\n\n  get valuesUnrestricted () {\n    return this.allowedValues.length === 0\n  }\n\n  /**\n   * Two features are considered fully equal if they are of the same type, have the same language,\n   * and the same set of feature values in the same order.\n   *\n   * @param {Feature} feature - A GrmFtr object this feature should be compared with.\n   * @returns {boolean} True if features are equal, false otherwise.\n   */\n  isEqual (feature) {\n    return feature &&\n      this.type === feature.type &&\n      LanguageModelFactory.compareLanguages(this.languageID, feature.languageID) &&\n      this.value === feature.value\n  }\n\n  /**\n   * Adds a single new value to the existing feature object.\n   * This function is chainable.\n   *\n   * @param {string} value - A feature value.\n   * @param {number} sortOrder - A sort order.\n   * @returns {Feature} - Self reference for chaining.\n   */\n  addValue (value, sortOrder = this.constructor.defaultSortOrder) {\n    if (!this.hasValue(value)) {\n      this._data.push({\n        value: value,\n        sortOrder: sortOrder\n      })\n      this.sort() // Resort an array to place an inserted value to the proper place\n    } else {\n      Logger.getInstance().warn(`Value \"${value}\" already exists. If you want to change it, use \"getValue\" to access it directly.`)\n    }\n    return this\n  }\n\n  /**\n   * Adds multiple new values to the existing feature object.\n   * This function is chainable.\n   *\n   * @param {string | string[] | string[][]} data - Single or multiple values, in different combinations.\n   * @returns {Feature} - Self reference for chaining.\n   */\n  addValues (data) {\n    const normalizedData = this.constructor.dataValuesFromInput(data)\n    const values = normalizedData.map(v => v.value)\n    if (!this.hasSomeValues(values)) {\n      this._data = this._data.concat(normalizedData)\n      this.sort() // Resort an array to place an inserted value to the proper place\n    } else {\n      Logger.getInstance().warn(`One or several values from \"${values}\" already exist. If you want to change it, use \"getValue\" to access a value directly.`)\n    }\n    return this\n  }\n\n  /**\n   * Removes a single value from the existing feature object.\n   *\n   * @param value\n   */\n  removeValue (value) {\n    // TODO: Do we need it?\n    Logger.getInstance().warn('This feature is not implemented yet')\n  }\n\n  /**\n   * Creates a new single value Feature object of the same type and same language,\nbut with a different feature value.\nThis can be used when one feature defines a type and it is necessary\nto create other items of the same type.\n   *\n   * @param {string} value - A value of a feature.\n   * @param sortOrder\n   * @param {number} sortOrder.\n   * @returns {Feature} A new Ftr object.\n   */\n  createFeature (value, sortOrder = this.constructor.defaultSortOrder) {\n    // TODO: Add a check of if the value exists in a source Feature object\n    return new Feature(this.type, [[value, sortOrder]], this.languageID, this.sortOrder, this.allowedValues)\n  }\n\n  /**\n   * Creates a multiple value Feature object of the same type and same language,\n   * but with a different feature values.\n   *\n   * @param {string | string[] | string[][]} data - Single or multiple values, in different combinations,\n   * formatted according to rules described in a Ftr constructor.\n   * @returns {Feature} A new Ftr object.\n   */\n  createFeatures (data) {\n    return new Feature(this.type, data, this.languageID, this.sortOrder, this.allowedValues)\n  }\n\n  /**\n   * Creates an array of Feature objects where each Feature object is matching one feature value\n   * form the values of this object.\n   * Useful when the current objects is a type feature and it is necessary to create an array\n   * of Feature objects for the type from it.\n   *\n   * @returns {Feature[]} - An array of Feature objects. Each object represents one feature value\n   * from the current object.\n   */\n  get ownFeatures () {\n    return this.values.map(v => new Feature(this.type, v, this.languageID, 1, this.allowedValues))\n  }\n\n  /**\n   * Create a copy of the feature object.\n   */\n  getCopy () {\n    const values = this._data.map(item => [item.value, item.sortOrder])\n    return new Feature(this.type, values, this.languageID, this.sortOrder, this.allowedValues.slice())\n  }\n\n  /**\n   * Adds an importer to the internal list.\n   *\n   * @param {string} name - A name of an importer.\n   * @param {FeatureImporter} importer - A `FeatureImporter` object.\n   */\n  addImporter (importer = new FeatureImporter(), name = this.constructor.defaultImporterName) {\n    if (!this.importers) {\n      this.importers = new Map()\n    }\n    this.importers.set(name, importer)\n    return importer\n  }\n\n  getImporter (name = this.constructor.defaultImporterName) {\n    if (!this.importers || !this.importers.has(name)) {\n      throw new Error(`Importer \"${name}\" does not exist`)\n    }\n    return this.importers.get(name)\n  }\n\n  /**\n   * Adds feature values from the imported values.\n   *\n   * @param {string | string[]} foreignData - A single value or an array of values from a third-party source.\n   * @param {string} name - A name of an importer.\n   * @returns {Feature} - A new Ftr object.\n   */\n  addFromImporter (foreignData, name = this.constructor.defaultImporterName) {\n    if (!this.importers || !this.importers.has(name)) {\n      throw new Error(`Importer \"${name}\" does not exist`)\n    }\n    const importer = this.importers.get(name)\n    foreignData = this.constructor.dataValuesFromInput(foreignData)\n    this._data.push(...foreignData.map(fv => { return { value: importer.get(fv.value), sortOrder: fv.sortOrder } }))\n    this.sort()\n    return this\n  }\n\n  /**\n   * Creates a new feature of the same type and with the same language from the imported values.\n   *\n   * @param {string | string[]} foreignData - A single value or an array of values from a third-party source.\n   * @param {string} name - A name of an importer.\n   * @returns {Feature} - A new Ftr object.\n   */\n  createFromImporter (foreignData, name = this.constructor.defaultImporterName) {\n    if (!this.importers || !this.importers.has(name)) {\n      throw new Error(`Importer \"${name}\" does not exist`)\n    }\n    const importer = this.importers.get(name)\n    if (!Array.isArray(foreignData)) {\n      foreignData = [foreignData]\n    }\n    let values = foreignData.map(fv => importer.get(fv))\n    /*\n    Some values may be mapped into multiple values. For them an importer will return an array of values instead of a single value.\n    The values will be a multidimensional array that will require flattening.\n     */\n    values = values.reduce((acc, cv) => acc.concat(cv), [])\n    return new Feature(this.type, values, this.languageID, this.sortOrder, this.allowedValues)\n  }\n\n  convertToJSONObject () {\n    const data = this._data.map(dataItem => [dataItem.value, dataItem.sortOrder])\n    return {\n      type: this.type,\n      languageCode: LanguageModelFactory.getLanguageCodeFromId(this.languageID),\n      sortOrder: this.sortOrder,\n      allowedValues: this.allowedValues,\n      data: data\n    }\n  }\n\n  static readObject (jsonObject) {\n    const languageID = LanguageModelFactory.getLanguageIdFromCode(jsonObject.languageCode)\n    return new Feature(jsonObject.type, jsonObject.data, languageID, jsonObject.sortOrder, jsonObject.allowedValues)\n  }\n}\n\nFeature.errMsgs = {\n  NO_SINGLE_VALUE: 'More than one value stored'\n}\n","class FeatureImporter {\n  /**\n   * @param defaults\n   * @param {boolean} returnUnknown - If true, and a source value is not found in the importer,\n   * a source value will be returned without any change (a passthrough). If false, an Error\n   * will be thrown for unknown source values.\n   * @returns {FeatureImporter}\n   */\n  constructor (defaults = [], returnUnknown = false) {\n    this.hash = {}\n    for (const value of defaults) {\n      this.map(value, value)\n    }\n    this.returnUnknown = returnUnknown\n    return this\n  }\n\n  /**\n   * Sets mapping between external imported value and one or more library standard values. If an importedValue\n   * is already in a hash table, old libraryValue will be overwritten with the new one.\n   *\n   * @param {string} importedValue - External value\n   * @param {object|object[]|string|string[]} libraryValue - Library standard value\n   */\n  map (importedValue, libraryValue) {\n    if (!importedValue) {\n      throw new Error('Imported value should not be empty.')\n    }\n\n    if (!libraryValue) {\n      throw new Error('Library value should not be empty.')\n    }\n\n    this.hash[importedValue] = libraryValue\n    return this\n  }\n\n  /**\n   * Checks if value is in a map.\n   *\n   * @param {string} importedValue - A value to test.\n   * @returns {boolean} - Tru if value is in a map, false otherwise.\n   */\n  has (importedValue) {\n    return this.hash.hasOwnProperty(importedValue)\n  }\n\n  /**\n   * Returns one or more library standard values that match an external value\n   *\n   * @param {string} sourceValue - External value\n   * @returns {object|string} One or more of library standard values\n   */\n  get (sourceValue) {\n    if (this.has(sourceValue)) {\n      return this.hash[sourceValue]\n    } else if (this.returnUnknown) {\n      return sourceValue\n    } else {\n      throw new Error('A value \"' + sourceValue + '\" is not found in the importer.')\n    }\n  }\n}\nexport default FeatureImporter\n","/**\n * A list of grammatical features that characterizes a language unit. Has some additional service methods,\n * compared with standard storage objects.\n */\nclass FeatureList {\n  /**\n   * Initializes a feature list.\n   *\n   * @param {Feature[]} features - Features that build the list (optional, can be set later).\n   */\n  constructor (features = []) {\n    this._features = []\n    this._types = {}\n    this.add(features)\n  }\n\n  add (features) {\n    if (!features || !Array.isArray(features)) {\n      throw new Error('Features must be defined and must come in an array.')\n    }\n\n    for (const feature of features) {\n      this._features.push(feature)\n      this._types[feature.type] = feature\n    }\n  }\n\n  /**\n   * Returns an array of grouping features.\n   *\n   * @returns {FeatureType[]} - An array of grouping features.\n   */\n  get items () {\n    return this._features\n  }\n\n  forEach (callback) {\n    this._features.forEach(callback)\n  }\n\n  /**\n   * Returns a feature of a particular type. If such feature does not exist in a list, returns undefined.\n   *\n   * @param {string} type - Feature type as defined in `types` object.\n   * @returns {FeatureType | undefined} A feature if a particular type if contains it. Undefined otherwise.\n   */\n  ofType (type) {\n    if (this.hasType(type)) {\n      return this._types[type]\n    }\n  }\n\n  /**\n   * Checks whether a feature list has a feature of a specific type.\n   *\n   * @param {string} type - Feature type as defined in `types` object.\n   * @returns {boolean} Whether a feature list has a feature of a particular type.\n   */\n  hasType (type) {\n    return this._types.hasOwnProperty(type)\n  }\n}\nexport default FeatureList\n","import Feature from './feature.js'\nimport FeatureImporter from './feature_importer.js'\nimport LMF from './language_model_factory'\nimport Logger from './logging/logger.js'\n\n/**\n * @deprecated Use Feature instead\n * Definition class for a (grammatical) feature. Stores type information and (optionally) all possible values of the feature.\n * It serves as a feature generator. If list of possible values is provided, it can generate a Feature object\n * each time a property that corresponds to a feature value is accessed. If no list of possible values provided,\n * a Feature object can be generated with get(value) method.\n *\n * An order of values determines a default sort and grouping order. If two values should have the same order,\n * they should be grouped within an array: value1, [value2, value3], value4. Here 'value2' and 'value3' have\n * the same priority for sorting and grouping.\n */\nclass FeatureType {\n  // TODO: value checking\n  /**\n   * Creates and initializes a Feature Type object.\n   *\n   * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n   * @param {string[] | string[][]} values - A list of allowed values for this feature type.\n   * If an empty array is provided, there will be no\n   * allowed values as well as no ordering (can be used for items that do not need or have a simple order,\n   * such as footnotes).\n   * @param {string|symbol} language - A language of a feature type.\n   */\n  constructor (type, values, language) {\n    if (!values || !Array.isArray(values)) {\n      throw new Error('Values should be an array (or an empty array) of values.')\n    }\n    if (!language) {\n      throw new Error('FeatureType constructor requires a language')\n    }\n\n    this.type = type\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({ languageID: this.languageID, languageCode: this.languageCode } = LMF.getLanguageAttrs(language))\n\n    /*\n     This is a sort order index for a grammatical feature values. It is determined by the order of values in\n     a 'values' array.\n     */\n    this._orderIndex = []\n    this._orderLookup = {}\n\n    for (const [index, value] of values.entries()) {\n      this._orderIndex.push(value)\n      if (Array.isArray(value)) {\n        for (const element of value) {\n          this[element] = new Feature(this.type, element, this.languageID)\n          this._orderLookup[element] = index\n        }\n      } else {\n        this[value] = new Feature(this.type, value, this.languageID)\n        this._orderLookup[value] = index\n      }\n    }\n  }\n\n  /**\n   * This is a compatibility function for legacy code.\n   *\n   * @returns {string} A language code.\n   */\n  get language () {\n    Logger.getInstance().warn('Please use a \"languageID\" instead of a \"language\"')\n    return this.languageCode\n  }\n\n  /**\n   * test to see if this FeatureType allows unrestricted values\n   *\n   * @returns {boolean} true if unrestricted false if not\n   */\n  hasUnrestrictedValue () {\n    return this.orderedValues.length === 1 && this.orderedValues[0] === FeatureType.UNRESTRICTED_VALUE\n  }\n\n  /**\n   * Return a Feature with an arbitrary value. This value would not be necessarily present among FeatureType values.\n   * This can be especially useful for features that do not set: a list of predefined values, such as footnotes.\n   *\n   * @param value\n   * @param {int} sortOrder\n   * @returns {Feature}\n   */\n  get (value, sortOrder = 1) {\n    if (value) {\n      return new Feature(this.type, [[value, sortOrder]], this.languageID)\n    } else {\n      throw new Error('A non-empty value should be provided.')\n    }\n  }\n\n  /**\n   *\n   * @param {string[][]} data - An array of value arrays as: [[value1, sortOrder1], [value2, sortOrder2]]\n   * @returns {Feature}\n   */\n  getValues (data) {\n    return new Feature(this.type, data, this.languageID)\n  }\n\n  getFromImporter (importerName, value) {\n    let mapped\n    try {\n      mapped = this.importer[importerName].get(value)\n    } catch (e) {\n      // quietly catch not found and replace with default\n      mapped = this.get(value)\n    }\n    return mapped\n  }\n\n  /**\n   * Creates and returns a new importer with a specific name. If an importer with this name already exists,\n   * an existing Importer object will be returned.\n   *\n   * @param {string} name - A name of an importer object\n   * @returns {Importer} A new or existing Importer object that matches a name provided\n   */\n  addImporter (name) {\n    if (!name) {\n      throw new Error('Importer should have a non-empty name.')\n    }\n    this.importer = this.importer || {}\n    this.importer[name] = this.importer[name] || new FeatureImporter()\n    return this.importer[name]\n  }\n\n  /**\n   * Return copies of all feature values as Feature objects in a sorted array, according to feature type's sort order.\n   * For a similar function that returns strings instead of Feature objects see orderedValues().\n   *\n   * @returns {Feature[] | Feature[][]} Array of feature values sorted according to orderIndex.\n   * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n   * an array of Feature objects will be returned instead of a single Feature object, as for single feature values.\n   */\n  get orderedFeatures () {\n    return this.orderedValues.map((value) => new Feature(this.type, value, this.languageID))\n  }\n\n  /**\n   * Return all feature values as strings in a sorted array, according to feature type's sort order.\n   * This is a main method that specifies a sort order of the feature type. orderedFeatures() relies\n   * on this method in providing a sorted array of feature values. If you want to create\n   * a custom sort order for a particular feature type that will depend on some options that are not type-related,\n   * create a wrapper around this function providing it with options arguments so it will be able to decide\n   * in what order those features will be based on those arguments.\n   * For a similar function that returns Feature objects instead of strings see orderedValues().\n   *\n   * @returns {string[]} Array of feature values sorted according to orderIndex.\n   * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n   * an array of strings will be returned instead of a single strings, as for single feature values.\n   */\n  get orderedValues () {\n    return this._orderIndex\n  }\n\n  /**\n   * Returns a lookup table for type values as:\n   *  {value1: order1, value2: order2}, where order is a sort order of an item. If two items have the same sort order,\n   *  their order value will be the same.\n   *\n   * @returns {object}\n   */\n  get orderLookup () {\n    return this._orderLookup\n  }\n\n  /**\n   * Sets an order of grammatical feature values for a grammatical feature. Used mostly for sorting, filtering,\n   * and displaying.\n   *\n   * @param {Feature[] | Feature[][]} values - a list of grammatical features that specify their order for\n   * sorting and filtering. Some features can be grouped as [[genders.masculine, genders.feminine], LibLatin.genders.neuter].\n   * It means that genders.masculine and genders.feminine belong to the same group. They will have the same index\n   * and will be stored inside an _orderIndex as an array. genders.masculine and genders.feminine will be grouped together\n   * during filtering and will be in the same bin during sorting.\n   *\n   */\n  set order (values) {\n    if (!values || (Array.isArray(values) && values.length === 0)) {\n      throw new Error('A non-empty list of values should be provided.')\n    }\n\n    // If a single value is provided, convert it into an array\n    if (!Array.isArray(values)) {\n      values = [values]\n    }\n\n    for (const value of values) {\n      if (Array.isArray(value)) {\n        for (const element of value) {\n          if (!this.hasOwnProperty(element.value)) {\n            throw new Error('Trying to order an element with \"' + element.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n          }\n\n          if (element.type !== this.type) {\n            throw new Error('Trying to order an element with type \"' + element.type + '\" that is different from \"' + this.type + '\".')\n          }\n\n          if (!LMF.compareLanguages(element.languageID, this.languageID)) {\n            throw new Error(`Trying to order an element with language \"${element.languageID.toString()}\" that is different from \"${this.languageID.toString()}\"`)\n          }\n        }\n      } else {\n        if (!this.hasOwnProperty(value.value)) {\n          throw new Error('Trying to order an element with \"' + value.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n        }\n\n        if (value.type !== this.type) {\n          throw new Error('Trying to order an element with type \"' + value.type + '\" that is different from \"' + this.type + '\".')\n        }\n\n        if (!LMF.compareLanguages(value.languageID, this.languageID)) {\n          throw new Error(`Trying to order an element with language \"${value.languageID.toString()}\" that is different from \"${this.languageID.toString()}\"`)\n        }\n      }\n    }\n\n    // Erase whatever sort order was set previously\n    this._orderLookup = {}\n    this._orderIndex = []\n\n    // Define a new sort order\n    for (const [index, element] of values.entries()) {\n      if (Array.isArray(element)) {\n        // If it is an array, all values should have the same order\n        let elements = [] // eslint-disable-line prefer-const\n        for (const subElement of element) {\n          this._orderLookup[subElement.value] = index\n          elements.push(subElement.value)\n        }\n        this._orderIndex[index] = elements\n      } else {\n        // If is a single value\n        this._orderLookup[element.value] = index\n        this._orderIndex[index] = element.value\n      }\n    }\n  }\n}\nFeatureType.UNRESTRICTED_VALUE = Symbol('unrestricted')\nexport default FeatureType\n","import LanguageModel from './language_model.js'\nimport Feature from './feature.js'\nimport * as Constants from './constants.js'\n\nconst typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n\n/**\n * @class  GezLanguageModel is the lass for Ge'ez specific behavior\n */\nexport default class GeezLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_GEEZ }\n\n  static get languageCode () { return Constants.STR_LANG_CODE_GEZ }\n\n  static get languageCodes () { return [Constants.STR_LANG_CODE_GEZ] }\n\n  static get contextForward () { return 0 }\n\n  static get contextBackward () { return 0 }\n\n  static get direction () { return Constants.LANG_DIR_LTR }\n\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n  static get featureValues () {\n    return new Map([\n      ...LanguageModel.featureValues,\n      [\n        Feature.types.grmCase,\n        [\n          // TODO Valid Values for case for gez\n        ]\n      ],\n      [\n        Feature.types.number,\n        [\n          // TODO Valid Values for number for gez\n        ]\n      ],\n      [\n        Feature.types.gender,\n        [\n          // TODO Valid Values for gender for gez\n        ]\n      ],\n      [\n        Feature.types.mood,\n        [\n          // TODO Valid Values for mood for gez\n        ]\n      ]\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\nfor the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   *\n   * @returns {string} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \"፡፨።፣፤፥፦፧፠,;:!?'\\\"(){}\\\\[\\\\]<>\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\\u200C\\u200D\"\n  }\n}\n","import LanguageModel from './language_model.js'\nimport LanguageModelFactory from './language_model_factory.js'\nimport * as Constants from './constants.js'\nimport Feature from './feature.js'\nimport Logger from './logging/logger.js'\n\nimport GreekChars from './languages/greek-chars.js'\n\nlet typeFeatures = new Map() // eslint-disable-line prefer-const\nlet typeFeaturesInitialized = false\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class GreekLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_GREEK }\n  static get languageCode () { return Constants.STR_LANG_CODE_GRC }\n  static get languageCodes () { return [Constants.STR_LANG_CODE_GRC] }\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get featureValues () {\n    /*\n    This could be a static variable, but then it will create a circular reference:\n    Feature -> LanguageModelFactory -> LanguageModel -> Feature\n     */\n    return new Map([\n      ...LanguageModel.featureValues,\n      [\n        Feature.types.grmClass,\n        [\n          Constants.CLASS_DEMONSTRATIVE,\n          Constants.CLASS_GENERAL_RELATIVE,\n          Constants.CLASS_INDEFINITE,\n          Constants.CLASS_INTENSIVE,\n          Constants.CLASS_INTERROGATIVE,\n          Constants.CLASS_PERSONAL,\n          Constants.CLASS_POSSESSIVE,\n          Constants.CLASS_RECIPROCAL,\n          Constants.CLASS_REFLEXIVE,\n          Constants.CLASS_RELATIVE\n        ]\n      ],\n      [\n        Feature.types.number,\n        [\n          Constants.NUM_SINGULAR,\n          Constants.NUM_PLURAL,\n          Constants.NUM_DUAL\n        ]\n      ],\n      [\n        Feature.types.grmCase,\n        [\n          Constants.CASE_NOMINATIVE,\n          Constants.CASE_GENITIVE,\n          Constants.CASE_DATIVE,\n          Constants.CASE_ACCUSATIVE,\n          Constants.CASE_VOCATIVE\n        ]\n      ],\n      [\n        Feature.types.declension,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD\n        ]\n      ],\n      [\n        Feature.types.tense,\n        [\n          Constants.TENSE_PRESENT,\n          Constants.TENSE_IMPERFECT,\n          Constants.TENSE_FUTURE,\n          Constants.TENSE_PERFECT,\n          Constants.TENSE_PLUPERFECT,\n          Constants.TENSE_FUTURE_PERFECT,\n          Constants.TENSE_AORIST\n        ]\n      ],\n      [\n        Feature.types.voice,\n        [\n          Constants.VOICE_PASSIVE,\n          Constants.VOICE_ACTIVE,\n          Constants.VOICE_MEDIOPASSIVE,\n          Constants.VOICE_MIDDLE\n        ]\n      ],\n      [\n        Feature.types.mood,\n        [\n          Constants.MOOD_INDICATIVE,\n          Constants.MOOD_SUBJUNCTIVE,\n          Constants.MOOD_OPTATIVE,\n          Constants.MOOD_IMPERATIVE\n        ]\n      ],\n      [\n        // TODO full list of greek dialects\n        Feature.types.dialect,\n        [\n          'attic',\n          'epic',\n          'doric'\n        ]\n      ]\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\nfor the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return true\n  }\n\n  /**\n   * @override\n   */\n  static grammarFeatures () {\n    // TODO this ideally might be grammar specific\n    return [Feature.types.part, Feature.types.grmCase, Feature.types.mood, Feature.types.declension, Feature.types.tense, Feature.types.voice]\n  }\n\n  /**\n   * Return a normalized version of a text string which can be used to compare the word for equality\n   *\n   * @param {string} text the source word or the source text\n   * @returns {string} the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type string\n   */\n  static normalizeText (text) {\n    // we normalize greek to NFC - Normalization Form Canonical Composition\n    if (text) {\n      text = text.normalize('NFC')\n      // normalize the right single quotation at the end (elision) to Greek Koronois \\u1fbd\n      text = text.replace(/\\u2019$/, '\\u1fbd')\n    }\n    return text\n  }\n\n  static _tonosToOxia (word) {\n    return word.replace(\n      /\\u{03AC}/ug, '\\u{1F71}').replace( // alpha\n      /\\u{03AD}/ug, '\\u{1F73}').replace( // epsilon\n      /\\u{03AE}/ug, '\\u{1F75}').replace( // eta\n      /\\u{03AF}/ug, '\\u{1F77}').replace( // iota\n      /\\u{03CC}/ug, '\\u{1F79}').replace( // omicron\n      /\\u{03CD}/ug, '\\u{1F7B}').replace( // upsilon\n      /\\u{03CE}/ug, '\\u{1F7D}').replace( // omega\n      /\\u{0390}/ug, '\\u{1FD3}').replace( // iota with dialytika and tonos\n      /\\u{03B0}/ug, '\\u{1FE3}') // upsilon with dialytika and tonos\n  }\n\n  /**\n   * @override\n   */\n  static alternateWordEncodings ({\n    word = null, preceding = null, following = null,\n    encoding = null, preserveCase = false, includeOriginal = false\n  } = {}) {\n    // the original alpheios code used the following normalizations\n    // 1. When looking up a lemma\n    //    stripped vowel length\n    //    stripped caps\n    //    then if failed, tried again with out these\n    // 2. when adding to a word list\n    //    precombined unicode (vowel length/diacritics preserved)\n    // 2. When looking up a verb in the verb paradigm tables\n    //    it set e_normalize to false, otherwise it was true...\n    if (!word) {\n      return []\n    }\n    // make sure it's normalized to NFC\n    let normalized = GreekLanguageModel.normalizeText(word) // eslint-disable-line prefer-const\n    // and in lower case unless explicitly requested otherwise\n    if (!preserveCase) {\n      normalized = normalized.toLocaleLowerCase()\n    }\n    const strippedVowelLength = normalized.replace(\n      /[\\u{1FB0}\\u{1FB1}]/ug, '\\u{03B1}').replace(\n      /[\\u{1FB8}\\u{1FB9}]/ug, '\\u{0391}').replace(\n      /[\\u{1FD0}\\u{1FD1}]/ug, '\\u{03B9}').replace(\n      /[\\u{1FD8}\\u{1FD9}]/ug, '\\u{0399}').replace(\n      /[\\u{1FE0}\\u{1FE1}]/ug, '\\u{03C5}').replace(\n      /[\\u{1FE8}\\u{1FE9}]/ug, '\\u{03A5}').replace(\n      /[\\u{00AF}\\u{0304}\\u{0306}]/ug, '') // eslint-disable-line no-misleading-character-class\n\n    // Per https://wiki.digitalclassicist.org/Greek_Unicode_duplicated_vowels\n    // oxia and tonos are semantically identical and tonos should be preferred over oxia\n    // both both should be processed as equivalent. the normalize('NFC') function will\n    // normalize oxia to tonos, but some of our dictionary indicies may use oxia so\n    // we should allow oxia back in as an alternate encoding\n    const tonosToOxia = GreekLanguageModel._tonosToOxia(normalized)\n\n    const strippedDiaeresis = normalized.replace(\n      /\\u{0390}/ug, '\\u{03AF}').replace(\n      /\\u{03AA}/ug, '\\u{0399}').replace(\n      /\\u{03AB}/ug, '\\u{03A5}').replace(\n      /\\u{03B0}/ug, '\\u{03CD}').replace(\n      /\\u{03CA}/ug, '\\u{03B9}').replace(\n      /\\u{03CB}/ug, '\\u{03C5}').replace(\n      /\\u{1FD2}/ug, '\\u{1F76}').replace(\n      /\\u{1FD3}/ug, '\\u{1F77}').replace(\n      /\\u{1FD7}/ug, '\\u{1FD6}').replace(\n      /\\u{1FE2}/ug, '\\u{1F7A}').replace(\n      /\\u{1FE3}/ug, '\\u{1F7B}').replace(\n      /\\u{1FE7}/ug, '\\u{1FE6}').replace(\n      /\\u{1FC1}/ug, '\\u{1FC0}').replace(\n      /\\u{1FED}/ug, '\\u{1FEF}').replace(\n      /\\u{1FEE}/ug, '\\u{1FFD}').replace(\n      /[\\u{00A8}\\u{0308}]/ug, '') // eslint-disable-line no-misleading-character-class\n    // to strip diacritics, rather than list all possible combined vowels with\n    // diacritis, decompose, remove the combining accents, and then recompose\n    const strippedDiacritics = normalized.normalize('NFD').replace(\n      /[\\u{300}\\u{0301}\\u{0304}\\u{0306},\\u{342}]/ug, '').normalize('NFC') // eslint-disable-line no-misleading-character-class\n\n    let alternates = []\n    if (encoding === 'strippedDiaeresis') {\n      alternates.push(strippedDiaeresis)\n    } else if (encoding === 'strippedDiacritics') {\n      alternates.push(strippedDiacritics)\n    } else if (encoding === 'strippedAll') {\n      alternates.push(strippedDiaeresis.normalize('NFD').replace(\n        /[\\u{300}\\u{0301}\\u{0304}\\u{0306},\\u{342}\\u{314}\\u{313}\\u{345}]/ug, '').normalize('NFC')) // eslint-disable-line no-misleading-character-class\n    } else {\n      // default is to strip vowel lengths and replace tonos with oxia\n      alternates.push(strippedVowelLength)\n      if (tonosToOxia !== strippedVowelLength) {\n        alternates.push(tonosToOxia)\n      }\n    }\n    if (!includeOriginal) {\n      alternates = alternates.filter(w => w !== word)\n    }\n    return alternates\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   *\n   * @returns {string} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return '.,;:!?\"(){}\\\\[\\\\]<>\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u201C\\u201D\\u0387\\u00B7\\n\\r\\u200C\\u200D'\n  }\n\n  /**\n   * Sets inflection grammar properties based on its characteristics\n   *\n   * @param {Inflection} inflection - An inflection object\n   * @returns {object} Inflection properties\n   */\n  static getInflectionConstraints (inflection) {\n    const constraints = {\n      fullFormBased: false,\n      suffixBased: false,\n      pronounClassRequired: false\n    }\n    const formBasedList = [Constants.POFS_PRONOUN, Constants.POFS_NUMERAL, Constants.POFS_ARTICLE]\n    if (inflection.hasOwnProperty(Feature.types.part)) {\n      if (formBasedList.includes(inflection[Feature.types.part].value)) {\n        constraints.fullFormBased = true\n      } else {\n        constraints.suffixBased = true\n      }\n    } else {\n      Logger.getInstance().warn('Unable to set grammar: part of speech data is missing or is incorrect', inflection[Feature.types.part])\n    }\n\n    constraints.pronounClassRequired =\n      LanguageModelFactory.compareLanguages(GreekLanguageModel.languageID, inflection.languageID) &&\n      inflection.hasOwnProperty(Feature.types.part) &&\n      inflection[Feature.types.part].value === Constants.POFS_PRONOUN\n\n    return constraints\n  }\n\n  /**\n   * Determines a class of a given word (pronoun) by finding a matching word entry(ies)\n   * in a pronoun source info (`forms`) and getting a single or multiple classes of those entries.\n   * Some morphological analyzers provide class information that is unreliable or do not\n   * provide class information at all. However, class information is essential in\n   * deciding in what table should pronouns be grouped. For this, we have to\n   * determine pronoun classes using this method.\n   *\n   * @param {Form[]} forms - An array of known forms of pronouns.\n   * @param {string} word - A word we need to find a matching class for.\n   * @param hdwd\n   * @param {boolean} normalize - Whether normalized forms of words shall be used for comparison.\n   * @returns {Feature} Matching classes found within a Feature objects. If no matching classes found,\n   * returns undefined.\n   */\n  static getPronounClasses (forms, word, hdwd, normalize = true) {\n    // eslint-disable-next-line prefer-const\n    let matchingValues = new Set() // Will eliminate duplicated values\n    const matchingForms = forms.filter(\n      form => {\n        let match = false\n        // the following test intential looks for an exact equality on the headword rather than\n        // using compareWord because exact match on diacritics matters -- the interrogative and indefinite\n        // pronouns only differ by diacritics\n        if (form.value && (!form.features[Feature.types.hdwd] || (form.features[Feature.types.hdwd].value === hdwd))) {\n          match = GreekLanguageModel.compareWords(form.value, word, normalize)\n        }\n        return match\n      }\n    )\n    for (const matchingForm of matchingForms) {\n      if (matchingForm.features.hasOwnProperty(Feature.types.grmClass)) {\n        for (const value of matchingForm.features[Feature.types.grmClass].values) {\n          matchingValues.add(value)\n        }\n      }\n    }\n    if (matchingValues.size > 0) {\n      return new Feature(Feature.types.grmClass, Array.from(matchingValues), GreekLanguageModel.languageID)\n    }\n  }\n\n  /**\n   * Checks if two words are equivalent.\n   *\n   * @override\n   * @param {string} wordA - a first word to be compared.\n   * @param {string} wordB - a second word to be compared.\n   * @param {boolean} normalize - whether or not to apply normalization algorithms\n   * with an `alternateWordEncodings()` function.\n   * @param {object} options - Additional comparison criteria.\n   * @param {boolean} options.normalizeTrailingDigit - whether to consider the form\n   * of a trailing digit during comparison.\n   */\n  static compareWords (wordA, wordB, normalize = true,\n    { normalizeTrailingDigit = false } = {}) {\n    let matched = false\n    if (normalize) {\n      if (normalizeTrailingDigit) {\n        /*\n        If a trailing digit is `1` (e.g. `αἴγυπτος1`) remove it, because the word with it is an equivalent of\n        a word without (e.g. `αἴγυπτος`).\n         */\n        wordA = this.normalizeTrailingDigit(wordA)\n        wordB = this.normalizeTrailingDigit(wordB)\n      }\n\n      const altWordA = GreekLanguageModel.alternateWordEncodings({\n        word: wordA,\n        encoding: 'strippedDiacritics',\n        includeOriginal: true\n      })\n      const altWordB = GreekLanguageModel.alternateWordEncodings({\n        word: wordB,\n        encoding: 'strippedDiacritics',\n        includeOriginal: true\n      })\n      for (let i = 0; i < altWordA.length; i++) {\n        matched = altWordA[i] === altWordB[i]\n        if (matched) {\n          break\n        }\n      }\n      if (!matched) {\n        matched = GreekLanguageModel.normalizeText(wordA) === GreekLanguageModel.normalizeText(wordB)\n      }\n    } else {\n      matched = wordA === wordB\n    }\n    return matched\n  }\n\n  static isValidUnicode (word) {\n    return GreekChars.chars.some(char => word.includes(char))\n  }\n}\n","import LMF from './language_model_factory.js'\nimport Feature from './feature.js'\nimport Logger from './logging/logger.js'\n\n/**\n * Wrapper class for a (grammatical, usually) feature, such as part of speech or declension. Keeps both value and type information.\n */\nclass GrmFeature {\n  /**\n   * @deprecated Use Feature instead\n   * Initializes a Feature object\n   * @param {string | string[]} value - A single feature value or, if this feature could have multiple\n   * values, an array of values.\n   * Multiple values do not allow to use a sort order. Because of this, it's better to use\n   * array of multiple Feature objects with single value each instead of a single Feature object\n   * with multiple values.\n   * Multiple values are left for backward compatibility only. Please do not use them as they\n   * will be removed in the future.\n   * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n   * @param {string | symbol} language - A language of a feature, allowed values are specified in 'languages' object.\n   * @param {int} sortOrder - an integer used for sorting\n   */\n  constructor (value, type, language, sortOrder = 1) {\n    if (!GrmFeature.types.isAllowed(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!value) {\n      throw new Error('Feature should have a non-empty value.')\n    }\n    if (!type) {\n      throw new Error('Feature should have a non-empty type.')\n    }\n    if (!language) {\n      throw new Error('Feature constructor requires a language')\n    }\n    this.value = value\n    this.type = type\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({ languageID: this.languageID, languageCode: this.languageCode } = LMF.getLanguageAttrs(language))\n    this.sortOrder = sortOrder\n  }\n\n  /**\n   * This is a compatibility function for legacy code.\n   *\n   * @returns {string} A language code.\n   */\n  get language () {\n    Logger.getInstance().warn('Please use a \"languageID\" instead of a \"language\"')\n    return this.languageCode\n  }\n\n  isEqual (feature) {\n    if (Array.isArray(feature.value)) {\n      // `feature` is a single object with multiple `value` properties. This feature will be sunset\n      // as it does not allow to use sort order on Feature objects.\n      if (!Array.isArray(this.value) || this.value.length !== feature.value.length) {\n        return false\n      }\n      let equal = this.type === feature.type && LMF.compareLanguages(this.languageID, feature.languageID)\n      equal = equal && this.value.every(function (element, index) {\n        return element === feature.value[index]\n      })\n      return equal\n    } else {\n      return LMF.compareLanguages(this.languageID, feature.languageID) && this.type === feature.type && this.value === feature.value\n    }\n  }\n\n  isSubsetof (features) {\n    if (!Array.isArray(features)) {\n      features = [features] // If `features` is a single value, convert it to an array (a more general case)\n    }\n    // `feature` is an array of feature objects with (possibly) each having a single feature value.\n    const languageID = features[0].languageID // Assume all Feature objects have the same language ID\n    const type = features[0].type // Assume all Feature objects have the same type\n    const values = features.map(f => f.value)\n    if (LMF.compareLanguages(this.languageID, languageID) && this.type === type && values.includes(this.value)) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * examine the feature for a specific value\n   *\n   * @param {string} value\n   * @returns {boolean} true if the value is included in the feature's values\n   */\n  hasValue (value) {\n    if (Array.isArray(this.value)) {\n      return this.value.includes(value)\n    } else {\n      return this.value === value\n    }\n  }\n\n  /**\n   * string representation of a feature\n   *\n   * @returns {string}\n   */\n  toString () {\n    if (Array.isArray(this.value)) {\n      return this.value.join(',')\n    } else {\n      return this.value\n    }\n  }\n\n  static toFeature (sourceFeature) {\n    if (Array.isArray(sourceFeature)) {\n      if (!(sourceFeature[0] instanceof Feature)) {\n        const type = sourceFeature[0].type\n        const languageID = sourceFeature[0].languageID\n        const values = sourceFeature.map(v => v.value)\n        return new Feature(type, values, languageID)\n      }\n    } else {\n      if (!(sourceFeature instanceof Feature)) {\n        return new Feature(sourceFeature.type, sourceFeature.value, sourceFeature.languageID)\n      }\n    }\n    return sourceFeature\n  }\n}\n// Should have no spaces in values in order to be used in HTML templates\nGrmFeature.types = {\n  word: 'word',\n  part: 'part of speech', // Part of speech\n  number: 'number',\n  case: 'case',\n  grmCase: 'case', // A synonym of `case`\n  declension: 'declension',\n  gender: 'gender',\n  type: 'type',\n  class: 'class',\n  grmClass: 'class', // A synonym of `class`\n  conjugation: 'conjugation',\n  comparison: 'comparison',\n  tense: 'tense',\n  voice: 'voice',\n  mood: 'mood',\n  person: 'person',\n  frequency: 'frequency', // How frequent this word is\n  meaning: 'meaning', // Meaning of a word\n  source: 'source', // Source of word definition\n  footnote: 'footnote', // A footnote for a word's ending\n  dialect: 'dialect', // a dialect identifier\n  note: 'note', // a general note\n  pronunciation: 'pronunciation',\n  age: 'age',\n  area: 'area',\n  geo: 'geo', // geographical data\n  kind: 'kind', // verb kind information\n  derivtype: 'derivtype',\n  stemtype: 'stemtype',\n  morph: 'morph', // general morphological information\n  var: 'var', // variance?\n  isAllowed (value) {\n    const v = `${value}`\n    return Object.values(this).includes(v)\n  }\n}\nexport default GrmFeature\n","import Homonym from './homonym.js'\n\nexport default class HomonymGroup {\n  constructor (homonyms = []) {\n    this._homonyms = homonyms\n  }\n\n  get homonyms () {\n    return this._homonyms\n  }\n\n  get hasHomonyms () {\n    return this._homonyms.length > 0\n  }\n\n  /**\n   * Converts a homonyms form a HomonymGroup into a single Homonym.\n   * This function was created to provide backward compatibility with the code that\n   * does not work with homonym groups.\n   *\n   * @param {string} targetWord - A target word that will be set for all lemmas within a resulting homonym.\n   * @param {boolean} disambiguated - Whether lemmas in a resulting homonyms should be disambiguated.\n   * @returns {Homonym} - A resulting homonym.\n   */\n  toHomonym (targetWord, { disambiguated = false } = {}) {\n    if (!targetWord) {\n      throw new Error(HomonymGroup.errors.NO_TARGET_WORD)\n    }\n    const lexemes = this._homonyms.map(homonym => homonym.lexemes).flat()\n    if (disambiguated) {\n      lexemes.forEach(lexeme => { lexeme.disambiguated = true })\n    }\n    return new Homonym(lexemes, targetWord)\n  }\n}\n\nHomonymGroup.errors = {\n  NO_TARGET_WORD: 'Target word is not provided'\n}\n","import LMF from './language_model_factory'\nimport Lexeme from './lexeme.js'\nimport Lemma from './lemma.js'\nimport Logger from './logging/logger.js'\n\nclass Homonym {\n  /**\n   * Initializes a Homonym object.\n   *\n   * @param {Lexeme[]} lexemes - An array of Lexeme objects.\n   * @param {string} form - the form which produces the homonyms\n   */\n  constructor (lexemes, form) {\n    if (!lexemes || (Array.isArray(lexemes) && lexemes.length === 0)) {\n      throw new Error('Lexemes data should not be empty.')\n    }\n\n    if (!Array.isArray(lexemes)) {\n      throw new Error('Lexeme data should be provided in an array.')\n    }\n\n    for (const lexeme of lexemes) {\n      if (!(lexeme instanceof Lexeme)) {\n        throw new Error('All lexeme data should be of Lexeme object type.')\n      }\n    }\n\n    /** @type {Lexeme[]} */\n    this.lexemes = lexemes\n    this.targetWord = form\n  }\n\n  /**\n   * Creates a simple form of inflection with one lexeme and zero or more inflections\n   * attached to it. The lexeme will have lemma whose `word` will be set to\n   * a homonym's target word.\n   *\n   * @param {string} word - A word that will populate homonym's `targetWord` prop and lemma `word` one.\n   * @param {symbol} languageID - A language identificator as defined in Constants.LANG_XXX.\n   * @param {Inflection[]} inflections - Zero or more inflection objects that will be attached to the lexeme\n   * @returns {Homonym} A newly created homonym object.\n   */\n  static createSimpleForm (word, languageID, inflections = []) {\n    const lemma = new Lemma(word, languageID)\n    const lexeme = new Lexeme(lemma, inflections)\n    return new Homonym([lexeme], word)\n  }\n\n  /**\n   * Checks if any of the lexemes of this homonym has short definitions stored.\n   *\n   * @returns {boolean} - true if any definitions are stored, false otherwise.\n   */\n  get hasShortDefs () {\n    return Boolean(this.lexemes && this.lexemes.some(l => l.hasShortDefs))\n  }\n\n  /**\n   * Checks if any of the lexemes of this homonym has full definitions stored.\n   *\n   * @returns {boolean} - true if any definitions are stored, false otherwise.\n   */\n  get hasFullDefs () {\n    return Boolean(this.lexemes && this.lexemes.some(l => l.hasFullDefs))\n  }\n\n  static readObject (jsonObject) {\n    let lexemes = [] // eslint-disable-line prefer-const\n    if (jsonObject.lexemes) {\n      for (const lexeme of jsonObject.lexemes) {\n        lexemes.push(Lexeme.readObject(lexeme))\n      }\n    }\n    const homonym = new Homonym(lexemes, jsonObject.form)\n    return homonym\n  }\n\n  convertToJSONObject (addMeaning = false) {\n    let resultHomonym = { lexemes: [], form: this.targetWord } // eslint-disable-line prefer-const\n    for (const lexeme of this.lexemes) {\n      resultHomonym.lexemes.push(lexeme.convertToJSONObject(addMeaning))\n    }\n    return resultHomonym\n  }\n\n  /**\n   * Returns a language code of a homonym (ISO 639-3).\n   * Homonym does not have a language property, only lemmas and inflections do. We assume that all lemmas\n   * and inflections within the same homonym will have the same language, and we can determine a language\n   * by using language property of the first lemma. We chan change this logic in the future if we'll need to.\n   *\n   * @returns {string} A language code, as defined in the `languages` object.\n   */\n  get language () {\n    Logger.getInstance().warn('Please use languageID instead')\n    return LMF.getLanguageCodeFromId(this.languageID)\n  }\n\n  /**\n   * Returns a language ID of a homonym.\n   * Homonym does not have a languageID property, only lemmas and inflections do. We assume that all lemmas\n   * and inflections within the same homonym will have the same language, and we can determine a language\n   * by using languageID property of the first lemma. We chan change this logic in the future if we'll need to.\n   *\n   * @returns {symbol} A language ID, as defined in the `LANG_` constants.\n   */\n  get languageID () {\n    if (this.lexemes && this.lexemes[0] && this.lexemes[0].lemma && this.lexemes[0].lemma.languageID) {\n      return this.lexemes[0].lemma.languageID\n    } else {\n      throw new Error('Homonym has not been initialized properly. Unable to obtain language ID information.')\n    }\n  }\n\n  /**\n   * Returns a list of all inflections within all lexemes of a homonym\n   *\n   * @returns {Inflection[]} An array of inflections\n   */\n  get inflections () {\n    let inflections = []\n    for (const lexeme of this.lexemes) {\n      inflections = inflections.concat(lexeme.inflections)\n    }\n    return inflections\n  }\n\n  isDisambiguated () {\n    return this.lexemes.filter(l => l.disambiguated).length > 0\n  }\n\n  /**\n   * Disambiguate homymyn objects with another\n   *\n   * @param {Homonym} base the homonym to use to disambiguate\n   * @param {Homonym[]} disambiguators the homonyms to use to disambiguate\n   */\n  static disambiguate (base, disambiguators) {\n    if (disambiguators.length === 0) {\n      // nothing left to disamibugate with\n      return base\n    }\n    const disambiguator = disambiguators.shift()\n    let lexemes = [] // eslint-disable-line prefer-const\n    let missedLexemes = [] // eslint-disable-line prefer-const\n    // iterate through the lexemes in the disambiguator and try\n    // to disambiguate the existing lexemes with each\n    for (const otherLexeme of disambiguator.lexemes) {\n      let lexemeMatched = false\n      for (const lexeme of base.lexemes) {\n        // Do not try to disambiguate lexemes that can't: it will erase a `disambiguated` flag\n        const newLex = lexeme.canBeDisambiguatedWith(otherLexeme) ? Lexeme.disambiguate(lexeme, otherLexeme) : lexeme\n\n        if (lexeme.isFullHomonym(otherLexeme, { normalize: true })) {\n          lexemeMatched = true\n          // If lexeme is a full homonym with a disambiguator, it should always be marked as disambiguated\n          newLex.disambiguated = true\n        }\n        lexemes.push(newLex)\n      }\n      // if we couldn't find a matching lexeme, add the disambigutor's lexemes\n      // to the list of lexemes for the new Homonym\n      if (!lexemeMatched) {\n        otherLexeme.disambiguated = true\n        missedLexemes.push(otherLexeme)\n      }\n    }\n    // create a new homonym with the disamibugated lexemes\n    const newHom = new Homonym([...lexemes, ...missedLexemes], base.targetWord)\n    return Homonym.disambiguate(newHom, disambiguators)\n  }\n}\nexport default Homonym\n","import Feature from './feature.js'\nimport LMF from './language_model_factory.js'\nimport * as Constants from './constants.js'\nimport Logger from './logging/logger.js'\n/*\n Hierarchical structure of return value of a morphological analyzer:\n\n Homonym (a group of words that are written the same way, https://en.wikipedia.org/wiki/Homonym)\n    Lexeme 1 (a unit of lexical meaning, https://en.wikipedia.org/wiki/Lexeme)\n        Have a lemma and one or more inflections\n        Lemma (also called a headword, a canonical form of a group of words https://en.wikipedia.org/wiki/Lemma_(morphology) )\n        Inflection 1\n            Stem\n            Suffix (also called ending)\n        Inflection 2\n            Stem\n            Suffix\n    Lexeme 2\n        Lemma\n        Inflection 1\n            Stem\n            Suffix\n */\n\n/**\n * Represents an inflection of a word\n */\nclass Inflection {\n  /**\n   * Initializes an Inflection object.\n   *\n   * @param {string} stem - A stem of a word.\n   * @param {string | symbol} language - A word's language.\n   * @param {string} suffix - a suffix of a word\n   * @param {prefix} prefix - a prefix of a word\n   * @param {example} example - example\n   */\n  constructor (stem = null, language, suffix = null, prefix = null, example = null) {\n    if (!stem && !suffix) {\n      throw new Error('At least stem or suffix must be defined')\n    }\n    if (!language) {\n      throw new Error('Language should not be empty.')\n    }\n\n    if (!LMF.supportsLanguage(language)) {\n      throw new Error(`language ${language} not supported.`)\n    }\n\n    this.stem = stem\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({ languageID: this.languageID, languageCode: this.languageCode } = LMF.getLanguageAttrs(language))\n    this.model = LMF.getLanguageModel(this.languageID)\n    this.features = new Set() // Stores names of features of this inflection, feature objects themselves are stored as props\n\n    // TODO: Separate constraints to a class of its own to share definition with language model and provide `clone()` method?\n    // A grammar constraints object\n    this.constraints = {\n      fullFormBased: false, // True this inflection stores and requires to use a full form of a word\n      suffixBased: false, // True if only suffix is enough to identify this inflection\n      irregular: false, // Whether this word is an irregular one\n      obligatoryMatches: [], // {string[]} Names of features that should be matched in order to include a form or suffix to an inflection table\n      optionalMatches: [], // {string[]} Names of features that will be recorded but are not important for inclusion of a form or suffix to an inflection table\n      morphologyMatches: [] // {string[]} These features should match for a morphology match\n    }\n\n    // Suffix may not be present in every word. If missing, it will be set to null.\n    this.suffix = suffix\n\n    // Prefix may not be present in every word. If missing, it will be set to null.\n    this.prefix = prefix\n\n    // Example may not be provided\n    this.example = example\n\n    // A lemma this inflection belongs to. Is set by `Lexeme.addInflection()`\n    // TODO: make sure inflections are not set directly or this data will not be set\n    this.lemma = null\n  }\n\n  clone () {\n    // eslint-disable-next-line prefer-const\n    let clone = new Inflection(this.stem, this.languageID, this.suffix, this.prefix, this.example)\n    // Features are not modified right now so we can share them\n    clone.addFeatures(Array.from(this.features).map(f => this[f]))\n    clone.constraints = {\n      fullFormBased: this.constraints.fullFormBased,\n      suffixBased: this.constraints.suffixBased,\n      irregular: this.constraints.irregular,\n      obligatoryMatches: this.constraints.obligatoryMatches ? Array.from(this.constraints.obligatoryMatches) : [],\n      optionalMatches: this.constraints.obligatoryMatches ? Array.from(this.constraints.obligatoryMatches) : [],\n      morphologyMatches: this.constraints.morphologyMatches ? Array.from(this.constraints.morphologyMatches) : []\n    }\n    // A clone will share the same lexeme with an original item\n    clone.lemma = this.lemma\n    return clone\n  }\n\n  /**\n   * Returns a full form of a word using ' - ' as a divider for suffix-based inflections.\n   *\n   * @returns {string} A word form.\n   */\n  get form () {\n    const divider = this.stem ? ' - ' : ''\n    return this.getForm(divider)\n  }\n\n  /**\n   * Returns a full form of a word using user specified divider for suffix-based inflections.\n   *\n   * @param {string} divider - A divider to use between stem and suffix.\n   * @returns {string} A word form.\n   */\n  getForm (divider = '') {\n    let form, prefix, suffix\n\n    const stem = this.stem ? this.stem : ''\n\n    if (this.model.direction === Constants.LANG_DIR_RTL) {\n      prefix = this.prefix ? divider + this.prefix : ''\n      suffix = this.suffix ? this.suffix + divider : ''\n\n      form = suffix + stem + prefix\n    } else {\n      prefix = this.prefix ? this.prefix + divider : ''\n      suffix = this.suffix ? divider + this.suffix : ''\n\n      form = prefix + stem + suffix\n    }\n\n    return form\n  }\n\n  /**\n   * This is a compatibility function for legacy code.\n   *\n   * @returns {string} A language code.\n   */\n  get language () {\n    Logger.getInstance().warn('Please use a \"languageID\" instead of a \"language\"')\n    return this.languageCode\n  }\n\n  /**\n   * Sets grammar properties based on inflection info\n   */\n  setConstraints () {\n    if (this.model.hasOwnProperty('getInflectionConstraints')) {\n      const constraintData = this.model.getInflectionConstraints(this)\n      this.constraints = Object.assign(this.constraints, constraintData)\n    }\n  }\n\n  /**\n   * Compares if two words are the same. Options allows to specify\n   * comparison algorithms for cases when word info is not fully correct.\n   *\n   * @param {string} word - A word or suffix to compare with inflection.\n   * @param {string} className - A type of word: 'Suffix' or \"Form'.\n   * @param {comparison} options - These settings define comparison algorithm:\n   *        'normalize' - normalize word and inflection before comparison.\n   *        'fuzzySuffix' - if suffix contained in a 'word' does not match our suffix data,\n   *                        try to find a match by checking if inflection full form\n   *                        ends with this suffix.\n   * @returns {boolean} True for match, false otherwise.\n   */\n  smartWordCompare (word, className, options = {}) {\n    // Default values\n    if (!options.hasOwnProperty('normalize')) { options.normalize = true }\n    if (!options.hasOwnProperty('fuzzySuffix')) { options.fuzzySuffix = false }\n\n    let value\n    if (!this.constraints.irregular) {\n      value = this.constraints.suffixBased ? this.suffix : this.form\n    } else {\n      if (className === 'Suffix') {\n        value = this.suffix\n      } else {\n        value = this[Feature.types.fullForm] ? this[Feature.types.fullForm].value : this.form\n      }\n    }\n\n    let matchResult = this.modelCompareWords(word, value, options.normalize)\n\n    if (!matchResult && className === 'Suffix' && options.fuzzySuffix) {\n      const form = this.getForm()\n      if (form && word && form.length >= word.length) {\n        const altSuffix = form.substring(form.length - word.length)\n        matchResult = this.modelCompareWords(word, altSuffix, options.normalize)\n      }\n    }\n\n    return matchResult\n  }\n\n  compareWithWord (word, normalize = true) {\n    const value = this.constraints.suffixBased ? this.suffix : this.form\n    return this.modelCompareWords(word, value, normalize)\n  }\n\n  /**\n   * Compare to words (or partial words) delegating to the language model\n   * rules for normalization\n   *\n   * @param {string} wordA the first word\n   * @param {string} wordB the second word\n   * @param {boolean} normalize whether or not to apply normalization\n   */\n  modelCompareWords (wordA, wordB, normalize = true) {\n    const model = LMF.getLanguageModel(this.languageID)\n    return model.compareWords(wordA, wordB, normalize)\n  }\n\n  /**\n   * Check to see if the supplied inflection can disambiguate this one\n   *\n   * @param {Inflection} infl Inflection object to be used for disambiguation\n   */\n  disambiguatedBy (infl) {\n    let matched = true\n    // an inflection can only be disambiguated by its features\n    if (this.features.length === 0 || infl.features.length === 0) {\n      matched = false\n    }\n    // the supplied inflection can be less specific but not more\n    if (infl.features.length > this.features.length) {\n      matched = false\n    }\n    for (const feature of infl.features) {\n      if (!this[feature] || !this[feature].isEqual(infl[feature])) {\n        matched = false\n        break\n      }\n    }\n    return matched\n  }\n\n  /**\n   * @deprecated Use `addFeature` instead\n   * Sets a grammatical feature in an inflection. Some features can have multiple values, In this case\n   * an array of Feature objects will be provided.\n   * Values are taken from features and stored in a 'feature.type' property as an array of values.\n   * @param {Feature | Feature[]} data\n   */\n  set feature (data) {\n    Logger.getInstance().warn('Please use \"addFeature\" instead.')\n    if (!data) {\n      throw new Error('Inflection feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data]\n    }\n\n    const type = data[0].type\n    this[type] = []\n    for (const element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('Inflection feature data must be a Feature object.')\n      }\n\n      if (!LMF.compareLanguages(element.languageID, this.languageID)) {\n        throw new Error(`Language \"${element.languageID.toString()}\" of a feature does not match\n          a language \"${this.languageID.toString()}\" of an Inflection object.`)\n      }\n\n      this[type].push(element)\n      this.features.add(type)\n    }\n  }\n\n  /**\n   * Sets a grammatical feature of an inflection. Feature is stored in a `feature.type` property.\n   *\n   * @param {Feature} feature - A feature object with one or multiple values.\n   */\n  addFeature (feature) {\n    if (!feature) {\n      throw new Error('feature data cannot be empty.')\n    }\n\n    if (!(feature instanceof Feature)) {\n      throw new Error('feature data must be a Feature object.')\n    }\n\n    if (!LMF.compareLanguages(feature.languageID, this.languageID)) {\n      throw new Error('Language \"' + feature.languageID.toString() + '\" of a feature does not match a language \"' +\n        this.languageID.toString() + '\" of a Lemma object.')\n    }\n\n    this[feature.type] = feature\n    this.features.add(feature.type)\n  }\n\n  /**\n   * Sets multiple grammatical features of an inflection.\n   *\n   * @param {Feature[]} features - Features to be added.\n   */\n  addFeatures (features) {\n    if (!Array.isArray(features)) {\n      throw new Error('Features must be in an array')\n    }\n\n    for (const feature of features) {\n      this.addFeature(feature)\n    }\n  }\n\n  /**\n   * Checks whether an inflection has a feature with `featureName` name and `featureValue` value\n   *\n   * @param {string} featureName - A name of a feature\n   * @param {string} featureValue - A value of a feature\n   * @returns {boolean} True if an inflection contains a feature, false otherwise\n   */\n  hasFeatureValue (featureName, featureValue) {\n    if (this.hasOwnProperty(featureName)) {\n      return this[featureName].values.includes(featureValue)\n    }\n    return false\n  }\n\n  toString () {\n    let string = `Inflection stem: ${this.stem}, prefix: ${this.prefix}, suffix: ${this.suffix}, langID: ${this.languageID.toString()}\\n  features:  `\n    for (const feature of this.features.values()) {\n      string += `${feature}: ${this[feature].value}, `\n    }\n    string += '\\n  constraints:  '\n    for (const [key, value] of Object.entries(this.constraints)) {\n      if (Array.isArray(value)) {\n        string += `${key}: [${value}], `\n      } else {\n        string += `${key}: ${value}, `\n      }\n    }\n    string += `\\n  example: ${this.example}`\n    return string\n  }\n\n  static readObject (jsonObject, lemma) {\n    // eslint-disable-next-line prefer-const\n    let inflection =\n      new Inflection(\n        jsonObject.stem, jsonObject.languageCode, jsonObject.suffix, jsonObject.prefix, jsonObject.example)\n    inflection.languageID = LMF.getLanguageIdFromCode(inflection.languageCode)\n\n    if (jsonObject.features && jsonObject.features.length > 0) {\n      jsonObject.features.forEach(featureSource => {\n        inflection.addFeature(Feature.readObject(featureSource))\n      })\n    }\n    if (lemma) {\n      inflection.lemma = lemma\n    }\n    return inflection\n  }\n\n  convertToJSONObject () {\n    let resultFeatures = [] // eslint-disable-line prefer-const\n    for (const key of this.features.keys()) {\n      resultFeatures.push(this[key].convertToJSONObject())\n    }\n    const languageCode = LMF.getLanguageCodeFromId(this.languageID)\n    return {\n      stem: this.stem,\n      languageCode: languageCode,\n      suffix: this.suffix,\n      prefix: this.prefix,\n      example: this.example,\n      features: resultFeatures\n    }\n  }\n}\nexport default Inflection\n","class InflectionGroup {\n  /**\n   * A group of inflections or groups of inflections\n   *\n   * @param {InflectionGroupingKey} groupingKey features of the inflections in the group\n   * @param {Inflection[]|InflectionGroup[]} inflections array of Inflections or InflectionGroups in this group\n   * @param sortKey\n   */\n  constructor (groupingKey, inflections = [], sortKey = null) {\n    this.groupingKey = groupingKey\n    this.inflections = inflections\n  }\n\n  /**\n   * Add an Inflection or InflectionGroup to the group\n   *\n   * @param {Inflection|InflectionGroup} inflection\n   */\n  append (inflection) {\n    this.inflections.push(inflection)\n  }\n}\nexport default InflectionGroup\n","import Feature from './feature.js'\n\nclass InflectionGroupingKey {\n  /**\n   * @class\n   * @param {Inflection} infl inflection with features which are used as a grouping key\n   * @param {string[]} features array of feature names which are used as the key\n   * @param {object} extras extra property name and value pairs used in the key\n   */\n  constructor (infl, features, extras = {}) {\n    for (const feature of features) {\n      this[feature] = infl[feature]\n    }\n    Object.assign(this, extras)\n  }\n\n  /**\n   * checks if a feature with a specific value\nis included in the grouping key\n   *\n   * @returns {boolean} true if found, false if not\n   * @param feature\n   * @param value\n   */\n  hasFeatureValue (feature, value) {\n    if (this.hasOwnProperty(feature)) {\n      return this[feature].values.includes(value)\n    }\n    return false\n  }\n\n  /**\n   * Return this key as a string\n   *\n   * @returns {string} string representation of the key\n   */\n  toString () {\n    let values = [] // eslint-disable-line prefer-const\n    for (const prop of Object.getOwnPropertyNames(this).sort()) {\n      // A prop can be either a Feature object, or a one of the extras of a string type\n      const value = (this[prop] instanceof Feature) ? this[prop].values.sort().join(',') : this[prop]\n      values.push(value)\n    }\n    return values.join(' ')\n  }\n}\n\nexport default InflectionGroupingKey\n","import * as Constants from './constants.js'\nimport LanguageModelFactory from './language_model_factory.js'\nimport Feature from './feature.js'\nimport FeatureType from './feature_type.js'\nimport InflectionGroupingKey from './inflection_grouping_key.js'\nimport InflectionGroup from './inflection_group.js'\nimport Logger from './logging/logger.js'\n\n/**\n * @class  LanguageModel is the base class for language-specific behavior\n */\nclass LanguageModel {\n  constructor () {\n    // This is just to avoid JavaScript Standard error on `context_backward` getter name. Don't need a constructor otherwise\n    // TODO: `contextBackward` shall be used instead of `context_backward` wherever it is used\n    this.context_backward = LanguageModel.contextBackward\n  }\n\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  /**\n   * @deprecated\n   */\n  get contextForward () {\n    Logger.getInstance().warn('Please use static \"contextForward\" instead')\n    return this.constructor.contextForward\n  }\n\n  /**\n   * @deprecated\n   */\n  get contextBackward () {\n    Logger.getInstance().warn('Please use static \"contextBackward\" instead')\n    return this.constructor.contextBackward\n  }\n\n  /**\n   * @deprecated\n   */\n  get direction () {\n    Logger.getInstance().warn('Please use static \"direction\" instead')\n    return this.constructor.direction\n  }\n\n  /**\n   * @deprecated\n   */\n  get baseUnit () {\n    Logger.getInstance().warn('Please use static \"baseUnit\" instead')\n    return this.constructor.baseUnit\n  }\n\n  /**\n   * @deprecated\n   */\n  get features () {\n    Logger.getInstance().warn('Please use individual \"getFeatureType\" or static \"features\" instead')\n    return this.constructor.features\n  }\n\n  /**\n   * Returns a list of names of feature types that are defined in a language model.\n   *\n   * @returns {string[]} Names of features that are defined in a model.\n   */\n  static get featureNames () {\n    return this.featureValues.keys()\n  }\n\n  /**\n   * Returns a feature a `featureType` name that is defined for a language. It does not create a new Feature\n   * object instance. It returns the one defined in a language model. To get a new instance of a Feature\n   * object, use `getFeature` instead.\n   * If no feature of `featureType` is defined in a language model, throws an error.\n   *\n   * @param {string} featureType - A feature type name.\n   * @returns {Feature} A feature object of requested type.\n   */\n  static typeFeature (featureType) {\n    if (this.typeFeatures.has(featureType)) {\n      return this.typeFeatures.get(featureType)\n    } else {\n      throw new Error(`Type feature \"${featureType}\" is not defined within \"${this}\"`)\n    }\n  }\n\n  /**\n   * Returns a map with Feature objects of all features defined in a language. Use this method to get all\n   * Feature objects defined in a language model.\n   *\n   * @returns {Map} Feature objects for all features defined within a language in a Map object. The key is\n   * a feature type (a string), and the value is a Feature object.\n   */\n  static get typeFeatures () {\n    Logger.getInstance().warn('This getter must be defined in a descendant class')\n  }\n\n  static get features () {\n    let features = {} // eslint-disable-line prefer-const\n    for (const featureName of this.featureNames) {\n      features[featureName] = this.getFeature(featureName)\n    }\n    return features\n  }\n\n  static get languageID () {\n    return Constants.LANG_UNDEFINED\n  }\n\n  static get languageCode () {\n    return Constants.STR_LANG_CODE_UNDEFINED\n  }\n\n  /**\n   * Returns an array of language codes that represents the language.\n   *\n   * @returns {string[]} An array of language codes that matches the language.\n   */\n  static get languageCodes () {\n    return []\n  }\n\n  static get codes () {\n    Logger.getInstance().warn('Use static \"languageCodes\" instead')\n    return this.languageCodes\n  }\n\n  /**\n   * @deprecated\n   * @returns {string[]}\n   */\n  get codes () {\n    Logger.getInstance().warn('Please use a static version of \"codes\" instead')\n    return this.constructor.languageCodes\n  }\n\n  /**\n   * @deprecated\n   * @returns {string}\n   */\n  toCode () {\n    Logger.getInstance().warn('Please use a static \"languageCode\" instead')\n    return this.constructor.languageCode\n  }\n\n  /**\n   * @deprecated\n   * @returns {string}\n   */\n  static toCode () {\n    Logger.getInstance().warn('Please use a static \"languageCode\" instead')\n    return this.languageCode\n  }\n\n  /**\n   * Return a list of feature values that are allowed for each feature type\n   *\n   * @returns {Map<string, string[]>}\n   */\n  static get featureValues () {\n    /*\n    This could be a static variable, but then it will create a circular reference:\n    Feature -> LanguageModelFactory -> LanguageModel -> Feature\n     */\n    return new Map([\n      [\n        Feature.types.part,\n        [\n          Constants.POFS_ADVERB,\n          Constants.POFS_ADVERBIAL,\n          Constants.POFS_ADJECTIVE,\n          Constants.POFS_ARTICLE,\n          Constants.POFS_CONJUNCTION,\n          Constants.POFS_EXCLAMATION,\n          Constants.POFS_INTERJECTION,\n          Constants.POFS_NOUN,\n          Constants.POFS_NUMERAL,\n          Constants.POFS_PARTICLE,\n          Constants.POFS_PREFIX,\n          Constants.POFS_PREPOSITION,\n          Constants.POFS_PRONOUN,\n          Constants.POFS_SUFFIX,\n          Constants.POFS_SUPINE,\n          Constants.POFS_VERB,\n          Constants.POFS_VERB_PARTICIPLE\n        ]\n      ],\n      [\n        Feature.types.gender,\n        [\n          Constants.GEND_MASCULINE,\n          Constants.GEND_FEMININE,\n          Constants.GEND_NEUTER\n        ]\n      ],\n      [\n        Feature.types.type,\n        [\n          Constants.TYPE_REGULAR,\n          Constants.TYPE_IRREGULAR\n        ]\n      ],\n      [\n        Feature.types.person,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD\n        ]\n      ],\n      [\n        Feature.types.number,\n        [\n          Constants.NUM_SINGULAR,\n          Constants.NUM_PLURAL\n        ]\n      ],\n      [\n        Feature.types.age,\n        []\n      ],\n      [\n        Feature.types.area,\n        []\n      ],\n      [\n        Feature.types.source,\n        []\n      ],\n      [\n        Feature.types.frequency,\n        []\n      ],\n      [\n        Feature.types.geo,\n        []\n      ],\n      [\n        Feature.types.pronunciation,\n        []\n      ],\n      [\n        Feature.types.kind,\n        []\n      ],\n      [\n        Feature.types.comparison,\n        []\n      ],\n      [\n        Feature.types.morph,\n        []\n      ],\n      [\n        Feature.types.stemtype,\n        []\n      ],\n      [\n        Feature.types.derivtype,\n        []\n      ]\n    ])\n  }\n\n  /**\n   * @deprecated\n   * @returns {symbol} Returns a language ID\n   */\n  static get sourceLanguage () {\n    Logger.getInstance().warn('Please use languageID directly')\n    return this.languageID\n  }\n\n  /**\n   * @deprecated\n   * @returns {symbol} Returns a language ID\n   */\n  get sourceLanguage () {\n    Logger.getInstance().warn('Please use languageID directly')\n    return this.constructor.languageID\n  }\n\n  /**\n   * @deprecated\n   * @param name\n   * @returns {FeatureType}\n   */\n  static getFeatureType (name) {\n    Logger.getInstance().warn('Please use getFeature instead')\n    const featureValues = this.featureValues\n    if (featureValues.has(name)) {\n      return new FeatureType(name, featureValues.get(name), this.languageID)\n    } else {\n      throw new Error(`Feature \"${name}\" is not defined`)\n    }\n  }\n\n  /**\n   * Returns a new instance of a feature with `featureType`. It uses a feature defined in a language model\n   * as a master.\n   *\n   * @param {string} featureType - A name of a feature type.\n   * @returns {Feature} - A newly created Feature object.\n   */\n  static getFeature (featureType) {\n    const featureValues = this.featureValues // To cache the values\n    if (featureValues.has(featureType)) {\n      const allowedValues = featureValues.get(featureType)\n      return new Feature(featureType, allowedValues, this.languageID, 1, allowedValues)\n    } else {\n      throw new Error(`Feature \"${featureType}\" is not defined`)\n    }\n  }\n\n  _initializeFeatures () {\n    const features = {}\n    for (const featureName of this.constructor.featureValues.keys()) {\n      features[featureName] = this.constructor.getFeature(featureName)\n    }\n    return features\n  }\n\n  /**\n   * @deprecated\n   */\n  grammarFeatures () {\n    Logger.getInstance().warn('Please use a static version of \"grammarFeatures\" instead')\n    return this.constructor.grammarFeatures()\n  }\n\n  /**\n   * Identify the morphological features which should be linked to a grammar.\n   *\n   * @returns {string[]} Array of Feature types\n   */\n  static grammarFeatures () {\n    return []\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display for the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * Check to see if the supplied language code is supported by this tool\n   *\n   * @param {string} code the language code\n   * @returns true if supported false if not\n   * @type Boolean\n   */\n  static supportsLanguage (code) {\n    return this.languageCodes.includes[code]\n  }\n\n  /**\n   * Checks if the word provided has a trailing digit (e.g. αἴγυπτος1 in Greek).\n   *\n   * @param {string} word - A word to be checked.\n   * @returns {boolean} - True if the word has a trailing digit, false otherwise.\n   */\n  static hasTrailingDigit (word) {\n    return /^.+\\d$/.test(word)\n  }\n\n  /**\n   * Morphological parsers and dictionary indexes may add a trailing digit to disambiguate homonyms.\n   * These can be ignored for purposes of string comparison.\n   *\n   * @param {string} word - A word to normalize.\n   * @returns {string} A normalized word.\n   */\n  static normalizeTrailingDigit (word) {\n    return /^.+1$/.test(word) ? word.substring(0, word.length - 1) : word\n  }\n\n  /**\n   * Checks if the word provided is in a normalized form.\n   * It also checks if the word has the right single quotation (elision).\n   *\n   * @see {@link GreekLanguageModel#normalizeText}\n   * @param {string} text - A word or a text string to be checked.\n   * @returns {boolean} - True if at least one character of the word\n   * is NOT in an Unicode Normalization Form, false otherwise.\n   */\n  static needsNormalization (text) {\n    return Boolean(text.localeCompare(this.normalizeText(text)))\n  }\n\n  /**\n   * Checks if the word provided has any letters in an upper case.\n   *\n   * @param {string} word - A word to be checked.\n   * @returns {boolean} - True if the word at least one letter in upper case, false if all letters are lower case.\n   */\n  static hasUpperCase (word) {\n    return Boolean(word.localeCompare(word.toLocaleLowerCase()))\n  }\n\n  /**\n   * Return a normalized version of a text string which can be used to compare the word for equality\n   *\n   * @param {string} word the source word\n   * @returns string normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type string\n   */\n  static normalizeText (word) {\n    return word\n  }\n\n  /**\n   * Returns alternate encodings for a word\n   *\n   * @param {object} params paramaters {}\n   *   @param {string} word the word\n   *   @param {string} preceding preceding word (optional)\n   *   @param {string} following following word (optional)\n   *   @param {string} encoding encoding name to filter the response to (optional)\n   *   @param {boolean} preserveCase if true will preserve the case (default is false)\n   *   @param {boolean} includeOriginal if true will include the original word even if it is unchanged (default is false)\n   * @returns {Array} an array of alternate encodings if they differ from the original\n   */\n  static alternateWordEncodings ({\n    word = null, preceding = null, following = null, encoding = null,\n    preserveCase = false, includeOriginal = false\n  } = {}) {\n    return includeOriginal ? [word] : []\n  }\n\n  /**\n   * Compare two words with language specific logic\n   *\n   * @param {string} wordA - a first word for comparison.\n   * @param {string} wordB - a second word for comparison.\n   * @param {boolean} normalize - whether or not to apply normalization algorithms\n   * @param {object} options - Additional comparison criteria.\n   */\n  static compareWords (wordA, wordB, normalize = true, options = {}) {\n    if (normalize) {\n      wordA = this.normalizeTrailingDigit(wordA)\n      wordB = this.normalizeTrailingDigit(wordB)\n      return this.normalizeText(wordA) === this.normalizeText(wordB)\n    } else {\n      return wordA === wordB\n    }\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   *\n   * @returns {string} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return '\\\\-\\\\.,;:!?\\'\"(){}\\\\[\\\\]<>\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r'\n  }\n\n  /**\n   * @deprecated\n   * @returns {string}\n   */\n  getPunctuation () {\n    Logger.getInstance().warn('Please use a static version of \"getPunctuation\"')\n    return this.constructor.getPunctuation()\n  }\n\n  toString () {\n    return String(this.constructor.languageCode)\n  }\n\n  isEqual (model) {\n    return LanguageModelFactory.compareLanguages(this.languageID, model.languageID)\n  }\n\n  /*\n  There are two types of language identificators: language IDs and language code. Language ID is a symbol constant\n  defined in constants.js, such as LANG_LATIN or LANG_GREEK. Language code is a string containing (usually)\n  a three-letter language codes such as 'lat' or 'la' for latin. There can be multiple language codes that identify\n  the same language, but there is only one unique language ID for each language.\n   */\n\n  /**\n   * Checks whether a language has a particular language code in its list of codes\n   *\n   * @param {string} languageCode - A language code to check\n   * @returns {boolean} Whether this language code exists in a language code list\n   */\n  static hasCode (languageCode) {\n    if (this.isLanguageCode(languageCode)) {\n      return this.languageCodes.includes(languageCode)\n    } else {\n      throw new Error(`Format of a \"${languageCode}\" is incorrect`)\n    }\n  }\n\n  /**\n   * Tests wither a provided language identificator is a language ID.\n   *\n   * @param {symbol|string} language - A language identificator, either a Symbol or a string language code.\n   * @returns {boolean} True if language identificator provided is a language ID.\n   */\n  static isLanguageID (language) {\n    return (typeof language === 'symbol')\n  }\n\n  /**\n   * Tests wither a provided language identificator is a language code.\n   *\n   * @param {symbol|string} language - A language identificator, either a Symbol or a string language code.\n   * @returns {boolean} - True if language identificator provided is a language code.\n   */\n  static isLanguageCode (language) {\n    return !LanguageModel.isLanguageID(language)\n  }\n\n  /**\n   * @deprecated\n   * @param node\n   */\n  canInflect (node) {\n    Logger.getInstance().warn('Please use a static version of \"canInflect\" instead')\n    return this.constructor.canInflect(node)\n  }\n\n  /**\n   * Groups a set of inflections according to a language-specific display paradigm\n     The default groups according to the following logic:\n     1. groups of groups with unique stem, prefix, suffix, part of speech, declension, dialect and comparison\n     2. groups of those groups with unique\n     number, if it's an inflection with a grammatical case\n     tense, if it's an inflection with tense but no case (i.e. a verb)\n     verbs without tense or case\n     adverbs\n     everything else\n     3. groups of those groups with unique voice and tense\n     4. groups of inflections with unique gender, person, mood, and sort\n   *\n   * @param inflections\n   */\n  static groupInflectionsForDisplay (inflections) {\n    let grouped = new Map() // eslint-disable-line prefer-const\n    const aggregated = this.aggregateInflectionsForDisplay(inflections)\n\n    // group inflections by part of speech\n    for (const infl of aggregated) {\n      const groupingKey = new InflectionGroupingKey(infl,\n        [Feature.types.part, Feature.types.declension, Feature.types.dialect, Feature.types.comparison],\n        {\n          prefix: infl.prefix,\n          suffix: infl.suffix,\n          stem: infl.stem\n        }\n      )\n      const groupingKeyStr = groupingKey.toString()\n      if (grouped.has(groupingKeyStr)) {\n        grouped.get(groupingKeyStr).append(infl)\n      } else {\n        grouped.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n      }\n    }\n\n    // iterate through each group key to group the inflections in that group\n    for (const kv of grouped) {\n      const inflgrp = new Map()\n      for (const infl of kv[1].inflections) {\n        let keyprop\n        let isCaseInflectionSet = false\n        if (infl[Feature.types.grmCase]) {\n          // grouping on number if case is defined\n          keyprop = Feature.types.number\n          isCaseInflectionSet = true\n        } else if (infl[Feature.types.tense]) {\n          // grouping on tense if tense is defined but not case\n          keyprop = Feature.types.tense\n        } else if (infl[Feature.types.part] === Constants.POFS_VERB) {\n          // grouping on no case or tense but a verb\n          keyprop = Feature.types.part\n        } else if (infl[Feature.types.part] === Constants.POFS_ADVERB) {\n          keyprop = Feature.types.part\n          // grouping on adverbs without case or tense\n        } else {\n          keyprop = 'misc'\n          // grouping on adverbs without case or tense\n          // everything else\n        }\n        const groupingKey = new InflectionGroupingKey(infl, [keyprop], { isCaseInflectionSet: isCaseInflectionSet })\n        const groupingKeyStr = groupingKey.toString()\n        if (inflgrp.has(groupingKeyStr)) {\n          inflgrp.get(groupingKeyStr).append(infl)\n        } else {\n          inflgrp.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n        }\n      }\n      // inflgrp is now a map of groups of inflections grouped by\n      //  inflections with number\n      //  inflections without number but with tense\n      //  inflections of verbs without tense\n      //  inflections of adverbs\n      //  everything else\n      // iterate through each inflection group key to group the inflections in that group by tense and voice\n      for (const kv of inflgrp) {\n        const nextGroup = new Map()\n        const sortOrder = new Map()\n        for (const infl of kv[1].inflections) {\n          const sortkey = infl[Feature.types.grmCase] ? Math.max(infl[Feature.types.grmCase].items.map(f => f.sortOrder)) : 1\n          const groupingKey = new InflectionGroupingKey(infl, [Feature.types.tense, Feature.types.voice])\n          const groupingKeyStr = groupingKey.toString()\n          if (nextGroup.has(groupingKeyStr)) {\n            nextGroup.get(groupingKeyStr).append(infl)\n          } else {\n            nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl], sortkey))\n            sortOrder.set(groupingKeyStr, sortkey)\n          }\n        }\n        kv[1].inflections = []\n        const sortedKeys = Array.from(nextGroup.keys()).sort(\n          (a, b) => {\n            const orderA = sortOrder.get(a)\n            const orderB = sortOrder.get(b)\n            return orderA > orderB ? -1 : orderB > orderA ? 1 : 0\n          }\n        )\n        for (const groupkey of sortedKeys) {\n          kv[1].inflections.push(nextGroup.get(groupkey))\n        }\n      }\n\n      // inflgrp is now a Map of groups of groups of inflections\n\n      for (const kv of inflgrp) {\n        const groups = kv[1]\n        for (const group of groups.inflections) {\n          let nextGroup = new Map() // eslint-disable-line prefer-const\n          for (const infl of group.inflections) {\n            // set key is case comp gend pers mood sort\n            const groupingKey = new InflectionGroupingKey(infl,\n              [Feature.types.grmCase, Feature.types.comparison, Feature.types.gender, Feature.types.number, Feature.types.person,\n                Feature.types.tense, Feature.types.mood, Feature.types.voice])\n            const groupingKeyStr = groupingKey.toString()\n            if (nextGroup.has(groupingKeyStr)) {\n              nextGroup.get(groupingKeyStr).append(infl)\n            } else {\n              nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n            }\n          }\n          group.inflections = Array.from(nextGroup.values()) // now a group of inflection groups\n        }\n      }\n      kv[1].inflections = Array.from(inflgrp.values())\n    }\n    return Array.from(grouped.values())\n  }\n\n  /**\n   * Aggregate inflections for display according to language model characteristics\n   *\n   * @param {Inflection[]} inflections an array of inflections\n   * @returns Inflection[] the aggregated inflections\n   */\n  static aggregateInflectionsForDisplay (inflections) {\n    // default is just to do nothing\n    return inflections\n  }\n\n  /**\n   * @deprecated\n   * @param inflections\n   * @returns {*}\n   */\n  groupInflectionsForDisplay (inflections) {\n    Logger.getInstance().warn('Please use a static version of \"groupInflectionsForDisplay\" instead')\n    return this.constructor.groupInflectionsForDisplay(inflections)\n  }\n}\n\nexport default LanguageModel\n","import LanguageModel from './language_model.js'\nimport LatinLanguageModel from './latin_language_model.js'\nimport GreekLanguageModel from './greek_language_model.js'\nimport ArabicLanguageModel from './arabic_language_model.js'\nimport PersianLanguageModel from './persian_language_model.js'\nimport GeezLanguageModel from './geez_language_model.js'\nimport ChineseLanguageModel from './chinese_language_model.js'\nimport SyriacLanguageModel from './syriac_language_model.js'\nimport * as Constants from './constants.js'\n\nconst MODELS = new Map([\n  [Constants.STR_LANG_CODE_LA, LatinLanguageModel],\n  [Constants.STR_LANG_CODE_LAT, LatinLanguageModel],\n  [Constants.STR_LANG_CODE_GRC, GreekLanguageModel],\n  [Constants.STR_LANG_CODE_ARA, ArabicLanguageModel],\n  [Constants.STR_LANG_CODE_AR, ArabicLanguageModel],\n  [Constants.STR_LANG_CODE_PER, PersianLanguageModel],\n  [Constants.STR_LANG_CODE_GEZ, GeezLanguageModel],\n  [Constants.STR_LANG_CODE_ZHO, ChineseLanguageModel],\n  [Constants.STR_LANG_CODE_SYR, SyriacLanguageModel],\n  [Constants.STR_LANG_CODE_SYC, SyriacLanguageModel],\n  [Constants.STR_LANG_CODE_SYR_SYRJ, SyriacLanguageModel]\n])\n\nclass LanguageModelFactory {\n  /**\n   * Checks whether a language is supported\n   *\n   * @param {string | symbol} language - Language as a language ID (symbol) or a language code (string)\n   * @returns {boolean} True if language is supported, false otherwise\n   */\n  static supportsLanguage (language) {\n    language = (typeof language === 'symbol') ? LanguageModelFactory.getLanguageCodeFromId(language) : language\n    return MODELS.has(language)\n  }\n\n  static availableLanguages () {\n    let avail = new Set() // eslint-disable-line prefer-const\n    for (const model of MODELS.values()) {\n      avail.add(model.languageCode)\n    }\n    return Array.from(avail)\n  }\n\n  /**\n   * Returns a constructor of language model for a specific language ID.\n   *\n   * @param {symbol} languageID - A language ID of a desired language model.\n   * @returns {LanguageModel} A language model for a given language ID.\n   */\n  static getLanguageModel (languageID) {\n    const languageCode = LanguageModelFactory.getLanguageCodeFromId(languageID)\n    return LanguageModelFactory.getLanguageModelFromCode(languageCode)\n  }\n\n  static getLanguageModelFromCode (languageCode) {\n    if (MODELS.has(languageCode)) {\n      return MODELS.get(languageCode)\n    } else {\n      // A default value\n      return LanguageModel\n    }\n  }\n\n  static getLanguageForCode (code = null) {\n    const Model = MODELS.get(code)\n    if (Model) {\n      return new Model()\n    }\n    // for now return a default Model\n    // TODO may want to throw an error\n    return new LanguageModel()\n  }\n\n  /**\n   * Converts an ISO 639-3 language code to a language ID\n   *\n   * @param {string} languageCode - An ISO 639-3 language code\n   * @returns {symbol | undefined} A language ID or undefined if language ID is not found\n   */\n  static getLanguageIdFromCode (languageCode) {\n    for (const languageModel of MODELS.values()) {\n      if (languageModel.hasCode(languageCode)) {\n        return languageModel.languageID\n      }\n    }\n    // Noting found, return a Symbol with an undefined value (to keep return value type the same)\n    return Constants.LANG_UNDEFINED\n  }\n\n  /**\n   * Converts a language ID to an default ISO 639-3 language code for that language\n   *\n   * @param {symbol} languageID - A language ID\n   * @returns {string | undefined} An ISO 639-3 language code or undefined if language code is not found\n   */\n  static getLanguageCodeFromId (languageID) {\n    for (const languageModel of MODELS.values()) {\n      if (languageModel.languageID.toString() === languageID.toString()) {\n        return languageModel.languageCode\n      }\n    }\n    // Noting found, return a string with an undefined value (to keep return value type the same)\n    return Constants.STR_LANG_CODE_UNDEFINED\n  }\n\n  /**\n   * Takes either a language ID or a language code and returns an object with both an ID and a code.\n   *\n   * @param {string | symbol} language - Either a language ID (a Symbol) or a language code (a String).\n   * @returns {object} An object with the following properties:\n   *    {symbol} languageID\n   *    {string} languageCode\n   */\n  static getLanguageAttrs (language) {\n    if (typeof language === 'symbol') {\n      // `language` is a language ID\n      return {\n        languageID: language,\n        languageCode: LanguageModelFactory.getLanguageCodeFromId(language)\n      }\n    } else {\n      // `language` is a language code\n      return {\n        languageID: LanguageModelFactory.getLanguageIdFromCode(language),\n        languageCode: language\n      }\n    }\n  }\n\n  /**\n   * Compares two languages in either a language ID or a language code format. For this, does conversion of\n   * language IDs to language code. Because fo this, it will work even for language IDs defined in\n   * different modules\n   *\n   * @param {string | symbol} languageA - Either a language ID (a symbol) or a language code (a string).\n   * @param {string | symbol} languageB - Either a language ID (a symbol) or a language code (a string).\n   * @returns {boolean} True if languages are the same, false otherwise.\n   */\n  static compareLanguages (languageA, languageB) {\n    languageA = (typeof languageA === 'symbol') ? LanguageModelFactory.getLanguageCodeFromId(languageA) : languageA\n    languageB = (typeof languageB === 'symbol') ? LanguageModelFactory.getLanguageCodeFromId(languageB) : languageB\n    return languageA === languageB\n  }\n\n  /**\n   * returns true if support for the requested language id is in an experimental state\n   *\n   * @param {symbol} languageID - Language as a language ID (symbol)\n   * @returns {boolean}\n   */\n  static isExperimentalLanguage (languageID) {\n    return [Constants.LANG_GEEZ, Constants.LANG_SYRIAC, Constants.LANG_CHINESE].includes(languageID)\n  }\n}\nexport default LanguageModelFactory\n","export default class GreekChars {\r\n  static get chars () {\r\n    return [\r\n      '\\u0060',\r\n      '\\u00A8',\r\n      '\\u00AF',\r\n      '\\u00B4',\r\n      '\\u02BC',\r\n      '\\u02BD',\r\n      '\\u02D8',\r\n      '\\u0345',\r\n      '\\u0386',\r\n      '\\u0388',\r\n      '\\u0389',\r\n      '\\u038A',\r\n      '\\u038C',\r\n      '\\u038E',\r\n      '\\u038F',\r\n      '\\u0390',\r\n      '\\u0391',\r\n      '\\u0392',\r\n      '\\u0393',\r\n      '\\u0394',\r\n      '\\u0395',\r\n      '\\u0396',\r\n      '\\u0397',\r\n      '\\u0398',\r\n      '\\u0399',\r\n      '\\u039A',\r\n      '\\u039B',\r\n      '\\u039C',\r\n      '\\u039D',\r\n      '\\u039E',\r\n      '\\u039F',\r\n      '\\u03A0',\r\n      '\\u03A1',\r\n      '\\u03A3',\r\n      '\\u03A4',\r\n      '\\u03A5',\r\n      '\\u03A6',\r\n      '\\u03A7',\r\n      '\\u03A8',\r\n      '\\u03A9',\r\n      '\\u03AA',\r\n      '\\u03AB',\r\n      '\\u03AC',\r\n      '\\u03AD',\r\n      '\\u03AE',\r\n      '\\u03AF',\r\n      '\\u03B0',\r\n      '\\u03B1',\r\n      '\\u03B2',\r\n      '\\u03B3',\r\n      '\\u03B4',\r\n      '\\u03B5',\r\n      '\\u03B6',\r\n      '\\u03B7',\r\n      '\\u03B8',\r\n      '\\u03B9',\r\n      '\\u03BA',\r\n      '\\u03BB',\r\n      '\\u03BC',\r\n      '\\u03BD',\r\n      '\\u03BE',\r\n      '\\u03BF',\r\n      '\\u03C0',\r\n      '\\u03C1',\r\n      '\\u03C2',\r\n      '\\u03C3',\r\n      '\\u03C4',\r\n      '\\u03C5',\r\n      '\\u03C6',\r\n      '\\u03C7',\r\n      '\\u03C8',\r\n      '\\u03C9',\r\n      '\\u03CA',\r\n      '\\u03CB',\r\n      '\\u03CC',\r\n      '\\u03CD',\r\n      '\\u03CE',\r\n      '\\u03DC',\r\n      '\\u03DD',\r\n      '\\u1F00',\r\n      '\\u1F01',\r\n      '\\u1F02',\r\n      '\\u1F03',\r\n      '\\u1F04',\r\n      '\\u1F05',\r\n      '\\u1F06',\r\n      '\\u1F07',\r\n      '\\u1F08',\r\n      '\\u1F09',\r\n      '\\u1F0A',\r\n      '\\u1F0B',\r\n      '\\u1F0C',\r\n      '\\u1F0D',\r\n      '\\u1F0E',\r\n      '\\u1F0F',\r\n      '\\u1F10',\r\n      '\\u1F11',\r\n      '\\u1F12',\r\n      '\\u1F13',\r\n      '\\u1F14',\r\n      '\\u1F15',\r\n      '\\u1F18',\r\n      '\\u1F19',\r\n      '\\u1F1A',\r\n      '\\u1F1B',\r\n      '\\u1F1C',\r\n      '\\u1F1D',\r\n      '\\u1F20',\r\n      '\\u1F21',\r\n      '\\u1F22',\r\n      '\\u1F23',\r\n      '\\u1F24',\r\n      '\\u1F25',\r\n      '\\u1F26',\r\n      '\\u1F27',\r\n      '\\u1F28',\r\n      '\\u1F29',\r\n      '\\u1F2A',\r\n      '\\u1F2B',\r\n      '\\u1F2C',\r\n      '\\u1F2D',\r\n      '\\u1F2E',\r\n      '\\u1F2F',\r\n      '\\u1F30',\r\n      '\\u1F31',\r\n      '\\u1F32',\r\n      '\\u1F33',\r\n      '\\u1F34',\r\n      '\\u1F35',\r\n      '\\u1F36',\r\n      '\\u1F37',\r\n      '\\u1F38',\r\n      '\\u1F39',\r\n      '\\u1F3A',\r\n      '\\u1F3B',\r\n      '\\u1F3C',\r\n      '\\u1F3D',\r\n      '\\u1F3E',\r\n      '\\u1F3F',\r\n      '\\u1F40',\r\n      '\\u1F41',\r\n      '\\u1F42',\r\n      '\\u1F43',\r\n      '\\u1F44',\r\n      '\\u1F45',\r\n      '\\u1F48',\r\n      '\\u1F49',\r\n      '\\u1F4A',\r\n      '\\u1F4B',\r\n      '\\u1F4C',\r\n      '\\u1F4D',\r\n      '\\u1F50',\r\n      '\\u1F51',\r\n      '\\u1F52',\r\n      '\\u1F53',\r\n      '\\u1F54',\r\n      '\\u1F55',\r\n      '\\u1F56',\r\n      '\\u1F57',\r\n      '\\u1F59',\r\n      '\\u1F5B',\r\n      '\\u1F5D',\r\n      '\\u1F5F',\r\n      '\\u1F60',\r\n      '\\u1F61',\r\n      '\\u1F62',\r\n      '\\u1F63',\r\n      '\\u1F64',\r\n      '\\u1F65',\r\n      '\\u1F66',\r\n      '\\u1F67',\r\n      '\\u1F68',\r\n      '\\u1F69',\r\n      '\\u1F6A',\r\n      '\\u1F6B',\r\n      '\\u1F6C',\r\n      '\\u1F6D',\r\n      '\\u1F6E',\r\n      '\\u1F6F',\r\n      '\\u1F70',\r\n      '\\u1F71',\r\n      '\\u1F72',\r\n      '\\u1F73',\r\n      '\\u1F74',\r\n      '\\u1F75',\r\n      '\\u1F76',\r\n      '\\u1F77',\r\n      '\\u1F78',\r\n      '\\u1F79',\r\n      '\\u1F7A',\r\n      '\\u1F7B',\r\n      '\\u1F7C',\r\n      '\\u1F7D',\r\n      '\\u1F80',\r\n      '\\u1F81',\r\n      '\\u1F82',\r\n      '\\u1F83',\r\n      '\\u1F84',\r\n      '\\u1F85',\r\n      '\\u1F86',\r\n      '\\u1F87',\r\n      '\\u1F88',\r\n      '\\u1F89',\r\n      '\\u1F8A',\r\n      '\\u1F8B',\r\n      '\\u1F8C',\r\n      '\\u1F8D',\r\n      '\\u1F8E',\r\n      '\\u1F8F',\r\n      '\\u1F90',\r\n      '\\u1F91',\r\n      '\\u1F92',\r\n      '\\u1F93',\r\n      '\\u1F94',\r\n      '\\u1F95',\r\n      '\\u1F96',\r\n      '\\u1F97',\r\n      '\\u1F98',\r\n      '\\u1F99',\r\n      '\\u1F9A',\r\n      '\\u1F9B',\r\n      '\\u1F9C',\r\n      '\\u1F9D',\r\n      '\\u1F9E',\r\n      '\\u1F9F',\r\n      '\\u1FA0',\r\n      '\\u1FA1',\r\n      '\\u1FA2',\r\n      '\\u1FA3',\r\n      '\\u1FA4',\r\n      '\\u1FA5',\r\n      '\\u1FA6',\r\n      '\\u1FA7',\r\n      '\\u1FA8',\r\n      '\\u1FA9',\r\n      '\\u1FAA',\r\n      '\\u1FAB',\r\n      '\\u1FAC',\r\n      '\\u1FAD',\r\n      '\\u1FAE',\r\n      '\\u1FAF',\r\n      '\\u1FB0',\r\n      '\\u1FB1',\r\n      '\\u1FB2',\r\n      '\\u1FB3',\r\n      '\\u1FB4',\r\n      '\\u1FB6',\r\n      '\\u1FB7',\r\n      '\\u1FB8',\r\n      '\\u1FB9',\r\n      '\\u1FBA',\r\n      '\\u1FBB',\r\n      '\\u1FBC',\r\n      '\\u1FBD',\r\n      '\\u1FBE',\r\n      '\\u1FC0',\r\n      '\\u1FC1',\r\n      '\\u1FC2',\r\n      '\\u1FC3',\r\n      '\\u1FC4',\r\n      '\\u1FC6',\r\n      '\\u1FC7',\r\n      '\\u1FC8',\r\n      '\\u1FC9',\r\n      '\\u1FCA',\r\n      '\\u1FCB',\r\n      '\\u1FCC',\r\n      '\\u1FCD',\r\n      '\\u1FCE',\r\n      '\\u1FCF',\r\n      '\\u1FD0',\r\n      '\\u1FD1',\r\n      '\\u1FD2',\r\n      '\\u1FD3',\r\n      '\\u1FD6',\r\n      '\\u1FD7',\r\n      '\\u1FD8',\r\n      '\\u1FD9',\r\n      '\\u1FDA',\r\n      '\\u1FDB',\r\n      '\\u1FDD',\r\n      '\\u1FDE',\r\n      '\\u1FDF',\r\n      '\\u1FE0',\r\n      '\\u1FE1',\r\n      '\\u1FE2',\r\n      '\\u1FE3',\r\n      '\\u1FE4',\r\n      '\\u1FE5',\r\n      '\\u1FE6',\r\n      '\\u1FE7',\r\n      '\\u1FE8',\r\n      '\\u1FE9',\r\n      '\\u1FEA',\r\n      '\\u1FEB',\r\n      '\\u1FEC',\r\n      '\\u1FED',\r\n      '\\u1FEE',\r\n      '\\u1FF2',\r\n      '\\u1FF3',\r\n      '\\u1FF4',\r\n      '\\u1FF6',\r\n      '\\u1FF7',\r\n      '\\u1FF8',\r\n      '\\u1FF9',\r\n      '\\u1FFA',\r\n      '\\u1FFB',\r\n      '\\u1FFC'\r\n    ]\r\n  }\r\n}\n","import LanguageModel from './language_model.js'\nimport Feature from './feature.js'\nimport * as Constants from './constants.js'\nimport Logger from './logging/logger.js'\n\nlet typeFeatures = new Map() // eslint-disable-line prefer-const\nlet typeFeaturesInitialized = false\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nexport default class LatinLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_LATIN }\n  static get languageCode () { return Constants.STR_LANG_CODE_LAT }\n  static get languageCodes () { return [Constants.STR_LANG_CODE_LA, Constants.STR_LANG_CODE_LAT] }\n  static get contextForward () { return 0 }\n  static get contextBackward () { return 0 }\n  static get direction () { return Constants.LANG_DIR_LTR }\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get featureValues () {\n    /*\n    This could be a static variable, but then it will create a circular reference:\n    Feature -> LanguageModelFactory -> LanguageModel -> Feature\n     */\n    return new Map([\n      ...LanguageModel.featureValues,\n      [\n        Feature.types.grmClass,\n        [\n          Constants.CLASS_PERSONAL,\n          Constants.CLASS_REFLEXIVE,\n          Constants.CLASS_POSSESSIVE,\n          Constants.CLASS_DEMONSTRATIVE,\n          Constants.CLASS_RELATIVE,\n          Constants.CLASS_INTERROGATIVE\n        ]\n      ],\n      [\n        Feature.types.number,\n        [\n          Constants.NUM_SINGULAR,\n          Constants.NUM_PLURAL\n        ]\n      ],\n      [\n        Feature.types.grmCase,\n        [\n          Constants.CASE_NOMINATIVE,\n          Constants.CASE_GENITIVE,\n          Constants.CASE_DATIVE,\n          Constants.CASE_ACCUSATIVE,\n          Constants.CASE_ABLATIVE,\n          Constants.CASE_LOCATIVE,\n          Constants.CASE_VOCATIVE\n        ]\n      ],\n      [\n        Feature.types.declension,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD,\n          Constants.ORD_4TH,\n          Constants.ORD_5TH\n        ]\n      ],\n      [\n        Feature.types.tense,\n        [\n          Constants.TENSE_PRESENT,\n          Constants.TENSE_IMPERFECT,\n          Constants.TENSE_FUTURE,\n          Constants.TENSE_PERFECT,\n          Constants.TENSE_PLUPERFECT,\n          Constants.TENSE_FUTURE_PERFECT\n        ]\n      ],\n      [\n        Feature.types.voice,\n        [\n          Constants.VOICE_ACTIVE,\n          Constants.VOICE_PASSIVE\n        ]\n      ],\n      [\n        Feature.types.mood,\n        [\n          Constants.MOOD_INDICATIVE,\n          Constants.MOOD_SUBJUNCTIVE,\n          Constants.MOOD_IMPERATIVE,\n          Constants.MOOD_PARTICIPLE,\n          Constants.MOOD_SUPINE,\n          Constants.MOOD_GERUNDIVE,\n          Constants.MOOD_PARTICIPLE,\n          Constants.MOOD_INFINITIVE\n        ]\n      ],\n      [\n        Feature.types.conjugation,\n        [\n          Constants.ORD_1ST,\n          Constants.ORD_2ND,\n          Constants.ORD_3RD,\n          Constants.ORD_4TH\n        ]\n      ]\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) {\n      this.initTypeFeatures()\n    }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * @override\n   */\n  static grammarFeatures () {\n    // TODO this ideally might be grammar specific\n    return [Feature.types.part, Feature.types.grmCase, Feature.types.mood, Feature.types.declension, Feature.types.tense, Feature.types.conjugation]\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display for the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return true\n  }\n\n  /**\n   * Return a normalized version of a text string which can be used to compare the word for equality\n   *\n   * @param {string} text the source word or a text string\n   * @returns the normalized form of the word (Latin replaces accents and special chars)\n   * @type String\n   */\n  static normalizeText (text) {\n    if (text) {\n      text = text.replace(/[\\u00c0\\u00c1\\u00c2\\u00c3\\u00c4\\u0100\\u0102]/g, 'A')\n      text = text.replace(/[\\u00c8\\u00c9\\u00ca\\u00cb\\u0112\\u0114]/g, 'E')\n      text = text.replace(/[\\u00cc\\u00cd\\u00ce\\u00cf\\u012a\\u012c]/g, 'I')\n      text = text.replace(/[\\u00d2\\u00d3\\u00d4\\u00df\\u00d6\\u014c\\u014e]/g, 'O')\n      text = text.replace(/[\\u00d9\\u00da\\u00db\\u00dc\\u016a\\u016c]/g, 'U')\n      text = text.replace(/[\\u00c6\\u01e2]/g, 'AE')\n      text = text.replace(/[\\u0152]/g, 'OE')\n      text = text.replace(/[\\u00e0\\u00e1\\u00e2\\u00e3\\u00e4\\u0101\\u0103]/g, 'a')\n      text = text.replace(/[\\u00e8\\u00e9\\u00ea\\u00eb\\u0113\\u0115]/g, 'e')\n      text = text.replace(/[\\u00ec\\u00ed\\u00ee\\u00ef\\u012b\\u012d\\u0129]/g, 'i')\n      text = text.replace(/[\\u00f2\\u00f3\\u00f4\\u00f5\\u00f6\\u014d\\u014f]/g, 'o')\n      text = text.replace(/[\\u00f9\\u00fa\\u00fb\\u00fc\\u016b\\u016d]/g, 'u')\n      text = text.replace(/[\\u00e6\\u01e3]/g, 'ae')\n      text = text.replace(/[\\u0153]/g, 'oe')\n    }\n    return text\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   *\n   * @returns {string} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\\u200C\\u200D\"\n  }\n\n  /**\n   * Sets inflection grammar properties based on its characteristics\n   *\n   * @param {Inflection} inflection - An inflection object\n   * @returns {object} Inflection properties\n   */\n  static getInflectionConstraints (inflection) {\n    // eslint-disable-next-line prefer-const\n    let grammar = {\n      fullFormBased: false,\n      suffixBased: false,\n      pronounClassRequired: false\n    }\n    if (inflection.hasOwnProperty(Feature.types.part)) {\n      if ([Constants.POFS_VERB, Constants.POFS_VERB_PARTICIPLE, Constants.POFS_SUPINE, Constants.POFS_GERUNDIVE].includes(inflection[Feature.types.part].value)) {\n        grammar.fullFormBased = true\n        grammar.suffixBased = true\n      } else if (inflection[Feature.types.part].value === Constants.POFS_PRONOUN) {\n        grammar.fullFormBased = true\n      } else {\n        grammar.suffixBased = true\n      }\n    } else {\n      Logger.getInstance().warn('Unable to set grammar: part of speech data is missing or is incorrect', inflection[Feature.types.part])\n    }\n\n    return grammar\n  }\n}\n","import LMF from './language_model_factory.js'\nimport Feature from './feature.js'\nimport Translation from './translation.js'\nimport uuidv4 from 'uuid/v4'\nimport Logger from './logging/logger.js'\n\n/**\n * Lemma, a canonical form of a word.\n */\nclass Lemma {\n  /**\n   * Initializes a Lemma object.\n   *\n   * @param {string} word - A word.\n   * @param {symbol | string} languageID - A language ID (symbol, please use this) or a language code of a word.\n   * @param {string[]} principalParts - the principalParts of a lemma.\n   * @param {object} features - the grammatical features of a lemma.\n\n   * @param {Translation} transaltions - translations from python service\n   */\n  constructor (word, languageID, principalParts = [], features = {}) {\n    if (!word) {\n      throw new Error('Word should not be empty.')\n    }\n\n    if (!languageID) {\n      throw new Error('Language should not be empty.')\n    }\n\n    // Compatibility code for something providing languageCode instead of languageID\n    this.languageID = undefined\n    this.languageCode = undefined\n    ;({ languageID: this.languageID, languageCode: this.languageCode } = LMF.getLanguageAttrs(languageID))\n\n    this.word = word\n    this.principalParts = principalParts\n    this.features = {}\n\n    this.ID = uuidv4()\n  }\n\n  get language () {\n    Logger.getInstance().warn('Please use \"languageID\" instead of \"language\"')\n    return this.languageCode\n  }\n\n  static readObject (jsonObject) {\n    const language = jsonObject.language ? jsonObject.language : jsonObject.languageCode\n    // eslint-disable-next-line prefer-const\n    let resLemma = new Lemma(jsonObject.word, language, jsonObject.principalParts, jsonObject.pronunciation)\n\n    if (jsonObject.features && jsonObject.features.length > 0) {\n      jsonObject.features.forEach(featureSource => {\n        resLemma.addFeature(Feature.readObject(featureSource))\n      })\n    }\n\n    if (jsonObject.translation) {\n      resLemma.translation = Translation.readObject(jsonObject.translation, resLemma)\n    }\n    return resLemma\n  }\n\n  convertToJSONObject () {\n    let resultFeatures = [] // eslint-disable-line prefer-const\n    for (const feature of Object.values(this.features)) {\n      resultFeatures.push(feature.convertToJSONObject())\n    }\n    // eslint-disable-next-line prefer-const\n    let resultLemma = {\n      word: this.word,\n      language: this.languageCode,\n      principalParts: this.principalParts,\n      features: resultFeatures\n    }\n\n    if (this.translation) {\n      resultLemma.translation = this.translation.convertToJSONObject()\n    }\n    return resultLemma\n  }\n\n  /**\n   * @deprecated Please use `addFeature` instead.\n   * Sets a grammatical feature for a lemma. Some features can have multiple values, In this case\n   * an array of Feature objects will be provided.\n   * Values are taken from features and stored in a 'feature.type' property as an array of values.\n   * @param {Feature | Feature[]} data\n   */\n  set feature (data) {\n    Logger.getInstance().warn('Please use \"addFeature\" instead')\n    if (!data) {\n      throw new Error('feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data]\n    }\n\n    const type = data[0].type\n    this.features[type] = []\n    for (const element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('feature data must be a Feature object.')\n      }\n\n      if (!LMF.compareLanguages(element.languageID, this.languageID)) {\n        throw new Error('Language \"' + element.languageID.toString() + '\" of a feature does not match a language \"' +\n                this.languageID.toString() + '\" of a Lemma object.')\n      }\n\n      this.features[type].push(element)\n    }\n  }\n\n  /**\n   * Sets a grammatical feature of a lemma. Feature is stored in a `feature.type` property.\n   *\n   * @param {Feature} feature - A feature object with one or multiple values.\n   */\n  addFeature (feature) {\n    if (!feature) {\n      throw new Error('feature data cannot be empty.')\n    }\n\n    if (!(feature instanceof Feature)) {\n      throw new Error('feature data must be a Feature object.')\n    }\n\n    if (!LMF.compareLanguages(feature.languageID, this.languageID)) {\n      throw new Error('Language \"' + feature.languageID.toString() + '\" of a feature does not match a language \"' +\n        this.languageID.toString() + '\" of a Lemma object.')\n    }\n\n    this.features[feature.type] = feature\n  }\n\n  /**\n   * Sets multiple grammatical features of a lemma.\n   *\n   * @param {Feature[]} features - Features to be added.\n   */\n  addFeatures (features) {\n    if (!Array.isArray(features)) {\n      throw new Error('Features must be in an array')\n    }\n\n    for (const feature of features) {\n      this.addFeature(feature)\n    }\n  }\n\n  /**\n   * Sets a translation from python service.\n   *\n   * @param {Translation} translation - A translation object\n   */\n  addTranslation (translation) {\n    if (!translation) {\n      throw new Error('translation data cannot be empty.')\n    }\n\n    if (translation.constructor.name.indexOf('Translation') === -1) {\n      throw new Error('translation data must be a Translation object.')\n    }\n\n    this.translation = translation\n  }\n\n  /**\n   * Test to see if two lemmas are full homonyms.\n   *\n   * @param {Lemma} lemma - the lemma to compare.\n   * @param {object} options - Additional comparison options.\n   * @param {boolean} options.normalize - Whether to normalize words before comparison.\n   * @returns {boolean} true or false.\n   */\n  isFullHomonym (lemma, { normalize = false } = {}) {\n    // If parts of speech do not match this is not a full homonym\n    if (!this.features[Feature.types.part] ||\n      !lemma.features[Feature.types.part] ||\n      !this.features[Feature.types.part].isEqual(lemma.features[Feature.types.part])) {\n      return false\n    }\n\n    // Check if words are the same\n    const areSameWords = normalize\n      ? LMF.getLanguageModel(this.languageID).compareWords(this.word, lemma.word, true,\n        { normalizeTrailingDigit: true })\n      : this.word === lemma.word\n\n    return areSameWords\n  }\n\n  /**\n   * Disambiguate between this and the other lemma.\n   *\n   * @param {string} otherLemma - The other lemma for disambiguation.\n   * @returns {string} - A disambiguated word.\n   */\n  disambiguate (otherLemma) {\n    const langModel = LMF.getLanguageModel(this.languageID)\n\n    // Check if words are the same\n    const areSameWords = langModel.compareWords(this.word, otherLemma.word, true, { normalizeTrailingDigit: true })\n    if (!areSameWords) {\n      throw new Error('Words that differ cannot be disambiguated')\n    }\n\n    const thisHasMixedCase = langModel.hasUpperCase(this.word)\n    const otherHasMixedCase = langModel.hasUpperCase(otherLemma.word)\n    /*\n    If one of the words has both upper and lower case letters, it will be returned right away, without\n    go through other normalizations.\n     */\n    if (otherHasMixedCase) {\n      return otherLemma.word\n    }\n    if (thisHasMixedCase) {\n      return this.word\n    }\n    /*\n    If one of the word has characters that are not in the NFC Unicode Normalization Form,\n    return that word, normalized.\n     */\n    const thisNeesNormalization = langModel.needsNormalization(this.word)\n    const otherNeesNormalization = langModel.needsNormalization(otherLemma.word)\n    if (otherNeesNormalization) {\n      return langModel.normalizeText(otherLemma.word)\n    }\n    if (thisNeesNormalization) {\n      return langModel.normalizeText(this.word)\n    }\n    /*\n    If one of the words has a trailing digit, return a word with a trailing digit.\n     */\n    const thisHasTrailingDigit = langModel.hasTrailingDigit(this.word)\n    const otherHasTrailingDigit = langModel.hasTrailingDigit(otherLemma.word)\n    if (otherHasTrailingDigit) {\n      return otherLemma.word\n    }\n    if (thisHasTrailingDigit) {\n      return this.word\n    }\n    return this.word\n  }\n\n  /**\n   * extracts lemma.word and all principal parts for flashcards export\n   *\n   */\n  get wordPrincipalParts () {\n    const allParts = [...this.principalParts]\n    if (!this.principalParts.includes(this.word)) {\n      allParts.push(this.word)\n    }\n    return allParts.join(', ')\n  }\n}\n\nexport default Lemma\n","import Lemma from './lemma.js'\nimport Inflection from './inflection.js'\nimport DefinitionSet from './definition-set.js'\nimport LMF from './language_model_factory.js'\nimport LM from './language_model.js'\nimport ResourceProvider from './resource_provider.js'\n\n/**\n * A basic unit of lexical meaning. Contains a primary Lemma object, one or more Inflection objects\n * and a DefinitionSet\n */\nclass Lexeme {\n  /**\n   * Initializes a Lexeme object.\n   *\n   * @param {Lemma} lemma - A lemma object.\n   * @param {Inflection[]} inflections - An array of inflections.\n   * @param {DefinitionSet} meaning - A set of definitions.\n   */\n  constructor (lemma, inflections, meaning = null) {\n    if (!lemma) {\n      throw new Error('Lemma should not be empty.')\n    }\n\n    if (!(lemma instanceof Lemma)) {\n      throw new Error('Lemma should be of Lemma object type.')\n    }\n\n    if (!inflections) {\n      throw new Error('Inflections data should not be empty.')\n    }\n\n    if (!Array.isArray(inflections)) {\n      throw new Error('Inflection data should be provided in an array.')\n    }\n\n    for (const inflection of inflections) {\n      if (!(inflection instanceof Inflection)) {\n        throw new Error('All inflection data should be of Inflection object type.')\n      }\n    }\n\n    if (meaning !== null && !(meaning instanceof DefinitionSet)) {\n      throw new Error('Meaning should be of DefinitionSet object type.')\n    }\n\n    this.lemma = lemma\n    this.altLemmas = []\n    this.inflections = []\n    this.addInflections(inflections)\n    this.meaning = meaning || new DefinitionSet(this.lemma.word, this.lemma.languageID)\n    this.disambiguated = false\n  }\n\n  /**\n   * add an inflection to the lexeme\n   *\n   * @param {Inflection} inflection\n   */\n  addInflection (inflection) {\n    inflection.lemma = this.lemma\n    inflection.lexeme = this\n    this.inflections.push(inflection)\n  }\n\n  /**\n   * Adds one or several inflections to a Lexeme object.\n   *\n   * @param {Inflection | Inflection[]} inflections - a single Inflection object or an array of Inflection\n   *        objects to add to a lexeme.\n   */\n  addInflections (inflections) {\n    if (!Array.isArray(inflections)) { inflections = [inflections] }\n    inflections.forEach(i => this.addInflection(i))\n  }\n\n  /**\n   * add an alternative lemma to the lexeme\n   *\n   * @param {Lemma} lemma\n   */\n  addAltLemma (lemma) {\n    this.altLemmas.push(lemma)\n  }\n\n  /**\n   * test to see if a lexeme is populated with meaningful data\n   * Returns true if any of these are true:\n   *   its lemma has morphological features defined\n   *   it has one ore more definitions supplied in the meaning\n   *   it has one ore more inflections\n   *\n   * @returns {boolean}\n   */\n  isPopulated () {\n    return Object.entries(this.lemma.features).length > 0 ||\n      !this.meaning.isEmpty() ||\n      this.inflections.length > 0\n  }\n\n  /**\n   * Checks if any short definitions are stored within this lexeme.\n   *\n   * @returns {boolean} - true if any definitions are stored, false otherwise.\n   */\n  get hasShortDefs () {\n    return Boolean(this.meaning && this.meaning.hasShortDefs)\n  }\n\n  /**\n   * Checks if any full definitions are stored within this lexeme.\n   *\n   * @returns {boolean} - true if any definitions are stored, false otherwise.\n   */\n  get hasFullDefs () {\n    return Boolean(this.meaning && this.meaning.hasFullDefs)\n  }\n\n  /**\n   * Checks whether a lemma of a current lexeme is a full homonym of the lemma of the other lexeme.\n   *\n   * @param {Lexeme} otherLexeme - a lexeme whose lemma will be compared with the lemma of a current lexeme.\n   * @param {boolean} normalize - whether to use normalization for word comparison.\n   * @returns {boolean} - true if two aforementioned lemmas are full homonyms, false otherwise.\n   */\n  isFullHomonym (otherLexeme, { normalize = false } = {}) {\n    return this.lemma.isFullHomonym(otherLexeme.lemma, { normalize })\n  }\n\n  /**\n   * Determines whether a lexeme can be disambiguated with the other disambiguator lexeme.\n   *\n   * @param {Lexeme} disambiguator - A possible disambiguator; a lexeme that is checked\n   *         whether it can disambiguate a current lexeme.\n   * @returns {boolean} - True if a current lexeme can be disambiguated with a disambiguator, false otherwise.\n   */\n  canBeDisambiguatedWith (disambiguator) {\n    /*\n    A Lexeme can be used as an disambiguator if:\n    - its lemma is a full homonym of a disambiguator's lemma;\n    - disambiguator, comparing to a lexeme, has some extra features worth adding such as:\n      - some additional information in a word (e.g. a trailing digit) that lemma has not;\n      - at least one inflection.\n    */\n    const hasExtraFeatures = disambiguator.inflections.length || LM.hasTrailingDigit(disambiguator.lemma.word)\n    return this.isFullHomonym(disambiguator, { normalize: true }) && hasExtraFeatures\n  }\n\n  /**\n   * disambiguate with another supplied Lexeme\n   *\n   * @param {Lexeme} lexeme the lexeme to be disambiguated\n   * @param {Lexeme} disambiguator the lexeme to use to disambiguate\n   * @returns {Lexeme} a new lexeme, if disamibugation was successful disambiguated flag will be set on it\n   */\n  static disambiguate (lexeme, disambiguator) {\n    let newLexeme = new Lexeme(lexeme.lemma, lexeme.inflections, lexeme.meaning) // eslint-disable-line prefer-const\n    if (lexeme.canBeDisambiguatedWith(disambiguator)) {\n      newLexeme.disambiguated = true\n      newLexeme.lemma.word = lexeme.lemma.disambiguate(disambiguator.lemma)\n      let keepInflections = [] // eslint-disable-line prefer-const\n      // iterate through this lexemes inflections and keep only thoes that are disambiguatedBy by the supplied lexeme's inflection\n      // we want to keep the original inflections rather than just replacing them\n      // because the original inflections may have more information\n      for (const inflection of newLexeme.inflections) {\n        for (const disambiguatorInflection of disambiguator.inflections) {\n          if (inflection.disambiguatedBy(disambiguatorInflection)) {\n            keepInflections.push(inflection)\n          }\n        }\n      }\n      // Set greek inflections\n      newLexeme.inflections = [] // Remove inflections before adding new ones\n      newLexeme.addInflections(keepInflections)\n      // if we couldn't match any existing inflections, then add the disambiguated one\n      if (newLexeme.inflections.length === 0) {\n        for (const infl of disambiguator.inflections) {\n          newLexeme.addInflection(infl)\n        }\n      }\n    }\n    return newLexeme\n  }\n\n  getGroupedInflections () {\n    const lm = LMF.getLanguageModel(this.lemma.languageID)\n    return lm.groupInflectionsForDisplay(this.inflections)\n  }\n\n  static readObject (jsonObject) {\n    const lemma = Lemma.readObject(jsonObject.lemma)\n    let inflections = [] // eslint-disable-line prefer-const\n    for (const inflection of jsonObject.inflections) {\n      inflections.push(Inflection.readObject(inflection))\n    }\n\n    const lexeme = new Lexeme(lemma, inflections)\n    if (jsonObject.meaning) {\n      lexeme.meaning = DefinitionSet.readObject(jsonObject.meaning)\n    }\n\n    if (jsonObject.provider) {\n      const provider = ResourceProvider.readObject(jsonObject.provider)\n      return ResourceProvider.getProxy(provider, lexeme)\n    } else {\n      return lexeme\n    }\n  }\n\n  convertToJSONObject (addMeaning = false) {\n    let resInflections = [] // eslint-disable-line prefer-const\n    this.inflections.forEach(inflection => { resInflections.push(inflection.convertToJSONObject()) })\n\n    const resLexeme = {\n      lemma: this.lemma.convertToJSONObject(),\n      inflections: resInflections\n    }\n\n    if (addMeaning) {\n      resLexeme.meaning = this.meaning.convertToJSONObject()\n    }\n\n    if (this.provider) {\n      resLexeme.provider = this.provider.convertToJSONObject()\n    }\n\n    return resLexeme\n  }\n\n  /**\n   * Get a sort function for an array of lexemes which applies a primary and secondary\n   * sort logic using the sort order specified for each feature. Sorts in descending order -\n   * higher sort order means it should come first\n   *\n   * @param {string} primary feature name to use as primary sort key\n   * @param {string} secondary feature name to use as secondary sort key\n   * @returns {Function} function which can be passed to Array.sort\n   */\n  static getSortByTwoLemmaFeatures (primary, secondary) {\n    return (a, b) => {\n      if ((a.lemma.features[primary] && b.lemma.features[primary]) ||\n          (!a.lemma.features[primary] && !b.lemma.features[[primary]])) {\n        let primarySort\n        if (a.lemma.features[primary] && b.lemma.features[primary]) {\n          // if both lemmas have the primary sort key, then sort\n          primarySort = a.lemma.features[primary].compareTo(b.lemma.features[primary])\n        } else {\n          // if neither lemma has the primary sort key, then the primary sort is equal\n          primarySort = 0\n        }\n        if (primarySort !== 0) {\n          return primarySort\n        } else if (a.lemma.features[secondary] && b.lemma.features[secondary]) {\n          return a.lemma.features[secondary].compareTo(b.lemma.features[secondary])\n        } else if (a.lemma.features[secondary] && !b.lemma.features[secondary]) {\n          return -1\n        } else if (!a.lemma.features[secondary] && b.lemma.features[secondary]) {\n          return 1\n        } else {\n          // neither have the secondary sort key so they are equal\n          return 0\n        }\n      } else if (a.lemma.features[primary] && !b.lemma.features[primary]) {\n        return -1\n      } else if (!a.lemma.features[primary] && b.lemma.features[primary]) {\n        return 1\n      } else {\n        return 0\n      }\n    }\n  }\n}\nexport default Lexeme\n","let singleInstance\n\n// TODO: We should maybe try to capture the file name and the line number, if possible\n\n/**\n * A simple proxy for the console log functionality\n */\nexport default class Logger {\n  /**\n   * Creates an instance of the Logger class with the parameters specified.\n   *\n   * @param {boolean} verbose - In verbose mode, messages will be printed on all levels (err, warn. log, info).\n   *                            In non-verbose mode, only error messages will be displayed.\n   * @param {boolean} prepend - Whether to prepend text messages with the alpheios message.\n   * @param {boolean} trace - Whether to print a call stack.\n   */\n  constructor ({ verbose = false, prepend = true, trace = false } = {}) {\n    this._verboseMode = verbose\n    this._prependMode = prepend\n    this._traceMode = trace\n  }\n\n  /**\n   * Returns a single instance of the Logger object. If one does not exist, it will be created\n   * with the options specified. If the Logger instance is already created, but there are some\n   * options provided, options of the existing Logger object will be changed to match the ones supplied.\n   *\n   * @param {object} options - Options of the Logger constructor {@see Logger#constructor}.\n   * @returns {Logger} - An instance of existing or newly created Logger object.\n   */\n  static getInstance (options = {}) {\n    if (!singleInstance) {\n      singleInstance = new Logger(options)\n    } else {\n      // There is an instance of the Logger already created, but we might need to change its parameters\n      // It will be done only if the caller provided meaningful values to options' props\n      if (typeof options.verbose !== 'undefined') {\n        console.info('Setting a verbose mode')\n        singleInstance.setVerboseMode(options.verbose)\n      }\n      if (typeof options.prepend !== 'undefined') {\n        console.info('Setting a prepend mode')\n        singleInstance.setVerboseMode(options.prepend)\n      }\n      if (typeof options.trace !== 'undefined') {\n        console.info('Setting a trace mode')\n        singleInstance.setTraceMode(options.trace)\n      }\n    }\n    return singleInstance\n  }\n\n  setVerboseMode (mode) {\n    this._verboseMode = mode\n    return this\n  }\n\n  setPrependMode (mode) {\n    this._prependMode = mode\n    return this\n  }\n\n  setTraceMode (mode) {\n    this._traceMode = mode\n    return this\n  }\n\n  verboseModeOn () {\n    this.setVerboseMode(true)\n    return this\n  }\n\n  verboseModeOff () {\n    this.setVerboseMode(false)\n    return this\n  }\n\n  prependModeOn () {\n    this.setPrependMode(true)\n    return this\n  }\n\n  prependModeOff () {\n    this.setPrependMode(false)\n    return this\n  }\n\n  traceModeOn () {\n    this.setTraceMode(true)\n    return this\n  }\n\n  traceModeOff () {\n    this.setTraceMode(false)\n    return this\n  }\n\n  error (...data) {\n    if (this._prependMode && data && data.length > 0 && typeof data[0] === 'string') {\n      data[0] = `Alpheios error: ${data[0]}`\n    }\n    console.error(...data)\n    if (this._traceMode) {\n      console.trace()\n    }\n  }\n\n  warn (...data) {\n    if (this._verboseMode) {\n      if (this._prependMode && data && data.length > 0 && typeof data[0] === 'string') {\n        data[0] = `Alpheios warn: ${data[0]}`\n      }\n      console.warn(...data)\n      if (this._traceMode) {\n        console.trace()\n      }\n    }\n  }\n\n  log (...data) {\n    if (this._verboseMode) {\n      if (this._prependMode && data && data.length > 0 && typeof data[0] === 'string') {\n        data[0] = `Alpheios log: ${data[0]}`\n      }\n      console.log(...data)\n      if (this._traceMode) {\n        console.trace()\n      }\n    }\n  }\n\n  info (...data) {\n    if (this._verboseMode) {\n      if (this._prependMode && data && data.length > 0 && typeof data[0] === 'string') {\n        data[0] = `Alpheios info: ${data[0]}`\n      }\n      console.info(...data)\n      if (this._traceMode) {\n        console.trace()\n      }\n    }\n  }\n}\n","import LanguageModel from './language_model.js'\nimport * as Constants from './constants.js'\n\nlet typeFeatures = new Map() // eslint-disable-line prefer-const\nlet typeFeaturesInitialized = false\n\n/**\n * @class  PersianLanguageModel is the lass for Persian specific behavior\n */\nexport default class PersianLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_PERSIAN }\n\n  static get languageCode () { return Constants.STR_LANG_CODE_PER }\n\n  static get languageCodes () { return [Constants.STR_LANG_CODE_PER, Constants.STR_LANG_CODE_FAS, Constants.STR_LANG_CODE_FA, Constants.STR_LANG_CODE_FA_IR] }\n\n  static get contextForward () { return 0 }\n\n  static get contextBackward () { return 0 }\n\n  static get direction () { return Constants.LANG_DIR_RTL }\n\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display for the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   *\n   * @returns {string} a string containing valid punctuation symbols\n   */\n  static getPunctuation () {\n    return \"\\\\-\\\\.,;:!?'\\\"(){}\\\\[\\\\]<>\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\\u200C\\u200D\"\n  }\n}\n","/**\n * A public information about published event that is returned to subscriber.\n * It can be used by subscribers that are listening for more than one event\n * to distinguish between different event types.\n * We could pass an PsEvent object to subscribers instead of PsEventData\n * but it's better not to expose some details of PsEvent implementation to the outside.\n * This will help to avoid creating dependencies on PsEvent internals within subscribers functions.\n * Thus an PsEventData object can be considered as a publicly exposed part of PsEvent data.\n * If needed, PsEventData can present PsEvent data to subscriber differently,\n * not in the way PsEvent stores it. This makes sense as subscriber might be interested in\n * a different angle of PsEvent information. PsEventData may add properties or methods\n * that do not needed within an PsEvent, but might be useful to subscribers.\n */\nexport default class PsEventData {\n  /**\n   * @param {PsEvent} event - An event that is being published.\n   * @param {string} [caller=''] - The name of the function from where an event was published.\n   */\n  constructor (event, caller = '') {\n    this.name = event.name\n    this.publisher = event.publisher\n    this.caller = caller\n  }\n\n  /**\n   * Returns a description of an event data in a printable form. Example:\n   *     LexicalQuery.finalize -> [Lexical Query Complete]\n   * If caller function is not specified during a `pub()` call, description will be:\n   *     LexicalQuery -> [Lexical Query Complete]\n   *\n   * @returns {string} - An event data description.\n   */\n  get description () {\n    return this.caller ? `${this.publisher}.${this.caller} -> [${this.name}]` : `${this.publisher} -> [${this.name}]`\n  }\n}\n","import uuidv4 from 'uuid/v4'\nimport PsEventData from '../../src/ps-events/ps-event-data.js'\n\n/**\n * An event in pub/sub (publish–subscribe) design pattern\n */\nexport default class PsEvent {\n  /**\n   * @param {string} name - A name of the event.\n   * @param {Function} publisher - A constructor function of a publisher.\n   *        PsEvent uses its `name` property to set its publisher name field.\n   */\n  constructor (name, publisher) {\n    /**\n     * A name of the event.\n     *\n     * @type {string}\n     */\n    this.name = name\n\n    /**\n     * A name of the publisher.\n     *\n     * @type {string}\n     */\n    this.publisher = publisher.name\n\n    /**\n     * A subscribers that listens to the published event.\n     *\n     * @type {Map<int, EventSubscriber>} - A map of subscriber's functions\n     */\n    this._subscribers = new Map()\n  }\n\n  /**\n   * This function is called when an event is published.\n   *\n   * @callback EventSubscriber\n   * @param {object} data - An event-specific data associated with the event.\n   * @param {PsEventData} eventData - A data about the event being published.\n   *        PsEvent data allows generic subscribers (i.e. functions that are subscribed to\n   *        more than one event) to distinguish between an event being published.\n   */\n\n  /**\n   * Return a list of subscribers for the current event.\n   *\n   * @returns {EventSubscriber[]} An array of event subscriber functions.\n   */\n  get subscribers () {\n    return Array.from(this._subscribers.values())\n  }\n\n  /**\n   * Subscribes a function to the published event.\n   * When event is published, a @type {Event~subscriber} function is called.\n   *\n   * @param {EventSubscriber} subscriber - A subscriber function.\n   * @returns {Function} - An function that, when called, will unsubscribe the current subscriber from an event.\n   */\n  sub (subscriber) {\n    const subId = uuidv4()\n    this._subscribers.set(subId, subscriber)\n    return () => {\n      this._subscribers.delete(subId)\n    }\n  }\n\n  /**\n   * Publishes an event with data related to it. All subscribers will receive an\n   * event notification along with event data.\n   *\n   * @param {object} [data={}] - An event-specific data associated with the event.\n   * @param {string} [caller=''] - The name of the function that called `pub`.\n   */\n  pub (data = {}, caller = '') {\n    this._subscribers.forEach(l => l(data, new PsEventData(this, caller)))\n  }\n\n  /**\n   * Unsubscribes all subscribers from an event.\n   */\n  unsubAll () {\n    this._subscribers.clear()\n  }\n}\n","/**\n * An abstraction of an Alpheios resource provider\n */\nclass ResourceProvider {\n  /**\n   * @param {string} uri - a unique resource identifier for this provider\n   * @param {string} rights - rights text\n   * @param {Map} rightsTranslations - optional map of translated rights text - keys should be language of text, values the text\n   */\n  constructor (uri = '', rights = '', rightsTranslations = new Map([['default', rights]])) {\n    this.uri = uri\n    this.rights = rightsTranslations\n    if (!this.rights.has('default')) {\n      this.rights.set('default', rights)\n    }\n  }\n\n  /**\n   * @returns a string representation of the resource provider, in the default language\n   */\n  toString () {\n    return this.rights.get('default')\n  }\n\n  /**\n   * Produce a string representation of the resource provider, in the requested locale if available\n   *\n   * @param {string} languageCode\n   * @returns a string representation of the resource provider, in the requested locale if available\n   */\n  toLocaleString (languageCode) {\n    return this.rights.get(languageCode) || this.rights.get('default')\n  }\n\n  static getProxy (provider = null, target = {}) {\n    return new Proxy(target, {\n      get: function (target, name) {\n        return name === 'provider' ? provider : target[name]\n      }\n    })\n  }\n\n  convertToJSONObject () {\n    let rights = {} // eslint-disable-line prefer-const\n    for (const [key, value] of this.rights.entries()) {\n      rights[key] = value\n    }\n\n    const resultProvider = {\n      uri: this.uri,\n      rights\n    }\n    return resultProvider\n  }\n\n  static readObject (jsonObject) {\n    const rights = new Map() // eslint-disable-line prefer-const\n    if (jsonObject.rights) {\n      Object.keys(jsonObject.rights).forEach(key => {\n        rights.set(key, jsonObject.rights[key])\n      })\n    }\n\n    return new ResourceProvider(jsonObject.uri, '', rights)\n  }\n}\n\nexport default ResourceProvider\n","import LanguageModel from './language_model.js'\nimport Feature from './feature.js'\nimport * as Constants from './constants.js'\nimport InflectionGroupingKey from './inflection_grouping_key'\nimport InflectionGroup from './inflection_group'\n\nconst typeFeatures = new Map()\nlet typeFeaturesInitialized = false\n\n/**\n * @class  GezLanguageModel is the lass for Ge'ez specific behavior\n */\nexport default class SyriacLanguageModel extends LanguageModel {\n  static get languageID () { return Constants.LANG_SYRIAC }\n\n  static get languageCode () { return Constants.STR_LANG_CODE_SYR }\n\n  static get languageCodes () { return [Constants.STR_LANG_CODE_SYR, Constants.STR_LANG_CODE_SYC, Constants.STR_LANG_CODE_SYR_SYRJ] }\n\n  static get contextForward () { return 0 }\n\n  static get contextBackward () { return 0 }\n\n  static get direction () { return Constants.LANG_DIR_RTL }\n\n  static get baseUnit () { return Constants.LANG_UNIT_WORD }\n  static get featureValues () {\n    return new Map([\n      ...LanguageModel.featureValues,\n      [\n        Feature.types.part,\n        [\n          Constants.POFS_ADVERB,\n          Constants.POFS_ADVERBIAL,\n          Constants.POFS_ADJECTIVE,\n          Constants.POFS_ARTICLE,\n          Constants.POFS_CONJUNCTION,\n          Constants.POFS_EXCLAMATION,\n          Constants.POFS_INTERJECTION,\n          Constants.POFS_NOUN,\n          Constants.POFS_NUMERAL,\n          Constants.POFS_PARTICLE,\n          Constants.POFS_PREFIX,\n          Constants.POFS_PREPOSITION,\n          Constants.POFS_PRONOUN,\n          Constants.POFS_SUFFIX,\n          Constants.POFS_SUPINE,\n          Constants.POFS_VERB,\n          Constants.POFS_VERB_PARTICIPLE,\n          Constants.POFS_DENOMINATIVE\n        ]\n      ],\n      [\n        Feature.types.kaylo,\n        []\n      ],\n      [\n        Feature.types.state,\n        []\n      ]\n    ])\n  }\n\n  static get typeFeatures () {\n    if (!typeFeaturesInitialized) { this.initTypeFeatures() }\n    return typeFeatures\n  }\n\n  static initTypeFeatures () {\n    for (const featureName of this.featureNames) {\n      typeFeatures.set(featureName, this.getFeature(featureName))\n    }\n    typeFeaturesInitialized = true\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\nfor the current node\n   *\n   * @param node\n   */\n  static canInflect (node) {\n    return false\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * Taken from  the list at https://en.wikipedia.org/wiki/Syriac_(Unicode_block)\n   *\n   * @returns {string} a string containing valid puncutation symbols\n   */\n  static getPunctuation () {\n    return \"\\u0700\\u0701\\u0702\\u0703\\u0704\\u0705\\u0706\\u0707\\u0708\\u0709\\u070A\\u070B\\u070C\\u070D\\u070F.,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\n\\r\\u200C\\u200D\"\n  }\n\n  /**\n   * Groups a set of inflections according to a syriac display paradigm\n    The default groups according to the following logic:\n    1. groups of groups with unique stem, prefix, suffix, part of speech, declension, kaylo or state, and comparison\n    2. groups of those groups with unique\n    number, if it's an inflection with a grammatical case\n    tense, if it's an inflection with tense but no case (i.e. a verb)\n    verbs without tense or case\n    adverbs\n    everything else\n    3. groups of those groups with unique voice and tense\n    4. groups of inflections with unique gender, person, mood, and sort\n   *\n   * @param inflections\n   */\n  static groupInflectionsForDisplay (inflections) {\n    const grouped = new Map()\n    const aggregated = this.aggregateInflectionsForDisplay(inflections)\n\n    // group inflections by part of speech\n    for (const infl of aggregated) {\n      const groupingKey = new InflectionGroupingKey(infl,\n        [Feature.types.part, Feature.types.declension, Feature.types.kaylo, Feature.types.state, Feature.types.comparison],\n        {\n          prefix: infl.prefix,\n          suffix: infl.suffix,\n          stem: infl.stem\n        }\n      )\n      const groupingKeyStr = groupingKey.toString()\n      if (grouped.has(groupingKeyStr)) {\n        grouped.get(groupingKeyStr).append(infl)\n      } else {\n        grouped.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n      }\n    }\n\n    // iterate through each group key to group the inflections in that group\n    for (const kv of grouped) {\n      const inflgrp = new Map()\n      for (const infl of kv[1].inflections) {\n        let keyprop\n        let isCaseInflectionSet = false\n        if (infl[Feature.types.grmCase]) {\n          // grouping on number if case is defined\n          keyprop = Feature.types.number\n          isCaseInflectionSet = true\n        } else if (infl[Feature.types.tense]) {\n          // grouping on tense if tense is defined but not case\n          keyprop = Feature.types.tense\n        } else if (infl[Feature.types.part] === Constants.POFS_VERB) {\n          // grouping on no case or tense but a verb\n          keyprop = Feature.types.part\n        } else if (infl[Feature.types.part] === Constants.POFS_ADVERB) {\n          keyprop = Feature.types.part\n          // grouping on adverbs without case or tense\n        } else {\n          keyprop = 'misc'\n          // grouping on adverbs without case or tense\n          // everything else\n        }\n        const groupingKey = new InflectionGroupingKey(infl, [keyprop], { isCaseInflectionSet: isCaseInflectionSet })\n        const groupingKeyStr = groupingKey.toString()\n        if (inflgrp.has(groupingKeyStr)) {\n          inflgrp.get(groupingKeyStr).append(infl)\n        } else {\n          inflgrp.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n        }\n      }\n      // inflgrp is now a map of groups of inflections grouped by\n      //  inflections with number\n      //  inflections without number but with tense\n      //  inflections of verbs without tense\n      //  inflections of adverbs\n      //  everything else\n      // iterate through each inflection group key to group the inflections in that group by tense and voice\n      for (const kv of inflgrp) {\n        const nextGroup = new Map()\n        const sortOrder = new Map()\n        for (const infl of kv[1].inflections) {\n          const sortkey = infl[Feature.types.grmCase] ? Math.max(infl[Feature.types.grmCase].items.map(f => f.sortOrder)) : 1\n          const groupingKey = new InflectionGroupingKey(infl, [Feature.types.tense, Feature.types.voice])\n          const groupingKeyStr = groupingKey.toString()\n          if (nextGroup.has(groupingKeyStr)) {\n            nextGroup.get(groupingKeyStr).append(infl)\n          } else {\n            nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl], sortkey))\n            sortOrder.set(groupingKeyStr, sortkey)\n          }\n        }\n        kv[1].inflections = []\n        const sortedKeys = Array.from(nextGroup.keys()).sort(\n          (a, b) => {\n            const orderA = sortOrder.get(a)\n            const orderB = sortOrder.get(b)\n            return orderA > orderB ? -1 : orderB > orderA ? 1 : 0\n          }\n        )\n        for (const groupkey of sortedKeys) {\n          kv[1].inflections.push(nextGroup.get(groupkey))\n        }\n      }\n\n      // inflgrp is now a Map of groups of groups of inflections\n\n      for (const kv of inflgrp) {\n        const groups = kv[1]\n        for (const group of groups.inflections) {\n          const nextGroup = new Map()\n          for (const infl of group.inflections) {\n            // set key is case comp gend pers mood sort\n            const groupingKey = new InflectionGroupingKey(infl,\n              [Feature.types.grmCase, Feature.types.comparison, Feature.types.gender, Feature.types.number, Feature.types.person,\n                Feature.types.tense, Feature.types.mood, Feature.types.voice])\n            const groupingKeyStr = groupingKey.toString()\n            if (nextGroup.has(groupingKeyStr)) {\n              nextGroup.get(groupingKeyStr).append(infl)\n            } else {\n              nextGroup.set(groupingKeyStr, new InflectionGroup(groupingKey, [infl]))\n            }\n          }\n          group.inflections = Array.from(nextGroup.values()) // now a group of inflection groups\n        }\n      }\n      kv[1].inflections = Array.from(inflgrp.values())\n    }\n    return Array.from(grouped.values())\n  }\n}\n","class Author {\n  /**\n   * Constructor, extracts ID from urn\n   *\n   * @param {string} urn - string identificator in special format, for example 'urn:cts:latinLit:phi0959'\n   * @param {object} titles - has the following format { languageCode: title }\n   * @param {object} abbreviations - has the following format { languageCode: abbreviation }\n   * @returns {Author}\n   */\n  constructor (urn, titles, abbreviations) {\n    this.urn = urn\n    this.titles = titles\n    this.abbreviations = abbreviations\n  }\n\n  /**\n   * This property is used to define title for panel\n   *\n   * @returns {string}\n   */\n  static get defaultLang () {\n    return 'eng'\n  }\n\n  /**\n   * Method returns title in the lang from arguments, otherwise in default language or (if not exists) it returns first available title\n   *\n   * @param {string} lang - language for getting title\n   * @returns {string}\n   */\n  title (lang) {\n    if (this.titles[lang]) {\n      return this.titles[lang]\n    } else if (this.titles[Author.defaultLang]) {\n      return this.titles[Author.defaultLang]\n    } else if (Object.values(this.titles).length > 0) {\n      return Object.values(this.titles)[0]\n    }\n    return null\n  }\n\n  /**\n   * Method returns abbreviation in the lang from arguments, otherwise in default language or (if not exists) it returns first available abbreviation\n   *\n   * @param {string} lang - language for getting abbreviation\n   * @returns {string}\n   */\n  abbreviation (lang) {\n    if (this.abbreviations[lang]) {\n      return this.abbreviations[lang]\n    } else if (this.abbreviations[Author.defaultLang]) {\n      return this.abbreviations[Author.defaultLang]\n    } else if (Object.values(this.abbreviations).length > 0) {\n      return Object.values(this.abbreviations)[0]\n    }\n    return null\n  }\n}\n\nexport default Author\n","class TextWork {\n  /**\n   * Constructor, extracts ID from urn\n   *\n   * @param {Author} author - author of the textWork\n   * @param {string} urn - string identificator in special format, for example 'urn:cts:latinLit:phi0959'\n   * @param {object} titles - has the following format { languageCode: title }\n   * @param {object} abbreviations - has the following format { languageCode: abbreviation }\n   * @returns {TextWork}\n   */\n  constructor (author, urn, titles, abbreviations) {\n    this.urn = urn\n    this.titles = titles\n    this.author = author\n    this.abbreviations = abbreviations\n  }\n\n  /**\n   * This property is used to define title for panel\n   *\n   * @returns {string}\n   */\n  static get defaultLang () {\n    return 'eng'\n  }\n\n  /**\n   * This property is used to define prefix fr extract ID\n   *\n   * @returns {string}\n   */\n  static get defaultIDPrefix () {\n    return 'phi'\n  }\n\n  /**\n   * Method returns title in the lang from arguments, otherwise in default language or (if not exists) it returns first available title\n   *\n   * @param {string} lang - language for getting title\n   * @returns {string}\n   */\n  title (lang) {\n    if (this.titles[lang]) {\n      return this.titles[lang]\n    } else if (this.titles[TextWork.defaultLang]) {\n      return this.titles[TextWork.defaultLang]\n    } else if (Object.values(this.titles).length > 0) {\n      return Object.values(this.titles)[0]\n    }\n    return null\n  }\n\n  /**\n   * Method returns abbreviation in the lang from arguments, otherwise in default language or (if not exists) it returns first available abbreviation\n   *\n   * @param {string} lang - language for getting abbreviation\n   * @returns {string}\n   */\n  abbreviation (lang) {\n    if (this.abbreviations[lang]) {\n      return this.abbreviations[lang]\n    } else if (this.abbreviations[TextWork.defaultLang]) {\n      return this.abbreviations[TextWork.defaultLang]\n    } else if (Object.values(this.abbreviations).length > 0) {\n      return Object.values(this.abbreviations)[0]\n    }\n    return null\n  }\n}\n\nexport default TextWork\n","import TextQuoteSelector from '../w3c/text-quote-selector.js'\nimport LanguageModelFactory from '../language_model_factory.js'\n\nexport default class WordUsageExample extends TextQuoteSelector {\n  constructor (language, targetWord, prefix, suffix, source, cit) {\n    super(language, targetWord)\n    this.prefix = prefix\n    this.suffix = suffix\n    this.source = source\n    this.cit = cit\n    this.author = null\n    this.textWork = null\n    this.passage = null\n  }\n\n  createContext () {\n    return null // not implemented in the current child-class\n  }\n\n  /**\n   * Creates a full text of example prefix + word + suffix\n   *\n   * @returns {string}\n   */\n  get htmlExample () {\n    return `${this.prefix}<span class=\"alpheios_word_usage_list_item__text_targetword\">${this.normalizedText}</span>${this.suffix}`\n  }\n\n  /**\n   * Creates a full description - author + textWork + cit number\n   *\n   * @param {string} lang - language for getting text\n   * @returns {string}\n   */\n  fullCit (lang) {\n    if (!this.author && !this.textWork && !this.passage) {\n      return this.cit\n    }\n    let finalFullCit = ''\n    if (!lang) {\n      finalFullCit = this.formattedAuthor + ' ' + this.formattedTextWork + ' ' + this.formattedPassage\n    } else {\n      finalFullCit = this.author ? this.author.title(lang) : '.'\n      finalFullCit = finalFullCit + ' ' + (this.textWork ? this.textWork.title(lang) : '.')\n      finalFullCit = finalFullCit + ' ' + this.formattedPassage\n    }\n\n    return finalFullCit.trim()\n  }\n\n  get formattedAuthor () {\n    return this.author ? this.author.title() : ''\n  }\n\n  get formattedTextWork () {\n    return this.textWork ? this.textWork.title() : ''\n  }\n\n  get formattedPassage () {\n    return this.passage\n  }\n\n  authorForSort (lang) {\n    if (this.author) {\n      return this.author.title(lang).toUpperCase()\n    } else {\n      return this.fullCit(lang).toUpperCase()\n    }\n  }\n\n  textWorkForSort (lang) {\n    if (this.textWork) {\n      return this.textWork.title(lang).toUpperCase()\n    } else {\n      return this.fullCit(lang).toUpperCase()\n    }\n  }\n\n  get prefixForSort () {\n    const model = LanguageModelFactory.getLanguageModelFromCode(this.languageCode)\n    const clearPrefix = this.prefix.replace(new RegExp('[' + model.getPunctuation() + ' ]', 'g'), ' ').toUpperCase().split(' ').filter(item => item.length > 0)\n    return clearPrefix[clearPrefix.length - 1]\n  }\n\n  get suffixForSort () {\n    const model = LanguageModelFactory.getLanguageModelFromCode(this.languageCode)\n    return this.suffix.replace(new RegExp('[' + model.getPunctuation() + ' ]', 'g'), '').toUpperCase()\n  }\n}\n","import ResourceProvider from './resource_provider.js'\n/**\n * stores a scope of lemma translations from python service\n * Contains a primary Lemma object\n */\nclass Translation {\n  /**\n   * Initializes a Translation object.\n   *\n   * @param {Lemma} lemma - A lemma object.\n   * @param languageCode\n   * @param translations\n   */\n  constructor (lemma, languageCode, translations = []) {\n    if (!lemma) {\n      throw new Error('Lemma should not be empty.')\n    }\n    this.lemmaWord = lemma.word\n    this.languageCode = languageCode\n    this.glosses = translations\n  }\n\n  static readTranslationFromJSONList (lemma, languageCode, translationsList, provider) {\n    if (!translationsList || !Array.isArray(translationsList)) {\n      throw new Error('Recieved not proper translation list', translationsList)\n    }\n    const curTranslations = translationsList.find(function (element) { return element.in === lemma.word })\n    const translation = new Translation(lemma, languageCode, curTranslations.translations)\n    if (provider) {\n      return ResourceProvider.getProxy(provider, translation)\n    } else {\n      return translation\n    }\n  }\n\n  static loadTranslations (lemma, languageCode, translationsList, provider) {\n    lemma.addTranslation(this.readTranslationFromJSONList(lemma, languageCode, translationsList, provider))\n  }\n\n  convertToJSONObject () {\n    // eslint-disable-next-line prefer-const\n    let result = {\n      languageCode: this.languageCode,\n      translations: this.glosses\n    }\n\n    if (this.provider) {\n      result.provider = this.provider.convertToJSONObject()\n    }\n    return result\n  }\n\n  static readObject (jsonObject, lemma) {\n    const translation = new Translation(lemma, jsonObject.languageCode, jsonObject.translations)\n    if (jsonObject.provider) {\n      const provider = ResourceProvider.readObject(jsonObject.provider)\n      return ResourceProvider.getProxy(provider, translation)\n    } else {\n      return translation\n    }\n  }\n}\nexport default Translation\n","export default class TreebankDataItem {\n  /**\n   * Creates a treebank item. It can be created for either a specific text element (i.e. a selected word)\n   * or for the document (a web page) that has treebank data.\n   * If it is created for a text element, an 'elem' parameter will be provided and it will contain\n   * a selected text element.\n   * If a treebank item is created for a document (as when a web page with treebank data in it is loaded\n   * but a specific word is not selected) an 'elem' parameter will be skipped. In that case constructor\n   * will scan document in a search of any document ID and sentence ID that are required to be in a URL\n   * to load a treebank diagram.\n   *\n   * @param {node} [elem=null] - An HTML node that contains a selected word (optional).\n   */\n  constructor (elem = null) {\n    this.version = 0\n    this.app = null\n    this.sourceUrl = null\n    this.wordIds = []\n    this.sentenceId = null\n    this.doc = null\n\n    /*\n      Treebank data on a page must have an element with the following obligatory data attributes:\n        data-alpheios_tb_app - the only app currently supported is 'perseids-treebank-template'\n        data-alpheios_tb_app_version - a version of a data format (the latest version is 1);\n        data-alpheios_tb_app_url - a schema of a treebank template URL;\n        data-alpheios_tb_ref - a reference that will be used to load data into the iframe initially\n      Example:\n        data-alpheios_tb_app=\"perseids-treebank-template\"\n        data-alpheios_tb_app_version=\"1\"\n        data-alpheios_tb_app_url=\"https://alpheios-project.github.io/treebank-template/embed/DOC/SENTENCE?w=WORD\"\n        data-alpheios_tb_ref=\"on-the-murder-of-eratosthenes-1-50#1-1\"\n\n      HTML elements that are surrounding words must have a `data-alpheios_tb_ref` ref attribute.\n      It will tie a word to its position in a tree.\n      */\n    const tbSrcElem = elem\n      ? elem.closest('[data-alpheios_tb_app]')\n      : document.querySelector('[data-alpheios_tb_app]')\n    if (tbSrcElem) {\n      this.app = tbSrcElem.dataset.alpheios_tb_app\n      if (this.app !== 'perseids-treebank-template') {\n        throw new Error('Unsupported treebank application. This version of Alpheios only supports the perseids-treebank-template viewer app.')\n      }\n      if (tbSrcElem.dataset.alpheios_tb_app_version) {\n        this.version = Number.parseInt(tbSrcElem.dataset.alpheios_tb_app_version, 10)\n        if (!Number.isInteger(this.version)) { throw new Error(`Treebank version is incorrect in: ${tbSrcElem.outerHTML}`) }\n      }\n\n      if (!tbSrcElem.dataset.alpheios_tb_app_url) { throw new Error(`Missing treebank source URL in: ${tbSrcElem.outerHTML}`) }\n      this.sourceUrl = tbSrcElem.dataset.alpheios_tb_app_url\n\n      // We'll search for any element with the treebank tags if `elem` is not provided.\n      const tbRefElem = elem ? elem.closest('[data-alpheios_tb_ref]') : document.querySelector('[data-alpheios_tb_ref]')\n      // If TreebankDataItem is created for a page (i.e. `elem` is not provided) we need just a sentence ID, not word ID\n      let wordElem = null\n      let sentElem\n      if (elem) {\n        // TreebankDataItem is created for a text element\n        wordElem = elem.closest('[data-alpheios_tb_word]')\n        sentElem = wordElem ? wordElem.closest('[data-alpheios_tb_sent]') : elem.closest('[data-alpheios_tb_sent]')\n      } else {\n        // TreebankDataItem is created for a page, we don't need a word ID\n        sentElem = document.querySelector('[data-alpheios_tb_sent]')\n      }\n      if (!tbRefElem && !(wordElem || sentElem)) {\n        throw new Error('An element does not have data-alpheios_tb_ref, data-alpheios_tb_word or data-alpheios_tb_sent attributes')\n      }\n\n      /*\n      If both `data-alpheios_tb_word` and `data-alpheios_tb_ref` data attributes are present, the former will\n      have priority because it belongs to a newer tagging schema.\n       */\n      if (wordElem || sentElem) {\n        /*\n        Data is using `data-alpheios_tb_sent` and `data-alpheios_tb_word` attributes. There could be multiple\n        word combinations specified there. In that case they will be separated by spaces:\n        `data-alpheios_tb_word=\"3 4\"`.\n         */\n        if (!sentElem) {\n          throw new Error('Sentence ID is undefined: there is no parent element with data-alpheios_tb_sent attribute')\n        }\n        const docElem = wordElem ? wordElem.closest('[data-alpheios_tb_doc]') : sentElem.closest('[data-alpheios_tb_doc]')\n        if (!docElem) {\n          throw new Error('Document ID is undefined: there is no parent element with data-alpheios_tb_doc attribute')\n        }\n        if (wordElem) {\n          this.wordIds = wordElem.dataset.alpheios_tb_word.split(' ')\n        }\n        this.sentenceId = sentElem.dataset.alpheios_tb_sent\n        this.doc = docElem.dataset.alpheios_tb_doc\n      } else {\n        /*\n        Data is using `data-alpheios_tb_ref` attributes. There could be multiple\n        sentence and word combinations specified there. In that case they will be separated by spaces:\n        `data-alpheios_tb_ref=\"phi0959.phi006.alpheios-text-lat1#2-13 phi0959.phi006.alpheios-text-lat1#2-14\"`.\n        We, however, do not support multiple references with different sentence ID. In that case the first\n        reference will be used and others with sentence IDs not matching the first one will be ignored.\n         */\n        const reference = tbRefElem.dataset.alpheios_tb_ref\n        let refs\n        try {\n          refs = reference.split(' ').map(ref => TreebankDataItem.parseReference(ref))\n        } catch (err) {\n          throw new Error(`${err.message} in: ${tbSrcElem.outerHTML}`)\n        }\n        refs = refs.filter(i => i.doc === refs[0].doc && i.sent === refs[0].sent)\n        this.doc = refs[0].doc\n        this.sentenceId = refs[0].sent\n        this.wordIds = refs.map(i => i.word)\n      }\n    }\n\n    if (!this.doc) { throw new Error('Document data is missing') }\n    if (!this.sentenceId) { throw new Error('Sentence data is missing') }\n  }\n\n  static getTreebankData (elem = null) {\n    try {\n      return new TreebankDataItem(elem)\n    } catch (err) {\n      return null\n    }\n  }\n\n  /**\n   * Parse a reference in a \"phi0959.phi006.alpheios-text-lat1#2-13\" format to document, sentence ID, and word ID.\n   *\n   * @param {string} reference - A reference value to parse.\n   * @returns {{doc: string, sent: string, word: string}} - An object containing parsed values.\n   */\n  static parseReference (reference) {\n    const [doc, sentWordRef] = reference.split(/#/)\n    if (!doc || !sentWordRef) { throw new Error('Invalid treebank reference') }\n    const [sent, word] = sentWordRef.split(/-/)\n    if (!sent) { throw new Error('Invalid treebank sent ID') }\n    if (!word) { throw new Error('Invalid treebank word ID') }\n    return { doc, sent, word }\n  }\n\n  setWordData (wordIds) {\n    this.wordIds = wordIds\n  }\n\n  removeWordData () {\n    this.wordIds = []\n  }\n\n  get fullUrl () {\n    return this.sourceUrl.replace('DOC', this.doc).replace('SENTENCE', this.sentenceId)\n  }\n\n  get docUrl () {\n    return this.sourceUrl.replace('DOC', this.doc)\n  }\n\n  get provider () {\n    return new URL(this.fullUrl).origin\n  }\n\n  get hasWordData () {\n    return this.wordIds.length > 0\n  }\n\n  get hasSentenceData () {\n    return Boolean(this.sentenceId)\n  }\n}\n","/**\n * Implements a W3C Text Quote Selector (https://www.w3.org/TR/annotation-model/#h-text-quote-selector)\n */\nimport uuidv4 from 'uuid/v4'\n\nexport default class TextQuoteSelector {\n  constructor (languageCode, normalizedText, prefix = null, suffix = null, source = null) {\n    this.languageCode = languageCode\n    this.normalizedText = normalizedText\n    this.contextForward = 6\n    this.contextBackward = 6\n    this.text = this.normalizedText\n    this.prefix = prefix\n    this.suffix = suffix\n    this.source = source\n    this.ID = uuidv4()\n  }\n\n  get contextHTML () {\n    const templateWord = `<span class=\"alpheios_worditem_incontext_add\">${this.text}</span>`\n    const checkPrefix = this.prefix.replace(this.text, templateWord)\n    const checkSuffix = this.suffix.replace(this.text, templateWord)\n\n    const fullText = `${checkPrefix} <span class=\"alpheios_worditem_incontext\">${this.text}</span> ${checkSuffix}`\n    return fullText\n  }\n\n  static readObject (jsonObject) {\n    // eslint-disable-next-line prefer-const\n    let tq = new TextQuoteSelector(jsonObject.languageCode, jsonObject.target.selector.exact)\n    tq.prefix = jsonObject.target.selector.prefix\n    tq.suffix = jsonObject.target.selector.suffix\n    tq.text = jsonObject.targetWord\n    tq.source = jsonObject.target.source\n    return tq\n  }\n\n  isEqual (otherTqs) {\n    let checkContextThis = `${this.prefix}${this.text}${this.suffix}`\n    checkContextThis = checkContextThis.trim()\n\n    let checkContextOther = `${otherTqs.prefix}${otherTqs.text}${otherTqs.suffix}`\n    checkContextOther = checkContextOther.trim()\n\n    return this.text === otherTqs.text &&\n      this.source === otherTqs.source &&\n      this.languageCode === otherTqs.languageCode &&\n      checkContextThis === checkContextOther\n  }\n}\n","import Homonym from './homonym.js'\nimport TextQuoteSelector from './w3c/text-quote-selector.js'\n\nexport default class WordItem {\n  /**\n   * @class\n   * @param data\n   * {String} targetWord\n   * {String} languageCode\n   * {Boolean} important\n   * {Boolean} currentSession\n   * {TextQuoteSelector[]} context\n   * {Homonym} homonym\n   */\n  constructor (data = { targetWord: null, languageCode: null, important: false, currentSession: true, context: [], homonym: {}, createdDT: null, updatedDT: null, frequency: null }) {\n    // TODO handling of version\n    this.version = 1\n    this.targetWord = data.targetWord\n    this.languageCode = data.languageCode\n    if (!this.targetWord || !this.languageCode) {\n      throw new Error('Unable to construct a worditem without at least a targetWord and a languageCode')\n    }\n    this.important = data.important === undefined ? false : data.important\n    this.currentSession = data.currentSession === undefined ? true : data.currentSession\n    this.context = data.context || []\n    this.homonym = data.homonym || {}\n\n    this.createdDT = data.createdDT\n    this.updatedDT = data.updatedDT\n    this.frequency = data.frequency\n  }\n\n  /**\n   * Construct a WordItem from JSON\n   *\n   * @param jsonObject\n   */\n  static readObject (jsonObject) {\n    let homonym = {}\n    let context = []\n    if (jsonObject.homonym) {\n      homonym = WordItem.readHomonym(jsonObject)\n    }\n    if (jsonObject.context) {\n      context = WordItem.readContext(jsonObject)\n    }\n    const worditem = new WordItem({\n      targetWord: jsonObject.targetWord,\n      languageCode: jsonObject.languageCode,\n      important: jsonObject.important,\n      currentSession: jsonObject.currentSession,\n      context: context,\n      homonym: homonym\n    })\n    return worditem\n  }\n\n  /**\n   * Construct the homonym portion of a WordItem from JSON\n   *\n   * @param jsonObject\n   */\n  static readHomonym (jsonObject) {\n    return Homonym.readObject(jsonObject.homonym)\n  }\n\n  get hasTextQuoteSelectors () {\n    return this.context.length > 0\n  }\n\n  /**\n   * Construct the context portion of a WordItem from JSON\n   *\n   * @param jsonObject\n   */\n  static readContext (jsonObject) {\n    let tqs = [] // eslint-disable-line prefer-const\n    for (const jsonObj of jsonObject) {\n      const tq = TextQuoteSelector.readObject(jsonObj)\n      tqs.push(tq)\n    }\n    return tqs\n  }\n\n  /**\n   * add one or more context selectors\n   *\n   * @param {TextQuoteSelector[]} selectors\n   */\n  addContext (selectors) {\n    for (const s of selectors) {\n      const found = this.context.filter(tqs => tqs.isEqual(s))\n      if (found.length === 0) {\n        this.context.push(s)\n      }\n    }\n  }\n\n  /**\n   * getter for the lemmas in this WordItem\n   */\n  get lemmasList () {\n    if (this.homonym && this.homonym.lexemes) {\n      return this.homonym.lexemes.map(lexeme => lexeme.lemma.word).filter((value, index, self) => {\n        return self.indexOf(value) === index\n      }).join(', ')\n    }\n    return ''\n  }\n\n  /**\n   * updates empty properties of this wordItem with those of the supplied worditem if also non-empty\n   *\n   * @param prevWordItem\n   */\n  merge (prevWordItem) {\n    const checkProps = ['homonym', 'important', 'currentSession']\n    for (const prop of checkProps) {\n      if (this._emptyProp(prop) && !prevWordItem._emptyProp(prop)) {\n        this[prop] = prevWordItem[prop]\n      }\n    }\n  }\n\n  /**\n   * private method to detect an empty property\n   *\n   * @param propName\n   */\n  _emptyProp (propName) {\n    return !this[propName] || (typeof this[propName] === 'object' && Object.keys(this[propName]).length === 0)\n  }\n\n  get formattedContext () {\n    let res = {} // eslint-disable-line prefer-const\n    for (const tq of this.context) {\n      if (!res[tq.source]) {\n        res[tq.source] = []\n      }\n      res[tq.source].push(tq)\n    }\n    return res\n  }\n}\n","import WordItem from './word-item'\n\nexport default class WordList {\n  /**\n   * @class\n   * @param {string} languageCode the language code of the list\n   * @param {WordItem[]} worditems an optional array of WordItems with which to initialize the list\n   */\n  constructor (languageCode, worditems = []) {\n    if (!languageCode) {\n      throw new Error('Unable to construct a wordlist without a languagecode')\n    }\n    this.languageCode = languageCode\n    this.items = {}\n    worditems.forEach(item => {\n      this.addWordItem(item)\n    })\n  }\n\n  get size () {\n    return Object.keys(this.items).length\n  }\n\n  /**\n   * get the items of the list\n   */\n  get values () {\n    return Object.values(this.items)\n  }\n\n  /**\n   * checks to see if the list is empty\n   *\n   * @returns {boolean}\n   */\n  get isEmpty () {\n    return Object.values(this.items).length === 0\n  }\n\n  addWordItem (item) {\n    if (item.languageCode !== this.languageCode) {\n      throw new Error(`Language Code mismatch ${item.languageCode} !=== ${this.languageCode}`)\n    }\n    const existingItem = this.getWordItem(item.targetWord, false)\n    if (existingItem) {\n      item.merge(existingItem)\n    }\n    const key = this._makeItemKey(this.languageCode, item.targetWord)\n    this.items[key] = item\n  }\n\n  /**\n   * delete an individual word item from the list\n   *\n   * @param {string} targetWord the word to delete\n   * @returns {WordItem} the deleted item\n   */\n  deleteWordItem (targetWord) {\n    const key = this._makeItemKey(this.languageCode, targetWord)\n    const toDelete = this.items[key]\n    if (toDelete) {\n      delete this.items[key]\n    }\n    return toDelete\n  }\n\n  /**\n   * delete all items from a list\n   */\n  removeAllWordItems () {\n    this.items = {}\n  }\n\n  /**\n   * get an item from a list\n   *\n   * @param targetWord the word to get\n   * @param {boolean} create true to create the item if it doesn't exist\n   * @param eventWordItemUpdated\n   * @returns {WordItem} the retrieved item\n   */\n  getWordItem (targetWord, create = true, eventWordItemUpdated = null) {\n    const key = this._makeItemKey(this.languageCode, targetWord)\n    if (create && !this.items[key]) {\n      const wordItem = new WordItem({ targetWord: targetWord, languageCode: this.languageCode })\n      if (eventWordItemUpdated) {\n        eventWordItemUpdated.pub({ dataObj: wordItem, params: { segment: 'common' } })\n      }\n      this.items[key] = wordItem\n    }\n    return this.items[key]\n  }\n\n  /**\n   * make a key for a word item\n   *\n   * @param {string} languageCode\n   * @param {string} targetWord\n   */\n  _makeItemKey (languageCode, targetWord) {\n    return `${languageCode}:${targetWord.toLowerCase()}`\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_uuid_v4__;"],"sourceRoot":""}