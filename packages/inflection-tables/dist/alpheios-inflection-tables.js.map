{"version":3,"sources":["webpack://alpheios-inflection-tables/webpack/universalModuleDefinition","webpack://alpheios-inflection-tables/./lib/lang/greek/data/adjective/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/adjective/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/article/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/noun/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/noun/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/numeral/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/numeral/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/pronoun/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/greek/data/pronoun/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/adjective/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/adjective/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/comparative/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/comparative/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/gerundive/form_footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/gerundive/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/noun/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/noun/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/participle/form_footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/participle/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/participle/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/pronoun/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/pronoun/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/superlative/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/superlative/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/supine/form_footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/supine/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/supine/suffixes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/verb/footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/verb/form_footnotes.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/verb/forms.csv","webpack://alpheios-inflection-tables/./lib/lang/latin/data/verb/suffixes.csv","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/adjective/rules.csv","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/noun/rules.csv","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/verb-participle/rules.csv","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/verb/footnotes.csv","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/verb/rules.csv","webpack://alpheios-inflection-tables/./index.js","webpack://alpheios-inflection-tables/./lib/extended-greek-data.js","webpack://alpheios-inflection-tables/./lib/extended-language-data.js","webpack://alpheios-inflection-tables/./lib/footnote.js","webpack://alpheios-inflection-tables/./lib/form.js","webpack://alpheios-inflection-tables/./lib/inflection-data.js","webpack://alpheios-inflection-tables/./lib/inflection-list.js","webpack://alpheios-inflection-tables/./lib/inflection-set.js","webpack://alpheios-inflection-tables/./lib/lang/greek/greek-language-dataset.js","webpack://alpheios-inflection-tables/./lib/lang/latin/latin-language-dataset.js","webpack://alpheios-inflection-tables/./lib/language-dataset-factory.js","webpack://alpheios-inflection-tables/./lib/language-dataset.js","webpack://alpheios-inflection-tables/./lib/match-data.js","webpack://alpheios-inflection-tables/./lib/morpheme.js","webpack://alpheios-inflection-tables/./lib/suffix.js","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/greek-paradigm-data.js","webpack://alpheios-inflection-tables/./src/paradigm/data/greek/greek-paradigm-dataset.js","webpack://alpheios-inflection-tables/./src/paradigm/lib/paradigm-inflection-list.js","webpack://alpheios-inflection-tables/./src/paradigm/lib/paradigm-rule.js","webpack://alpheios-inflection-tables/./src/paradigm/lib/paradigm.js","webpack://alpheios-inflection-tables/./src/paradigm/views/greek/adjective/greek-adjective-paradigm-view.js","webpack://alpheios-inflection-tables/./src/paradigm/views/greek/greek-paradigm-view.js","webpack://alpheios-inflection-tables/./src/paradigm/views/greek/noun/greek-noun-paradigm-view.js","webpack://alpheios-inflection-tables/./src/paradigm/views/greek/verb-participle/greek-verb-participle-paradigm-view.js","webpack://alpheios-inflection-tables/./src/paradigm/views/greek/verb/greek-verb-paradigm-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/adjective/greek-adjective-simplified-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/adjective/greek-adjective-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/article/greek-article-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/greek-view-set.js","webpack://alpheios-inflection-tables/./views/lang/greek/greek-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/noun/greek-noun-simplified-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/noun/greek-noun-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/numeral/greek-numeral-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/pronoun/greek-gender-pronoun-interr-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/pronoun/greek-gender-pronoun-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/pronoun/greek-lemma-gender-pronoun-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/pronoun/greek-person-gender-pronoun-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/pronoun/greek-person-pronoun-view.js","webpack://alpheios-inflection-tables/./views/lang/greek/pronoun/greek-pronoun-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/adjective/latin-adjective-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/adjective/latin-comparative-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/adjective/latin-superlative-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/latin-view-set.js","webpack://alpheios-inflection-tables/./views/lang/latin/latin-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/noun/latin-noun-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/noun/latin-supine-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-imperative-irregular-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-imperative-irregular-voice-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-infinitive-irregular-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-infinitive-irregular-voice-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-irregular-base-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-irregular-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-irregular-voice-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-participle-irregular-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/irregular/latin-verb-supine-irregular-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-conjugation-mood-voice-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-conjugation-voice-mood-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-imperative-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-infinitive-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-mood-conjugation-voice-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-mood-voice-conjugation-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-verb-mood-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-verb-participle-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-verb-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-voice-conjugation-mood-view.js","webpack://alpheios-inflection-tables/./views/lang/latin/verb/latin-voice-mood-conjugation-view.js","webpack://alpheios-inflection-tables/./views/lib/cell.js","webpack://alpheios-inflection-tables/./views/lib/column.js","webpack://alpheios-inflection-tables/./views/lib/group-feature-list.js","webpack://alpheios-inflection-tables/./views/lib/group-feature-type.js","webpack://alpheios-inflection-tables/./views/lib/header-cell.js","webpack://alpheios-inflection-tables/./views/lib/node-group.js","webpack://alpheios-inflection-tables/./views/lib/row-title-cell.js","webpack://alpheios-inflection-tables/./views/lib/row.js","webpack://alpheios-inflection-tables/./views/lib/table.js","webpack://alpheios-inflection-tables/./views/lib/view-set-factory.js","webpack://alpheios-inflection-tables/./views/lib/view-set.js","webpack://alpheios-inflection-tables/./views/lib/view.js","webpack://alpheios-inflection-tables/./views/lib/wide-view.js","webpack://alpheios-inflection-tables/external \"alpheios-data-models\"","webpack://alpheios-inflection-tables/external \"papaparse\"","webpack://alpheios-inflection-tables/external \"uuid/v4\"","webpack://alpheios-inflection-tables/webpack/bootstrap","webpack://alpheios-inflection-tables/webpack/runtime/compat get default export","webpack://alpheios-inflection-tables/webpack/runtime/define property getters","webpack://alpheios-inflection-tables/webpack/runtime/hasOwnProperty shorthand","webpack://alpheios-inflection-tables/webpack/runtime/make namespace object","webpack://alpheios-inflection-tables/webpack/startup"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;ACVA,iEAAe,k1DAAk1D,E;;;;;;;;;;;;;;ACAj2D,iEAAe,y9zBAAy9zB,E;;;;;;;;;;;;;;ACAx+zB,iEAAe,65DAA65D,E;;;;;;;;;;;;;;ACA56D,iEAAe,qqHAAqqH,E;;;;;;;;;;;;;;ACAprH,iEAAe,w3/BAAw3/B,E;;;;;;;;;;;;;;ACAv4/B,iEAAe,kbAAkb,E;;;;;;;;;;;;;;ACAjc,iEAAe,2qFAA2qF,E;;;;;;;;;;;;;;ACA1rF,iEAAe,yTAAyT,E;;;;;;;;;;;;;;ACAxU,iEAAe,y36BAAy36B,E;;;;;;;;;;;;;;ACAx46B,iEAAe,wiCAAwiC,4CAA4C,0OAA0O,4CAA4C,E;;;;;;;;;;;;;;ACAz3C,iEAAe,8hKAA8hK,E;;;;;;;;;;;;;;ACA7iK,iEAAe,+hBAA+hB,E;;;;;;;;;;;;;;ACA9iB,iEAAe,2uCAA2uC,E;;;;;;;;;;;;;;ACA1vC,iEAAe,onCAAonC,E;;;;;;;;;;;;;;ACAnoC,iEAAe,qXAAqX,E;;;;;;;;;;;;;;ACApY,iEAAe,qNAAqN,i1BAAi1B,E;;;;;;;;;;;;;;ACArjC,iEAAe,wqSAAwqS,E;;;;;;;;;;;;;;ACAvrS,iEAAe,gtCAAgtC,E;;;;;;;;;;;;;;ACA/tC,iEAAe,uyFAAuyF,E;;;;;;;;;;;;;;ACAtzF,iEAAe,07DAA07D,E;;;;;;;;;;;;;;ACAz8D,iEAAe,shBAAshB,E;;;;;;;;;;;;;;ACAriB,iEAAe,wgFAAwgF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,iFAAiF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,kFAAkF,cAAc,sFAAsF,cAAc,qFAAqF,cAAc,oFAAoF,cAAc,kFAAkF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,mFAAmF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,iFAAiF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,iFAAiF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,yEAAyE,cAAc,qFAAqF,cAAc,oFAAoF,cAAc,kFAAkF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,yEAAyE,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,iFAAiF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,yEAAyE,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,iFAAiF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,yEAAyE,cAAc,qFAAqF,cAAc,oFAAoF,cAAc,kFAAkF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,yEAAyE,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,iFAAiF,cAAc,sFAAsF,cAAc,mFAAmF,cAAc,yEAAyE,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,gFAAgF,cAAc,oFAAoF,cAAc,kFAAkF,cAAc,iFAAiF,cAAc,oFAAoF,cAAc,oFAAoF,cAAc,qEAAqE,cAAc,oFAAoF,cAAc,uEAAuE,cAAc,kFAAkF,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,qEAAqE,cAAc,mFAAmF,cAAc,uEAAuE,cAAc,iFAAiF,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,gFAAgF,cAAc,oFAAoF,cAAc,kFAAkF,cAAc,uEAAuE,cAAc,oFAAoF,cAAc,oFAAoF,cAAc,qEAAqE,cAAc,oFAAoF,cAAc,uEAAuE,cAAc,iEAAiE,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,qEAAqE,cAAc,mFAAmF,cAAc,uEAAuE,cAAc,uEAAuE,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,gFAAgF,cAAc,oFAAoF,cAAc,kFAAkF,cAAc,uEAAuE,cAAc,oFAAoF,cAAc,oFAAoF,cAAc,qEAAqE,cAAc,oFAAoF,cAAc,uEAAuE,cAAc,uEAAuE,cAAc,mFAAmF,cAAc,oFAAoF,cAAc,qEAAqE,cAAc,mFAAmF,cAAc,uEAAuE,cAAc,+EAA+E,wGAAwG,sGAAsG,oGAAoG,yGAAyG,sGAAsG,sGAAsG,wGAAwG,uGAAuG,qGAAqG,yGAAyG,sGAAsG,sGAAsG,yGAAyG,sGAAsG,oGAAoG,yGAAyG,sGAAsG,uGAAuG,wGAAwG,sGAAsG,oGAAoG,yGAAyG,sGAAsG,yFAAyF,wGAAwG,uGAAuG,qGAAqG,yGAAyG,sGAAsG,yFAAyF,wGAAwG,sGAAsG,oGAAoG,yGAAyG,sGAAsG,yFAAyF,sGAAsG,uGAAuG,mGAAmG,uGAAuG,qGAAqG,oGAAoG,uGAAuG,uGAAuG,qFAAqF,uGAAuG,uFAAuF,qGAAqG,sGAAsG,uGAAuG,qFAAqF,sGAAsG,uFAAuF,oGAAoG,sGAAsG,uGAAuG,mGAAmG,uGAAuG,qGAAqG,uFAAuF,uGAAuG,uGAAuG,qFAAqF,uGAAuG,uFAAuF,iFAAiF,sGAAsG,uGAAuG,qFAAqF,sGAAsG,uFAAuF,6yQAA6yQ,gBAAgB,gBAAgB,gBAAgB,wEAAwE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,wEAAwE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,wEAAwE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,wEAAwE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,wEAAwE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,wEAAwE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,kEAAkE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,kEAAkE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,kEAAkE,gBAAgB,gBAAgB,gBAAgB,sEAAsE,gBAAgB,gBAAgB,gBAAgB,oEAAoE,gBAAgB,gBAAgB,gBAAgB,ytMAAytM,E;;;;;;;;;;;;;;ACAn9rC,iEAAe,moBAAmoB,E;;;;;;;;;;;;;;ACAlpB,iEAAe,qvEAAqvE,E;;;;;;;;;;;;;;ACApwE,iEAAe,onCAAonC,E;;;;;;;;;;;;;;ACAnoC,iEAAe,gtBAAgtB,E;;;;;;;;;;;;;;ACA/tB,iEAAe,2DAA2D,E;;;;;;;;;;;;;;ACA1E,iEAAe,slCAAslC,E;;;;;;;;;;;;;;ACArmC,iEAAe,wwCAAwwC,E;;;;;;;;;;;;;;ACAvxC,iEAAe,mjoJAAmjoJ,E;;;;;;;;;;;;;;ACAlkoJ,iEAAe,8y1CAA8y1C,E;;;;;;;;;;;;;;ACA7z1C,iEAAe,mvBAAmvB,E;;;;;;;;;;;;;;ACAlwB,iEAAe,i6EAAi6E,E;;;;;;;;;;;;;;ACAh7E,iEAAe,ytHAAytH,E;;;;;;;;;;;;;;ACAxuH,iEAAe,+SAA+S,E;;;;;;;;;;;;;;ACA9T,iEAAe,uhKAAuhK,E;;;;;;;;;;;;;;;;;;;;;;;ACAj/J;AACiB;AACD;AACA;AACT;;AAEiC;;;;;;;;;;;;;;;;;;ACNhD;AACc;;AAE5C,gCAAgC,4DAAoB;AACnE;AACA;AACA,iBAAiB,kEAA0B;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oEAAkB;AACxB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxBe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,qEAAqE,iBAAiB;AACtF;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;ACpB8C;;AAE/B;AACf;AACA;AACA;AACA,SAAS,oEAAkB;AAC3B;;AAEA;AACA;AACA;AACA,SAAS,oEAAkB,eAAe,oEAAkB;AAC5D,sEAAsE,oEAAkB;AACxF;AACA;;;;;;;;;;;;;;;;ACfoC;;AAErB,mBAAmB,iDAAQ;AAC1C;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3E8C;;AAE/B;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,yBAAyB;AACtC,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAsB,IAAI;AACxD;AACA,iCAAiC,wEAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClG6C;AACI;;AAEjD;AACA,+CAA+C,wCAAwC;AACvF;AACA;AACe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,uDAAuD;AACpE,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,uDAAuD;AACpE,aAAa,aAAa;AAC1B,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,oEAAkB,gDAAgD,oCAAoC,SAAS,2BAA2B;AAChJ,2BAA2B,2BAA2B,SAAS,kBAAkB;AACjF;AACA;;AAEA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA,oCAAoC,wDAAc;AAClD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AAC0E;;AAEpB;AACE;AACrB;AACJ;;AAEqC;AACE;;AAEQ;AACE;;AAEZ;;AAEA;AACQ;;AAER;AACQ;;AAE5E;;AAEA;AACA;AACA;AACA,yDAAyD;;AAExB;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;;AAEe,mCAAmC,6DAAe;AACjE;AACA;;AAEA;AACA,0BAA0B,wEAAsB,MAAM,yDAAO,CAAC,wEAAsB;AACpF,0BAA0B,wEAAsB,MAAM,yDAAO,CAAC,wEAAsB;AACpF,0BAA0B,oEAAkB,MAAM,yDAAO,CAAC,oEAAkB;AAC5E,0BAA0B,uEAAqB,MAAM,yDAAO,CAAC,uEAAqB;;AAElF;AACA,qDAAqD;AACrD,8BAA8B,iEAAe;AAC7C;;AAEA;AACA,0BAA0B,sEAAoB;AAC9C,gEAAgE,0EAAwB,EAAE,yEAAuB;AACjH,uEAAuE,0EAAwB,EAAE,yEAAuB,EAAE,uEAAqB;AAC/I,0BAA0B,qEAAmB;AAC7C,8BAA8B,gFAA8B;AAC5D;;AAEA;AACA,WAAW,sEAAoB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,sEAAoB;AAClD,8BAA8B,uEAAqB;AACnD,8BAA8B,0EAAwB;AACtD,8BAA8B,sEAAoB;AAClD,8BAA8B,oEAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAsB;AAClE;AACA;;AAEA,kCAAkC,6DAAiB;AACnD;AACA;AACA,SAAS,6EAA2B;AACpC;;AAEA,iDAAiD,mDAAM;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA,8BAA8B,sEAAoB;AAClD,8BAA8B,uEAAqB;AACnD,8BAA8B,sEAAoB;AAClD,8BAA8B,oEAAkB;AAChD;AACA;AACA;;AAEA,kCAAkC,6DAAiB;AACnD;AACA;AACA,SAAS,6EAA2B;AACpC;;AAEA,iDAAiD,iDAAI;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA,8BAA8B,wEAAsB;AACpD;;AAEA;AACA,4CAA4C,oEAAkB;;AAE9D,sEAAsE;AACtE;;AAEA,2BAA2B,qCAAqC,sEAAoB;AACpF,4BAA4B,qCAAqC,uEAAqB;AACtF,2BAA2B,qCAAqC,sEAAoB;AACpF,yBAAyB,qCAAqC,oEAAkB;;AAEhF;;AAEA;AACA;AACA;AACA,4CAA4C,wEAAsB;AAClE;AACA;;AAEA,kCAAkC,6DAAiB;AACnD;AACA;AACA,SAAS,6EAA2B;AACpC;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP,iD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AACA;;AAEA,kEAAkE,uEAA8B;AAChG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,WAAW;AACxB,aAAa,8BAA8B;AAC3C,aAAa,yBAAyB;AACtC,eAAe,4CAA4C;AAC3D;AACA;AACA;AACA,uEAAuE,uEAA8B;AACrG;AACA;AACA,gIAAgI;AAChI;AACA,OAAO,8EAA8E;AACrF;AACA;AACA;AACA;AACA,kEAAkE,wEAAsB;AACxF;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,qBAAqB,oEAAkB,YAAY,qEAAmB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,6CAAI;;AAE/F;AACA,QAAQ,oEAAkB,kDAAkD,gBAAgB;AAC5F;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,MAAM;AACnB,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oEAAkB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,oEAAkB;;AAEhD;AACA;AACA,MAAM,oEAAkB,qEAAqE,aAAa;AAC1G;AACA;;AAEA;AACA,8BAA8B,yDAAO,CAAC,oEAAkB;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,KAAK,OAAO,GAAG,aAAa,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oEAAkB;AACvD,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,aAAa,OAAO;AACpB,cAAc,cAAc;AAC5B;AACA;AACA,4BAA4B,uDAAa;;AAEzC;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,oEAAkB,qEAAqE,UAAU;AACzG;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,+CAAM;AACtC,4CAA4C,+CAAM;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,6CAAI;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,qBAAqB,wDAAc;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,6CAAI;AACtC,uCAAuC,6CAAI,uDAAuD,qBAAqB;AACvH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA,0CAA0C;AAC1C,iDAAiD;AACjD;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,mDAAS;AACnC;AACA,gGAAgG,oBAAoB;AACpH;AACA;AACA,wFAAwF,yEAAgC;AACxH;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oFAAoF,yEAAgC;AACpH;;AAEA;AACA,0FAA0F,yEAAgC;AAC1H;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1kBA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,iBAAiB,eAAe,eAAe,eAAe,eAAe,qBAAqB,qBAAqB;AAC7J,4BAA4B,qBAAqB;AACjD;AACA;;;;;;;;;;;;;;;;;;;;;;AC1BsD;AACL;AACb;AACuB;AAC/B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAM;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,OAAO,iBAAiB,OAAO;AACpC;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe,wDAAc;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,wEAAsB;AACzC,aAAa,wEAAsB;AACnC,wCAAwC,wEAAsB;AAC9D,eAAe,wEAAsB;AACrC;AACA;;AAEA;AACA,qBAAqB,2DAAoB;AACzC;;AAEA;AACA,6DAA6D;AAC7D,wCAAwC,uEAA+B;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;;AAEA,aAAa,wEAAsB;AACnC,YAAY,wEAAsB,SAAS,wEAAsB;AACjE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,yBAAyB;AACtC,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,yBAAyB;AACtC;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;;AAEA,oFAAoF;AACpF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,QAAQ,oEAAkB,4BAA4B,eAAe;AACrE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB,uCAAuC,4DAA4D;;AAEnG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,OAAO;AACpB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,sBAAsB,UAAU,WAAW,QAAQ,QAAQ;AAC/E;AACA,mBAAmB,QAAQ,IAAI,YAAY;AAC3C;AACA,qBAAqB,kBAAkB,WAAW;AAClD;AACA;AACA;;;;;;;;;;;;;;;;ACnXoC;;AAErB,qBAAqB,iDAAQ;AAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHgD;AACC;;AAEjD;AAC2E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC3E;AACuE;AACQ;;AAE/E;AACsF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACtF;AAC4F;;AAE5F;AACkF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEpF;AACuE;;AAEvE;AAC2F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE3F;AACiF;;AAElE;AACf;AACA,WAAW,sEAAoB;AAC/B;;AAEA;AACA,yBAAyB,qEAAmB;AAC5C;AACA,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,8EAAU;AAC5E,0BAA0B,8DAAQ,gCAAgC,+EAAU;AAC5E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,4BAA4B,8DAAQ,gCAAgC,gFAAW;AAC/E,4BAA4B,8DAAQ,gCAAgC,gFAAW;AAC/E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,4BAA4B,8DAAQ,gCAAgC,gFAAW;AAC/E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,+EAAU;AAC7E;AACA;;AAEA;AACA,WAAW,yEAAoB;AAC/B;;AAEA;AACA,WAAW,6EAAwB;AACnC;;AAEA;AACA,yBAAyB,gFAA8B;AACvD;AACA,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E,2BAA2B,8DAAQ,gCAAgC,0FAAU;AAC7E;AACA;;AAEA;AACA,WAAW,oFAA8B;AACzC;;AAEA;AACA,yBAAyB,qEAAmB;AAC5C;AACA,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,0BAA0B,8DAAQ,gCAAgC,mFAAa;AAC/E,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF,2BAA2B,8DAAQ,gCAAgC,oFAAc;AACjF;AACA;;AAEA;AACA,WAAW,yEAAoB;AAC/B;;AAEA;AACA,yBAAyB,0EAAwB;AACjD;AACA,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,6FAAY;AAC7E,yBAAyB,8DAAQ,gCAAgC,8FAAY;AAC7E;AACA;;AAEA;AACA,WAAW,+EAAyB;AACpC;AACA,C;;;;;;;;;;;;;;;;;;;;;;ACpQmG;AAClD;AAC2B;;AAEzB;;AAElB;AACqB;;AAEvC,mCAAmC,6DAAe;AACjE;AACA;;AAEA;AACA,0BAA0B,wEAAsB,MAAM,yDAAO,CAAC,wEAAsB;AACpF,0BAA0B,uEAAqB,MAAM,yDAAO,CAAC,uEAAqB;;AAElF;AACA,qDAAqD;AACrD,8BAA8B,iEAAe;AAC7C;;AAEA,0BAA0B,qEAAmB;AAC7C,8BAA8B,gFAA8B;AAC5D;;AAEA;AACA,WAAW,gEAAc;AACzB;;AAEA;AACA,WAAW,sEAAoB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;;AAEA,6BAA6B,qCAAqC,wEAAsB;AACxF,0BAA0B,qCAAqC,qEAAmB;AAClF,yBAAyB,qCAAqC,oEAAkB;AAChF,0BAA0B,qCAAqC,qEAAmB;AAClF,4BAA4B,qCAAqC,uEAAqB;;AAEtF;AACA;AACA,oBAAoB,uDAAK;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP,QAAQ,oEAAkB,6CAA6C,GAAG;AAC1E;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;;AAEA,6BAA6B,qCAAqC,wEAAsB;AACxF,+BAA+B,qCAAqC,0EAAwB;AAC5F,2BAA2B,qCAAqC,sEAAoB;AACpF,4BAA4B,qCAAqC,uEAAqB;;AAEtF;AACA;AACA,oBAAoB,uDAAK;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP,QAAQ,oEAAkB,6CAA6C,GAAG;AAC1E;AACA;AACA,8CAA8C;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B,mGAAoC;AACnE,yCAAyC,6GAA8C;AACvF;;AAEA,+CAA+C,oEAAkB,gBAAgB,qEAAmB;AACpG;AACA;AACA,MAAM,sDAAe,CAAC,kGAAmC,GAAG,uBAAuB;;AAEnF;AACA,oCAAoC,8DAAQ,EAAE,sDAAe,CAAC,sGAAuC,GAAG,uBAAuB;AAC/H;;AAEA;AACA,+BAA+B,mGAAoC;AACnE,yCAAyC,6GAA8C;AACvF;;AAEA,+CAA+C,oEAAkB,gBAAgB,gFAA8B;AAC/G;AACA;AACA,MAAM,sDAAe,CAAC,4GAA6C,GAAG,uBAAuB;;AAE7F;AACA;;AAEA;AACA,+BAA+B,mGAAoC;;AAEnE,+CAA+C,oEAAkB,gBAAgB,qEAAmB;AACpG;AACA;AACA,MAAM,sDAAe,CAAC,kGAAmC,GAAG,uBAAuB;;AAEnF;AACA;;AAEA;AACA,oCAAoC,wGAAyC;;AAE7E,+CAA+C,oEAAkB,gBAAgB,0EAAwB;AACzG;AACA;AACA,MAAM,sDAAe,CAAC,uGAAwC,GAAG,uBAAuB;;AAExF;AACA;;AAEA;AACA;AACA,2CAA2C,2DAAa;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,yDAAO,CAAC,oEAAkB;AACxD;AACA;;AAEA;AACA,kCAAkC,oEAAkB;AACpD;AACA;AACA,yFAAyF,8DAAQ;AACjG;AACA;AACA;;AAEA;;AAEA,4BAA4B,2DAAa;AACzC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD,8DAAQ;AAC7D;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA,2CAA2C,8DAAQ;AACnD;AACA,C;;;;;;;;;;;;;;;AC/PoD;;AAErC,qCAAqC,4DAAc;AAClE;AACA;AACA;AACA,aAAa,wBAAwB;AACrC,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3Ee;AACf;AACA,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrC4B;AAC0B;AACI;AACqB;;AAEhE;AACf;AACA,cAAc,8CAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA,sBAAsB;AACtB,iCAAiC,mCAAmC,UAAU;AAC9E;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK,OAAO,cAAc,SAAS;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gEAAgE;AACpH,oDAAoD,kEAAkE;AACtH,kCAAkC,yDAAO;AACzC;AACA;AACA;AACA,oBAAoB,oEAAkB;AACtC,iBAAiB,oEAAkB,QAAQ,yDAAO,CAAC,oEAAkB;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe,8EAAsB;AACrC;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB,aAAa,MAAM;AACnB;AACA;AACA;AACA,wBAAwB,mEAAY;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK,OAAO,cAAc,SAAS,WAAW;AAC3D;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,aAAa;AACb,cAAc,oEAAkB,YAAY,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,KAAK,OAAO,eAAe,SAAS;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvJgD;AAC6B;;AAE9D,yCAAyC,iFAAiB;AACzE;AACA;AACA;;AAEA;AACA,YAAY,0EAAwB;AACpC;;AAEA;;;;;;;;;;;;;;;;;;;;;ACZyD;AACR;AACZ;AACkB;;AAEL;;AAElD;AACA;AACA;AACA;AACe,gCAAgC,oEAAS;AACxD;AACA,aAAa,SAAS;AACtB,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc,KAAK,OAAO,eAAe,SAAS;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,gFAAc;AACzB;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,qEAAmB;AAC/B;;AAEA;AACA,WAAW,8DAAQ;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA,cAAc,aAAa,EAAE,mEAAgB,yCAAyC;AACtF;;AAEA;AACA,cAAc,aAAa,GAAG,uCAAuC;AACrE;;AAEA;AACA,WAAW,mEAAgB,IAAI,aAAa,GAAG,uCAAuC;AACtF;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B;AACA,cAAc;AACd;AACA;AACA;AACA,8BAA8B,oEAAkB,OAAO,oEAAkB;AACzE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2EAA2E,8DAAQ;AACnF;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtPgD;AAC6B;;AAE9D,oCAAoC,iFAAiB;AACpE;AACA;AACA;;AAEA;AACA,YAAY,qEAAmB;AAC/B;;AAEA;;;;;;;;;;;;;;;;;;ACZgD;AAC6B;;AAE9D,8CAA8C,iFAAiB;AAC9E;AACA;AACA;;AAEA;AACA,YAAY,gFAA8B;AAC1C;AACA;;;;;;;;;;;;;;;;;;ACXgD;AAC6B;;AAE9D,oCAAoC,iFAAiB;AACpE;AACA;AACA;;AAEA;AACA,YAAY,qEAAmB;AAC/B;AACA;;;;;;;;;;;;;;;;;;;ACXwD;AACrB;AAC8C;;AAElE,2CAA2C,qFAAkB;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AA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ACA,QAAQ,oEAAkB;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,MAAM,kFAAgC;AACtC,MAAM,4EAA0B;AAChC,MAAM,2EAAyB;AAC/B,MAAM,4EAA0B;AAChC,MAAM,0EAAwB;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,yEAAuB;AACjD,0BAA0B,0EAAwB;AAClD,0BAA0B,yFAA+C;AACzE,0BAA0B,uEAAqB;AAC/C,0BAA0B,gGAAsD;AAChF;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnEyD;AACH;AACW;AAC3B;;AAEtC;AACA;AACA;AACe,0CAA0C,2DAAgB;AACzE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAgB,CAAC,oEAAkB;AAClE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,YAAY,+EAA6B;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,yEAAuB;AACjD,0BAA0B,0EAAwB;AAClD,0BAA0B,uEAAqB;AAC/C,0BAA0B,wGAA6D;AACvF;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5DgD;AACM;AAChB;;AAEtC;AACA;AACA;AACe,2CAA2C,2DAAgB;AAC1E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,YAAY,2EAAyB;AACrC;;AAEA;AACA;AACA,0BAA0B,yEAAuB;AACjD,0BAA0B,0EAAwB;AAClD,0BAA0B,uEAAqB;AAC/C;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjDgD;AACM;AAChB;;AAEtC;AACA;AACA;AACe,qCAAqC,2DAAgB;AACpE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,YAAY,0EAAwB;AACpC;AACA;;;;;;;;;;;;;;;;;;;;;ACzCqH;AACtF;AACM;AAC0B;AACR;;AAEvD;AACA;AACA;AACA;AACe,+BAA+B,oEAAS;AACvD;AACA,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,yDAAO,CAAC,oEAAkB,uDAAuD,+EAAoB;AACrI,+BAA+B,qEAAgB,CAAC,oEAAkB;AAClE;;AAEA;AACA;;AAEA;AACA,YAAY,wEAAsB;AAClC;;AAEA;AACA,WAAW,iDAAI;AACf;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc,wEAAsB;AACpC,4BAA4B,wEAAsB;AAClD;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA,cAAc,aAAa,EAAE,mEAAgB,oCAAoC;AACjF;;AAEA;AACA,cAAc,aAAa,GAAG,kCAAkC;AAChE;;AAEA;AACA,WAAW,mEAAgB,IAAI,aAAa,GAAG,kCAAkC;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B;AACA,cAAc;AACd;AACA;AACA,kEAAkE,oEAAkB,OAAO,oEAAkB;AAC7G;AACA;;AAEA;AACA;AACA,4CAA4C,wEAAsB;AAClE;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;A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CA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,uEAAqB;AACjC;;AAEA;AACA,WAAW,mDAAM;AACjB;;AAEA;AACA,qBAAqB,+CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1CyD;AACM;AACyD;AACpF;;AAErB,+CAA+C,8GAAgC;AAC9F;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,qEAAgB,CAAC,oEAAkB;AAC7C,2CAA2C,oEAAkB,gBAAgB,2EAAyB;;AAEtG;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC,iBAAiB,oEAAkB,YAAY,2EAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oEAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oEAAkB,kBAAkB,2EAAyB;AACtF;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9EyD;AAC+D;AACpF;;AAErB,oDAAoD,8GAAgC;AACnG;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC,iBAAiB,oEAAkB,YAAY,2EAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oEAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oEAAkB,kBAAkB,2EAAyB;AACtF;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1EyD;AACM;AACyD;AACpF;;AAErB,+CAA+C,8GAAgC;AAC9F;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,qEAAgB,CAAC,oEAAkB;AAC7C,2CAA2C,oEAAkB,gBAAgB,2EAAyB;;AAEtG;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA,yCAAyC,oEAAkB;AAC3D;AACA,wDAAwD,qEAAmB;AAC3E,mEAAmE,qEAAmB;AACtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC,iBAAiB,oEAAkB,YAAY,2EAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oEAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oEAAkB,kBAAkB,2EAAyB;AACtF;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/EyD;AAC+D;AACpF;;AAErB,oDAAoD,8GAAgC;AACnG;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA,yCAAyC,qEAAmB;AAC5D;AACA,wDAAwD,qEAAmB;AAC3E,mEAAmE,qEAAmB;AACtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oEAAkB;AACnC,iBAAiB,oEAAkB,YAAY,2EAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,oEAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oEAAkB,kBAAkB,2EAAyB;AACtF;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5EyD;AACF;AACxB;AACK;;AAEpC;AACA;AACA;AACA;AACA;AACe,yCAAyC,oEAAS;AACjE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,qEAAmB;AAC/B;;AAEA;AACA,WAAW,iDAAI;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,oEAAkB;AACxC,iBAAiB,oEAAkB;AACnC;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA,aAAa,oEAAkB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,oEAAkB;AACvF;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAkB,UAAU,oEAAkB;;AAE9D;AACA;AACA;AACA,kIAAkI,+BAA+B;AACjK;AACA;AACA,yCAAyC;AACzC,iBAAiB,oEAAkB,SAAS,oEAAkB;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnI2G;;AAE3G;AACA;AACA;AACe,+CAA+C,uGAA0B;AACxF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClC8C;AAC6D;AACW;AACP;AACQ;AACA;AACnF;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACe,qCAAqC,uGAA0B;AAC9E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oDAAoD,eAAe,IAAI,yBAAyB;AAChG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,iBAAiB,oEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,iBAAiB,6GAA+B,EAAE,6GAAgC,EAAE,6GAAgC;AACpH;AACA,iBAAiB,yGAA4B;AAC7C;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC9E8C;AAC6D;AACW;AACP;AACmB;AACA;AAC9F;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACe,0CAA0C,uGAA0B;AACnF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,eAAe,IAAI,yBAAyB;AAChG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,qDAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,iBAAiB,oEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,iBAAiB,6GAA+B,EAAE,mHAAqC,EAAE,mHAAqC;AAC9H;AACA,iBAAiB,yGAA4B;AAC7C;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC7EyD;AAC+D;AACtB;AACW;AACE;AACnD;AACxB;;AAErB,+CAA+C,8GAAgC;AAC9F;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,kEAAgB,CAAC,qEAAmB;AACnE,yCAAyC,qEAAmB,gBAAgB,yEAAuB;AACnG,yCAAyC,qEAAmB,gBAAgB,yEAAuB;AACnG,yCAAyC,qEAAmB,gBAAgB,wEAAsB;AAClG;;AAEA;AACA;AACA;AACA;;AAEA;AACA;A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,yCAAyC,sEAAoB;AAC7D;AACA,sEAAsE,qEAAmB;AACzF;AACA;;;;;;;;;;;;;;;AC7Ce;AACf;AACA;AACA,aAAa,WAAW;AACxB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChGmE;AACb;;AAEtD;AACA;AACA;AACe,+BAA+B,6DAAW;AACzD;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,kCAAkC;;AAEjE;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA,sBAAsB,yDAAO;AAC7B;AACA,+BAA+B,2DAAgB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,oEAAkB,qEAAqE,SAAS;AACtG;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnP2D;AACT;AACX;AACO;AACL;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,aAAa,UAAU;AACvB,aAAa,yBAAyB;AACtC;AACA;AACA,4EAA4E,2EAA8B;AAC1G;AACA;AACA;AACA;AACA,mBAAmB,gFAAc;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA,MAAM,uFAAqC;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,uFAAqC;AAC7D;AACA;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,aAAa;AAC5B;AACA;AACA,eAAe,uDAAY;AAC3B;;AAEA;AACA,eAAe,oDAAU;AACzB;AACA;;;;;;;;;;;;;;;ACtLA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,OAAO;AACpB,aAAa,iBAAiB;AAC9B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,OAAO;AACpB,aAAa,iBAAiB;AAC9B;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7GwC;AACZ;AACI;AACN;AAC4B;AACf;;AAEvC;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,mBAAmB;AAChC;AACA;AACA,wBAAwB,2DAAgB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,OAAO;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,UAAU;AACvB,aAAa,OAAO;AACpB,eAAe,UAAU;AACzB;AACA;AACA,oBAAoB,mDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,2DAAc;AAC9C;;AAEA,yBAAyB,6CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,2BAA2B,+CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB,eAAe,MAAM;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA,sCAAsC,4CAAG;AACzC;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,sCAAsC,4CAAG;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD,2BAA2B,4CAAG;AAC9B;AACA,+BAA+B,kCAAkC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrYA;AACqF;AAClD;AACuB;AACA;;AAE3C;AACf;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,oEAAkB,4CAA4C,EAAE;AACtE;AACA,oBAAoB,iDAAO;AAC3B;;AAEA;AACA;;AAEA;AACA,WAAW,uFAAoB;AAC/B;;AAEA;AACA;AACA,WAAW,sEAAoB;AAC/B,eAAe,kEAAY;AAC3B,WAAW,sEAAoB;AAC/B,eAAe,kEAAY;AAC3B;AACA,eAAe,iDAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnDmE;AACO;;AAE1E;AACA;AACA;AACA;AACe;AACf;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,iFAAkC;;AAExD;AACA;AACA;AACA,qBAAqB,uFAAqC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,cAAc,oEAAkB,wCAAwC,EAAE;AAC1E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjHmG;AAC5C;AACrB;AACH;AACH;;AAE5B;AACA;AACA;AACe;AACf;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,eAAe,8CAAM;;AAErB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,+CAAQ;;AAEhC;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,WAAW,iFAAe;AAC1B;;AAEA;AACA,WAAW,uFAAqC;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,aAAa;AAC1B,cAAc;AACd;AACA;AACA;AACA,2EAA2E,oEAAkB,OAAO,oEAAkB;AACtH;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB,EAAE,eAAe;AAChF;AACA;;AAEA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc;AACd;AACA;AACA,qCAAqC,oEAAkB,OAAO,oEAAkB;AAChF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,YAAY;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,iDAAI;AACpC;AACA;AACA;AACA;AACA,yBAAyB,4DAAU;AACnC,8BAA8B,yDAAO,CAAC,oEAAkB;AACxD,qBAAqB,uFAAqC;AAC1D,qBAAqB,0DAAQ;AAC7B,oBAAoB,0EAAwB;AAC5C;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,qBAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvY2C;;AAE3C;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gEAAwB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,eAAe;AACrnEA,kE;;;;;;;;;;ACAA,uD;;;;;;;;;;ACAA,qD;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"alpheios-inflection-tables.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"alpheios-data-models\"), require(\"uuid/v4\"), require(\"papaparse\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"alpheios-data-models\", \"uuid/v4\", \"papaparse\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"alpheios-data-models\"), require(\"uuid/v4\"), require(\"papaparse\")) : factory(root[\"alpheios-data-models\"], root[\"uuid/v4\"], root[\"papaparse\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function(__WEBPACK_EXTERNAL_MODULE_alpheios_data_models__, __WEBPACK_EXTERNAL_MODULE_uuid_v4__, __WEBPACK_EXTERNAL_MODULE_papaparse__) {\nreturn ","export default \"Index,Text\\r\\n1,\\\"All adjectives said to be of the \\\"\\\"1st Declension\\\"\\\" = α- Declension feminine unless noted otherwise.\\\"\\r\\n2,\\\"All masculines, \\\"\\\"feminines\\\"\\\" and neuters said to be of the \\\"\\\"2nd Declension\\\"\\\" are  o- Declension adjectives unless noted otherwise\\\"\\r\\n3,Irregular Declension\\r\\n4,ε-stem contracts of the α- Declension\\r\\n5,ε-stem contracts of the o- Declension\\r\\n6,\\\"See Smyth 288. There are no truly regular feminine adjectives in this Declension, but some regular \\\"\\\"Adjectives of Two Endings\\\"\\\" and some irregulars.\\\"\\r\\n7,\\\"Same as former, but w/ (ν)\\\"\\r\\n8,\\\"The most common \\\"\\\"endings\\\"\\\" of the nominative case of these \\\"\\\"3rd declension\\\"\\\" adjectives are not really endings at all, but a lengthening of the vowel before the final consonant of the stem (e.g.  \\\"\\\"-ων-\\\"\\\"for the stem ending in  \\\"\\\"-ον-\\\"\\\",  \\\"\\\"-ωρ-\\\"\\\"for the \\\"\\\"ορ-\\\"\\\"stem, and \\\"\\\"-ην-\\\"\\\"for the \\\"\\\"εν-\\\"\\\"stem)\\\"\\r\\n9,Uncontracted form of ες-stem's ε + ending. See Smyth 292 and 292 D\\r\\n10,where -εέ- (the stem's ε and the initial ε of the ending) contract w/o the rest of the ending joining in the contraction. See also 292 D.\\r\\n11,Compound adjectives in -ης not accented on the last syllable show recessive accent (noyt on the ending) in the contracted forms. See Smyth 292 c.\\r\\n12,\\\"Contraction of \\\"\\\"-ο(σ)α\\\"\\\"\\\"\\r\\n13,\\\"Consonant Declension Adjs w/ a separate form for the feminine ...--Smyth 294. In adjs w/ stems ending in ντ- , that \\\"\\\"ντ-\\\"\\\" becomes \\\"\\\"σσ-\\\"\\\" before those endings, w/ \\\"\\\"α\\\"\\\" lengthened to \\\"\\\"η\\\"\\\" in the oblique cases --See Smyth 299.\\\"\\r\\n14,See 292 d.\\r\\n15,See 293 d. Accusative Plurals of Comparatives borrowing the Nominative form\\r\\n16,See Tables in Smyth 290 for uncontracted forms of 1st and 2nd Declensions (in parenthetheses)\\r\\n17,See Smyth 297 for uncontracted stems in υ\\r\\n18,Not used as feminine ending\";","export default \"Ending,Number,Case,Declension,Gender,Type,Primary,Footnote\\r\\nα,dual,accusative,1st,feminine,regular,primary,\\r\\nά,dual,accusative,1st,feminine,regular,,\\r\\nᾶ,dual,accusative,1st,feminine,regular,,4\\r\\nέα,dual,accusative,1st,feminine,irregular,,16\\r\\nαιν,dual,dative,1st,feminine,regular,primary,\\r\\nαῖv,dual,dative,1st,feminine,regular,,\\r\\nέαιν,dual,dative,1st,feminine,irregular,,16\\r\\nαιν,dual,genitive,1st,feminine,regular,primary,\\r\\nαῖv,dual,genitive,1st,feminine,regular,,\\r\\nέαιν,dual,genitive,1st,feminine,irregular,,16\\r\\nα,dual,nominative,1st,feminine,regular,primary,\\r\\nά,dual,nominative,1st,feminine,regular,,\\r\\nᾶ,dual,nominative,1st,feminine,regular,,4\\r\\nέα,dual,nominative,1st,feminine,irregular,,16\\r\\nα,dual,vocative,1st,feminine,regular,primary,\\r\\nά,dual,vocative,1st,feminine,regular,,\\r\\nᾶ,dual,vocative,1st,feminine,regular,,4\\r\\nέα,dual,vocative,1st,feminine,irregular,,16\\r\\nας,plural,accusative,1st,feminine,regular,primary,\\r\\nάς,plural,accusative,1st,feminine,regular,,\\r\\nᾶς,plural,accusative,1st,feminine,regular,,4\\r\\nέας,plural,accusative,1st,feminine,irregular,,16\\r\\nαις,plural,dative,1st,feminine,regular,primary,\\r\\nαῖς,plural,dative,1st,feminine,regular,,4\\r\\nέαις,plural,dative,1st,feminine,irregular,,16\\r\\nων,plural,genitive,1st,feminine,regular,,\\r\\nῶν,plural,genitive,1st,feminine,regular,primary,\\r\\nέων,plural,genitive,1st,feminine,irregular,,16\\r\\nάων,plural,genitive,1st,feminine,irregular,,\\r\\nαι,plural,nominative,1st,feminine,regular,primary,\\r\\nαί,plural,nominative,1st,feminine,regular,,\\r\\nαῖ,plural,nominative,1st,feminine,regular,,4\\r\\nεαι,plural,nominative,1st,feminine,irregular,,16\\r\\nέαι,plural,nominative,1st,feminine,irregular,,16\\r\\nαι,plural,vocative,1st,feminine,regular,primary,\\r\\nαί,plural,vocative,1st,feminine,regular,,\\r\\nαῖ,plural,vocative,1st,feminine,regular,,4\\r\\nεαι,plural,vocative,1st,feminine,irregular,,16\\r\\nέαι,plural,vocative,1st,feminine,irregular,,16\\r\\nαν,singular,accusative,1st,feminine,regular,primary,\\r\\nην,singular,accusative,1st,feminine,regular,,\\r\\nάν,singular,accusative,1st,feminine,regular,,\\r\\nήν,singular,accusative,1st,feminine,regular,,\\r\\nᾶν,singular,accusative,1st,feminine,regular,,4\\r\\nῆν,singular,accusative,1st,feminine,regular,,4\\r\\nέαν,singular,accusative,1st,feminine,irregular,,16\\r\\nᾳ,singular,dative,1st,feminine,regular,primary,\\r\\nῃ,singular,dative,1st,feminine,regular,,\\r\\nᾷ,singular,dative,1st,feminine,regular,,\\r\\nῇ,singular,dative,1st,feminine,regular,,\\r\\nέᾳ,singular,dative,1st,feminine,irregular,,16\\r\\nας,singular,genitive,1st,feminine,regular,primary,\\r\\nης,singular,genitive,1st,feminine,regular,,\\r\\nᾶς,singular,genitive,1st,feminine,regular,,\\r\\nῆς,singular,genitive,1st,feminine,regular,,\\r\\nέας,singular,genitive,1st,feminine,irregular,,16\\r\\nα,singular,nominative,1st,feminine,regular,primary,\\r\\nη,singular,nominative,1st,feminine,regular,,\\r\\nά,singular,nominative,1st,feminine,regular,,\\r\\nή,singular,nominative,1st,feminine,regular,,\\r\\nῆ,singular,nominative,1st,feminine,regular,,4\\r\\nᾶ,singular,nominative,1st,feminine,regular,,4\\r\\nέα,singular,nominative,1st,feminine,irregular,,16\\r\\nα,singular,vocative,1st,feminine,regular,primary,\\r\\nη,singular,vocative,1st,feminine,regular,,\\r\\nά,singular,vocative,1st,feminine,regular,,\\r\\nή,singular,vocative,1st,feminine,regular,,\\r\\nᾶ,singular,vocative,1st,feminine,regular,,4\\r\\nῆ,singular,vocative,1st,feminine,regular,,4\\r\\nέα,singular,vocative,1st,feminine,irregular,,16\\r\\nω,dual,accusative,2nd,masculine feminine,regular,primary,\\r\\nώ,dual,accusative,2nd,masculine feminine,regular,,\\r\\nέω,dual,accusative,2nd,masculine feminine,irregular,,16\\r\\nόω,dual,accusative,2nd,masculine feminine,irregular,,16\\r\\nοιν,dual,dative,2nd,masculine feminine,regular,primary,\\r\\nοῖν,dual,dative,2nd,masculine feminine,regular,,\\r\\nῳν,dual,dative,2nd,masculine feminine,regular,,\\r\\nέοιν,dual,dative,2nd,masculine feminine,irregular,,16\\r\\nόοιν,dual,dative,2nd,masculine feminine,irregular,,16\\r\\nοιν,dual,genitive,2nd,masculine feminine,regular,primary,\\r\\nοῖν,dual,genitive,2nd,masculine feminine,regular,,\\r\\nῳν,dual,genitive,2nd,masculine feminine,regular,,\\r\\nέοιν,dual,genitive,2nd,masculine feminine,irregular,,16\\r\\nόοιν,dual,genitive,2nd,masculine feminine,irregular,,16\\r\\nω,dual,nominative,2nd,masculine feminine,regular,primary,\\r\\nώ,dual,nominative,2nd,masculine feminine,regular,,\\r\\nέω,dual,nominative,2nd,masculine feminine,irregular,,16\\r\\nόω,dual,nominative,2nd,masculine feminine,irregular,,16\\r\\nω,dual,vocative,2nd,masculine feminine,regular,primary,\\r\\nώ,dual,vocative,2nd,masculine feminine,regular,,\\r\\nέω,dual,vocative,2nd,masculine feminine,irregular,,16\\r\\nόω,dual,vocative,2nd,masculine feminine,irregular,,16\\r\\nω,dual,accusative,2nd,neuter,regular,primary,\\r\\nώ,dual,accusative,2nd,neuter,regular,,\\r\\nέω,dual,accusative,2nd,neuter,irregular,,16\\r\\nοιν,dual,dative,2nd,neuter,regular,primary,\\r\\nοῖν,dual,dative,2nd,neuter,regular,,\\r\\nῳν,dual,dative,2nd,neuter,regular,,\\r\\nέοιν,dual,dative,2nd,neuter,irregular,,16\\r\\nόοιν,dual,dative,2nd,neuter,irregular,,16\\r\\nοιν,dual,genitive,2nd,neuter,regular,primary,\\r\\nοῖν,dual,genitive,2nd,neuter,regular,,\\r\\nῳν,dual,genitive,2nd,neuter,regular,,\\r\\nέοιν,dual,genitive,2nd,neuter,irregular,,16\\r\\nόοιν,dual,genitive,2nd,neuter,irregular,,16\\r\\nω,dual,nominative,2nd,neuter,regular,primary,\\r\\nώ,dual,nominative,2nd,neuter,regular,,\\r\\nέω,dual,nominative,2nd,neuter,irregular,,16\\r\\nόω,dual,nominative,2nd,neuter,irregular,,16\\r\\nω,dual,vocative,2nd,neuter,regular,primary,\\r\\nώ,dual,vocative,2nd,neuter,regular,,\\r\\nέω,dual,vocative,2nd,neuter,irregular,,16\\r\\nόω,dual,vocative,2nd,neuter,irregular,,16\\r\\nους,plural,accusative,2nd,masculine feminine,regular,primary,\\r\\nούς,plural,accusative,2nd,masculine feminine,regular,,\\r\\nοῦς,plural,accusative,2nd,masculine feminine,regular,,5\\r\\nέους,plural,accusative,2nd,masculine feminine,irregular,,16\\r\\nόους,plural,accusative,2nd,masculine feminine,irregular,,16\\r\\nοις,plural,dative,2nd,masculine feminine,regular,primary,\\r\\nοῖς,plural,dative,2nd,masculine feminine,regular,,\\r\\nῳς,plural,dative,2nd,masculine feminine,regular,,\\r\\nέοις,plural,dative,2nd,masculine feminine,irregular,,16\\r\\nόοις,plural,dative,2nd,masculine feminine,irregular,,16\\r\\nοῖσι,plural,dative,2nd,masculine feminine,irregular,,\\r\\nοῖσιν,plural,dative,2nd,masculine feminine,irregular,,\\r\\nῃσιν,plural,dative,2nd,masculine feminine,irregular,,\\r\\nων,plural,genitive,2nd,masculine feminine,regular,primary,\\r\\nῶν,plural,genitive,2nd,masculine feminine,regular,,\\r\\nέων,plural,genitive,2nd,masculine feminine,irregular,,16\\r\\nόων,plural,genitive,2nd,masculine feminine,irregular,,16\\r\\nοι,plural,nominative,2nd,masculine feminine,regular,primary,\\r\\nοί,plural,nominative,2nd,masculine feminine,regular,,\\r\\nοῖ,plural,nominative,2nd,masculine feminine,regular,,5\\r\\nῳ,plural,nominative,2nd,masculine feminine,regular,,\\r\\nεοι,plural,nominative,2nd,masculine feminine,irregular,,16\\r\\nόοι,plural,nominative,2nd,masculine feminine,irregular,,16\\r\\nοι,plural,vocative,2nd,masculine feminine,regular,primary,\\r\\nοί,plural,vocative,2nd,masculine feminine,regular,,\\r\\nοῖ,plural,vocative,2nd,masculine feminine,regular,,5\\r\\nῳ,plural,vocative,2nd,masculine feminine,regular,,\\r\\nεοι,plural,vocative,2nd,masculine feminine,irregular,,16\\r\\nόοι,plural,vocative,2nd,masculine feminine,irregular,,16\\r\\nα,plural,accusative,2nd,neuter,regular,primary,\\r\\nά,plural,accusative,2nd,neuter,regular,,\\r\\nᾶ,plural,accusative,2nd,neuter,regular,,5\\r\\nεα,plural,accusative,2nd,neuter,irregular,,16\\r\\nόα,plural,accusative,2nd,neuter,irregular,,16\\r\\nοις,plural,dative,2nd,neuter,regular,primary,\\r\\nοῖς,plural,dative,2nd,neuter,regular,,\\r\\nῳς,plural,dative,2nd,neuter,regular,,\\r\\nέοις,plural,dative,2nd,neuter,irregular,,16\\r\\nόοις,plural,dative,2nd,neuter,irregular,,16\\r\\nοῖσι,plural,dative,2nd,neuter,irregular,,\\r\\nοῖσιν,plural,dative,2nd,neuter,irregular,,\\r\\nων,plural,genitive,2nd,neuter,regular,primary,\\r\\nῶν,plural,genitive,2nd,neuter,regular,,\\r\\nέων,plural,genitive,2nd,neuter,irregular,,16\\r\\nόων,plural,genitive,2nd,neuter,irregular,,16\\r\\nα,plural,nominative,2nd,neuter,regular,primary,\\r\\nά,plural,nominative,2nd,neuter,regular,,\\r\\nᾶ,plural,nominative,2nd,neuter,regular,,5\\r\\nεα,plural,nominative,2nd,neuter,irregular,,16\\r\\nόα,plural,nominative,2nd,neuter,irregular,,16\\r\\nα,plural,vocative,2nd,neuter,regular,primary,\\r\\nά,plural,vocative,2nd,neuter,regular,,\\r\\nᾶ,plural,vocative,2nd,neuter,regular,,5\\r\\nεα,plural,vocative,2nd,neuter,irregular,,16\\r\\nόα,plural,vocative,2nd,neuter,irregular,,16\\r\\nον,singular,accusative,2nd,masculine feminine,regular,primary,\\r\\nόν,singular,accusative,2nd,masculine feminine,regular,,\\r\\nοῦν,singular,accusative,2nd,masculine feminine,regular,,5\\r\\nων,singular,accusative,2nd,masculine feminine,regular,,\\r\\nεον,singular,accusative,2nd,masculine feminine,irregular,,16\\r\\nόον,singular,accusative,2nd,masculine feminine,irregular,,16\\r\\nῳ,singular,dative,2nd,masculine feminine,regular,primary,\\r\\nῷ,singular,dative,2nd,masculine feminine,regular,,\\r\\nέῳ,singular,dative,2nd,masculine feminine,irregular,,16\\r\\nόῳ,singular,dative,2nd,masculine feminine,irregular,,16\\r\\nου,singular,genitive,2nd,masculine feminine,regular,primary,\\r\\nοῦ,singular,genitive,2nd,masculine feminine,regular,,\\r\\nω,singular,genitive,2nd,masculine feminine,regular,,\\r\\nέου,singular,genitive,2nd,masculine feminine,irregular,,16\\r\\nόου,singular,genitive,2nd,masculine feminine,irregular,,16\\r\\nοῖο,singular,genitive,2nd,masculine feminine,irregular,,\\r\\nος,singular,nominative,2nd,masculine feminine,regular,primary,2\\r\\nός,singular,nominative,2nd,masculine feminine,regular,,\\r\\nοῦς,singular,nominative,2nd,masculine feminine,regular,,5\\r\\nως,singular,nominative,2nd,masculine feminine,regular,,\\r\\nεος,singular,nominative,2nd,masculine feminine,irregular,,16\\r\\nόος,singular,nominative,2nd,masculine feminine,irregular,,16\\r\\nε,singular,vocative,2nd,masculine feminine,regular,primary,\\r\\nέ,singular,vocative,2nd,masculine feminine,regular,,\\r\\nοῦς,singular,vocative,2nd,masculine feminine,regular,,5\\r\\nως,singular,vocative,2nd,masculine feminine,regular,,\\r\\nεος,singular,vocative,2nd,masculine feminine,irregular,,16\\r\\nόος,singular,vocative,2nd,masculine feminine,irregular,,16\\r\\nον,singular,accusative,2nd,neuter,regular,primary,\\r\\nόν,singular,accusative,2nd,neuter,regular,,\\r\\nων,singular,accusative,2nd,neuter,regular,,\\r\\nοῦν,singular,accusative,2nd,neuter,regular,,5\\r\\nεον,singular,accusative,2nd,neuter,irregular,,16\\r\\nόον,singular,accusative,2nd,neuter,irregular,,16\\r\\nῳ,singular,dative,2nd,neuter,regular,primary,\\r\\nῷ,singular,dative,2nd,neuter,regular,,\\r\\nέῳ,singular,dative,2nd,neuter,irregular,,16\\r\\nόῳ,singular,dative,2nd,neuter,irregular,,16\\r\\nου,singular,genitive,2nd,neuter,regular,primary,\\r\\nοῦ,singular,genitive,2nd,neuter,regular,,\\r\\nω,singular,genitive,2nd,neuter,regular,,\\r\\nέου,singular,genitive,2nd,neuter,irregular,,16\\r\\nόου,singular,genitive,2nd,neuter,irregular,,16\\r\\nοῖο,singular,genitive,2nd,neuter,irregular,,\\r\\nον,singular,nominative,2nd,neuter,regular,primary,2\\r\\nόν,singular,nominative,2nd,neuter,regular,,\\r\\nων,singular,nominative,2nd,neuter,regular,,\\r\\nοῦν,singular,nominative,2nd,neuter,regular,,5\\r\\nεον,singular,nominative,2nd,neuter,irregular,,16\\r\\nόον,singular,nominative,2nd,neuter,irregular,,16\\r\\nον,singular,vocative,2nd,neuter,regular,primary,\\r\\nόν,singular,vocative,2nd,neuter,regular,,\\r\\nων,singular,vocative,2nd,neuter,regular,,\\r\\nοῦν,singular,vocative,2nd,neuter,regular,,5\\r\\nεον,singular,vocative,2nd,neuter,irregular,,16\\r\\nόον,singular,vocative,2nd,neuter,irregular,,16\\r\\nα,dual,accusative,3rd,feminine,regular,primary,\\r\\nαινα,dual,accusative,3rd,feminine,regular,,\\r\\nέινα,dual,accusative,3rd,feminine,regular,,\\r\\nέσσα,dual,accusative,3rd,feminine,regular,,\\r\\nαιν,dual,dative,3rd,feminine,regular,primary,\\r\\nαιναιν,dual,dative,3rd,feminine,regular,,\\r\\nέιναιν,dual,dative,3rd,feminine,regular,,\\r\\nέσσαιν,dual,dative,3rd,feminine,regular,,\\r\\nαιν,dual,genitive,3rd,feminine,regular,primary,\\r\\nαιναιν,dual,genitive,3rd,feminine,regular,,\\r\\nέιναιν,dual,genitive,3rd,feminine,regular,,\\r\\nέσσαιν,dual,genitive,3rd,feminine,regular,,\\r\\nα,dual,nominative,3rd,feminine,regular,primary,\\r\\nαινα,dual,nominative,3rd,feminine,regular,,\\r\\nέινα,dual,nominative,3rd,feminine,regular,,\\r\\nέσσα,dual,nominative,3rd,feminine,regular,,\\r\\nα,dual,vocative,3rd,feminine,regular,primary,\\r\\nαινα,dual,vocative,3rd,feminine,regular,,\\r\\nέινα,dual,vocative,3rd,feminine,regular,,\\r\\nέσσα,dual,vocative,3rd,feminine,regular,,\\r\\nε,dual,accusative,3rd,masculine feminine,regular,primary,\\r\\nεῖ,dual,accusative,3rd,masculine feminine,regular,,\\r\\nέε,dual,accusative,3rd,masculine feminine,irregular,,9\\r\\nανε,dual,accusative,3rd,masculine feminine,regular,,18\\r\\nενε,dual,accusative,3rd,masculine feminine,regular,,18\\r\\nεντε,dual,accusative,3rd,masculine feminine,regular,,18\\r\\nοιν,dual,dative,3rd,masculine feminine,regular,primary,\\r\\nοῖν,dual,dative,3rd,masculine feminine,regular,,\\r\\nέοιν,dual,dative,3rd,masculine feminine,irregular,,9\\r\\nάνοιν,dual,dative,3rd,masculine feminine,regular,,18\\r\\nένοιν,dual,dative,3rd,masculine feminine,regular,,18\\r\\nέντοιν,dual,dative,3rd,masculine feminine,regular,,18\\r\\nοιν,dual,genitive,3rd,masculine feminine,regular,primary,\\r\\nοῖν,dual,genitive,3rd,masculine feminine,regular,,\\r\\nέοιν,dual,genitive,3rd,masculine feminine,irregular,,9\\r\\nάνοιν,dual,genitive,3rd,masculine feminine,regular,,18\\r\\nένοιν,dual,genitive,3rd,masculine feminine,regular,,18\\r\\nέντοιν,dual,genitive,3rd,masculine feminine,regular,,18\\r\\nε,dual,nominative,3rd,masculine feminine,regular,primary,\\r\\nεῖ,dual,nominative,3rd,masculine feminine,regular,,\\r\\nέε,dual,nominative,3rd,masculine feminine,irregular,,9\\r\\nανε,dual,nominative,3rd,masculine feminine,regular,,18\\r\\nενε,dual,nominative,3rd,masculine feminine,regular,,18\\r\\nεντε,dual,nominative,3rd,masculine feminine,regular,,18\\r\\nε,dual,vocative,3rd,masculine feminine,regular,primary,\\r\\nεῖ,dual,vocative,3rd,masculine feminine,regular,,\\r\\nέε,dual,vocative,3rd,masculine feminine,irregular,,9\\r\\nε,dual,accusative,3rd,neuter,regular,primary,\\r\\nεῖ,dual,accusative,3rd,neuter,regular,,\\r\\nέε,dual,accusative,3rd,neuter,regular,,\\r\\nανε,dual,accusative,3rd,neuter,regular,,\\r\\nενε,dual,accusative,3rd,neuter,regular,,\\r\\nεντε,dual,accusative,3rd,neuter,regular,,\\r\\nοιν,dual,dative,3rd,neuter,regular,primary,\\r\\nοῖν,dual,dative,3rd,neuter,regular,,\\r\\nέοιν,dual,dative,3rd,neuter,regular,,\\r\\nάνοιν,dual,dative,3rd,neuter,regular,,\\r\\nένοιν,dual,dative,3rd,neuter,regular,,\\r\\nέντοιν,dual,dative,3rd,neuter,regular,,\\r\\nοιν,dual,genitive,3rd,neuter,regular,primary,\\r\\nοῖν,dual,genitive,3rd,neuter,regular,,\\r\\nέοιν,dual,genitive,3rd,neuter,regular,,\\r\\nάνοιν,dual,genitive,3rd,neuter,regular,,\\r\\nένοιν,dual,genitive,3rd,neuter,regular,,\\r\\nέντοιν,dual,genitive,3rd,neuter,regular,,\\r\\nε,dual,nominative,3rd,neuter,regular,primary,\\r\\nεῖ,dual,nominative,3rd,neuter,regular,,\\r\\nέε,dual,nominative,3rd,neuter,regular,,\\r\\nανε,dual,nominative,3rd,neuter,regular,,\\r\\nενε,dual,nominative,3rd,neuter,regular,,\\r\\nεντε,dual,nominative,3rd,neuter,regular,,\\r\\nανε,dual,vocative,3rd,neuter,regular,,18\\r\\nενε,dual,vocative,3rd,neuter,regular,,18\\r\\nεντε,dual,vocative,3rd,neuter,regular,,18\\r\\nε,dual,vocative,3rd,neuter,regular,primary,\\r\\nεῖ,dual,vocative,3rd,neuter,regular,,\\r\\nέε,dual,vocative,3rd,neuter,regular,,\\r\\nανε,dual,vocative,3rd,neuter,regular,,\\r\\nενε,dual,vocative,3rd,neuter,regular,,\\r\\nεντε,dual,vocative,3rd,neuter,regular,,\\r\\nας,plural,accusative,3rd,feminine,regular,primary,\\r\\nείας,plural,accusative,3rd,feminine,regular,,\\r\\nέα,plural,accusative,3rd,feminine,irregular,,9\\r\\nαίνας,plural,accusative,3rd,feminine,regular,,\\r\\nείνας,plural,accusative,3rd,feminine,regular,,\\r\\nέσσας,plural,accusative,3rd,feminine,regular,,\\r\\nαις,plural,dative,3rd,feminine,regular,primary,\\r\\nείαις,plural,dative,3rd,feminine,regular,,\\r\\nαίναις,plural,dative,3rd,feminine,regular,,\\r\\nείναις,plural,dative,3rd,feminine,regular,,\\r\\nέσσαις,plural,dative,3rd,feminine,regular,,\\r\\nῶν,plural,genitive,3rd,feminine,regular,primary,\\r\\nων,plural,genitive,3rd,feminine,regular,,\\r\\nειῶν,plural,genitive,3rd,feminine,regular,,\\r\\nαινῶν,plural,genitive,3rd,feminine,regular,,\\r\\nεινῶν,plural,genitive,3rd,feminine,regular,,\\r\\nεσσῶν,plural,genitive,3rd,feminine,regular,,\\r\\nάων,plural,genitive,3rd,feminine,irregular,,\\r\\nαι,plural,nominative,3rd,feminine,regular,primary,\\r\\nεῖαι,plural,nominative,3rd,feminine,regular,,\\r\\nέα,plural,nominative,3rd,feminine,irregular,,9\\r\\nαιναι,plural,nominative,3rd,feminine,regular,,\\r\\nειναι,plural,nominative,3rd,feminine,regular,,\\r\\nεσσαι,plural,nominative,3rd,feminine,regular,,\\r\\nαι,plural,vocative,3rd,feminine,regular,primary,\\r\\nεῖαι,plural,vocative,3rd,feminine,regular,,\\r\\nέα,plural,vocative,3rd,feminine,irregular,,9\\r\\nαιναι,plural,vocative,3rd,feminine,regular,,\\r\\nειναι,plural,vocative,3rd,feminine,regular,,\\r\\nεσσαι,plural,vocative,3rd,feminine,regular,,\\r\\nες,plural,accusative,3rd,masculine feminine,irregular,,15\\r\\nας,plural,accusative,3rd,masculine feminine,regular,primary,\\r\\nεῖς,plural,accusative,3rd,masculine feminine,regular,,\\r\\nους,plural,accusative,3rd,masculine feminine,regular,,\\r\\nεας,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nῖας,plural,accusative,3rd,masculine feminine,irregular,,10\\r\\nανας,plural,accusative,3rd,masculine feminine,regular,,18\\r\\nενας,plural,accusative,3rd,masculine feminine,regular,,18\\r\\nεντας,plural,accusative,3rd,masculine feminine,regular,,18\\r\\nσι,plural,dative,3rd,masculine feminine,regular,primary,\\r\\nσιν,plural,dative,3rd,masculine feminine,regular,primary,7\\r\\nέσι,plural,dative,3rd,masculine feminine,irregular,,\\r\\nέσιν,plural,dative,3rd,masculine feminine,regular,,7\\r\\nέσσι,plural,dative,3rd,masculine feminine,irregular,,9 14\\r\\nέσσιν,plural,dative,3rd,masculine feminine,irregular,,7 9\\r\\nασι,plural,dative,3rd,masculine feminine,regular,,18\\r\\nασιν,plural,dative,3rd,masculine feminine,regular,,7 18\\r\\nεσι,plural,dative,3rd,masculine feminine,regular,,18\\r\\nεσιν,plural,dative,3rd,masculine feminine,regular,,7 18\\r\\nων,plural,genitive,3rd,masculine feminine,regular,primary,\\r\\nῶν,plural,genitive,3rd,masculine feminine,regular,,\\r\\nέων,plural,genitive,3rd,masculine feminine,regular,,\\r\\nάνων,plural,genitive,3rd,masculine feminine,regular,,18\\r\\nένων,plural,genitive,3rd,masculine feminine,regular,,18\\r\\nέντων,plural,genitive,3rd,masculine feminine,regular,,18\\r\\nάων,plural,genitive,3rd,masculine feminine,irregular,,\\r\\nες,plural,nominative,3rd,masculine feminine,regular,primary,12\\r\\nεῖς,plural,nominative,3rd,masculine feminine,regular,,\\r\\nους,plural,nominative,3rd,masculine feminine,regular,,\\r\\nέες,plural,nominative,3rd,masculine feminine,irregular,,9 14 17\\r\\nανες,plural,nominative,3rd,masculine feminine,regular,,18\\r\\nενες,plural,nominative,3rd,masculine feminine,regular,,18\\r\\nεντες,plural,nominative,3rd,masculine feminine,regular,,18\\r\\nες,plural,vocative,3rd,masculine feminine,regular,primary,\\r\\nεῖς,plural,vocative,3rd,masculine feminine,regular,,\\r\\nέες,plural,vocative,3rd,masculine feminine,irregular,,9\\r\\nους,plural,vocative,3rd,masculine feminine,regular,,\\r\\nανες,plural,vocative,3rd,masculine feminine,regular,,18\\r\\nενες,plural,vocative,3rd,masculine feminine,regular,,18\\r\\nεντες,plural,vocative,3rd,masculine feminine,regular,,18\\r\\nα,plural,accusative,3rd,neuter,regular,primary,\\r\\nῆ,plural,accusative,3rd,neuter,regular,,\\r\\nέα,plural,accusative,3rd,neuter,regular,,\\r\\nω,plural,accusative,3rd,neuter,regular,,12\\r\\nανα,plural,accusative,3rd,neuter,regular,,\\r\\nενα,plural,accusative,3rd,neuter,regular,,\\r\\nεντα,plural,accusative,3rd,neuter,regular,,\\r\\nσι,plural,dative,3rd,neuter,regular,primary,\\r\\nσιν,plural,dative,3rd,neuter,regular,,7\\r\\nέσι,plural,dative,3rd,neuter,regular,,\\r\\nέσιν,plural,dative,3rd,neuter,regular,,7\\r\\nέσσι,plural,dative,3rd,neuter,irregular,,9\\r\\nέσσιν,plural,dative,3rd,neuter,irregular,,7 9\\r\\nασι,plural,dative,3rd,neuter,regular,,\\r\\nασιν,plural,dative,3rd,neuter,regular,,7\\r\\nεσι,plural,dative,3rd,neuter,regular,,\\r\\nεσιν,plural,dative,3rd,neuter,regular,,7\\r\\nων,plural,genitive,3rd,neuter,regular,primary,\\r\\nῶν,plural,genitive,3rd,neuter,regular,,\\r\\nέων,plural,genitive,3rd,neuter,regular,,\\r\\nάνων,plural,genitive,3rd,neuter,regular,,\\r\\nένων,plural,genitive,3rd,neuter,regular,,\\r\\nέντων,plural,genitive,3rd,neuter,regular,,\\r\\nάων,plural,genitive,3rd,neuter,irregular,,\\r\\nα,plural,nominative,3rd,neuter,regular,primary,\\r\\nῆ,plural,nominative,3rd,neuter,regular,,\\r\\nέα,plural,nominative,3rd,neuter,irregular,,\\r\\nω,plural,nominative,3rd,neuter,regular,,12\\r\\nανα,plural,nominative,3rd,neuter,regular,,\\r\\nενα,plural,nominative,3rd,neuter,regular,,\\r\\nεντα,plural,nominative,3rd,neuter,regular,,\\r\\nα,plural,vocative,3rd,neuter,regular,primary,\\r\\nῆ,plural,vocative,3rd,neuter,regular,,\\r\\nέα,plural,vocative,3rd,neuter,regular,,\\r\\nω,plural,vocative,3rd,neuter,regular,,12\\r\\nανα,plural,vocative,3rd,neuter,regular,,\\r\\nενα,plural,vocative,3rd,neuter,regular,,\\r\\nεντα,plural,vocative,3rd,neuter,regular,,\\r\\nαν,singular,accusative,3rd,feminine,regular,primary,\\r\\nεῖαν,singular,accusative,3rd,feminine,regular,,\\r\\nαιναν,singular,accusative,3rd,feminine,regular,,\\r\\nειναν,singular,accusative,3rd,feminine,regular,,\\r\\nεσσαν,singular,accusative,3rd,feminine,regular,,\\r\\nᾳ,singular,dative,3rd,feminine,regular,primary,\\r\\nῃ,singular,dative,3rd,feminine,regular,,\\r\\nείᾳ,singular,dative,3rd,feminine,regular,,\\r\\nαινῃ,singular,dative,3rd,feminine,regular,,\\r\\nεινῃ,singular,dative,3rd,feminine,regular,,\\r\\nεσσῃ,singular,dative,3rd,feminine,regular,,\\r\\nας,singular,genitive,3rd,feminine,regular,primary,\\r\\nης,singular,genitive,3rd,feminine,regular,,\\r\\nείας,singular,genitive,3rd,feminine,regular,,\\r\\nαινης,singular,genitive,3rd,feminine,regular,,\\r\\nεινης,singular,genitive,3rd,feminine,regular,,\\r\\nεσσης,singular,genitive,3rd,feminine,regular,,\\r\\nα,singular,nominative,3rd,feminine,regular,primary,\\r\\nεῖα,singular,nominative,3rd,feminine,regular,,\\r\\nαινα,singular,nominative,3rd,feminine,regular,,\\r\\nεινα,singular,nominative,3rd,feminine,regular,,\\r\\nεσσα,singular,nominative,3rd,feminine,regular,,\\r\\nα,singular,vocative,3rd,feminine,regular,primary,\\r\\nεῖα,singular,vocative,3rd,feminine,regular,,\\r\\nαινα,singular,vocative,3rd,feminine,regular,,\\r\\nεινα,singular,vocative,3rd,feminine,regular,,\\r\\nεσσα,singular,vocative,3rd,feminine,regular,,\\r\\nύν,singular,accusative,3rd,masculine feminine,regular,primary,\\r\\nα,singular,accusative,3rd,masculine feminine,regular,primary,\\r\\nῆ,singular,accusative,3rd,masculine feminine,regular,,\\r\\nν,singular,accusative,3rd,masculine feminine,regular,,\\r\\nω,singular,accusative,3rd,masculine feminine,regular,,12\\r\\nέα,singular,accusative,3rd,masculine feminine,irregular,,9\\r\\nᾶ,singular,accusative,3rd,masculine feminine,regular,,14\\r\\nανα,singular,accusative,3rd,masculine feminine,regular,,18\\r\\nενα,singular,accusative,3rd,masculine feminine,regular,,18\\r\\nεντα,singular,accusative,3rd,masculine feminine,regular,,18\\r\\nι,singular,dative,3rd,masculine feminine,regular,primary,\\r\\nεῖ,singular,dative,3rd,masculine feminine,regular,primary,\\r\\nέι,singular,dative,3rd,masculine feminine,irregular,,9\\r\\nεϊ,singular,dative,3rd,masculine feminine,irregular,,9\\r\\nέϊ,singular,dative,3rd,masculine feminine,irregular,,17 18\\r\\nει,singular,dative,3rd,masculine feminine,irregular,,9\\r\\nί,singular,dative,3rd,masculine feminine,regular,,\\r\\nανι,singular,dative,3rd,masculine feminine,regular,,\\r\\nενι,singular,dative,3rd,masculine feminine,regular,,\\r\\nεντι,singular,dative,3rd,masculine feminine,regular,,\\r\\nος,singular,genitive,3rd,masculine feminine,regular,primary,\\r\\nός,singular,genitive,3rd,masculine feminine,regular,,\\r\\nοῦς,singular,genitive,3rd,masculine feminine,regular,,\\r\\nέος,singular,genitive,3rd,masculine feminine,irregular,,9\\r\\nῖος,singular,genitive,3rd,masculine feminine,irregular,,9\\r\\nανος,singular,genitive,3rd,masculine feminine,regular,,18\\r\\nενος,singular,genitive,3rd,masculine feminine,regular,,18\\r\\nεντος,singular,genitive,3rd,masculine feminine,regular,,18\\r\\nύς,singular,nominative,3rd,masculine feminine,regular,primary,\\r\\n_,singular,nominative,3rd,masculine feminine,regular,primary,8\\r\\nς,singular,nominative,3rd,masculine feminine,regular,,8\\r\\nής,singular,nominative,3rd,masculine feminine,regular,,\\r\\nης,singular,nominative,3rd,masculine feminine,regular,,11\\r\\nας,singular,nominative,3rd,masculine feminine,regular,,18\\r\\nην,singular,nominative,3rd,masculine feminine,regular,,18\\r\\nεις,singular,nominative,3rd,masculine feminine,regular,,18\\r\\nν,singular,vocative,3rd,masculine feminine,regular,primary,\\r\\nύ,singular,vocative,3rd,masculine feminine,regular,primary,\\r\\n_,singular,vocative,3rd,masculine feminine,regular,primary,8\\r\\nές,singular,vocative,3rd,masculine feminine,regular,,\\r\\nί,singular,vocative,3rd,masculine feminine,regular,,\\r\\nαν,singular,vocative,3rd,masculine feminine,regular,,18\\r\\nεν,singular,vocative,3rd,masculine feminine,regular,,18\\r\\n_,singular,accusative,3rd,neuter,regular,primary,\\r\\nύ,singular,accusative,3rd,neuter,regular,primary,\\r\\nές,singular,accusative,3rd,neuter,regular,,\\r\\nαν,singular,accusative,3rd,neuter,regular,,\\r\\nεν,singular,accusative,3rd,neuter,regular,,\\r\\nεῖ,singular,dative,3rd,neuter,regular,,\\r\\nι,singular,dative,3rd,neuter,regular,primary,\\r\\nί,singular,dative,3rd,neuter,regular,,\\r\\nεϊ,singular,dative,3rd,neuter,irregular,,\\r\\nέϊ,singular,dative,3rd,neuter,irregular,,17\\r\\nανι,singular,dative,3rd,neuter,regular,,\\r\\nενι,singular,dative,3rd,neuter,regular,,\\r\\nεντι,singular,dative,3rd,neuter,regular,,\\r\\nος,singular,genitive,3rd,neuter,regular,primary,\\r\\nός,singular,genitive,3rd,neuter,regular,,\\r\\nέος,singular,genitive,3rd,neuter,regular,,\\r\\nοῦς,singular,genitive,3rd,neuter,regular,,\\r\\nανος,singular,genitive,3rd,neuter,regular,,\\r\\nενος,singular,genitive,3rd,neuter,regular,,\\r\\nεντος,singular,genitive,3rd,neuter,regular,,\\r\\n_,singular,nominative,3rd,neuter,regular,primary,8\\r\\nύ,singular,nominative,3rd,neuter,regular,primary,\\r\\nές,singular,nominative,3rd,neuter,regular,,\\r\\nες,singular,nominative,3rd,neuter,regular,,11\\r\\nαν,singular,nominative,3rd,neuter,regular,,\\r\\nεν,singular,nominative,3rd,neuter,regular,,\\r\\n_,singular,vocative,3rd,neuter,regular,primary,\\r\\nύ,singular,vocative,3rd,neuter,regular,primary,\\r\\nές,singular,vocative,3rd,neuter,regular,,\\r\\nαν,singular,vocative,3rd,neuter,regular,,\\r\\nεν,singular,vocative,3rd,neuter,regular,,\";","export default \"Form,Number,Case,Gender,Type,Primary\\r\\nτά,dual,accusative,feminine,regular,primary\\r\\nτώ,dual,accusative,feminine,regular,primary\\r\\nταῖν,dual,dative,feminine,regular,primary\\r\\nτοῖν,dual,dative,feminine,regular,primary\\r\\nταῖν,dual,genitive,feminine,regular,primary\\r\\nτοῖν,dual,genitive,feminine,regular,primary\\r\\nτά,dual,nominative,feminine,regular,primary\\r\\nτώ,dual,nominative,feminine,regular,primary\\r\\nτώ,dual,accusative,masculine,regular,primary\\r\\nτοῖν,dual,dative,masculine,regular,primary\\r\\nτοῖν,dual,genitive,masculine,regular,primary\\r\\nτώ,dual,nominative,masculine,regular,primary\\r\\nτώ,dual,accusative,neuter,regular,primary\\r\\nτοῖν,dual,dative,neuter,regular,primary\\r\\nτοῖν,dual,genitive,neuter,regular,primary\\r\\nτώ,dual,nominative,neuter,regular,primary\\r\\nτάς,plural,accusative,feminine,regular,primary\\r\\nταῖς,plural,dative,feminine,regular,primary\\r\\nτῶν,plural,genitive,feminine,regular,primary\\r\\nαἱ,plural,nominative,feminine,regular,primary\\r\\nτούς,plural,accusative,masculine,regular,primary\\r\\nτοῖς,plural,dative,masculine,regular,primary\\r\\nτῶν,plural,genitive,masculine,regular,primary\\r\\nοἱ,plural,nominative,masculine,regular,primary\\r\\nτά,plural,accusative,neuter,regular,primary\\r\\nτοῖς,plural,dative,neuter,regular,primary\\r\\nτῶν,plural,genitive,neuter,regular,primary\\r\\nτά,plural,nominative,neuter,regular,primary\\r\\nτήν,singular,accusative,feminine,regular,primary\\r\\nτῇ,singular,dative,feminine,regular,primary\\r\\nτῆς,singular,genitive,feminine,regular,primary\\r\\nἡ,singular,nominative,feminine,regular,primary\\r\\nτόν,singular,accusative,masculine,regular,primary\\r\\nτῷ,singular,dative,masculine,regular,primary\\r\\nτοῦ,singular,genitive,masculine,regular,primary\\r\\nὁ,singular,nominative,masculine,regular,primary\\r\\nτό,singular,accusative,neuter,regular,primary\\r\\nτῷ,singular,dative,neuter,regular,primary\\r\\nτοῦ,singular,genitive,neuter,regular,primary\\r\\nτό,singular,nominative,neuter,regular,primary\";","export default \"Index,Text\\r\\n1,See Smyth 217 for Rules of variance within regular endings\\r\\n2,See Smyth 227 for Table of α- and ε- stem feminine 1st declension contracts\\r\\n3,See Smyth 227 for Table of α- and ε- stem masculine 1st declension contracts\\r\\n4,\\\"Previous, with (ν)\\\"\\r\\n5,See Smyth 235 for Table of o- and ε- stem masculine  2nd declension contracts\\r\\n6,See Smyth 235 for Table of o- and ε- stem neuter 2nd declension contracts\\r\\n7,(Attic) contracts of o-stems preceded by a long vowel\\r\\n15,\\\"This is not actually an “ending,” but the last letter of the “pure stem”. See Smyth 248.\\\"\\r\\n16,\\\"See Smyth 264  & Smyth 265 for Table of Sigma (ες,ας,ος) stem contracts\\\"\\r\\n17,See Smyth 268 for Table of  ι and υ - stem contracts\\r\\n18,\\\"See Smyth 275 for Table of  ευ,αυ,and ου - stem contracts\\\"\\r\\n19,See Smyth 279 for stems in οι feminine 3rd declension contracts\\r\\n20,See Smyth 265 for Table of 3rd declension contracts of stems in -εσ- preceded by ε\\r\\n21,See Smyth 258 for Table of stems in τ and ατ neuter 3rd declension contracts\\r\\n22,\\\"On stem ending in ν, ν doubled in gen. Sing Aeolic (e.g. μῆνς,μῆννος...)\\\"\\r\\n23,Also in inscriptions and expressions of swearing\\r\\n24,(Borrowed from 1st decl) Sometimes in proper names whose nominative ends in -ης\\r\\n25,From -ας-stems (properly αι)\\r\\n26,(ε)υς instead of (ε)ος or ους (gen) for (3rd decl) words whose nominative ends in -ος\\r\\n27,In 3rd decl. Only in the words αἰδώς (Attic) and ἠώς (Homer and Ionic)\\r\\n28,Contraction of a stem in οι  and an ι-ending\\r\\n29,Stronger form of Ionic contractions of οι-stems (in the nominative)\\r\\n30,See Smyth 267 for Table of ω - stem contracts (masculine only)\\r\\n31,Nominative plural contraction of  -ειδ+ες  after dropping the δ (used for accusative too). See Smyth 247.a\\r\\n32,\\\"Plurals & duals occur rarely (and w/ 2nd decl endings) for 3rd decl οι-stem nouns. See Smyth 279.D.a,b,c\\\"\\r\\n33,See Smyth 285 for description and examples of Irreg. Decl involving 3rd decl endings\\r\\n34,(Homer)  for Attic  (ῳτ)ι\\r\\n35,(Homer) for Cretan ινς\\r\\n36,Also an irregular ending for other stem(s)\\r\\n37,In inscriptions\\r\\n38,\\\"Plural endings for otherwise dual noun,οσσε (eyes)\\\"\\r\\n39,\\\"“Poetical” (acc for ἔρως). See Smyth 285,11\\\"\\r\\n40,\\\"Poetic for χρωτι,dat. of ὁ χρως\\\"\\r\\n41,No Masculine of this Form\\r\\n42,No Feminine of this Form\\r\\n44,See Smyth 214 D.9 and Smyth 215 regarding dialectic alternate forms of the Dative Plural\\r\\n45,\\\"Surviving in Homer (See Smyth 280) Not truly genitive or dative, but instrumental/locative/ablative, associated with the remaining oblique cases (genitive & dative) only after being lost as cases themselves in Greek\\\"\\r\\n46,See Smyth # 266 for only surviving ος-stem in Attic (fem. singular of αἰδως)\\r\\n47,See Smyth 276 for Substantives in -εύς preceded by a vowel.\\r\\n48,\\\"See Smyth 275 D.1,2,3\\\"\\r\\n49,\\\"See Smyth 285, List of Principal Irregular Substantives\\\"\\r\\n50,\\\"See Smyth 259 for Table of stems in a Liquid (λ,ρ) or a Nasal (ν), and Note #259D for variants including Κρονίων...\\\"\\r\\n51,\\\"See Smyth 257 for Table of stems in a Dental (τ,δ,θ) or a Nasal (ν), and its notes including Ν.κόρυς (Voc. Κόρυ) & ὀδούς\\\"\\r\\n52,See Smyth 248 for general rule re 3rd Declension Masc/Fem Singular Vocative\\r\\n54,See Smyth 250 D\\r\\n55,See Smyth 270.\\r\\n56,\\\"See Smyth 277 for other forms of endings for contracts of ευ,αυ,and ου - stems\\\"\\r\\n57,Nominative form used as Vocative. See Smyth 233.\\r\\n58,\\\"See Smyth 238,b\\\"\\r\\n59,\\\"See Smyth 238,d\\\"\\r\\n60,This (Feminine or Masculine) Form only Masculine when derived from ε- or ο- contraction\\r\\n61,See Smyth Note 264 D.1 regarding Homer's use of Open Forms\\r\\n62,See Smyth Note 269 for alternate i-stem and u-stem endings\\r\\n63,See Smyth 214 D.2\\r\\n64,See Smyth 268 D.1\";","export default \"Ending,Number,Case,Declension,Gender,Type,Primary,Footnote\\r\\nα,dual,accusative,1st,feminine,regular,primary,\\r\\nά,dual,accusative,1st,feminine,regular,,\\r\\nᾶ,dual,accusative,1st,feminine,regular,,2\\r\\nαιν,dual,dative,1st,feminine,regular,primary,\\r\\nαῖν,dual,dative,1st,feminine,regular,,\\r\\nαιιν,dual,dative,1st,feminine,irregular,,\\r\\nαιν,dual,genitive,1st,feminine,regular,primary,\\r\\nαῖν,dual,genitive,1st,feminine,regular,,\\r\\nαιιν,dual,genitive,1st,feminine,irregular,,\\r\\nα,dual,nominative,1st,feminine,regular,primary,\\r\\nά,dual,nominative,1st,feminine,regular,,\\r\\nᾶ,dual,nominative,1st,feminine,regular,,2\\r\\nα,dual,vocative,1st,feminine,regular,primary,\\r\\nά,dual,vocative,1st,feminine,regular,,\\r\\nᾶ,dual,vocative,1st,feminine,regular,,2\\r\\nα,dual,accusative,1st,masculine,regular,primary,\\r\\nά,dual,accusative,1st,masculine,regular,,\\r\\nᾶ,dual,accusative,1st,masculine,regular,,2\\r\\nαιν,dual,dative,1st,masculine,regular,primary,\\r\\nαῖν,dual,dative,1st,masculine,regular,,\\r\\nαιιν,dual,dative,1st,masculine,irregular,,\\r\\nαιν,dual,genitive,1st,masculine,regular,primary,\\r\\nαῖν,dual,genitive,1st,masculine,regular,,\\r\\nαιιν,dual,genitive,1st,masculine,irregular,,\\r\\nα,dual,nominative,1st,masculine,regular,primary,\\r\\nά,dual,nominative,1st,masculine,regular,,\\r\\nᾶ,dual,nominative,1st,masculine,regular,,2\\r\\nα,dual,vocative,1st,masculine,regular,primary,\\r\\nά,dual,vocative,1st,masculine,regular,,\\r\\nᾶ,dual,vocative,1st,masculine,regular,,2\\r\\nας,plural,accusative,1st,feminine,regular,primary,\\r\\nάς,plural,accusative,1st,feminine,regular,,\\r\\nᾶς,plural,accusative,1st,feminine,regular,,2\\r\\nανς,plural,accusative,1st,feminine,irregular,,\\r\\nαις,plural,accusative,1st,feminine,irregular,,\\r\\nαις,plural,dative,1st,feminine,regular,primary,\\r\\nαῖς,plural,dative,1st,feminine,regular,,\\r\\nῃσι,plural,dative,1st,feminine,irregular,,44\\r\\nῃσιν,plural,dative,1st,feminine,irregular,,4 44\\r\\nῃς,plural,dative,1st,feminine,irregular,,44\\r\\nαισι,plural,dative,1st,feminine,irregular,,44\\r\\nαισιν,plural,dative,1st,feminine,irregular,,4 44\\r\\nῶν,plural,genitive,1st,feminine,regular,primary,\\r\\nάων,plural,genitive,1st,feminine,irregular,,\\r\\nέων,plural,genitive,1st,feminine,irregular,,\\r\\nήων,plural,genitive,1st,feminine,irregular,,\\r\\nᾶν,plural,genitive,1st,feminine,irregular,,\\r\\nαι,plural,nominative,1st,feminine,regular,primary,\\r\\nαί,plural,nominative,1st,feminine,regular,,\\r\\nαῖ,plural,nominative,1st,feminine,regular,,2\\r\\nαι,plural,vocative,1st,feminine,regular,primary,\\r\\nαί,plural,vocative,1st,feminine,regular,,\\r\\nαῖ,plural,vocative,1st,feminine,regular,,2\\r\\nας,plural,accusative,1st,masculine,regular,primary,\\r\\nάς,plural,accusative,1st,masculine,regular,,\\r\\nᾶς,plural,accusative,1st,masculine,regular,,3\\r\\nανς,plural,accusative,1st,masculine,irregular,,\\r\\nαις,plural,accusative,1st,masculine,irregular,,\\r\\nαις,plural,dative,1st,masculine,regular,primary,\\r\\nαῖς,plural,dative,1st,masculine,regular,,\\r\\nῃσι,plural,dative,1st,masculine,irregular,,44\\r\\nῃσιν,plural,dative,1st,masculine,irregular,,4 44\\r\\nῃς,plural,dative,1st,masculine,irregular,,44\\r\\nαισι,plural,dative,1st,masculine,irregular,,44\\r\\nαισιν,plural,dative,1st,masculine,irregular,,4 44\\r\\nῶν,plural,genitive,1st,masculine,regular,primary,\\r\\nάων,plural,genitive,1st,masculine,irregular,,\\r\\nέων,plural,genitive,1st,masculine,irregular,,\\r\\nήων,plural,genitive,1st,masculine,irregular,,\\r\\nᾶν,plural,genitive,1st,masculine,irregular,,\\r\\nαι,plural,nominative,1st,masculine,regular,primary,\\r\\nαί,plural,nominative,1st,masculine,regular,,\\r\\nαῖ,plural,nominative,1st,masculine,regular,,3\\r\\nαι,plural,vocative,1st,masculine,regular,primary,\\r\\nαί,plural,vocative,1st,masculine,regular,,\\r\\nαῖ,plural,vocative,1st,masculine,regular,,3\\r\\nαν,singular,accusative,1st,feminine,regular,primary,\\r\\nην,singular,accusative,1st,feminine,regular,primary,\\r\\nήν,singular,accusative,1st,feminine,regular,,\\r\\nᾶν,singular,accusative,1st,feminine,regular,,2\\r\\nῆν,singular,accusative,1st,feminine,regular,,2\\r\\nάν,singular,accusative,1st,feminine,irregular,,63\\r\\nᾳ,singular,dative,1st,feminine,regular,primary,\\r\\nῃ,singular,dative,1st,feminine,regular,primary,\\r\\nῇ,singular,dative,1st,feminine,regular,,2\\r\\nᾷ,singular,dative,1st,feminine,regular,,2\\r\\nηφι,singular,dative,1st,feminine,irregular,,45\\r\\nηφιν,singular,dative,1st,feminine,irregular,,4 45\\r\\nῆφι,singular,dative,1st,feminine,irregular,,45\\r\\nῆφιv,singular,dative,1st,feminine,irregular,,4 45\\r\\nας,singular,genitive,1st,feminine,regular,primary,\\r\\nης,singular,genitive,1st,feminine,regular,primary,\\r\\nῆs,singular,genitive,1st,feminine,regular,,\\r\\nᾶs,singular,genitive,1st,feminine,regular,,2\\r\\nηφι,singular,genitive,1st,feminine,irregular,,45\\r\\nηφιν,singular,genitive,1st,feminine,irregular,,4 45\\r\\nῆφι,singular,genitive,1st,feminine,irregular,,45\\r\\nῆφιv,singular,genitive,1st,feminine,irregular,,4 45\\r\\nα,singular,nominative,1st,feminine,regular,primary,\\r\\nη,singular,nominative,1st,feminine,regular,primary,1\\r\\nή,singular,nominative,1st,feminine,regular,,\\r\\nᾶ,singular,nominative,1st,feminine,regular,,2\\r\\nῆ,singular,nominative,1st,feminine,regular,,2\\r\\nά,singular,nominative,1st,feminine,irregular,,63\\r\\nα,singular,vocative,1st,feminine,regular,primary,\\r\\nη,singular,vocative,1st,feminine,regular,primary,\\r\\nή,singular,vocative,1st,feminine,regular,,\\r\\nᾶ,singular,vocative,1st,feminine,regular,,2\\r\\nῆ,singular,vocative,1st,feminine,regular,,2\\r\\nά,singular,vocative,1st,feminine,irregular,,63\\r\\nαν,singular,accusative,1st,masculine,regular,primary,\\r\\nην,singular,accusative,1st,masculine,regular,primary,3\\r\\nήν,singular,accusative,1st,masculine,regular,,\\r\\nᾶν,singular,accusative,1st,masculine,regular,,3\\r\\nῆν,singular,accusative,1st,masculine,regular,,3\\r\\nεα,singular,accusative,1st,masculine,irregular,,\\r\\nᾳ,singular,dative,1st,masculine,regular,primary,\\r\\nῃ,singular,dative,1st,masculine,regular,primary,\\r\\nῇ,singular,dative,1st,masculine,regular,,\\r\\nᾷ,singular,dative,1st,masculine,regular,,3\\r\\nῆ,singular,dative,1st,masculine,regular,,3\\r\\nηφι,singular,dative,1st,masculine,irregular,,45\\r\\nηφιν,singular,dative,1st,masculine,irregular,,4 45\\r\\nῆφι,singular,dative,1st,masculine,irregular,,45\\r\\nῆφιv,singular,dative,1st,masculine,irregular,,4 45\\r\\nου,singular,genitive,1st,masculine,regular,primary,\\r\\nοῦ,singular,genitive,1st,masculine,regular,,\\r\\nαο,singular,genitive,1st,masculine,irregular,,\\r\\nεω,singular,genitive,1st,masculine,irregular,,\\r\\nηφι,singular,genitive,1st,masculine,irregular,,45\\r\\nηφιν,singular,genitive,1st,masculine,irregular,,4 45\\r\\nῆφι,singular,genitive,1st,masculine,irregular,,45\\r\\nῆφιv,singular,genitive,1st,masculine,irregular,,4 45\\r\\nω,singular,genitive,1st,masculine,irregular,,\\r\\nα,singular,genitive,1st,masculine,irregular,,\\r\\nας,singular,nominative,1st,masculine,regular,primary,\\r\\nης,singular,nominative,1st,masculine,regular,primary,\\r\\nής,singular,nominative,1st,masculine,regular,,\\r\\nᾶs,singular,nominative,1st,masculine,regular,,3\\r\\nῆs,singular,nominative,1st,masculine,regular,,3\\r\\nα,singular,vocative,1st,masculine,regular,primary,\\r\\nη,singular,vocative,1st,masculine,regular,primary,\\r\\nά,singular,vocative,1st,masculine,regular,,\\r\\nᾶ,singular,vocative,1st,masculine,regular,,3\\r\\nῆ,singular,vocative,1st,masculine,regular,,3\\r\\nω,dual,accusative,2nd,masculine feminine,regular,primary,\\r\\nώ,dual,accusative,2nd,masculine feminine,regular,,5\\r\\nοιν,dual,dative,2nd,masculine feminine,regular,primary,\\r\\nοῖν,dual,dative,2nd,masculine feminine,regular,,5\\r\\nοιιν,dual,dative,2nd,masculine feminine,irregular,,\\r\\nῴν,dual,dative,2nd,masculine feminine,irregular,,7\\r\\nοιν,dual,genitive,2nd,masculine feminine,regular,primary,\\r\\nοῖν,dual,genitive,2nd,masculine feminine,regular,,5\\r\\nοιιν,dual,genitive,2nd,masculine feminine,irregular,,\\r\\nῴν,dual,genitive,2nd,masculine feminine,irregular,,7\\r\\nω,dual,nominative,2nd,masculine feminine,regular,primary,60\\r\\nώ,dual,nominative,2nd,masculine feminine,regular,,60\\r\\nω,dual,vocative,2nd,masculine feminine,regular,primary,\\r\\nώ,dual,vocative,2nd,masculine feminine,regular,,5\\r\\nω,dual,accusative,2nd,neuter,regular,primary,\\r\\nώ,dual,accusative,2nd,neuter,regular,,6\\r\\nοιν,dual,dative,2nd,neuter,regular,primary,\\r\\nοῖν,dual,dative,2nd,neuter,regular,,6\\r\\nοιιν,dual,dative,2nd,neuter,irregular,,\\r\\nοιν,dual,genitive,2nd,neuter,regular,primary,\\r\\nοῖν,dual,genitive,2nd,neuter,regular,,6\\r\\nοιιν,dual,genitive,2nd,neuter,irregular,,\\r\\nω,dual,nominative,2nd,neuter,regular,primary,\\r\\nώ,dual,nominative,2nd,neuter,regular,,6\\r\\nω,dual,vocative,2nd,neuter,regular,primary,\\r\\nώ,dual,vocative,2nd,neuter,regular,,6\\r\\nους,plural,accusative,2nd,masculine feminine,regular,primary,\\r\\nούς,plural,accusative,2nd,masculine feminine,regular,,41\\r\\nοῦς,plural,accusative,2nd,masculine feminine,regular,,5\\r\\nονς,plural,accusative,2nd,masculine feminine,irregular,,\\r\\nος,plural,accusative,2nd,masculine feminine,irregular,,\\r\\nως,plural,accusative,2nd,masculine feminine,irregular,,\\r\\nοις,plural,accusative,2nd,masculine feminine,irregular,,\\r\\nώς,plural,accusative,2nd,masculine feminine,irregular,,7\\r\\nοις,plural,dative,2nd,masculine feminine,regular,primary,\\r\\nοῖς,plural,dative,2nd,masculine feminine,regular,,5\\r\\nοισι,plural,dative,2nd,masculine feminine,irregular,,\\r\\nοισιν,plural,dative,2nd,masculine feminine,irregular,,4\\r\\nῴς,plural,dative,2nd,masculine feminine,irregular,,7\\r\\nόφι,plural,dative,2nd,masculine feminine,irregular,,45\\r\\nόφιv,plural,dative,2nd,masculine feminine,irregular,,4 45\\r\\nων,plural,genitive,2nd,masculine feminine,regular,primary,\\r\\nῶν,plural,genitive,2nd,masculine feminine,regular,,5\\r\\nών,plural,genitive,2nd,masculine feminine,irregular,,7\\r\\nόφι,plural,genitive,2nd,masculine feminine,irregular,,45\\r\\nόφιv,plural,genitive,2nd,masculine feminine,irregular,,4 45\\r\\nοι,plural,nominative,2nd,masculine feminine,regular,primary,\\r\\nοί,plural,nominative,2nd,masculine feminine,regular,,41\\r\\nοῖ,plural,nominative,2nd,masculine feminine,regular,,5\\r\\nῴ,plural,nominative,2nd,masculine feminine,irregular,,7\\r\\nοι,plural,vocative,2nd,masculine feminine,regular,primary,\\r\\nοί,plural,vocative,2nd,masculine feminine,regular,,41\\r\\nοῖ,plural,vocative,2nd,masculine feminine,regular,,5\\r\\nα,plural,accusative,2nd,neuter,regular,primary,\\r\\nᾶ,plural,accusative,2nd,neuter,regular,,6\\r\\nοις,plural,dative,2nd,neuter,regular,primary,\\r\\nοῖς,plural,dative,2nd,neuter,regular,,6\\r\\nοισι,plural,dative,2nd,neuter,irregular,,\\r\\nοισιν,plural,dative,2nd,neuter,irregular,,4\\r\\nόφι,plural,dative,2nd,neuter,irregular,,45\\r\\nόφιv,plural,dative,2nd,neuter,irregular,,4 45\\r\\nων,plural,genitive,2nd,neuter,regular,primary,\\r\\nῶν,plural,genitive,2nd,neuter,regular,,6\\r\\nόφι,plural,genitive,2nd,neuter,irregular,,45\\r\\nόφιv,plural,genitive,2nd,neuter,irregular,,4 45\\r\\nα,plural,nominative,2nd,neuter,regular,primary,\\r\\nᾶ,plural,nominative,2nd,neuter,regular,,6\\r\\nα,plural,vocative,2nd,neuter,regular,primary,\\r\\nᾶ,plural,vocative,2nd,neuter,regular,,6\\r\\nον,singular,accusative,2nd,masculine feminine,regular,primary,\\r\\nόν,singular,accusative,2nd,masculine feminine,regular,primary,41\\r\\nουν,singular,accusative,2nd,masculine feminine,regular,,5\\r\\nοῦν,singular,accusative,2nd,masculine feminine,regular,,5\\r\\nω,singular,accusative,2nd,masculine feminine,irregular,,7 5\\r\\nωv,singular,accusative,2nd,masculine feminine,irregular,,7 59\\r\\nώ,singular,accusative,2nd,masculine feminine,irregular,,7 42 59\\r\\nών,singular,accusative,2nd,masculine feminine,irregular,,7 59\\r\\nῳ,singular,dative,2nd,masculine feminine,regular,primary,\\r\\nῷ,singular,dative,2nd,masculine feminine,regular,,5\\r\\nῴ,singular,dative,2nd,masculine feminine,irregular,,7\\r\\nόφι,singular,dative,2nd,masculine feminine,irregular,,45\\r\\nόφιv,singular,dative,2nd,masculine feminine,irregular,,4 45\\r\\nου,singular,genitive,2nd,masculine feminine,regular,primary,\\r\\nοῦ,singular,genitive,2nd,masculine feminine,regular,,5\\r\\nοιο,singular,genitive,2nd,masculine feminine,irregular,,\\r\\nοο,singular,genitive,2nd,masculine feminine,irregular,,\\r\\nω,singular,genitive,2nd,masculine feminine,irregular,,\\r\\nώ,singular,genitive,2nd,masculine feminine,irregular,,7\\r\\nόφι,singular,genitive,2nd,masculine feminine,irregular,,45\\r\\nόφιv,singular,genitive,2nd,masculine feminine,irregular,,4 45\\r\\nος,singular,nominative,2nd,masculine feminine,regular,primary,\\r\\nους,singular,nominative,2nd,masculine feminine,regular,,5\\r\\noῦς,singular,nominative,2nd,masculine feminine,regular,,5\\r\\nός,singular,nominative,2nd,masculine feminine,regular,,\\r\\nώς,singular,nominative,2nd,masculine feminine,irregular,,7 42\\r\\nως,singular,nominative,2nd,masculine feminine,irregular,,\\r\\nε,singular,vocative,2nd,masculine feminine,regular,primary,\\r\\nέ,singular,vocative,2nd,masculine feminine,regular,,\\r\\nοu,singular,vocative,2nd,masculine feminine,regular,,5\\r\\nοῦ,singular,vocative,2nd,masculine feminine,regular,,42\\r\\nός,singular,vocative,2nd,masculine feminine,irregular,,57\\r\\nον,singular,accusative,2nd,neuter,regular,primary,\\r\\nοῦν,singular,accusative,2nd,neuter,regular,,6\\r\\nῳ,singular,dative,2nd,neuter,regular,primary,\\r\\nῷ,singular,dative,2nd,neuter,regular,,6\\r\\nόφι,singular,dative,2nd,neuter,irregular,,45\\r\\nόφιv,singular,dative,2nd,neuter,irregular,,4 45\\r\\nου,singular,genitive,2nd,neuter,regular,primary,\\r\\nοῦ,singular,genitive,2nd,neuter,regular,,6\\r\\nοο,singular,genitive,2nd,neuter,irregular,,\\r\\nοιο,singular,genitive,2nd,neuter,irregular,,\\r\\nω,singular,genitive,2nd,neuter,irregular,,\\r\\nόφι,singular,genitive,2nd,neuter,irregular,,45\\r\\nόφιv,singular,genitive,2nd,neuter,irregular,,4 45\\r\\nον,singular,nominative,2nd,neuter,regular,primary,\\r\\nοῦν,singular,nominative,2nd,neuter,regular,,6\\r\\nον,singular,vocative,2nd,neuter,regular,primary,\\r\\nοῦν,singular,vocative,2nd,neuter,regular,,6\\r\\nε,dual,accusative,3rd,masculine feminine,regular,primary,\\r\\nει,dual,accusative,3rd,masculine feminine,regular,,\\r\\nῆ,dual,accusative,3rd,masculine feminine,regular,,18\\r\\nω,dual,accusative,3rd,masculine feminine,irregular,,32\\r\\nῖ,dual,accusative,3rd,masculine feminine,irregular,,33\\r\\nεε,dual,accusative,3rd,masculine feminine,irregular,,16 55 61\\r\\nοιν,dual,dative,3rd,masculine feminine,regular,primary,\\r\\nοῖν,dual,dative,3rd,masculine feminine,regular,,\\r\\nοιιν,dual,dative,3rd,masculine feminine,irregular,,54\\r\\nσι,dual,dative,3rd,masculine feminine,irregular,,33 37\\r\\nεσσι,dual,dative,3rd,masculine feminine,irregular,,33\\r\\nεσι,dual,dative,3rd,masculine feminine,irregular,,33\\r\\nέοιν,dual,dative,3rd,masculine feminine,irregular,,16 61\\r\\nῳν,dual,dative,3rd,masculine feminine,irregular,,49\\r\\nοιν,dual,genitive,3rd,masculine feminine,regular,primary,\\r\\nοῖν,dual,genitive,3rd,masculine feminine,regular,,\\r\\nοιιν,dual,genitive,3rd,masculine feminine,irregular,,54\\r\\nέοιν,dual,genitive,3rd,masculine feminine,irregular,,16 61\\r\\nῳν,dual,genitive,3rd,masculine feminine,irregular,,49\\r\\nε,dual,nominative,3rd,masculine feminine,regular,primary,\\r\\nει,dual,nominative,3rd,masculine feminine,regular,,\\r\\nῆ,dual,nominative,3rd,masculine feminine,regular,,18\\r\\nω,dual,nominative,3rd,masculine feminine,irregular,,32\\r\\nῖ,dual,nominative,3rd,masculine feminine,irregular,,33\\r\\nεε,dual,nominative,3rd,masculine feminine,irregular,,16 55 61\\r\\nε,dual,vocative,3rd,masculine feminine,regular,primary,\\r\\nει,dual,vocative,3rd,masculine feminine,regular,,\\r\\nῆ,dual,vocative,3rd,masculine feminine,regular,,18\\r\\nω,dual,vocative,3rd,masculine feminine,irregular,,32\\r\\nῖ,dual,vocative,3rd,masculine feminine,irregular,,33\\r\\nεε,dual,vocative,3rd,masculine feminine,irregular,,16 55 61\\r\\nε,dual,accusative,3rd,neuter,regular,primary,\\r\\nει,dual,accusative,3rd,neuter,regular,,\\r\\nα,dual,accusative,3rd,neuter,regular,,\\r\\nεε,dual,accusative,3rd,neuter,irregular,,16 61\\r\\nαε,dual,accusative,3rd,neuter,irregular,,16 61\\r\\nοιν,dual,dative,3rd,neuter,regular,primary,\\r\\nῷν,dual,dative,3rd,neuter,regular,,\\r\\nοις,dual,dative,3rd,neuter,irregular,,33 38\\r\\nοισι,dual,dative,3rd,neuter,irregular,,33 38\\r\\nοισι(ν),dual,dative,3rd,neuter,irregular,,4 33 38\\r\\nοιιν,dual,dative,3rd,neuter,irregular,,\\r\\nέοιν,dual,dative,3rd,neuter,irregular,,16 61\\r\\nάοιν,dual,dative,3rd,neuter,irregular,,16 61\\r\\nοιν,dual,genitive,3rd,neuter,regular,primary,\\r\\nῷν,dual,genitive,3rd,neuter,regular,,\\r\\nων,dual,genitive,3rd,neuter,irregular,,33 38\\r\\nοιιν,dual,genitive,3rd,neuter,irregular,,\\r\\nέοιν,dual,genitive,3rd,neuter,irregular,,16 61\\r\\nάοιν,dual,genitive,3rd,neuter,irregular,,16 61\\r\\nε,dual,nominative,3rd,neuter,regular,primary,\\r\\nει,dual,nominative,3rd,neuter,regular,,\\r\\nα,dual,nominative,3rd,neuter,regular,,\\r\\nεε,dual,nominative,3rd,neuter,irregular,,16 61\\r\\nαε,dual,nominative,3rd,neuter,irregular,,16 61\\r\\nε,dual,vocative,3rd,neuter,regular,primary,\\r\\nει,dual,vocative,3rd,neuter,regular,,\\r\\nα,dual,vocative,3rd,neuter,regular,,\\r\\nεε,dual,vocative,3rd,neuter,irregular,,16 61\\r\\nαε,dual,vocative,3rd,neuter,irregular,,16 61\\r\\nᾰς,plural,accusative,3rd,masculine feminine,regular,primary,\\r\\nας,plural,accusative,3rd,masculine feminine,regular,primary,\\r\\nεις,plural,accusative,3rd,masculine feminine,regular,,17 41\\r\\nες,plural,accusative,3rd,masculine feminine,regular,,\\r\\nς,plural,accusative,3rd,masculine feminine,regular,,\\r\\nῦς,plural,accusative,3rd,masculine feminine,regular,,17 18 48\\r\\nως,plural,accusative,3rd,masculine feminine,regular,,30\\r\\nῆς,plural,accusative,3rd,masculine feminine,irregular,,56\\r\\nέας,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nέος,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nῆος,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nῆες,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nῆας,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nους,plural,accusative,3rd,masculine feminine,irregular,,32\\r\\nούς,plural,accusative,3rd,masculine feminine,irregular,,32\\r\\nεῖς,plural,accusative,3rd,masculine feminine,irregular,,31 41\\r\\nεες,plural,accusative,3rd,masculine feminine,irregular,,55 61\\r\\nις,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nινς,plural,accusative,3rd,masculine feminine,irregular,,\\r\\nῶς,plural,accusative,3rd,masculine feminine,irregular,,48\\r\\nσι,plural,dative,3rd,masculine feminine,regular,primary,\\r\\nσιν,plural,dative,3rd,masculine feminine,regular,primary,4\\r\\nσί,plural,dative,3rd,masculine feminine,regular,,41\\r\\nσίν,plural,dative,3rd,masculine feminine,regular,,4 41\\r\\nεσι,plural,dative,3rd,masculine feminine,regular,,41\\r\\nεσιν,plural,dative,3rd,masculine feminine,regular,,4 41\\r\\nέσι,plural,dative,3rd,masculine feminine,regular,,\\r\\nέσιν,plural,dative,3rd,masculine feminine,regular,,4\\r\\nψι,plural,dative,3rd,masculine feminine,regular,,\\r\\nψιν,plural,dative,3rd,masculine feminine,regular,,4\\r\\nψί,plural,dative,3rd,masculine feminine,regular,,\\r\\nψίν,plural,dative,3rd,masculine feminine,regular,,4\\r\\nξι,plural,dative,3rd,masculine feminine,regular,,\\r\\nξιν,plural,dative,3rd,masculine feminine,regular,,4\\r\\nξί,plural,dative,3rd,masculine feminine,regular,,\\r\\nξίν,plural,dative,3rd,masculine feminine,regular,,4\\r\\nφι,plural,dative,3rd,masculine feminine,irregular,,45\\r\\nφιν,plural,dative,3rd,masculine feminine,irregular,,4 45\\r\\nηφι,plural,dative,3rd,masculine feminine,irregular,,45\\r\\nηφιv,plural,dative,3rd,masculine feminine,irregular,,4 45\\r\\nῆφι,plural,dative,3rd,masculine feminine,irregular,,45\\r\\nῆφιν,plural,dative,3rd,masculine feminine,irregular,,4 45\\r\\nόφι,plural,dative,3rd,masculine feminine,irregular,,45\\r\\nόφιν,plural,dative,3rd,masculine feminine,irregular,,4 45\\r\\nαις,plural,dative,3rd,masculine feminine,irregular,,33 41\\r\\nοῖσι,plural,dative,3rd,masculine feminine,irregular,,33\\r\\nοῖσιv,plural,dative,3rd,masculine feminine,irregular,,4 33\\r\\nεσσι,plural,dative,3rd,masculine feminine,irregular,,16 61\\r\\nεσσιv,plural,dative,3rd,masculine feminine,irregular,,4 16 61\\r\\nυσσι,plural,dative,3rd,masculine feminine,irregular,,54\\r\\nυσσιv,plural,dative,3rd,masculine feminine,irregular,,4 54\\r\\nσσί,plural,dative,3rd,masculine feminine,irregular,,54\\r\\nσσίv,plural,dative,3rd,masculine feminine,irregular,,4 54\\r\\nων,plural,genitive,3rd,masculine feminine,regular,primary,\\r\\nῶν,plural,genitive,3rd,masculine feminine,regular,,\\r\\n-,plural,genitive,3rd,masculine feminine,irregular,,41\\r\\nφι,plural,genitive,3rd,masculine feminine,irregular,,45\\r\\nφιν,plural,genitive,3rd,masculine feminine,irregular,,4 45\\r\\nηφι,plural,genitive,3rd,masculine feminine,irregular,,45\\r\\nηφιv,plural,genitive,3rd,masculine feminine,irregular,,4 45\\r\\nῆφι,plural,genitive,3rd,masculine feminine,irregular,,45\\r\\nῆφιν,plural,genitive,3rd,masculine feminine,irregular,,4 45\\r\\nόφι,plural,genitive,3rd,masculine feminine,irregular,,45\\r\\nόφιν,plural,genitive,3rd,masculine feminine,irregular,,4 45\\r\\nέων,plural,genitive,3rd,masculine feminine,irregular,,16 61\\r\\nες,plural,nominative,3rd,masculine feminine,regular,primary,\\r\\nως,plural,nominative,3rd,masculine feminine,regular,,30\\r\\nεις,plural,nominative,3rd,masculine feminine,regular,,17\\r\\nεῖς,plural,nominative,3rd,masculine feminine,regular,,18\\r\\nοί,plural,nominative,3rd,masculine feminine,irregular,,32\\r\\nαί,plural,nominative,3rd,masculine feminine,irregular,,33\\r\\nῆς,plural,nominative,3rd,masculine feminine,irregular,,18\\r\\nῄς,plural,nominative,3rd,masculine feminine,irregular,,31 41\\r\\nεες,plural,nominative,3rd,masculine feminine,irregular,,16 55 61\\r\\nοι,plural,nominative,3rd,masculine feminine,irregular,,33\\r\\nες,plural,vocative,3rd,masculine feminine,regular,primary,\\r\\nεις,plural,vocative,3rd,masculine feminine,regular,,17\\r\\nεῖς,plural,vocative,3rd,masculine feminine,regular,,18\\r\\nῆς,plural,vocative,3rd,masculine feminine,regular,,18\\r\\nως,plural,vocative,3rd,masculine feminine,regular,,30\\r\\nεες,plural,vocative,3rd,masculine feminine,irregular,,16 55 61\\r\\nα,plural,accusative,3rd,neuter,regular,primary,\\r\\nη,plural,accusative,3rd,neuter,regular,,\\r\\nς,plural,accusative,3rd,neuter,regular,,\\r\\nά,plural,accusative,3rd,neuter,irregular,,33\\r\\nαα,plural,accusative,3rd,neuter,irregular,,16 61\\r\\nεα,plural,accusative,3rd,neuter,irregular,,16 61\\r\\nσι,plural,dative,3rd,neuter,regular,primary,\\r\\nσιν,plural,dative,3rd,neuter,regular,primary,4\\r\\nσί,plural,dative,3rd,neuter,regular,,\\r\\nσίv,plural,dative,3rd,neuter,regular,,4\\r\\nασι,plural,dative,3rd,neuter,regular,,\\r\\nασιν,plural,dative,3rd,neuter,regular,,4\\r\\nεσι,plural,dative,3rd,neuter,regular,,\\r\\nεσιν,plural,dative,3rd,neuter,regular,,4\\r\\nέσι,plural,dative,3rd,neuter,regular,,\\r\\nέσιv,plural,dative,3rd,neuter,regular,,4\\r\\nεσσι,plural,dative,3rd,neuter,irregular,,54\\r\\nεσσιν,plural,dative,3rd,neuter,irregular,,4 54\\r\\nσσί,plural,dative,3rd,neuter,irregular,,54\\r\\nσσίv,plural,dative,3rd,neuter,irregular,,4 54\\r\\nασσι,plural,dative,3rd,neuter,irregular,,54\\r\\nασσιν,plural,dative,3rd,neuter,irregular,,4 54\\r\\nφι,plural,dative,3rd,neuter,irregular,,45\\r\\nφιν,plural,dative,3rd,neuter,irregular,,4 45\\r\\nηφι,plural,dative,3rd,neuter,irregular,,45\\r\\nηφιv,plural,dative,3rd,neuter,irregular,,4 45\\r\\nῆφι,plural,dative,3rd,neuter,irregular,,45\\r\\nῆφιν,plural,dative,3rd,neuter,irregular,,4 45\\r\\nόφι,plural,dative,3rd,neuter,irregular,,45\\r\\nόφιν,plural,dative,3rd,neuter,irregular,,4 45\\r\\nων,plural,genitive,3rd,neuter,regular,primary,\\r\\nῶν,plural,genitive,3rd,neuter,regular,primary,\\r\\nφι,plural,genitive,3rd,neuter,irregular,,\\r\\nφιν,plural,genitive,3rd,neuter,irregular,,4 45\\r\\nηφι,plural,genitive,3rd,neuter,irregular,,45\\r\\nηφιv,plural,genitive,3rd,neuter,irregular,,4 45\\r\\nῆφι,plural,genitive,3rd,neuter,irregular,,45\\r\\nῆφιν,plural,genitive,3rd,neuter,irregular,,4 45\\r\\nόφι,plural,genitive,3rd,neuter,irregular,,45\\r\\nόφιν,plural,genitive,3rd,neuter,irregular,,4 45\\r\\nέων,plural,genitive,3rd,neuter,irregular,,16 61\\r\\nάων,plural,genitive,3rd,neuter,irregular,,16 61\\r\\nα,plural,nominative,3rd,neuter,regular,primary,\\r\\nη,plural,nominative,3rd,neuter,regular,,\\r\\nες,plural,nominative,3rd,neuter,regular,,\\r\\nά,plural,nominative,3rd,neuter,irregular,,33\\r\\nεα,plural,nominative,3rd,neuter,irregular,,16 61\\r\\nαα,plural,nominative,3rd,neuter,irregular,,16 61\\r\\nα,plural,vocative,3rd,neuter,regular,primary,\\r\\nη,plural,vocative,3rd,neuter,regular,,\\r\\nες,plural,vocative,3rd,neuter,regular,,\\r\\nαα,plural,vocative,3rd,neuter,irregular,,16 61\\r\\nεα,plural,vocative,3rd,neuter,irregular,,16 61\\r\\nᾰ,singular,accusative,3rd,masculine feminine,regular,primary,\\r\\nα,singular,accusative,3rd,masculine feminine,regular,primary,\\r\\nη,singular,accusative,3rd,masculine feminine,regular,,16\\r\\nν,singular,accusative,3rd,masculine feminine,regular,,\\r\\nιν,singular,accusative,3rd,masculine feminine,regular,,41\\r\\nῦν,singular,accusative,3rd,masculine feminine,regular,,18\\r\\nῶ,singular,accusative,3rd,masculine feminine,regular,,23\\r\\nυν,singular,accusative,3rd,masculine feminine,regular,,\\r\\nῦν,singular,accusative,3rd,masculine feminine,regular,,17\\r\\nύν,singular,accusative,3rd,masculine feminine,regular,,17\\r\\nέα,singular,accusative,3rd,masculine feminine,regular,,20\\r\\nην,singular,accusative,3rd,masculine feminine,regular,,24\\r\\nώ,singular,accusative,3rd,masculine feminine,regular,,19 41\\r\\nω,singular,accusative,3rd,masculine feminine,regular,,23\\r\\nεῖν,singular,accusative,3rd,masculine feminine,irregular,,31 41\\r\\nων,singular,accusative,3rd,masculine feminine,irregular,,33 41 49\\r\\nαν,singular,accusative,3rd,masculine feminine,irregular,,33 41\\r\\nον,singular,accusative,3rd,masculine feminine,irregular,,39\\r\\nῖς,singular,accusative,3rd,masculine feminine,irregular,,33\\r\\nεα,singular,accusative,3rd,masculine feminine,irregular,,61\\r\\nι,singular,dative,3rd,masculine feminine,regular,primary,\\r\\nί,singular,dative,3rd,masculine feminine,regular,,\\r\\nϊ,singular,dative,3rd,masculine feminine,regular,,17\\r\\nΐ,singular,dative,3rd,masculine feminine,regular,,40\\r\\nει,singular,dative,3rd,masculine feminine,regular,,16 17\\r\\nεῖ,singular,dative,3rd,masculine feminine,regular,,18\\r\\nαι,singular,dative,3rd,masculine feminine,regular,,\\r\\noῖ,singular,dative,3rd,masculine feminine,regular,,28 41\\r\\nῖ,singular,dative,3rd,masculine feminine,irregular,,33 46\\r\\nῆι,singular,dative,3rd,masculine feminine,irregular,,18\\r\\nᾳ,singular,dative,3rd,masculine feminine,irregular,,25\\r\\nῳ,singular,dative,3rd,masculine feminine,irregular,,33 34\\r\\nῷ,singular,dative,3rd,masculine feminine,irregular,,33\\r\\nιί,singular,dative,3rd,masculine feminine,irregular,,62\\r\\nυί,singular,dative,3rd,masculine feminine,irregular,,62\\r\\nέϊ,singular,dative,3rd,masculine feminine,irregular,,18 61\\r\\nος,singular,genitive,3rd,masculine feminine,regular,primary,\\r\\nός,singular,genitive,3rd,masculine feminine,regular,,\\r\\nους,singular,genitive,3rd,masculine feminine,regular,,16\\r\\nοῦς,singular,genitive,3rd,masculine feminine,regular,,19 46\\r\\nως,singular,genitive,3rd,masculine feminine,regular,,17 18\\r\\nώς,singular,genitive,3rd,masculine feminine,regular,,17 18 41\\r\\nῶς,singular,genitive,3rd,masculine feminine,regular,,47\\r\\nεως,singular,genitive,3rd,masculine feminine,regular,,17\\r\\nέως,singular,genitive,3rd,masculine feminine,regular,,\\r\\nεώς,singular,genitive,3rd,masculine feminine,regular,,\\r\\nέους,singular,genitive,3rd,masculine feminine,regular,,20\\r\\nω,singular,genitive,3rd,masculine feminine,irregular,,\\r\\nεος,singular,genitive,3rd,masculine feminine,irregular,,61\\r\\nΰς,singular,genitive,3rd,masculine feminine,irregular,,41 48\\r\\nῦς,singular,genitive,3rd,masculine feminine,irregular,,48\\r\\nνος,singular,genitive,3rd,masculine feminine,irregular,,22\\r\\nοῦ,singular,genitive,3rd,masculine feminine,irregular,,33\\r\\nηος,singular,genitive,3rd,masculine feminine,irregular,,55\\r\\nιός,singular,genitive,3rd,masculine feminine,irregular,,62\\r\\nuός,singular,genitive,3rd,masculine feminine,irregular,,62\\r\\nς,singular,nominative,3rd,masculine feminine,regular,primary,\\r\\n-,singular,nominative,3rd,masculine feminine,regular,primary,\\r\\nηρ,singular,nominative,3rd,masculine feminine,regular,,41\\r\\nις,singular,nominative,3rd,masculine feminine,regular,,\\r\\nϊς,singular,nominative,3rd,masculine feminine,regular,,\\r\\nώ,singular,nominative,3rd,masculine feminine,regular,,41\\r\\nψ,singular,nominative,3rd,masculine feminine,regular,,\\r\\nξ,singular,nominative,3rd,masculine feminine,regular,,\\r\\nρ,singular,nominative,3rd,masculine feminine,regular,,\\r\\nήρ,singular,nominative,3rd,masculine feminine,regular,,\\r\\nήν,singular,nominative,3rd,masculine feminine,regular,,50\\r\\nν,singular,nominative,3rd,masculine feminine,regular,,\\r\\nωρ,singular,nominative,3rd,masculine feminine,regular,,\\r\\nων,singular,nominative,3rd,masculine feminine,regular,,\\r\\nών,singular,nominative,3rd,masculine feminine,regular,,\\r\\nης,singular,nominative,3rd,masculine feminine,regular,,\\r\\nῆς,singular,nominative,3rd,masculine feminine,regular,,\\r\\nυς,singular,nominative,3rd,masculine feminine,regular,,\\r\\nῦς,singular,nominative,3rd,masculine feminine,regular,,\\r\\nεῦς,singular,nominative,3rd,masculine feminine,regular,,\\r\\nύς,singular,nominative,3rd,masculine feminine,regular,,\\r\\nής,singular,nominative,3rd,masculine feminine,regular,,33\\r\\nας,singular,nominative,3rd,masculine feminine,irregular,,\\r\\nῴ,singular,nominative,3rd,masculine feminine,irregular,,29 41\\r\\nώς,singular,nominative,3rd,masculine feminine,irregular,,27 41\\r\\nϋς,singular,nominative,3rd,masculine feminine,irregular,,41\\r\\nῄς,singular,nominative,3rd,masculine feminine,irregular,,31 41\\r\\nῖς,singular,nominative,3rd,masculine feminine,irregular,,\\r\\nεῖς,singular,nominative,3rd,masculine feminine,irregular,,31 41\\r\\nῶς,singular,nominative,3rd,masculine feminine,irregular,,48\\r\\nος,singular,nominative,3rd,masculine feminine,irregular,,33\\r\\n-,singular,vocative,3rd,masculine feminine,regular,primary,52\\r\\nς,singular,vocative,3rd,masculine feminine,regular,,30\\r\\nι,singular,vocative,3rd,masculine feminine,regular,,41\\r\\nῦ,singular,vocative,3rd,masculine feminine,regular,,15 17 18\\r\\nοῖ,singular,vocative,3rd,masculine feminine,regular,,19 41\\r\\nψ,singular,vocative,3rd,masculine feminine,regular,,\\r\\nξ,singular,vocative,3rd,masculine feminine,regular,,\\r\\nν,singular,vocative,3rd,masculine feminine,regular,,\\r\\nρ,singular,vocative,3rd,masculine feminine,regular,,\\r\\nων,singular,vocative,3rd,masculine feminine,regular,,50\\r\\nών,singular,vocative,3rd,masculine feminine,regular,,\\r\\nήν,singular,vocative,3rd,masculine feminine,regular,,\\r\\nερ,singular,vocative,3rd,masculine feminine,regular,,\\r\\nες,singular,vocative,3rd,masculine feminine,regular,,\\r\\nί,singular,vocative,3rd,masculine feminine,regular,,\\r\\nως,singular,vocative,3rd,masculine feminine,regular,,\\r\\nἶ,singular,vocative,3rd,masculine feminine,regular,,\\r\\nούς,singular,vocative,3rd,masculine feminine,regular,,51\\r\\nύ,singular,vocative,3rd,masculine feminine,regular,,15\\r\\nυ,singular,vocative,3rd,masculine feminine,regular,,51\\r\\nεις,singular,vocative,3rd,masculine feminine,regular,,20\\r\\nαν,singular,vocative,3rd,masculine feminine,regular,,\\r\\nώς,singular,vocative,3rd,masculine feminine,irregular,,27 41 46\\r\\nον,singular,vocative,3rd,masculine feminine,irregular,,\\r\\nυς,singular,vocative,3rd,masculine feminine,irregular,,33\\r\\nα,singular,accusative,3rd,neuter,regular,primary,15\\r\\n-,singular,accusative,3rd,neuter,regular,,33\\r\\nος,singular,accusative,3rd,neuter,regular,,\\r\\nας,singular,accusative,3rd,neuter,regular,,\\r\\nαρ,singular,accusative,3rd,neuter,regular,,21\\r\\nυ,singular,accusative,3rd,neuter,regular,,\\r\\nι,singular,dative,3rd,neuter,regular,primary,\\r\\nει,singular,dative,3rd,neuter,regular,,16\\r\\nαι,singular,dative,3rd,neuter,regular,,16 21\\r\\nϊ,singular,dative,3rd,neuter,irregular,,17\\r\\nᾳ,singular,dative,3rd,neuter,irregular,,25 33\\r\\nυϊ,singular,dative,3rd,neuter,irregular,,17\\r\\nαϊ,singular,dative,3rd,neuter,irregular,,21 61\\r\\nος,singular,genitive,3rd,neuter,regular,primary,\\r\\nους,singular,genitive,3rd,neuter,regular,,16\\r\\nως,singular,genitive,3rd,neuter,regular,,16\\r\\nεως,singular,genitive,3rd,neuter,regular,,17\\r\\nυς,singular,genitive,3rd,neuter,irregular,,26\\r\\nου,singular,genitive,3rd,neuter,irregular,,33\\r\\nαος,singular,genitive,3rd,neuter,irregular,,21 61\\r\\nα,singular,nominative,3rd,neuter,regular,primary,\\r\\n-,singular,nominative,3rd,neuter,regular,,33\\r\\nος,singular,nominative,3rd,neuter,regular,,\\r\\nαρ,singular,nominative,3rd,neuter,regular,,\\r\\nας,singular,nominative,3rd,neuter,regular,,16 21\\r\\nυ,singular,nominative,3rd,neuter,regular,,\\r\\nον,singular,nominative,3rd,neuter,irregular,,33\\r\\nα,singular,vocative,3rd,neuter,regular,primary,15\\r\\n-,singular,vocative,3rd,neuter,regular,,\\r\\nος,singular,vocative,3rd,neuter,regular,,\\r\\nας,singular,vocative,3rd,neuter,regular,,\\r\\nαρ,singular,vocative,3rd,neuter,regular,,21\\r\\nυ,singular,vocative,3rd,neuter,regular,,\";","export default \"Index,Text\\r\\n1,\\\"See Smyth 349, g. The cardinals from 5 to 199 are indeclinable except for the first (units) numeral in 13 and 14  (3 and 4 respectively). Cardinals 200 and up (and all Ordinal #'s) follow the 1st and 2nd Declension Adjective Tables.\\\"\\r\\n2,\\\"See Smyth 349, D.  for uses of  δύο, δυοῖν (and δυεῖν) with gen and dat plurals\\\"\\r\\n3,\\\"See Smyth 349, D. for irregular uses of Cardinals as (Pro)nouns and as Adjectives\\\"\";","export default \"Form,Headword,Number,Case,Gender,Type,Primary,Footnote\\r\\nδύο,δύο (2),dual,accusative,masculine feminine neuter,regular,primary,3\\r\\nδυοῖν,δύο (2),dual,dative,masculine feminine neuter,regular,primary,2 3\\r\\nδυοῖν,δύο (2),dual,genitive,masculine feminine neuter,regular,primary,2 3\\r\\nδύο,δύο (2),dual,nominative,masculine feminine neuter,regular,primary,\\r\\nμίαν,εἱς - μία - ἑν (1),singular,accusative,feminine,regular,primary,\\r\\nμιᾷ,εἱς - μία - ἑν (1),singular,dative,feminine,regular,primary,\\r\\nμιᾶς,εἱς - μία - ἑν (1),singular,genitive,feminine,regular,primary,\\r\\nμία,εἱς - μία - ἑν (1),singular,nominative,feminine,regular,primary,\\r\\nἕνα,εἱς - μία - ἑν (1),singular,accusative,masculine,regular,primary,\\r\\nἑνί,εἱς - μία - ἑν (1),singular,dative,masculine,regular,primary,\\r\\nἑνός,εἱς - μία - ἑν (1),singular,genitive,masculine,regular,primary,\\r\\nεἷς,εἱς - μία - ἑν (1),singular,nominative,masculine,regular,primary,\\r\\nἕν,εἱς - μία - ἑν (1),singular,accusative,neuter,regular,primary,\\r\\nἑνί,εἱς - μία - ἑν (1),singular,dative,neuter,regular,primary,\\r\\nἑνός,εἱς - μία - ἑν (1),singular,genitive,neuter,regular,primary,\\r\\nἑν,εἱς - μία - ἑν (1),singular,nominative,neuter,regular,primary,\\r\\nτέτταρας,τέτταρες - τέτταρα (4),plural,accusative,masculine feminine,regular,primary,\\r\\nτέτταρσι,τέτταρες - τέτταρα (4),plural,dative,masculine feminine,regular,primary,\\r\\nτέτταρσιν,τέτταρες - τέτταρα (4),plural,dative,masculine feminine,regular,primary,\\r\\nτεττάρων,τέτταρες - τέτταρα (4),plural,genitive,masculine feminine,regular,primary,\\r\\nτέτταρες,τέτταρες - τέτταρα (4),plural,nominative,masculine feminine,regular,primary,\\r\\nτέτταρα,τέτταρες - τέτταρα (4),plural,accusative,neuter,regular,primary,\\r\\nτέτταρσι,τέτταρες - τέτταρα (4),plural,dative,neuter,regular,primary,\\r\\nτέτταρσιν,τέτταρες - τέτταρα (4),plural,dative,neuter,regular,primary,\\r\\nτεττάρων,τέτταρες - τέτταρα (4),plural,genitive,neuter,regular,primary,\\r\\nτέτταρα,τέτταρες - τέτταρα (4),plural,nominative,neuter,regular,primary,\\r\\nτρεῖς,τρεῖς - τρία (3),plural,accusative,masculine feminine,regular,primary,\\r\\nτρισί,τρεῖς - τρία (3),plural,dative,masculine feminine,regular,primary,\\r\\nτρισίν,τρεῖς - τρία (3),plural,dative,masculine feminine,regular,primary,\\r\\nτριῶν,τρεῖς - τρία (3),plural,genitive,masculine feminine,regular,primary,\\r\\nτρεῖς,τρεῖς - τρία (3),plural,nominative,masculine feminine,regular,primary,\\r\\nτρία,τρεῖς - τρία (3),plural,accusative,neuter,regular,primary,\\r\\nτρισί,τρεῖς - τρία (3),plural,dative,neuter,regular,primary,\\r\\nτρισίν,τρεῖς - τρία (3),plural,dative,neuter,regular,primary,\\r\\nτριῶν,τρεῖς - τρία (3),plural,genitive,neuter,regular,primary,\\r\\nτρία,τρεῖς - τρία (3),plural,nominative,neuter,regular,primary,\";","export default \"Index,Text\\r\\n1,enclitic\\r\\n2,not enclitic\\r\\n3,enclitic\\r\\n4,The reflexive pronouns are formed by compounding the stems of the personal pronouns with the oblique cases of αὐτός\\r\\n5,\\\"The possessive pronouns, formed from the stems of the personal pronouns, are declined like ἀγαθός, ἄξιος (see Smyth 287)\\\"\\r\\n\";","export default \"Form,Headword,Class,Person,Number,Case,Gender,Type,Primary,Dialects,Footnote\\r\\nτούτω,οὗτος,demonstrative,,dual,accusative,masculine feminine neuter,regular,primary,,\\r\\nτούτοιν,οὗτος,demonstrative,,dual,dative,masculine feminine neuter,regular,primary,,\\r\\nτούτοιν,οὗτος,demonstrative,,dual,genitive,masculine feminine neuter,regular,primary,,\\r\\nτούτω,οὗτος,demonstrative,,dual,nominative,masculine feminine neuter,regular,primary,,\\r\\nταύτᾱς,οὗτος,demonstrative,,plural,accusative,feminine,regular,primary,,\\r\\nταύταις,οὗτος,demonstrative,,plural,dative,feminine,regular,primary,,\\r\\nτούτων,οὗτος,demonstrative,,plural,genitive,feminine,regular,primary,,\\r\\nαὗται,οὗτος,demonstrative,,plural,nominative,feminine,regular,primary,,\\r\\nτούτους,οὗτος,demonstrative,,plural,accusative,masculine,regular,primary,,\\r\\nτούτοις,οὗτος,demonstrative,,plural,dative,masculine,regular,primary,,\\r\\nτούτων,οὗτος,demonstrative,,plural,genitive,masculine,regular,primary,,\\r\\nοὗτοι,οὗτος,demonstrative,,plural,nominative,masculine,regular,primary,,\\r\\nταῦτα,οὗτος,demonstrative,,plural,accusative,neuter,regular,primary,,\\r\\nτούτοις,οὗτος,demonstrative,,plural,dative,neuter,regular,primary,,\\r\\nτούτων,οὗτος,demonstrative,,plural,genitive,neuter,regular,primary,,\\r\\nταῦτα,οὗτος,demonstrative,,plural,nominative,neuter,regular,primary,,\\r\\nταύτην,οὗτος,demonstrative,,singular,accusative,feminine,regular,primary,,\\r\\nταύτῃ,οὗτος,demonstrative,,singular,dative,feminine,regular,primary,,\\r\\nταύτης,οὗτος,demonstrative,,singular,genitive,feminine,regular,primary,,\\r\\nαὕτη,οὗτος,demonstrative,,singular,nominative,feminine,regular,primary,,\\r\\nτοῦτον,οὗτος,demonstrative,,singular,accusative,masculine,regular,primary,,\\r\\nτούτῳ,οὗτος,demonstrative,,singular,dative,masculine,regular,primary,,\\r\\nτούτου,οὗτος,demonstrative,,singular,genitive,masculine,regular,primary,,\\r\\nοὗτος,οὗτος,demonstrative,,singular,nominative,masculine,regular,primary,,\\r\\nτοῦτο,οὗτος,demonstrative,,singular,accusative,neuter,regular,primary,,\\r\\nτούτῳ,οὗτος,demonstrative,,singular,dative,neuter,regular,primary,,\\r\\nτούτου,οὗτος,demonstrative,,singular,genitive,neuter,regular,primary,,\\r\\nτοῦτο,οὗτος,demonstrative,,singular,nominative,neuter,regular,primary,,\\r\\nἐκείνω,ἐκεῖνος,demonstrative,,dual,accusative,masculine feminine neuter,regular,primary,,\\r\\nἐκείνοιν,ἐκεῖνος,demonstrative,,dual,dative,masculine feminine neuter,regular,primary,,\\r\\nἐκείνοιν,ἐκεῖνος,demonstrative,,dual,genitive,masculine feminine neuter,regular,primary,,\\r\\nἐκείνω,ἐκεῖνος,demonstrative,,dual,nominative,masculine feminine neuter,regular,primary,,\\r\\nἐκείνᾱς,ἐκεῖνος,demonstrative,,plural,accusative,feminine,regular,primary,,\\r\\nἐκείναις,ἐκεῖνος,demonstrative,,plural,dative,feminine,regular,primary,,\\r\\nἐκείνων,ἐκεῖνος,demonstrative,,plural,genitive,feminine,regular,primary,,\\r\\nἐκεῖναι,ἐκεῖνος,demonstrative,,plural,nominative,feminine,regular,primary,,\\r\\nἐκείνους,ἐκεῖνος,demonstrative,,plural,accusative,masculine,regular,primary,,\\r\\nἐκείνοις,ἐκεῖνος,demonstrative,,plural,dative,masculine,regular,primary,,\\r\\nἐκείνων,ἐκεῖνος,demonstrative,,plural,genitive,masculine,regular,primary,,\\r\\nἐκεῖνοι,ἐκεῖνος,demonstrative,,plural,nominative,masculine,regular,primary,,\\r\\nἐκεῖνα,ἐκεῖνος,demonstrative,,plural,accusative,neuter,regular,primary,,\\r\\nἐκείνοις,ἐκεῖνος,demonstrative,,plural,dative,neuter,regular,primary,,\\r\\nἐκείνων,ἐκεῖνος,demonstrative,,plural,genitive,neuter,regular,primary,,\\r\\nἐκεῖνα,ἐκεῖνος,demonstrative,,plural,nominative,neuter,regular,primary,,\\r\\nἐκείνην,ἐκεῖνος,demonstrative,,singular,accusative,feminine,regular,primary,,\\r\\nἐκείνῃ,ἐκεῖνος,demonstrative,,singular,dative,feminine,regular,primary,,\\r\\nἐκείνης,ἐκεῖνος,demonstrative,,singular,genitive,feminine,regular,primary,,\\r\\nἐκείνη,ἐκεῖνος,demonstrative,,singular,nominative,feminine,regular,primary,,\\r\\nἐκεῖνον,ἐκεῖνος,demonstrative,,singular,accusative,masculine,regular,primary,,\\r\\nἐκείνῳ,ἐκεῖνος,demonstrative,,singular,dative,masculine,regular,primary,,\\r\\nἐκείνου,ἐκεῖνος,demonstrative,,singular,genitive,masculine,regular,primary,,\\r\\nἐκεῖνος,ἐκεῖνος,demonstrative,,singular,nominative,masculine,regular,primary,,\\r\\nἐκεῖνο,ἐκεῖνος,demonstrative,,singular,accusative,neuter,regular,primary,,\\r\\nἐκείνῳ,ἐκεῖνος,demonstrative,,singular,dative,neuter,regular,primary,,\\r\\nἐκείνου,ἐκεῖνος,demonstrative,,singular,genitive,neuter,regular,primary,,\\r\\nἐκεῖνο,ἐκεῖνος,demonstrative,,singular,nominative,neuter,regular,primary,,\\r\\nτώδε,ὅδε,demonstrative,,dual,accusative,masculine feminine neuter,regular,primary,,\\r\\nτοῖνδε,ὅδε,demonstrative,,dual,dative,masculine feminine neuter,regular,primary,,\\r\\nτοῖνδε,ὅδε,demonstrative,,dual,genitive,masculine feminine neuter,regular,primary,,\\r\\nτώδε,ὅδε,demonstrative,,dual,nominative,masculine feminine neuter,regular,primary,,\\r\\nτά̄σδε,ὅδε,demonstrative,,plural,accusative,feminine,regular,primary,,\\r\\nταῖσδε,ὅδε,demonstrative,,plural,dative,feminine,regular,primary,,\\r\\nτῶνδε,ὅδε,demonstrative,,plural,genitive,feminine,regular,primary,,\\r\\nαἵδε,ὅδε,demonstrative,,plural,nominative,feminine,regular,primary,,\\r\\nτούσδε,ὅδε,demonstrative,,plural,accusative,masculine,regular,primary,,\\r\\nτοῖσδε,ὅδε,demonstrative,,plural,dative,masculine,regular,primary,,\\r\\nτῶνδε,ὅδε,demonstrative,,plural,genitive,masculine,regular,primary,,\\r\\nοἵδε,ὅδε,demonstrative,,plural,nominative,masculine,regular,primary,,\\r\\nτάδε,ὅδε,demonstrative,,plural,accusative,neuter,regular,primary,,\\r\\nτοῖσδε,ὅδε,demonstrative,,plural,dative,neuter,regular,primary,,\\r\\nτῶνδε,ὅδε,demonstrative,,plural,genitive,neuter,regular,primary,,\\r\\nτάδε,ὅδε,demonstrative,,plural,nominative,neuter,regular,primary,,\\r\\nτήνδε,ὅδε,demonstrative,,singular,accusative,feminine,regular,primary,,\\r\\nτῇδε,ὅδε,demonstrative,,singular,dative,feminine,regular,primary,,\\r\\nτῆσδε,ὅδε,demonstrative,,singular,genitive,feminine,regular,primary,,\\r\\nἥδε,ὅδε,demonstrative,,singular,nominative,feminine,regular,primary,,\\r\\nτόνδε,ὅδε,demonstrative,,singular,accusative,masculine,regular,primary,,\\r\\nτῷδε,ὅδε,demonstrative,,singular,dative,masculine,regular,primary,,\\r\\nτοῦδε,ὅδε,demonstrative,,singular,genitive,masculine,regular,primary,,\\r\\nὅδε,ὅδε,demonstrative,,singular,nominative,masculine,regular,primary,,\\r\\nτόδε,ὅδε,demonstrative,,singular,accusative,neuter,regular,primary,,\\r\\nτῷδε,ὅδε,demonstrative,,singular,dative,neuter,regular,primary,,\\r\\nτοῦδε,ὅδε,demonstrative,,singular,genitive,neuter,regular,primary,,\\r\\nτόδε,ὅδε,demonstrative,,singular,nominative,neuter,regular,primary,,\\r\\nὥτινε,,general relative,,dual,accusative,masculine feminine neuter,regular,primary,,\\r\\nοἷντινοιν,,general relative,,dual,dative,masculine feminine neuter,regular,primary,,\\r\\nοἷντινοιν,,general relative,,dual,genitive,masculine feminine neuter,regular,primary,,\\r\\nὥτινε,,general relative,,dual,nominative,masculine feminine neuter,regular,primary,,\\r\\nἅ̄στινας,,general relative,,plural,accusative,feminine,regular,primary,,\\r\\nαἷστισι,,general relative,,plural,dative,feminine,regular,primary,,\\r\\nαἷστισιν,,general relative,,plural,dative,feminine,regular,primary,,\\r\\nὁτέοισι,,general relative,,plural,dative,feminine,irregular,,\\\"Homer,Herodotus\\\",\\r\\nὧντινων,,general relative,,plural,genitive,feminine,regular,primary,,\\r\\nὅτεων,,general relative,,plural,genitive,feminine,irregular,,\\\"Homer,Herodotus\\\",\\r\\nαἵτινες,,general relative,,plural,nominative,feminine,regular,primary,,\\r\\nοὕστινας,,general relative,,plural,accusative,masculine,regular,primary,,\\r\\nὅτινας,,general relative,,plural,accusative,masculine,irregular,,Homer,\\r\\nοἷστισι,,general relative,,plural,dative,masculine,regular,primary,,\\r\\nοἷστισιν,,general relative,,plural,dative,masculine,regular,primary,,\\r\\nὅτοις,,general relative,,plural,dative,masculine,regular,primary,,\\r\\nὧντινων,,general relative,,plural,genitive,masculine,regular,primary,,\\r\\nὅτων,,general relative,,plural,genitive,masculine,regular,primary,,\\r\\nοἵτινες,,general relative,,plural,nominative,masculine,regular,primary,,\\r\\nἅτινα,,general relative,,plural,accusative,neuter,regular,primary,,\\r\\nἅττα,,general relative,,plural,accusative,neuter,regular,primary,,\\r\\nἅσσα,,general relative,,plural,accusative,neuter,irregular,,\\\"Homer,Herodotus\\\",\\r\\nἄσσα,,general relative,,plural,accusative,neuter,irregular,,\\\"Ionic\\\",\\r\\nοἷστισι,,general relative,,plural,dative,neuter,regular,primary,,\\r\\nοἷστισιν,,general relative,,plural,dative,neuter,regular,primary,,\\r\\nὅτοις,,general relative,,plural,dative,neuter,regular,primary,,\\r\\nὧντινων,,general relative,,plural,genitive,neuter,regular,primary,,\\r\\nὅτων,,general relative,,plural,genitive,neuter,regular,primary,,\\r\\nἅτινα,,general relative,,plural,nominative,neuter,regular,primary,,\\r\\nἅττα,,general relative,,plural,nominative,neuter,regular,primary,,\\r\\nἅσσα,,general relative,,plural,nominative,neuter,irregular,,\\\"Homer,Herodotus\\\",\\r\\nἥντινα,,general relative,,singular,accusative,feminine,regular,primary,,\\r\\nᾗτινι,,general relative,,singular,dative,feminine,regular,primary,,\\r\\nὅτεῳ,,general relative,,singular,dative,feminine,irregular,,\\\"Homer,Herodotus\\\",\\r\\nἧστινος,,general relative,,singular,genitive,feminine,regular,primary,,\\r\\nὅττεο,,general relative,,singular,genitive,feminine,irregular,,Homer,\\r\\nὅττευ,,general relative,,singular,genitive,feminine,irregular,,Homer,\\r\\nὅτευ,,general relative,,singular,genitive,feminine,irregular,,\\\"Homer,Herodotus\\\",\\r\\nἥτις,,general relative,,singular,nominative,feminine,regular,primary,,\\r\\nὅντινα,,general relative,,singular,accusative,masculine,regular,primary,,\\r\\nὅτινα,,general relative,,singular,accusative,masculine,irregular,,Homer,\\r\\nᾧτινι,,general relative,,singular,dative,masculine,regular,primary,,\\r\\nὅτῳ,,general relative,,singular,dative,masculine,regular,primary,,\\r\\nοὗτινος,,general relative,,singular,genitive,masculine,regular,primary,,\\r\\nὅτου,,general relative,,singular,genitive,masculine,regular,primary,,\\r\\nὅστις,,general relative,,singular,nominative,masculine,regular,primary,,\\r\\nὅτις,,general relative,,singular,nominative,masculine,irregular,,Homer,\\r\\nὅ τι,,general relative,,singular,accusative,neuter,regular,primary,,\\r\\nὅ ττι,,general relative,,singular,accusative,neuter,irregular,,Homer,\\r\\nᾧτινι,,general relative,,singular,dative,neuter,regular,primary,,\\r\\nὅτῳ,,general relative,,singular,dative,neuter,regular,primary,,\\r\\nοὗτινος,,general relative,,singular,genitive,neuter,regular,primary,,\\r\\nὅτου,,general relative,,singular,genitive,neuter,regular,primary,,\\r\\nὅ τι,,general relative,,singular,nominative,neuter,regular,primary,,\\r\\nὅ ττι,,general relative,,singular,nominative,neuter,irregular,,Homer,\\r\\nτινέ,τις,indefinite,,dual,accusative,masculine feminine,regular,primary,,\\r\\nτινοῖν,τις,indefinite,,dual,dative,masculine feminine,regular,primary,,\\r\\nτινοῖν,τις,indefinite,,dual,genitive,masculine feminine,regular,primary,,\\r\\nτινέ,τις,indefinite,,dual,nominative,masculine feminine,regular,primary,,\\r\\nτινέ,τις,indefinite,,dual,vocative,masculine feminine,regular,primary,,\\r\\nτινέ,τις,indefinite,,dual,accusative,neuter,regular,primary,,\\r\\nτινοῖν,τις,indefinite,,dual,dative,neuter,regular,primary,,\\r\\nτινοῖν,τις,indefinite,,dual,genitive,neuter,regular,primary,,\\r\\nτινέ,τις,indefinite,,dual,nominative,neuter,regular,primary,,\\r\\nτινέ,τις,indefinite,,dual,vocative,neuter,regular,primary,,\\r\\nτινάς,τις,indefinite,,plural,accusative,masculine feminine,regular,primary,,\\r\\nτισί,τις,indefinite,,plural,dative,masculine feminine,regular,primary,,\\r\\nτισίν,τις,indefinite,,plural,dative,masculine feminine,regular,primary,,\\r\\nτινῶν,τις,indefinite,,plural,genitive,masculine feminine,regular,primary,,\\r\\nτινές,τις,indefinite,,plural,nominative,masculine feminine,regular,primary,,\\r\\nτινά,τις,indefinite,,plural,accusative,neuter,regular,primary,,\\r\\nἄττα,τις,indefinite,,plural,accusative,neuter,regular,,,2\\r\\nτισί,τις,indefinite,,plural,dative,neuter,regular,primary,,\\r\\nτισίν,τις,indefinite,,plural,dative,neuter,regular,primary,,\\r\\nτινῶν,τις,indefinite,,plural,genitive,neuter,regular,primary,,\\r\\nτινά,τις,indefinite,,plural,nominative,neuter,regular,primary,,\\r\\nἄττα,τις,indefinite,,plural,nominative,neuter,regular,,,2\\r\\nτινά,τις,indefinite,,singular,accusative,masculine feminine,regular,primary,,\\r\\nἄττα,τις,indefinite,,singular,accusative,masculine feminine,regular,,,2\\r\\nτινί,τις,indefinite,,singular,dative,masculine feminine,regular,primary,,\\r\\nτῳ,τις,indefinite,,singular,dative,masculine feminine,regular,primary,,\\r\\nτινός,τις,indefinite,,singular,genitive,masculine feminine,regular,primary,,\\r\\nτου,τις,indefinite,,singular,genitive,masculine feminine,regular,primary,,\\r\\nτις,τις,indefinite,,singular,nominative,masculine feminine,regular,primary,,\\r\\nτι,τις,indefinite,,singular,accusative,neuter,regular,primary,,\\r\\nτινί,τις,indefinite,,singular,dative,neuter,regular,primary,,\\r\\nτῳ,τις,indefinite,,singular,dative,neuter,regular,primary,,\\r\\nτινός,τις,indefinite,,singular,genitive,neuter,regular,primary,,\\r\\nτου,τις,indefinite,,singular,genitive,neuter,regular,primary,,\\r\\nτι,τις,indefinite,,singular,nominative,neuter,regular,primary,,\\r\\nαὐτά,,intensive,,dual,accusative,feminine,regular,primary,,\\r\\nαὐταῖν,,intensive,,dual,dative,feminine,regular,primary,,\\r\\nαὐταῖν,,intensive,,dual,genitive,feminine,regular,primary,,\\r\\nαὐτά,,intensive,,dual,nominative,feminine,regular,primary,,\\r\\nαὐτώ,,intensive,,dual,accusative,masculine,regular,primary,,\\r\\nαὐτοῖν,,intensive,,dual,dative,masculine,regular,primary,,\\r\\nαὐτοῖν,,intensive,,dual,genitive,masculine,regular,primary,,\\r\\nαὐτώ,,intensive,,dual,nominative,masculine,regular,primary,,\\r\\nαὐτώ,,intensive,,dual,accusative,neuter,regular,primary,,\\r\\nαὐτοῖν,,intensive,,dual,dative,neuter,regular,primary,,\\r\\nαὐτοῖν,,intensive,,dual,genitive,neuter,regular,primary,,\\r\\nαὐτώ,,intensive,,dual,nominative,neuter,regular,primary,,\\r\\nαὐτά̄ς,,intensive,,plural,accusative,feminine,regular,primary,,\\r\\nαὐταῖς,,intensive,,plural,dative,feminine,regular,primary,,\\r\\nαὐτῶν,,intensive,,plural,genitive,feminine,regular,primary,,\\r\\nαὐτέων,,intensive,,plural,genitive,feminine,irregular,,Herodotus,\\r\\nαὐταί,,intensive,,plural,nominative,feminine,regular,primary,,\\r\\nαὐτούς,,intensive,,plural,accusative,masculine,regular,primary,,\\r\\nαὐτοῖς,,intensive,,plural,dative,masculine,regular,primary,,\\r\\nαὐτῶν,,intensive,,plural,genitive,masculine,regular,primary,,\\r\\nαὐτέων,,intensive,,plural,genitive,masculine,irregular,,Herodotus,\\r\\nαὐτοί,,intensive,,plural,nominative,masculine,regular,primary,,\\r\\nαὐτά,,intensive,,plural,accusative,neuter,regular,primary,,\\r\\nαὐτοῖς,,intensive,,plural,dative,neuter,regular,primary,,\\r\\nαὐτῶν,,intensive,,plural,genitive,neuter,regular,primary,,\\r\\nαὐτέων,,intensive,,plural,genitive,neuter,irregular,,Herodotus,\\r\\nαὐτά,,intensive,,plural,nominative,neuter,regular,primary,,\\r\\nαὐτήν,,intensive,,singular,accusative,feminine,regular,primary,,\\r\\nαὐτῇ,,intensive,,singular,dative,feminine,regular,primary,,\\r\\nαὐτῆς,,intensive,,singular,genitive,feminine,regular,primary,,\\r\\nαὐτή,,intensive,,singular,nominative,feminine,regular,primary,,\\r\\nαὐτόν,,intensive,,singular,accusative,masculine,regular,primary,,\\r\\nαὐτῷ,,intensive,,singular,dative,masculine,regular,primary,,\\r\\nαὐτοῦ,,intensive,,singular,genitive,masculine,regular,primary,,\\r\\nαὐτός,,intensive,,singular,nominative,masculine,regular,primary,,\\r\\nαὐτό,,intensive,,singular,accusative,neuter,regular,primary,,\\r\\nαὐτῷ,,intensive,,singular,dative,neuter,regular,primary,,\\r\\nαὐτοῦ,,intensive,,singular,genitive,neuter,regular,primary,,\\r\\nαὐτό,,intensive,,singular,nominative,neuter,regular,primary,,\\r\\nτίνε,τίς,interrogative,,dual,accusative,masculine feminine,regular,primary,,\\r\\nτίνοιν,τίς,interrogative,,dual,dative,masculine feminine,regular,primary,,\\r\\nτίνοιν,τίς,interrogative,,dual,genitive,masculine feminine,regular,primary,,\\r\\nτίνε,τίς,interrogative,,dual,nominative,masculine feminine,regular,primary,,\\r\\nτίνε,τίς,interrogative,,dual,vocative,masculine feminine,regular,primary,,\\r\\nτίνε,τίς,interrogative,,dual,accusative,neuter,regular,primary,,\\r\\nτίνοιν,τίς,interrogative,,dual,dative,neuter,regular,primary,,\\r\\nτίνοιν,τίς,interrogative,,dual,genitive,neuter,regular,primary,,\\r\\nτίνε,τίς,interrogative,,dual,nominative,neuter,regular,primary,,\\r\\nτίνε,τίς,interrogative,,dual,vocative,neuter,regular,primary,,\\r\\nτίνας,τίς,interrogative,,plural,accusative,masculine feminine,regular,primary,,\\r\\nτίσι,τίς,interrogative,,plural,dative,masculine feminine,regular,primary,,\\r\\nτίσιv,τίς,interrogative,,plural,dative,masculine feminine,regular,primary,,\\r\\nτίνων,τίς,interrogative,,plural,genitive,masculine feminine,regular,primary,,\\r\\nτίνες,τίς,interrogative,,plural,nominative,masculine feminine,regular,primary,,\\r\\nτίνα,τίς,interrogative,,plural,accusative,neuter,regular,primary,,\\r\\nτίσι,τίς,interrogative,,plural,dative,neuter,regular,primary,,\\r\\nτίσιv,τίς,interrogative,,plural,dative,neuter,regular,primary,,\\r\\nτίνων,τίς,interrogative,,plural,genitive,neuter,regular,primary,,\\r\\nτίνα,τίς,interrogative,,plural,nominative,neuter,regular,primary,,\\r\\nτίνα,τίς,interrogative,,singular,accusative,masculine feminine,regular,primary,,\\r\\nτίνι,τίς,interrogative,,singular,dative,masculine feminine,regular,primary,,\\r\\nτῷ,τίς,interrogative,,singular,dative,masculine feminine,regular,primary,,\\r\\nτίνος,τίς,interrogative,,singular,genitive,masculine feminine,regular,primary,,\\r\\nτοῦ,τίς,interrogative,,singular,genitive,masculine feminine,regular,primary,,\\r\\nτίς,τίς,interrogative,,singular,nominative,masculine feminine,regular,primary,,\\r\\nτί,τίς,interrogative,,singular,accusative,neuter,regular,primary,,\\r\\nτίνι,τίς,interrogative,,singular,dative,neuter,regular,primary,,\\r\\nτῷ,τίς,interrogative,,singular,dative,neuter,regular,primary,,\\r\\nτίνος,τίς,interrogative,,singular,genitive,neuter,regular,primary,,\\r\\nτοῦ,τίς,interrogative,,singular,genitive,neuter,regular,primary,,\\r\\nτί,τίς,interrogative,,singular,nominative,neuter,regular,primary,,\\r\\nνώ,,personal,1st,dual,accusative,,regular,primary,,\\r\\nνῷν,,personal,1st,dual,dative,,regular,primary,,\\r\\nνῷν,,personal,1st,dual,genitive,,regular,primary,,\\r\\nνώ,,personal,1st,dual,nominative,,regular,primary,,\\r\\nσφώ,,personal,2nd,dual,accusative,,regular,primary,,\\r\\nσφῷν,,personal,2nd,dual,dative,,regular,primary,,\\r\\nσφῷν,,personal,2nd,dual,genitive,,regular,primary,,\\r\\nσφώ,,personal,2nd,dual,nominative,,regular,primary,,\\r\\nἡμᾶς,,personal,1st,plural,accusative,,regular,primary,,\\r\\nἡμῖν,,personal,1st,plural,dative,,regular,primary,,\\r\\nἡμῶν,,personal,1st,plural,genitive,,regular,primary,,\\r\\nἡμεῖς,,personal,1st,plural,nominative,,regular,primary,,\\r\\nὑμᾶς,,personal,2nd,plural,accusative,,regular,primary,,\\r\\nὑμῖν,,personal,2nd,plural,dative,,regular,primary,,\\r\\nὑμῶν,,personal,2nd,plural,genitive,,regular,primary,,\\r\\nὑμεῖς,,personal,2nd,plural,nominative,,regular,primary,,\\r\\nσφᾶς,,personal,3rd,plural,accusative,,regular,primary,,\\r\\nσφίσι,,personal,3rd,plural,dative,,regular,primary,,\\r\\nσφίσιν,,personal,3rd,plural,dative,,regular,primary,,\\r\\nσφῶν,,personal,3rd,plural,genitive,,regular,primary,,\\r\\nσφεῖς,,personal,3rd,plural,nominative,,regular,primary,,\\r\\nἐμέ,,personal,1st,singular,accusative,,regular,primary,,\\r\\nμε,,personal,1st,singular,accusative,,regular,primary,,3\\r\\nἐμοί,,personal,1st,singular,dative,,regular,primary,,\\r\\nμοι,,personal,1st,singular,dative,,regular,primary,,3\\r\\nἐμοῦ,,personal,1st,singular,genitive,,regular,primary,,\\r\\nμου,,personal,1st,singular,genitive,,regular,primary,,3\\r\\nἐγώ,,personal,1st,singular,nominative,,regular,primary,,\\r\\nσέ,,personal,2nd,singular,accusative,,regular,primary,,\\r\\nσε,,personal,2nd,singular,accusative,,regular,primary,,3\\r\\nσοί,,personal,2nd,singular,dative,,regular,primary,,\\r\\nσοι,,personal,2nd,singular,dative,,regular,primary,,3\\r\\nσοῦ,,personal,2nd,singular,genitive,,regular,primary,,\\r\\nσου,,personal,2nd,singular,genitive,,regular,primary,,3\\r\\nσύ,,personal,2nd,singular,nominative,,regular,primary,,\\r\\nἕ,,personal,3rd,singular,accusative,,regular,primary,,\\r\\nἑ,,personal,3rd,singular,accusative,,regular,primary,,3\\r\\nοἷ,,personal,3rd,singular,dative,,regular,primary,,\\r\\nοἱ,,personal,3rd,singular,dative,,regular,primary,,3\\r\\nοὗ,,personal,3rd,singular,genitive,,regular,primary,,\\r\\nοὑ,,personal,3rd,singular,genitive,,regular,primary,,3\\r\\n-,,personal,3rd,singular,nominative,,regular,primary,,\\r\\nἀλλήλᾱ,,reciprocal,,dual,accusative,feminine,regular,primary,,\\r\\nἀλλήλαιν,,reciprocal,,dual,dative,feminine,regular,primary,,\\r\\nἀλλήλαιν,,reciprocal,,dual,genitive,feminine,regular,primary,,\\r\\nἀλλήλω,,reciprocal,,dual,accusative,masculine,regular,primary,,\\r\\nἀλλήλοιν,,reciprocal,,dual,dative,masculine,regular,primary,,\\r\\nἀλλήλοιν,,reciprocal,,dual,genitive,masculine,regular,primary,,\\r\\nἀλλήλω,,reciprocal,,dual,accusative,neuter,regular,primary,,\\r\\nἀλλήλοιν,,reciprocal,,dual,dative,neuter,regular,primary,,\\r\\nἀλλήλοιν,,reciprocal,,dual,genitive,neuter,regular,primary,,\\r\\nἀλλήλᾱς,,reciprocal,,plural,accusative,feminine,regular,primary,,\\r\\nἀλλήλαις,,reciprocal,,plural,dative,feminine,regular,primary,,\\r\\nἀλλήλων,,reciprocal,,plural,genitive,feminine,regular,primary,,\\r\\nἀλλήλους,,reciprocal,,plural,accusative,masculine,regular,primary,,\\r\\nἀλλήλοις,,reciprocal,,plural,dative,masculine,regular,primary,,\\r\\nἀλλήλων,,reciprocal,,plural,genitive,masculine,regular,primary,,\\r\\nἄλληλα,,reciprocal,,plural,accusative,neuter,regular,primary,,\\r\\nἀλλήλοις,,reciprocal,,plural,dative,neuter,regular,primary,,\\r\\nἀλλήλων,,reciprocal,,plural,genitive,neuter,regular,primary,,\\r\\nἡμᾶς,,reflexive,1st,plural,accusative,feminine,regular,primary,,\\r\\nαὐτά̄ς,,reflexive,1st,plural,accusative,feminine,regular,primary,,\\r\\nἡμῖν,,reflexive,1st,plural,dative,feminine,regular,primary,,\\r\\nαὐταῖς,,reflexive,1st,plural,dative,feminine,regular,primary,,\\r\\nἡμῶν,,reflexive,1st,plural,genitive,feminine,regular,primary,,\\r\\nαὐτῶν,,reflexive,1st,plural,genitive,feminine,regular,primary,,\\r\\nὑ̄μᾶς,,reflexive,2nd,plural,accusative,feminine,regular,primary,,\\r\\nαὐτά̄ς,,reflexive,2nd,plural,accusative,feminine,regular,primary,,\\r\\nὑ̄μῖν,,reflexive,2nd,plural,dative,feminine,regular,primary,,\\r\\nαὐταῖς,,reflexive,2nd,plural,dative,feminine,regular,primary,,\\r\\nὑ̄μῶν,,reflexive,2nd,plural,genitive,feminine,regular,primary,,\\r\\nαὐτῶν,,reflexive,2nd,plural,genitive,feminine,regular,primary,,\\r\\nἑαυτά̄ς,,reflexive,3rd,plural,accusative,feminine,regular,primary,,\\r\\nσφᾶς,,reflexive,3rd,plural,accusative,feminine,regular,primary,,\\r\\nαὑτά̄ς,,reflexive,3rd,plural,accusative,feminine,regular,primary,,\\r\\nἑαυταῖς,,reflexive,3rd,plural,dative,feminine,regular,primary,,\\r\\nσφίσιν,,reflexive,3rd,plural,dative,feminine,regular,primary,,\\r\\nαὑταῖς,,reflexive,3rd,plural,dative,feminine,regular,primary,,\\r\\nἑαυτῶν,,reflexive,3rd,plural,genitive,feminine,regular,primary,,\\r\\nσφῶν,,reflexive,3rd,plural,genitive,feminine,regular,primary,,\\r\\nαὑτῶν,,reflexive,3rd,plural,genitive,feminine,regular,primary,,\\r\\nἡμᾶς,,reflexive,1st,plural,accusative,masculine,regular,primary,,\\r\\nαὐτούς,,reflexive,1st,plural,accusative,masculine,regular,primary,,\\r\\nἡμῖν,,reflexive,1st,plural,dative,masculine,regular,primary,,\\r\\nαὐτοῖς,,reflexive,1st,plural,dative,masculine,regular,primary,,\\r\\nἡμῶν,,reflexive,1st,plural,genitive,masculine,regular,primary,,\\r\\nαὐτῶν,,reflexive,1st,plural,genitive,masculine,regular,primary,,\\r\\nὑ̄μᾶς,,reflexive,2nd,plural,accusative,masculine,regular,primary,,\\r\\nαὐτούς,,reflexive,2nd,plural,accusative,masculine,regular,primary,,\\r\\nὑ̄μῖν,,reflexive,2nd,plural,dative,masculine,regular,primary,,\\r\\nαὐτοῖς,,reflexive,2nd,plural,dative,masculine,regular,primary,,\\r\\nὑ̄μῶν,,reflexive,2nd,plural,genitive,masculine,regular,primary,,\\r\\nαὐτῶν,,reflexive,2nd,plural,genitive,masculine,regular,primary,,\\r\\nἑαυτούς,,reflexive,3rd,plural,accusative,masculine,regular,primary,,\\r\\nσφᾶς,,reflexive,3rd,plural,accusative,masculine,regular,primary,,\\r\\nαὑτούς,,reflexive,3rd,plural,accusative,masculine,regular,primary,,\\r\\nἑαυτοῖς,,reflexive,3rd,plural,dative,masculine,regular,primary,,\\r\\nσφίσιν,,reflexive,3rd,plural,dative,masculine,regular,primary,,\\r\\nαὑτοῖς,,reflexive,3rd,plural,dative,masculine,regular,primary,,\\r\\nἑαυτῶν,,reflexive,3rd,plural,genitive,masculine,regular,primary,,\\r\\nσφῶν,,reflexive,3rd,plural,genitive,masculine,regular,primary,,\\r\\nαὑτῶν,,reflexive,3rd,plural,genitive,masculine,regular,primary,,\\r\\nἑαυτά,,reflexive,3rd,plural,accusative,neuter,regular,primary,,\\r\\nσφέα,,reflexive,3rd,plural,accusative,neuter,regular,primary,,\\r\\nαὑτά,,reflexive,3rd,plural,accusative,neuter,regular,primary,,\\r\\nἑαυτοῖς,,reflexive,3rd,plural,dative,neuter,regular,primary,,\\r\\nσφίσιν,,reflexive,3rd,plural,dative,neuter,regular,primary,,\\r\\nαὑτοῖς,,reflexive,3rd,plural,dative,neuter,regular,primary,,\\r\\nἑαυτῶν,,reflexive,3rd,plural,genitive,neuter,regular,primary,,\\r\\nσφῶν,,reflexive,3rd,plural,genitive,neuter,regular,primary,,\\r\\nαὑτῶν,,reflexive,3rd,plural,genitive,neuter,regular,primary,,\\r\\nἐμαυτήν,,reflexive,1st,singular,accusative,feminine,regular,primary,,\\r\\nἐμαυτῇ,,reflexive,1st,singular,dative,feminine,regular,primary,,\\r\\nἐμαυτῆς,,reflexive,1st,singular,genitive,feminine,regular,primary,,\\r\\nσεαυτήν,,reflexive,2nd,singular,accusative,feminine,regular,primary,,\\r\\nσαυτήν,,reflexive,2nd,singular,accusative,feminine,regular,primary,,\\r\\nσεαυτῇ,,reflexive,2nd,singular,dative,feminine,regular,primary,,\\r\\nσαυτῇ,,reflexive,2nd,singular,dative,feminine,regular,primary,,\\r\\nσεαυτῆς,,reflexive,2nd,singular,genitive,feminine,regular,primary,,\\r\\nσαυτῆς,,reflexive,2nd,singular,genitive,feminine,regular,primary,,\\r\\nἑαυτήν,,reflexive,3rd,singular,accusative,feminine,regular,primary,,\\r\\nαὑτήν,,reflexive,3rd,singular,accusative,feminine,regular,primary,,\\r\\nἑαυτῇ,,reflexive,3rd,singular,dative,feminine,regular,primary,,\\r\\nαὑτῇ,,reflexive,3rd,singular,dative,feminine,regular,primary,,\\r\\nἑαυτῆς,,reflexive,3rd,singular,genitive,feminine,regular,primary,,\\r\\nαὑτῆς,,reflexive,3rd,singular,genitive,feminine,regular,primary,,\\r\\nἐμαυτόν,,reflexive,1st,singular,accusative,masculine,regular,primary,,\\r\\nἐμαυτῷ,,reflexive,1st,singular,dative,masculine,regular,primary,,\\r\\nἐμαυτοῦ,,reflexive,1st,singular,genitive,masculine,regular,primary,,\\r\\nσεαυτόν,,reflexive,2nd,singular,accusative,masculine,regular,primary,,\\r\\nσαυτόν,,reflexive,2nd,singular,accusative,masculine,regular,primary,,\\r\\nσεαυτῷ,,reflexive,2nd,singular,dative,masculine,regular,primary,,\\r\\nσαυτῷ,,reflexive,2nd,singular,dative,masculine,regular,primary,,\\r\\nσεαυτοῦ,,reflexive,2nd,singular,genitive,masculine,regular,primary,,\\r\\nσαυτοῦ,,reflexive,2nd,singular,genitive,masculine,regular,primary,,\\r\\nἑαυτόν,,reflexive,3rd,singular,accusative,masculine,regular,primary,,\\r\\nαὑτόν,,reflexive,3rd,singular,accusative,masculine,regular,primary,,\\r\\nἑαυτῷ,,reflexive,3rd,singular,dative,masculine,regular,primary,,\\r\\nαὑτῷ,,reflexive,3rd,singular,dative,masculine,regular,primary,,\\r\\nἑαυτοῦ,,reflexive,3rd,singular,genitive,masculine,regular,primary,,\\r\\nαὑτοῦ,,reflexive,3rd,singular,genitive,masculine,regular,primary,,\\r\\nἑαυτό,,reflexive,3rd,singular,accusative,neuter,regular,primary,,\\r\\nαὑτό,,reflexive,3rd,singular,accusative,neuter,regular,primary,,\\r\\nἑαυτῷ,,reflexive,3rd,singular,dative,neuter,regular,primary,,\\r\\nαὑτῷ,,reflexive,3rd,singular,dative,neuter,regular,primary,,\\r\\nἑαυτοῦ,,reflexive,3rd,singular,genitive,neuter,regular,primary,,\\r\\nαὑτοῦ,,reflexive,3rd,singular,genitive,neuter,regular,primary,,\\r\\nὥ,ὅς,relative,,dual,accusative,feminine,regular,primary,,\\r\\nἅ̄,ὅς,relative,,dual,accusative,feminine,irregular,,Attic,\\r\\nοἷν,ὅς,relative,,dual,dative,feminine,regular,primary,,\\r\\nαἷν,ὅς,relative,,dual,dative,feminine,irregular,,Attic,\\r\\nοἷν,ὅς,relative,,dual,genitive,feminine,regular,primary,,\\r\\nαἷν,ὅς,relative,,dual,genitive,feminine,irregular,,Attic,\\r\\nὥ,ὅς,relative,,dual,nominative,feminine,regular,primary,,\\r\\nἅ̄,ὅς,relative,,dual,nominative,feminine,irregular,,Attic,\\r\\nὥ,ὅς,relative,,dual,accusative,masculine,regular,primary,,\\r\\nοἷν,ὅς,relative,,dual,dative,masculine,regular,primary,,\\r\\nοἷν,ὅς,relative,,dual,genitive,masculine,regular,primary,,\\r\\nὥ,ὅς,relative,,dual,nominative,masculine,regular,primary,,\\r\\nὥ,ὅς,relative,,dual,accusative,neuter,regular,primary,,\\r\\nοἷν,ὅς,relative,,dual,dative,neuter,regular,primary,,\\r\\nοἷν,ὅς,relative,,dual,genitive,neuter,regular,primary,,\\r\\nὥ,ὅς,relative,,dual,nominative,neuter,regular,primary,,\\r\\nἅ̄ς,ὅς,relative,,plural,accusative,feminine,regular,primary,,\\r\\nαἷς,ὅς,relative,,plural,dative,feminine,regular,primary,,\\r\\nὧν,ὅς,relative,,plural,genitive,feminine,regular,primary,,\\r\\nαἵ,ὅς,relative,,plural,nominative,feminine,regular,primary,,\\r\\nοὕς,ὅς,relative,,plural,accusative,masculine,regular,primary,,\\r\\nοἷς,ὅς,relative,,plural,dative,masculine,regular,primary,,\\r\\nὧν,ὅς,relative,,plural,genitive,masculine,regular,primary,,\\r\\nοἵ,ὅς,relative,,plural,nominative,masculine,regular,primary,,\\r\\nἅ,ὅς,relative,,plural,accusative,neuter,regular,primary,,\\r\\nοἷς,ὅς,relative,,plural,dative,neuter,regular,primary,,\\r\\nὧν,ὅς,relative,,plural,genitive,neuter,regular,primary,,\\r\\nἅ,ὅς,relative,,plural,nominative,neuter,regular,primary,,\\r\\nἥν,ὅς,relative,,singular,accusative,feminine,regular,primary,,\\r\\nᾗ,ὅς,relative,,singular,dative,feminine,regular,primary,,\\r\\nἧς,ὅς,relative,,singular,genitive,feminine,regular,primary,,\\r\\nἥ,ὅς,relative,,singular,nominative,feminine,regular,primary,,\\r\\nὅν,ὅς,relative,,singular,accusative,masculine,regular,primary,,\\r\\nᾧ,ὅς,relative,,singular,dative,masculine,regular,primary,,\\r\\nοὗ,ὅς,relative,,singular,genitive,masculine,regular,primary,,\\r\\nὅς,ὅς,relative,,singular,nominative,masculine,regular,primary,,\\r\\nὅ,ὅς,relative,,singular,accusative,neuter,regular,primary,,\\r\\nᾧ,ὅς,relative,,singular,dative,neuter,regular,primary,,\\r\\nοὗ,ὅς,relative,,singular,genitive,neuter,regular,primary,,\\r\\nὅ,ὅς,relative,,singular,nominative,neuter,regular,primary,,\";","export default \"Index,Text\\r\\n1,\\\"Adjectives agree with the noun they modify in gender, number and case.\\\"\\r\\n2,Adjectives are inflected according to either\\r\\n3,\\\"Only nullus, sōlus, alius (alia, aliud), tōtus, ūllus, ūnus, alter, neuter (neutra,\\r\\n            neutrum) and uter (utra, utrum).\\\"\\r\\n4,In a few adjectives of Greek origin.\\r\\n5,\\\"The \\\"\\\"two-ending\\\"\\\" adjectives use \\\"\\\"-is\\\"\\\", for both masculine and feminine nominative\\r\\n            singular.\\\"\\r\\n6,\\\"The \\\"\\\"one-ending\\\"\\\" adjectives use the same consonant ending for all three genders in the\\r\\n            nominative singular and the neuter accusative and vocative singular.\\\"\\r\\n7,\\\"An ablative singular in \\\"\\\"e\\\"\\\" is common in one-ending adjectives, but is usually confined to\\r\\n            poetry in three and two-ending adjectives.\\\"\\r\\n8,\\\"In comparatives, poetry and some one-ending adjectives.\\\"\\r\\n9,Chiefly in comparatives.\\r\\n10,\\\"Stems ending in ro- preceded by e form the nominative masculine like miser, asper, gibber, lacer, liber, prosper (also prosperus), satur (-ura, -urum), tener; with compounds of -fer and -ger as saetige; also usually dexter.\\\"\\r\\n11,\\\"Stems in ro- preceded by a consonant form the nominative masculine like niger, aeger, āter, crēber, faber, glaber, integer, lūdicer, macer, piger, pulcher, ruber, sacer, scaber, sinister, taeter, vafer; also the possesives, noster, vester.\\\"\\r\\n\";","export default \"Ending,Number,Case,Declension,Gender,Type,Footnote\\r\\na,singular,nominative,1st 2nd,feminine,regular,\\r\\nus,singular,nominative,1st 2nd,masculine,regular,\\r\\n-,singular,nominative,1st 2nd,masculine,regular,10 11\\r\\num,singular,nominative,1st 2nd,neuter,regular,\\r\\nis,singular,nominative,3rd,feminine,regular,\\r\\n-,singular,nominative,3rd,feminine,irregular,6\\r\\n-,singular,nominative,3rd,masculine,regular,\\r\\nis,singular,nominative,3rd,masculine,irregular,5\\r\\ne,singular,nominative,3rd,neuter,regular,\\r\\n-,singular,nominative,3rd,neuter,irregular,6\\r\\nae,singular,genitive,1st 2nd,feminine,regular,\\r\\nīus,singular,genitive,1st 2nd,feminine,irregular,3\\r\\nī,singular,genitive,1st 2nd,masculine,regular,\\r\\nīus,singular,genitive,1st 2nd,masculine,irregular,3\\r\\nī,singular,genitive,1st 2nd,neuter,regular,\\r\\nīus,singular,genitive,1st 2nd,neuter,irregular,3\\r\\nis,singular,genitive,3rd,feminine,regular,\\r\\nis,singular,genitive,3rd,masculine,regular,\\r\\nis,singular,genitive,3rd,neuter,regular,\\r\\nae,singular,dative,1st 2nd,feminine,regular,\\r\\nī,singular,dative,1st 2nd,feminine,irregular,3\\r\\nō,singular,dative,1st 2nd,masculine,regular,\\r\\nī,singular,dative,1st 2nd,masculine,irregular,3\\r\\nō,singular,dative,1st 2nd,neuter,regular,\\r\\nī,singular,dative,1st 2nd,neuter,irregular,3\\r\\nī,singular,dative,3rd,feminine,regular,\\r\\nī,singular,dative,3rd,masculine,regular,\\r\\nī,singular,dative,3rd,neuter,regular,\\r\\nam,singular,accusative,1st 2nd,feminine,regular,\\r\\num,singular,accusative,1st 2nd,masculine,regular,\\r\\num,singular,accusative,1st 2nd,neuter,regular,\\r\\nem,singular,accusative,3rd,feminine,regular,\\r\\nem,singular,accusative,3rd,masculine,regular,\\r\\ne,singular,accusative,3rd,neuter,regular,\\r\\n-,singular,accusative,3rd,neuter,irregular,6\\r\\nā,singular,ablative,1st 2nd,feminine,regular,\\r\\nō,singular,ablative,1st 2nd,feminine,irregular,4\\r\\nō,singular,ablative,1st 2nd,masculine,regular,\\r\\nō,singular,ablative,1st 2nd,neuter,regular,\\r\\nī,singular,ablative,3rd,feminine,regular,\\r\\ne,singular,ablative,3rd,feminine,irregular,7\\r\\nī,singular,ablative,3rd,masculine,regular,\\r\\ne,singular,ablative,3rd,masculine,irregular,7\\r\\nī,singular,ablative,3rd,neuter,regular,\\r\\nae,singular,locative,1st 2nd,feminine,regular,\\r\\nī,singular,locative,1st 2nd,masculine,regular,\\r\\nī,singular,locative,1st 2nd,neuter,regular,\\r\\nī,singular,locative,3rd,feminine,regular,\\r\\ne,singular,locative,3rd,feminine,irregular,7\\r\\nī,singular,locative,3rd,masculine,regular,\\r\\nī,singular,locative,3rd,neuter,regular,\\r\\na,singular,vocative,1st 2nd,feminine,regular,\\r\\ne,singular,vocative,1st 2nd,masculine,regular,\\r\\nī,singular,vocative,1st 2nd,masculine,irregular,\\r\\n-,singular,vocative,1st 2nd,masculine,regular,10 11\\r\\num,singular,vocative,1st 2nd,neuter,regular,\\r\\nis,singular,vocative,3rd,feminine,regular,\\r\\n-,singular,vocative,3rd,masculine,regular,\\r\\ne,singular,vocative,3rd,neuter,regular,\\r\\n-,singular,vocative,3rd,neuter,irregular,6\\r\\nae,plural,nominative,1st 2nd,feminine,regular,\\r\\nī,plural,nominative,1st 2nd,masculine,regular,\\r\\na,plural,nominative,1st 2nd,neuter,regular,\\r\\nēs,plural,nominative,3rd,feminine,regular,\\r\\nēs,plural,nominative,3rd,masculine,regular,\\r\\nia,plural,nominative,3rd,neuter,regular,\\r\\nārum,plural,genitive,1st 2nd,feminine,regular,\\r\\nōrum,plural,genitive,1st 2nd,masculine,regular,\\r\\nōrum,plural,genitive,1st 2nd,neuter,regular,\\r\\nium,plural,genitive,3rd,feminine,regular,\\r\\num,plural,genitive,3rd,feminine,irregular,8\\r\\nium,plural,genitive,3rd,masculine,regular,\\r\\num,plural,genitive,3rd,masculine,irregular,8\\r\\nium,plural,genitive,3rd,neuter,regular,\\r\\num,plural,genitive,3rd,neuter,irregular,8\\r\\nīs,plural,dative,1st 2nd,feminine,regular,\\r\\nīs,plural,dative,1st 2nd,masculine,regular,\\r\\nīs,plural,dative,1st 2nd,neuter,regular,\\r\\nibus,plural,dative,3rd,feminine,regular,\\r\\nibus,plural,dative,3rd,masculine,regular,\\r\\nibus,plural,dative,3rd,neuter,regular,\\r\\nās,plural,accusative,1st 2nd,feminine,regular,\\r\\nōs,plural,accusative,1st 2nd,masculine,regular,\\r\\na,plural,accusative,1st 2nd,neuter,regular,\\r\\nīs,plural,accusative,3rd,feminine,regular,\\r\\nēs,plural,accusative,3rd,feminine,irregular,9\\r\\nīs,plural,accusative,3rd,masculine,regular,\\r\\nēs,plural,accusative,3rd,masculine,irregular,9\\r\\nia,plural,accusative,3rd,neuter,regular,\\r\\nīs,plural,ablative,1st 2nd,feminine,regular,\\r\\nīs,plural,ablative,1st 2nd,masculine,regular,\\r\\nīs,plural,ablative,1st 2nd,neuter,regular,\\r\\nibus,plural,ablative,3rd,feminine,regular,\\r\\nibus,plural,ablative,3rd,masculine,regular,\\r\\nibus,plural,ablative,3rd,neuter,regular,\\r\\nīs,plural,locative,1st 2nd,feminine,regular,\\r\\nīs,plural,locative,1st 2nd,masculine,regular,\\r\\nīs,plural,locative,1st 2nd,neuter,regular,\\r\\nibus,plural,locative,3rd,feminine,regular,\\r\\nibus,plural,locative,3rd,masculine,regular,\\r\\nibus,plural,locative,3rd,neuter,regular,\\r\\nae,plural,vocative,1st 2nd,feminine,regular,\\r\\nī,plural,vocative,1st 2nd,masculine,regular,\\r\\na,plural,vocative,1st 2nd,neuter,regular,\\r\\nēs,plural,vocative,3rd,feminine,regular,\\r\\nēs,plural,vocative,3rd,masculine,regular,\\r\\nia,plural,vocative,3rd,neuter,regular,\\r\\n\";","export default \"Index,Text\\r\\n1,\\\"Adjectives in -dicus, -ficus, and -volus form the Comparative and Superlative as though from forms in -dīcēns, -ficēns, -volēns, which were anciently used as adjectives.\\\"\\r\\n2,\\\"Adjectives in -er form the Superlative by appending -rimus to the Nominative of the Positive. The Comparative is regular.\\\"\\r\\n3,\\\"Five Adjectives in -ilis form the Superlative by adding -limus to the Stem of the Positive deprived of its final vowel. The Comparative is regular. They are facilis, difficilis, similis, dissimilis, humilis.\\\"\\r\\n\";","export default \"Ending,Number,Case,Gender,Type,Footnote\\r\\nior,singular,nominative,masculine feminine,regular,\\r\\nius,singular,nominative,neuter,regular,\\r\\nentior,singular,nominative,masculine feminine,irregular,1\\r\\nentius,singular,nominative,neuter,irregular,1\\r\\nis,singular,genitive,masculine feminine,regular,\\r\\nis,singular,genitive,neuter,regular,\\r\\nī,singular,dative,masculine feminine,regular,\\r\\nī,singular,dative,neuter,regular,\\r\\nem,singular,accusative,masculine feminine,regular,\\r\\n-,singular,accusative,neuter,regular,\\r\\ne (-ī),singular,ablative,masculine feminine,regular,\\r\\ne (-ī),singular,ablative,neuter,regular,\\r\\n-,singular,vocative,masculine feminine,regular,\\r\\n-,singular,vocative,neuter,regular,\\r\\nēs,plural,nominative,masculine feminine,regular,\\r\\na,plural,nominative,neuter,regular,\\r\\num,plural,genitive,masculine feminine,regular,\\r\\num,plural,genitive,neuter,regular,\\r\\nibus,plural,dative,masculine feminine,regular,\\r\\nibus,plural,dative,neuter,regular,\\r\\nēs (-īs),plural,accusative,masculine feminine,regular,\\r\\na,plural,accusative,neuter,regular,\\r\\nibus,plural,ablative,masculine feminine,regular,\\r\\nibus,plural,ablative,neuter,regular,\\r\\nēs,plural,vocative,masculine feminine,regular,\\r\\na,plural,vocative,neuter,regular,\\r\\n\";","export default \"Index,Text\\r\\n1,Old forms.\\r\\n2,Alternate forms.\\r\\n3,\\\"The original forms of ferrem and ferre are fer-sēm and fer-se, respectively.\\\"\\r\\n4,Gerundive (Future Passive Participle)\\r\\n5,singular\\r\\n6,\\\"The verbs nōlō and malō are compounds of volo. They therefore attach nō- or mā- to the beginning of each verb, in place of vo- or vu-. Exceptions to this are found in the present tense: nōlō nōlumus mālō mālumus nōn vīs nōn vultis māvīs māvultis nōn vult nōlunt māvult mālunt In addition, nōlō is the only verb of the three that has present and future tense imperative forms of the verb: nōlī, nōlīte, and nōlītō, nōlītōte, respectively.\\\"\\r\\n7,An earlier form.\\r\\n8,\\\"The perfect passive participle ending will change according to its subject's gender, number and case. Endings shown here are the masculine, feminine and neuter nominative singular.\\\"\\r\\n9,A passive form of the verb that is used impersonally is itum est.\\r\\n10,\\\"While the perfect form of this verb is regular, ii usually contracts to i when it is followed by an s. Thus, īstī, īstis and īsse\\\"\\r\\n11,It is rare that the “v” appear as a form.\\r\\n12,Used by early writers.\";","export default \"Lemma,PrincipalParts,Form,Case,Footnote\\r\\nfero,ferre_tuli_latus,ferendī,genitive,5\\r\\nfero,ferre_tuli_latus,ferendō,dative,\\r\\nfero,ferre_tuli_latus,ferendum,accusative,\\r\\nfero,ferre_tuli_latus,ferendō,ablative,\\r\\neo,ire_ivi(ii)_itus,eundī,genitive,5\\r\\neo,ire_ivi(ii)_itus,eundō,dative,\\r\\neo,ire_ivi(ii)_itus,eundum,accusative,\\r\\neo,ire_ivi(ii)_itus,eundō,ablative,\";","export default \"Index,Text\\r\\n1,archaic (final s and m of os and om may be omitted in inscriptions)\\r\\n2,only in familiās\\r\\n3,especially in Greek patronymics and compounds in -gena and -cola.\\r\\n4,always in deābus and filiābus; rarely with other words to distinguish the female\\r\\n5,archaic\\r\\n6,rare\\r\\n7,\\\"may occur in words of Greek origin. The forms of many Greek nouns vary among the first, second and third declensions.\\\"\\r\\n8,proper names in ius and filius and genius\\r\\n9,poetic\\r\\n10,\\\"only pelagus, vīrus, and sometimes vulgus\\\"\\r\\n11,may occur with i-stems\\r\\n12,several nouns (most commonly domus) show forms of both second and fourth declensions\\r\\n13,\\\"some nouns also have forms from the first declension (eg materia, saevitia) or the third declension (eg requiēs, satiēs, plēbēs, famēs)\\\"\\r\\n14,\\\"Always in partus and tribus, usually in artus and lacus, sometimes in other words, eg portus and specus\\\"\\r\\n15,Often in names of plants and trees and in nouns ending in -tus\\r\\n16,When pronounced as one syllable\\r\\n17,early\\r\\n18,dies and meridies are masculine\";","export default \"Ending,Number,Case,Declension,Gender,Type,Footnote\\r\\na,singular,nominative,1st,feminine,regular,\\r\\nē,singular,nominative,1st,feminine,irregular,\\r\\nēs,singular,nominative,1st,feminine,irregular,\\r\\nā,singular,nominative,1st,feminine,irregular,7\\r\\nus,singular,nominative,2nd,masculine feminine,regular,\\r\\ner,singular,nominative,2nd,masculine feminine,regular,\\r\\nir,singular,nominative,2nd,masculine feminine,regular,\\r\\n-,singular,nominative,2nd,masculine feminine,irregular,\\r\\nos,singular,nominative,2nd,masculine feminine,irregular,1\\r\\nōs,singular,nominative,2nd,masculine feminine,irregular,\\r\\nō,singular,nominative,2nd,masculine feminine,irregular,7\\r\\num,singular,nominative,2nd,neuter,regular,\\r\\nus,singular,nominative,2nd,neuter,irregular,10\\r\\non,singular,nominative,2nd,neuter,irregular,7\\r\\n-,singular,nominative,3rd,masculine feminine,regular,\\r\\nos,singular,nominative,3rd,masculine feminine,irregular,\\r\\nōn,singular,nominative,3rd,masculine feminine,irregular,7\\r\\n-,singular,nominative,3rd,neuter,regular,\\r\\nus,singular,nominative,4th,masculine feminine,regular,\\r\\nū,singular,nominative,4th,neuter,regular,\\r\\nēs,singular,nominative,5th,feminine,regular,\\r\\nae,singular,genitive,1st,feminine,regular,\\r\\nāī,singular,genitive,1st,feminine,irregular,1\\r\\nās,singular,genitive,1st,feminine,irregular,2\\r\\nēs,singular,genitive,1st,feminine,irregular,7\\r\\nī,singular,genitive,2nd,masculine feminine,regular,\\r\\nō,singular,genitive,2nd,masculine feminine,irregular,7\\r\\nī,singular,genitive,2nd,neuter,regular,\\r\\nis,singular,genitive,3rd,masculine feminine,regular,\\r\\nis,singular,genitive,3rd,neuter,regular,\\r\\nūs,singular,genitive,4th,masculine feminine,regular,\\r\\nuis,singular,genitive,4th,masculine feminine,irregular,1\\r\\nuos,singular,genitive,4th,masculine feminine,irregular,1\\r\\nī,singular,genitive,4th,masculine feminine,irregular,15\\r\\nūs,singular,genitive,4th,neuter,regular,\\r\\nēī,singular,genitive,5th,feminine,regular,\\r\\neī,singular,genitive,5th,feminine,regular,\\r\\nī,singular,genitive,5th,feminine,irregular,\\r\\nē,singular,genitive,5th,feminine,irregular,\\r\\nēs,singular,genitive,5th,feminine,irregular,6\\r\\nae,singular,dative,1st,feminine,regular,\\r\\nāī,singular,dative,1st,feminine,irregular,1\\r\\nō,singular,dative,2nd,masculine feminine,regular,\\r\\nō,singular,dative,2nd,neuter,regular,\\r\\nī,singular,dative,3rd,masculine feminine,regular,\\r\\ne,singular,dative,3rd,masculine feminine,irregular,17\\r\\nī,singular,dative,3rd,neuter,regular,\\r\\nūī,singular,dative,4th,masculine feminine,regular,\\r\\nū,singular,dative,4th,masculine feminine,regular,\\r\\nū,singular,dative,4th,neuter,regular,\\r\\nēī,singular,dative,5th,feminine,regular,\\r\\neī,singular,dative,5th,feminine,regular,\\r\\nī,singular,dative,5th,feminine,irregular,\\r\\nē,singular,dative,5th,feminine,irregular,6\\r\\nam,singular,accusative,1st,feminine,regular,\\r\\nēn,singular,accusative,1st,feminine,irregular,\\r\\nān,singular,accusative,1st,feminine,irregular,7\\r\\num,singular,accusative,2nd,masculine feminine,regular,\\r\\nom,singular,accusative,2nd,masculine feminine,irregular,1\\r\\nōn,singular,accusative,2nd,masculine feminine,irregular,7\\r\\num,singular,accusative,2nd,neuter,regular,\\r\\nus,singular,accusative,2nd,neuter,irregular,10\\r\\non,singular,accusative,2nd,neuter,irregular,7\\r\\nem,singular,accusative,3rd,masculine feminine,regular,\\r\\nim,singular,accusative,3rd,masculine feminine,irregular,11\\r\\na,singular,accusative,3rd,masculine feminine,irregular,7\\r\\n-,singular,accusative,3rd,neuter,regular,\\r\\num,singular,accusative,4th,masculine feminine,regular,\\r\\nū,singular,accusative,4th,neuter,regular,\\r\\nem,singular,accusative,5th,feminine,regular,\\r\\nā,singular,ablative,1st,feminine,regular,\\r\\nād,singular,ablative,1st,feminine,irregular,5\\r\\nē,singular,ablative,1st,feminine,irregular,7\\r\\nō,singular,ablative,2nd,masculine feminine,regular,\\r\\nōd,singular,ablative,2nd,masculine feminine,irregular,1\\r\\nō,singular,ablative,2nd,neuter,regular,\\r\\ne,singular,ablative,3rd,masculine feminine,regular,\\r\\nī,singular,ablative,3rd,masculine feminine,irregular,11\\r\\ne,singular,ablative,3rd,neuter,regular,\\r\\nī,singular,ablative,3rd,neuter,irregular,11\\r\\nū,singular,ablative,4th,masculine feminine,regular,\\r\\nūd,singular,ablative,4th,masculine feminine,irregular,1\\r\\nū,singular,ablative,4th,neuter,regular,\\r\\nē,singular,ablative,5th,feminine,regular,\\r\\nae,singular,locative,1st,feminine,regular,\\r\\nī,singular,locative,2nd,masculine feminine,regular,\\r\\nī,singular,locative,2nd,neuter,regular,\\r\\ne,singular,locative,3rd,masculine feminine,regular,\\r\\nī,singular,locative,3rd,masculine feminine,regular,\\r\\nī,singular,locative,3rd,neuter,regular,\\r\\nī,singular,locative,4th,masculine feminine,regular,\\r\\nī,singular,locative,4th,neuter,regular,\\r\\nē,singular,locative,5th,feminine,regular,\\r\\na,singular,vocative,1st,feminine,regular,\\r\\nē,singular,vocative,1st,feminine,irregular,\\r\\nā,singular,vocative,1st,feminine,irregular,7\\r\\ne,singular,vocative,2nd,masculine feminine,regular,\\r\\ner,singular,vocative,2nd,masculine feminine,regular,\\r\\nir,singular,vocative,2nd,masculine feminine,regular,\\r\\n-,singular,vocative,2nd,masculine feminine,irregular,\\r\\nī,singular,vocative,2nd,masculine feminine,irregular,8\\r\\nōs,singular,vocative,2nd,masculine feminine,irregular,\\r\\ne,singular,vocative,2nd,masculine feminine,irregular,7\\r\\num,singular,vocative,2nd,neuter,regular,\\r\\non,singular,vocative,2nd,neuter,irregular,7\\r\\n-,singular,vocative,3rd,masculine feminine,regular,\\r\\n-,singular,vocative,3rd,neuter,regular,\\r\\nus,singular,vocative,4th,masculine feminine,regular,\\r\\nū,singular,vocative,4th,neuter,regular,\\r\\nēs,singular,vocative,5th,feminine,regular,\\r\\nae,plural,nominative,1st,feminine,regular,\\r\\nī,plural,nominative,2nd,masculine feminine,regular,\\r\\noe,plural,nominative,2nd,masculine feminine,irregular,7 9\\r\\na,plural,nominative,2nd,neuter,regular,\\r\\nēs,plural,nominative,3rd,masculine feminine,regular,\\r\\nes,plural,nominative,3rd,masculine feminine,irregular,7\\r\\na,plural,nominative,3rd,neuter,regular,\\r\\nia,plural,nominative,3rd,neuter,irregular,11\\r\\nūs,plural,nominative,4th,masculine feminine,regular,\\r\\nua,plural,nominative,4th,neuter,regular,\\r\\nēs,plural,nominative,5th,feminine,regular,\\r\\nārum,plural,genitive,1st,feminine,regular,\\r\\num,plural,genitive,1st,feminine,irregular,3\\r\\nōrum,plural,genitive,2nd,masculine feminine,regular,\\r\\num,plural,genitive,2nd,masculine feminine,irregular,\\r\\nom,plural,genitive,2nd,masculine feminine,irregular,8\\r\\nōrum,plural,genitive,2nd,neuter,regular,\\r\\num,plural,genitive,2nd,neuter,irregular,\\r\\num,plural,genitive,3rd,masculine feminine,regular,\\r\\nium,plural,genitive,3rd,masculine feminine,irregular,11\\r\\nōn,plural,genitive,3rd,masculine feminine,irregular,7\\r\\num,plural,genitive,3rd,neuter,regular,\\r\\nium,plural,genitive,3rd,neuter,irregular,11\\r\\nuum,plural,genitive,4th,masculine feminine,regular,\\r\\num,plural,genitive,4th,masculine feminine,irregular,16\\r\\nuom,plural,genitive,4th,masculine feminine,irregular,1\\r\\nuum,plural,genitive,4th,neuter,regular,\\r\\nērum,plural,genitive,5th,feminine,regular,\\r\\nīs,plural,dative,1st,feminine,regular,\\r\\nābus,plural,dative,1st,feminine,irregular,4\\r\\neis,plural,dative,1st,feminine,irregular,6\\r\\nīs,plural,dative,2nd,masculine feminine,regular,\\r\\nīs,plural,dative,2nd,neuter,regular,\\r\\nibus,plural,dative,3rd,masculine feminine,regular,\\r\\nibus,plural,dative,3rd,neuter,regular,\\r\\nibus,plural,dative,4th,masculine feminine,regular,\\r\\nubus,plural,dative,4th,masculine feminine,irregular,14\\r\\nibus,plural,dative,4th,neuter,regular,\\r\\nēbus,plural,dative,5th,feminine,regular,\\r\\nās,plural,accusative,1st,feminine,regular,\\r\\nōs,plural,accusative,2nd,masculine feminine,regular,\\r\\na,plural,accusative,2nd,neuter,regular,\\r\\nēs,plural,accusative,3rd,masculine feminine,regular,\\r\\nīs,plural,accusative,3rd,masculine feminine,irregular,11\\r\\nas,plural,accusative,3rd,masculine feminine,irregular,7\\r\\na,plural,accusative,3rd,neuter,regular,\\r\\nia,plural,accusative,3rd,neuter,irregular,11\\r\\nūs,plural,accusative,4th,masculine feminine,regular,\\r\\nua,plural,accusative,4th,neuter,regular,\\r\\nēs,plural,accusative,5th,feminine,regular,\\r\\nīs,plural,ablative,1st,feminine,regular,\\r\\nābus,plural,ablative,1st,feminine,irregular,4\\r\\neis,plural,ablative,1st,feminine,irregular,6\\r\\nīs,plural,ablative,2nd,masculine feminine,regular,\\r\\nīs,plural,ablative,2nd,neuter,regular,\\r\\nibus,plural,ablative,3rd,masculine feminine,regular,\\r\\nibus,plural,ablative,3rd,neuter,regular,\\r\\nibus,plural,ablative,4th,masculine feminine,regular,\\r\\nubus,plural,ablative,4th,masculine feminine,irregular,14\\r\\nibus,plural,ablative,4th,neuter,regular,\\r\\nēbus,plural,ablative,5th,feminine,regular,\\r\\nīs,plural,locative,1st,feminine,regular,\\r\\nīs,plural,locative,2nd,masculine feminine,regular,\\r\\nīs,plural,locative,2nd,neuter,regular,\\r\\nibus,plural,locative,3rd,masculine feminine,regular,\\r\\nibus,plural,locative,3rd,neuter,regular,\\r\\nae,plural,vocative,1st,feminine,regular,\\r\\nī,plural,vocative,2nd,masculine feminine,regular,\\r\\na,plural,vocative,2nd,neuter,regular,\\r\\nēs,plural,vocative,3rd,masculine feminine,regular,\\r\\na,plural,vocative,3rd,neuter,regular,\\r\\nia,plural,vocative,3rd,neuter,irregular,11\\r\\nūs,plural,vocative,4th,masculine feminine,regular,\\r\\nua,plural,vocative,4th,neuter,regular,\\r\\nēs,plural,vocative,5th,feminine,regular,\\r\\n\";","export default \"Index,Text\\r\\n1,Old forms.\\r\\n2,Alternate forms.\\r\\n3,\\\"The original forms of ferrem and ferre are fer-sēm and fer-se, respectively.\\\"\\r\\n4,Gerundive (Future Passive Participle)\\r\\n5,singular\\r\\n6,\\\"The verbs nōlō and malō are compounds of volo. They therefore attach nō- or mā- to the beginning of each verb, in place of vo- or vu-. Exceptions to this are found in the present tense: nōlō nōlumus mālō mālumus nōn vīs nōn vultis māvīs māvultis nōn vult nōlunt māvult mālunt In addition, nōlō is the only verb of the three that has present and future tense imperative forms of the verb: nōlī, nōlīte, and nōlītō, nōlītōte, respectively.\\\"\\r\\n7,An earlier form.\\r\\n8,\\\"The perfect passive participle ending will change according to its subject's gender, number and case. Endings shown here are the masculine, feminine and neuter nominative singular.\\\"\\r\\n9,A passive form of the verb that is used impersonally is itum est.\\r\\n10,\\\"While the perfect form of this verb is regular, ii usually contracts to i when it is followed by an s. Thus, īstī, īstis and īsse\\\"\\r\\n11,It is rare that the “v” appear as a form.\\r\\n12,Used by early writers.\\r\\n13,Genitive\\r\\n17,The passive of intransitive verbs is very often used impersonally.\\r\\n\";","export default \"Lemma,PrincipalParts,Form,Voice,Mood,Tense,Number,Person,Footnote\\r\\nsum,esse_fui_futurus,futūrus,active,,future,,,\\r\\nsum,esse_fui_futurus,-a,active,,future,,,\\r\\nsum,esse_fui_futurus,-um,active,,future,,,\\r\\nfero,ferre_tuli_latus,ferēns,active,,present,,,\\r\\nfero,ferre_tuli_latus,-entis,active,,present,,,\\r\\nfero,ferre_tuli_latus,latūrus,active,,future,,,\\r\\nfero,ferre_tuli_latus,ferendus,passive,,future,,,4\\r\\nfero,ferre_tuli_latus,lātus,passive,,perfect,,,8\\r\\nfero,ferre_tuli_latus,lāta,passive,,perfect,,,8\\r\\nfero,ferre_tuli_latus,lātum,passive,,perfect,,,8\\r\\nvolo,velle_volui_-,volēns,active,,present,,,\\r\\nvolo,velle_volui_-,-entis,active,,present,,,\\r\\neo,ire_ivi(ii)_itus,iēns,active,,present,,,\\r\\neo,ire_ivi(ii)_itus,euntis,active,,present,,,13\\r\\neo,ire_ivi(ii)_itus,itūrus,active,,future,,,\\r\\neo,ire_ivi(ii)_itus,eundum,passive,,future,,,4\\r\\neo,ire_ivi(ii)_itus,itus,passive,,perfect,,,17\\r\\npossum,posse_potui_-,potēns,active,,present,,,\\r\\ninsum,inesse_infui_infuturus,infutūrus,active,,future,,,\\r\\nprosum,prodesse_profui_profuturus,profutūrus,active,,future,,,\\r\\nnolo,nolle_nolui_-,nolēns,active,,present,,,\\r\\nnolo,nolle_nolui_-,-entis,active,,present,,,\\r\\nabsum,abesse_afui_afuturus,absēns,active,,present,,,\\r\\nabsum,abesse_afui_afuturus,afutūrus,active,,future,,,\\r\\nadsum,adesse_adfui_adfuturus,adfutūrus,active,,future,,,\\r\\ndesum,deesse_defui_defuturus,defutūrus,active,,future,,,\\r\\nintersum,interesse_interfui_interfuturus,interfutūrus,active,,future,,,\\r\\nobsum,obesse_obfui_obfuturus,obfutūrus,active,,future,,,\\r\\npraesum,praeesse_praefui_praefuturus,praesēns,active,,present,,,\\r\\npraesum,praeesse_praefui_praefuturus,praefutūrus,active,,future,,,\\r\\nsubsum,subesse_subfui_subfuturus,subfutūrus,active,,future,,,\\r\\nsupersum,superesse_superfui_superfuturus,superfutūrus,active,,future,,,\\r\\nqueo,quire_quivi(ii)_quitus,quiēns,active,,present,,,\\r\\nqueo,quire_quivi(ii)_quitus,quitūrus,active,,future,,,\\r\\nqueo,quire_quivi(ii)_quitus,quitus,passive,,perfect,,,\\r\\nqueo,quire_quivi(ii)_quitus,queundus,passive,,future,,,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequiēns,active,,present,,,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequitūrus,active,,future,,,\\r\\nadeo,adire_adivi(ii)_aditus,adiēns,active,,present,,,\\r\\nadeo,adire_adivi(ii)_aditus,aditūrus,active,,future,,,\\r\\nadeo,adire_adivi(ii)_aditus,aditus,passive,,perfect,,,\\r\\nadeo,adire_adivi(ii)_aditus,adeundus,passive,,future,,,\\r\\nineo,inire_inivi(ii)_initus,iniēns,active,,present,,,\\r\\nineo,inire_inivi(ii)_initus,initūrus,active,,future,,,\\r\\nineo,inire_inivi(ii)_initus,initus,passive,,perfect,,,\\r\\nineo,inire_inivi(ii)_initus,ineundus,passive,,future,,,\\r\\nveneo,venire_venivi(ii)_venitus,vēniēns,active,,present,,,\\r\\nveneo,venire_venivi(ii)_venitus,vēnitūrus,active,,future,,,\\r\\nveneo,venire_venivi(ii)_venitus,vēnitus,passive,,perfect,,,17\\r\\n\";","export default \"Ending,Conjugation,Voice,Mood,Tense,Number,Person,Case,Type,Footnote\\r\\nāns,1st,active,,present,,,,regular,\\r\\nantis,1st,active,,present,,,,irregular,\\r\\nēns,2nd,active,,present,,,,regular,\\r\\nentis,2nd,active,,present,,,,irregular,\\r\\nēns,3rd,active,,present,,,,regular,\\r\\nentis,3rd,active,,present,,,,irregular,\\r\\niēns,4th,active,,present,,,,regular,\\r\\nientis,4th,active,,present,,,,irregular,\\r\\n,1st,active,,perfect,,,,,\\r\\n,2nd,active,,perfect,,,,,\\r\\n,3rd,active,,perfect,,,,,\\r\\n,4th,active,,perfect,,,,,\\r\\nūrus,1st,active,,future,,,,regular,\\r\\na,1st,active,,future,,,,irregular,\\r\\num,1st,active,,future,,,,irregular,\\r\\nūrus,2nd,active,,future,,,,regular,\\r\\na,2nd,active,,future,,,,irregular,\\r\\num,2nd,active,,future,,,,irregular,\\r\\nūrus,3rd,active,,future,,,,regular,\\r\\na,3rd,active,,future,,,,irregular,\\r\\num,3rd,active,,future,,,,irregular,\\r\\nūrus,4th,active,,future,,,,regular,\\r\\na,4th,active,,future,,,,regular,\\r\\num,4th,active,,future,,,,regular,\\r\\n,1st,passive,,present,,,,,\\r\\n,2nd,passive,,present,,,,,\\r\\n,3rd,passive,,present,,,,,\\r\\n,4th,passive,,present,,,,,\\r\\nus,1st,passive,,perfect,,,,regular,\\r\\na,1st,passive,,perfect,,,,irregular,\\r\\num,1st,passive,,perfect,,,,irregular,\\r\\nus,2nd,passive,,perfect,,,,regular,\\r\\na,2nd,passive,,perfect,,,,irregular,\\r\\num,2nd,passive,,perfect,,,,irregular,\\r\\nus,3rd,passive,,perfect,,,,regular,\\r\\na,3rd,passive,,perfect,,,,irregular,\\r\\num,3rd,passive,,perfect,,,,irregular,\\r\\nus,4th,passive,,perfect,,,,regular,\\r\\na,4th,passive,,perfect,,,,irregular,\\r\\num,4th,passive,,perfect,,,,irregular,\\r\\nandus,1st,passive,,future,,,,regular,\\r\\na,1st,passive,,future,,,,irregular,\\r\\num,1st,passive,,future,,,,irregular,\\r\\nendus,2nd,passive,,future,,,,regular,\\r\\na,2nd,passive,,future,,,,irregular,\\r\\num,2nd,passive,,future,,,,irregular,\\r\\nendus,3rd,passive,,future,,,,regular,\\r\\niendus,4th,passive,,future,,,,regular,\\r\\na,4th,passive,,future,,,,irregular,\\r\\num,4th,passive,,future,,,,irregular,\";","export default \"Index,Text\\r\\n1,\\\"tU is made emphatic by adding on the endings –te, –temet or –timet. \\r\\n            The other forms of the personal pronoun (with the exception of the genitive plural) \\r\\n            are made emphatic by the addition of –met to the original form. Early emphatic forms include mEpte and tEpte.\\\"\\r\\n2,Enclitics –ce or –c are sometimes added to forms of hic. Common examples include huiusce and hIsce.\\r\\n3,Earlier forms.\\r\\n4,The plural forms of the Interrogatives are the same as the plural forms of the Relative.\";","export default \"Form Set,Headwords,Class,Person,Number,Case,Type,Form,Footnote\\r\\n1,,personal,1st,singular,nominative,regular,ego,\\r\\n1,,personal,1st,singular,genitive,regular,meI,\\r\\n1,,personal,1st,singular,genitive,irregular,mIs,1\\r\\n1,,personal,1st,singular,dative,regular,mihi,\\r\\n1,,personal,1st,singular,dative,irregular,mI,\\r\\n1,,personal,1st,singular,accusative,regular,mE,\\r\\n1,,personal,1st,singular,accusative,irregular,mEmE,\\r\\n1,,personal,1st,singular,ablative,regular,mE,\\r\\n1,,personal,1st,singular,ablative,irregular,mEmE,\\r\\n1,,personal,1st,singular,vocative,,,\\r\\n1,,personal,2nd,singular,nominative,regular,tU,\\r\\n1,,personal,2nd,singular,genitive,regular,tuI,\\r\\n1,,personal,2nd,singular,genitive,irregular,tIs,1\\r\\n1,,personal,2nd,singular,dative,regular,tibi,\\r\\n1,,personal,2nd,singular,accusative,regular,tE,\\r\\n1,,personal,2nd,singular,accusative,irregular,tEtE,\\r\\n1,,personal,2nd,singular,ablative,regular,tE,\\r\\n1,,personal,2nd,singular,ablative,irregular,tEtE,\\r\\n1,,personal,2nd,singular,vocative,regular,tU,\\r\\n1,,personal,1st,plural,nominative,regular,nOs,\\r\\n1,,personal,1st,plural,genitive,regular,nostrum,\\r\\n1,,personal,1st,plural,dative,regular,nObIs,\\r\\n1,,personal,1st,plural,accusative,regular,nOs,\\r\\n1,,personal,1st,plural,ablative,regular,nObIs,\\r\\n1,,personal,1st,plural,vocative,,,\\r\\n1,,personal,2nd,plural,nominative,regular,vOs,\\r\\n1,,personal,2nd,plural,genitive,regular,vestrum,\\r\\n1,,personal,2nd,plural,genitive,regular,vestrI,\\r\\n1,,personal,2nd,plural,genitive,irregular,vostrum,\\r\\n1,,personal,2nd,plural,genitive,irregular,vostrI,\\r\\n1,,personal,2nd,plural,dative,regular,vObIs,\\r\\n1,,personal,2nd,plural,accusative,regular,vOs,\\r\\n1,,personal,2nd,plural,ablative,regular,vObIs,\\r\\n1,,personal,2nd,plural,vocative,regular,vOs,\\r\\n2,,reflexive,3rd,singular,nominative,,,\\r\\n2,,reflexive,3rd,singular,genitive,regular,suI,\\r\\n2,,reflexive,3rd,singular,dative,regular,sibi,\\r\\n2,,reflexive,3rd,singular,accusative,regular,sE,\\r\\n2,,reflexive,3rd,singular,accusative,irregular,sEsE,\\r\\n2,,reflexive,3rd,singular,ablative,regular,sE,\\r\\n2,,reflexive,3rd,singular,ablative,irregular,sEsE,\\r\\n2,,reflexive,3rd,singular,vocative,,,\\r\\n2,,reflexive,3rd,plural,nominative,,,\\r\\n2,,reflexive,3rd,plural,genitive,regular,suI,\\r\\n2,,reflexive,3rd,plural,dative,regular,sibi,\\r\\n2,,reflexive,3rd,plural,accusative,regular,sE,\\r\\n2,,reflexive,3rd,plural,accusative,irregular,sEsE,\\r\\n2,,reflexive,3rd,plural,ablative,regular,sE,\\r\\n2,,reflexive,3rd,plural,ablative,irregular,sEsE,\\r\\n2,,reflexive,3rd,plural,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,nominative,regular,meus,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,genitive,regular,meI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,dative,regular,meO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,accusative,regular,meum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,ablative,regular,meO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,vocative,regular,mI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,vocative,irregular,meus,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,nominative,regular,mea,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,genitive,regular,meae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,dative,regular,meae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,accusative,regular,meam,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,ablative,regular,meA,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,vocative,regular,mea,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,nominative,regular,meum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,genitive,regular,meI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,dative,regular,meO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,accusative,regular,meum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,ablative,regular,meO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,singular,vocative,regular,meum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,nominative,regular,tuus,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,genitive,regular,tuI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,dative,regular,tuO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,accusative,regular,tuum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,ablative,regular,tuO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,nominative,regular,tua,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,genitive,regular,tuae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,dative,regular,tuae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,accusative,regular,tuam,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,ablative,regular,tuA,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,nominative,regular,tuum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,genitive,regular,tuI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,dative,regular,tuO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,accusative,regular,tuum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,ablative,regular,tuO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,singular,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,nominative,regular,suus,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,genitive,regular,suI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,dative,regular,suO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,accusative,regular,suum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,ablative,regular,suO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,nominative,regular,sua,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,genitive,regular,suae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,dative,regular,suae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,accusative,regular,suam,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,ablative,regular,suA,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,nominative,regular,suum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,genitive,regular,suI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,dative,regular,suO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,accusative,regular,suum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,ablative,regular,suO,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,singular,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,nominative,regular,meI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,genitive,regular,meOrum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,dative,regular,meIs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,accusative,regular,meOs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,ablative,regular,meIs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,vocative,regular,meI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,nominative,regular,meae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,genitive,regular,meArum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,dative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,accusative,regular,meAs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,ablative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,vocative,regular,meae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,nominative,regular,mea,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,genitive,regular,meOrum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,dative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,accusative,regular,mea,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,ablative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,1st,plural,vocative,regular,mea,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,nominative,regular,tuI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,genitive,regular,tuOrum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,dative,regular,tuIs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,accusative,regular,tuOs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,ablative,regular,tuIs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,nominative,regular,tuae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,genitive,regular,tuArum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,dative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,accusative,regular,tuAs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,ablative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,nominative,regular,tua,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,genitive,regular,tuOrum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,dative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,accusative,regular,tua,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,ablative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,2nd,plural,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,nominative,regular,suI,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,genitive,regular,suOrum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,dative,regular,suIs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,accusative,regular,suOs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,ablative,regular,suIs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,nominative,regular,suae,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,genitive,regular,suArum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,dative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,accusative,regular,suAs,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,ablative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,vocative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,nominative,regular,sua,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,genitive,regular,suOrum,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,dative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,accusative,regular,sua,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,ablative,,,\\r\\n3,\\\"meus,mea,meum;tuus,tua,tuum;suus,sua,suum\\\",possessive,3rd,plural,vocative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,nominative,regular,noster,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,genitive,regular,nostrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,dative,regular,nostrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,accusative,regular,nostrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,ablative,regular,nostrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,vocative,regular,noster,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,nominative,regular,nostra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,genitive,regular,nostrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,dative,regular,nostrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,accusative,regular,nostram,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,ablative,regular,nostrA,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,vocative,regular,nostra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,nominative,regular,nostrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,genitive,regular,nostrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,dative,regular,nostrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,accusative,regular,nostrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,ablative,regular,nostrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,singular,vocative,regular,nostrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,nominative,regular,vester,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,genitive,regular,vestrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,dative,regular,vestrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,accusative,regular,vestrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,ablative,regular,vestrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,vocative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,nominative,regular,vestra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,genitive,regular,vestrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,dative,regular,vestrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,accusative,regular,vestram,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,ablative,regular,vestrA,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,vocative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,nominative,regular,vestum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,genitive,regular,vestrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,dative,regular,vestrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,accusative,regular,vestrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,ablative,regular,vestrO,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,singular,vocative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,nominative,regular,nostrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,genitive,regular,nostrOrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,dative,regular,nostrIs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,accusative,regular,nostrOs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,ablative,regular,nostrIs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,vocative,regular,nostrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,nominative,regular,nostrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,genitive,regular,nostrArum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,dative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,accusative,regular,nostrAs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,ablative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,vocative,regular,nostrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,nominative,regular,nostra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,genitive,regular,nostrOrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,dative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,accusative,regular,nostra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,ablative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,1st,plural,vocative,regular,nostra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,nominative,regular,vestrI,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,genitive,regular,vestrOrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,dative,regular,vestrIs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,accusative,regular,vestrOs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,ablative,regular,vestrIs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,vocative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,nominative,regular,vestrae,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,genitive,regular,vestrArum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,dative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,accusative,regular,vestrAs,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,ablative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,,vocative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,nominative,regular,vestra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,genitive,regular,vestrOrum,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,dative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,accusative,regular,vestra,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,ablative,,,\\r\\n4,\\\"noster,nostra,nostrum;vester,vestra,vestrum\\\",possessive,2nd,plural,vocative,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,nominative,regular,is,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,genitive,regular,eius,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,dative,regular,eI,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,accusative,regular,eum,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,ablative,regular,eO,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,nominative,regular,ea,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,genitive,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,dative,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,accusative,regular,eam,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,ablative,regular,eA,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,nominative,regular,id,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,genitive,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,dative,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,accusative,regular,id,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,singular,ablative,regular,eO,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,nominative,regular,eI,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,nominative,irregular,iI,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,nominative,irregular,I,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,genitive,regular,eOrum,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,dative,regular,eIs,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,dative,irregular,iIs,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,dative,irregular,Is,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,accusative,regular,eOs,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,ablative,regular,eIs,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,ablative,irregular,iIs,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,ablative,irregular,Is,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,nominative,regular,eae,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,genitive,regular,eArum,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,dative,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,accusative,regular,eAs,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,ablative,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,nominative,regular,ea,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,genitive,regular,eOrum,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,dative,,,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,accusative,regular,ea,\\r\\n5,\\\"is,ea,id\\\",demonstrative,,plural,ablative,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,nominative,regular,ille,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,genitive,regular,illIus,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,dative,regular,illI,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,accusative,regular,illum,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,ablative,regular,illO,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,nominative,regular,illa,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,genitive,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,dative,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,accusative,regular,illam,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,ablative,regular,illA,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,nominative,regular,illud,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,genitive,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,dative,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,accusative,regular,illud,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,singular,ablative,regular,illO,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,nominative,regular,illI,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,genitive,regular,illOrum,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,dative,regular,illIs,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,accusative,regular,illOs,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,ablative,regular,illIs,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,nominative,regular,illae,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,genitive,regular,illArum,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,dative,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,accusative,regular,illAs,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,ablative,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,nominative,regular,Illa,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,genitive,regular,illOrum,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,dative,,,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,accusative,regular,illa,\\r\\n6,\\\"ille,illa,illud\\\",demonstrative,,plural,ablative,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,nominative,regular,ipse,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,genitive,regular,ipsIus,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,dative,regular,ipsI,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,accusative,regular,ipsum,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,ablative,regular,ipsO,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,nominative,regular,ipsa,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,genitive,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,dative,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,accusative,regular,ipsam,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,ablative,regular,ipsA,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,nominative,regular,ipsum,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,genitive,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,dative,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,accusative,regular,ipsum,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,singular,ablative,regular,ipsO,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,nominative,regular,ipsI,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,genitive,regular,ipsOrum,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,dative,regular,ipsIs,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,accusative,regular,ipsOs,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,ablative,regular,ipsIs,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,nominative,regular,ipsae,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,genitive,regular,ipsArum,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,dative,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,accusative,regular,ipsAs,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,ablative,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,nominative,regular,ipsa,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,genitive,regular,ipsOrum,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,dative,,,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,accusative,regular,ipsa,\\r\\n7,\\\"ipse,ipsa,ipsum\\\",demonstrative,,plural,ablative,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,nominative,regular,iste,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,genitive,regular,istIus,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,dative,regular,istI,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,accusative,regular,istum,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,ablative,regular,istO,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,nominative,regular,ista,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,genitive,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,dative,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,accusative,regular,istam,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,ablative,regular,istA,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,nominative,regular,istud,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,genitive,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,dative,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,accusative,regular,istud,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,singular,ablative,regular,istO,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,nominative,regular,istI,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,genitive,regular,istOrum,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,dative,regular,istIs,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,accusative,regular,istOs,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,ablative,regular,istIs,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,nominative,regular,istae,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,genitive,regular,istArum,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,dative,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,accusative,regular,istAs,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,ablative,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,nominative,regular,ista,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,genitive,regular,istOrum,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,dative,,,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,accusative,regular,ista,\\r\\n8,\\\"iste,ista,istud\\\",demonstrative,,plural,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,nominative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,genitive,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,dative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,accusative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,vocative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,nominative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,genitive,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,dative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,accusative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,nominative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,genitive,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,dative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,accusative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,singular,vocative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,nominative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,genitive,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,dative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,accusative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,vocative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,nominative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,genitive,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,dative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,accusative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,vocative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,nominative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,genitive,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,dative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,accusative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,ablative,,,\\r\\n9,\\\"is,id,ea;Idem,eadem,idem;ille,illa,illud;ipse,ipsa,ipsum;iste,ista,istud\\\",demonstrative,,plural,vocative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,nominative,regular,hIc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,genitive,regular,huius,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,dative,regular,huic,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,accusative,regular,hunc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,ablative,regular,hOc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,vocative,regular,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,nominative,regular,haec,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,genitive,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,dative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,accusative,regular,hanc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,ablative,regular,hAc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,vocative,regular,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,nominative,regular,hOc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,genitive,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,dative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,accusative,regular,hOc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,ablative,regular,hOc,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,singular,vocative,regular,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,nominative,regular,hI,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,genitive,regular,hOrum,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,dative,regular,hIs,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,accusative,regular,hOs,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,ablative,regular,hIs,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,vocative,regular,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,nominative,regular,hae,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,genitive,regular,hArum,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,dative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,accusative,regular,hAs,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,ablative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,vocative,regular,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,nominative,regular,haec,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,genitive,regular,hOrum,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,dative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,accusative,regular,haec,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,ablative,,,\\r\\n10,\\\"hIc,haec,hOc\\\",demonstrative,,plural,vocative,regular,,\\r\\n11,,relative,,singular,nominative,regular,quI,\\r\\n11,,relative,,singular,genitive,regular,cuius,\\r\\n11,,relative,,singular,genitive,irregular,quoius,3\\r\\n11,,relative,,singular,dative,regular,cui,\\r\\n11,,relative,,singular,dative,irregular,quoius,3\\r\\n11,,relative,,singular,accusative,regular,quem,\\r\\n11,,relative,,singular,ablative,regular,quO,\\r\\n11,,relative,,singular,vocative,regular,,\\r\\n11,,relative,,singular,nominative,regular,qua,\\r\\n11,,relative,,singular,nominative,irregular,quae,\\r\\n11,,relative,,singular,genitive,,,\\r\\n11,,relative,,singular,dative,,,\\r\\n11,,relative,,singular,accusative,regular,quam,\\r\\n11,,relative,,singular,ablative,regular,quA,\\r\\n11,,relative,,singular,vocative,regular,,\\r\\n11,,relative,,singular,nominative,regular,quod,\\r\\n11,,relative,,singular,genitive,,,\\r\\n11,,relative,,singular,dative,,,\\r\\n11,,relative,,singular,accusative,regular,quod,\\r\\n11,,relative,,singular,ablative,regular,quO,\\r\\n11,,relative,,singular,vocative,regular,,\\r\\n11,,relative,,plural,nominative,regular,quI,\\r\\n11,,relative,,plural,nominative,regular,quEs,3\\r\\n11,,relative,,plural,genitive,regular,quOrum,\\r\\n11,,relative,,plural,dative,regular,quibus,\\r\\n11,,relative,,plural,dative,irregular,quIs,\\r\\n11,,relative,,plural,accusative,regular,quOs,\\r\\n11,,relative,,plural,ablative,regular,quibus,\\r\\n11,,relative,,plural,ablative,irregular,quIs,\\r\\n11,,relative,,plural,vocative,regular,,\\r\\n11,,relative,,plural,nominative,regular,quae,\\r\\n11,,relative,,plural,genitive,regular,quArum,\\r\\n11,,relative,,plural,dative,,,\\r\\n11,,relative,,plural,accusative,regular,quAs,\\r\\n11,,relative,,plural,ablative,,,\\r\\n11,,relative,,plural,vocative,regular,,\\r\\n11,,relative,,plural,nominative,regular,quae,\\r\\n11,,relative,,plural,genitive,regular,quorum,\\r\\n11,,relative,,plural,dative,,,\\r\\n11,,relative,,plural,accusative,regular,quae,\\r\\n11,,relative,,plural,ablative,,,\\r\\n11,,relative,,plural,vocative,regular,,\\r\\n12,,interrogative,,singular,nominative,regular,quis,\\r\\n12,,interrogative,,singular,genitive,regular,cuius,\\r\\n12,,interrogative,,singular,dative,regular,cui,\\r\\n12,,interrogative,,singular,accusative,regular,quem,\\r\\n12,,interrogative,,singular,ablative,regular,quO,\\r\\n12,,interrogative,,singular,vocative,regular,,\\r\\n12,,interrogative,,singular,nominative,regular,quis,\\r\\n12,,interrogative,,singular,genitive,regular,cuius,\\r\\n12,,interrogative,,singular,dative,regular,cui,\\r\\n12,,interrogative,,singular,accusative,regular,quem,\\r\\n12,,interrogative,,singular,ablative,regular,quO,\\r\\n12,,interrogative,,singular,vocative,regular,,\\r\\n12,,interrogative,,singular,nominative,regular,quid,\\r\\n12,,interrogative,,singular,genitive,,,\\r\\n12,,interrogative,,singular,dative,,,\\r\\n12,,interrogative,,singular,accusative,regular,quid,\\r\\n12,,interrogative,,singular,ablative,regular,quO,\\r\\n12,,interrogative,,singular,vocative,regular,,\\r\\n12,,interrogative,,plural,nominative,regular,quI,\\r\\n12,,interrogative,,plural,nominative,regular,quEs,3\\r\\n12,,interrogative,,plural,genitive,regular,quOrum,\\r\\n12,,interrogative,,plural,dative,regular,quibus,\\r\\n12,,interrogative,,plural,dative,irregular,quIs,\\r\\n12,,interrogative,,plural,accusative,regular,quOs,\\r\\n12,,interrogative,,plural,ablative,regular,quibus,\\r\\n12,,interrogative,,plural,ablative,irregular,quIs,\\r\\n12,,interrogative,,plural,vocative,regular,,\\r\\n12,,interrogative,,plural,nominative,regular,quae,\\r\\n12,,interrogative,,plural,genitive,regular,quArum,\\r\\n12,,interrogative,,plural,dative,,,\\r\\n12,,interrogative,,plural,accusative,regular,quAs,\\r\\n12,,interrogative,,plural,ablative,,,\\r\\n12,,interrogative,,plural,vocative,regular,,\\r\\n12,,interrogative,,plural,nominative,regular,quae,\\r\\n12,,interrogative,,plural,genitive,regular,quorum,\\r\\n12,,interrogative,,plural,dative,,,\\r\\n12,,interrogative,,plural,accusative,regular,quae,\\r\\n12,,interrogative,,plural,ablative,,,\\r\\n12,,interrogative,,plural,vocative,regular,,\";","export default \"Index,Text\\r\\n1,\\\"Adjectives in -dicus, -ficus, and -volus form the Comparative and Superlative as though from forms in -dīcēns, -ficēns, -volēns, which were anciently used as adjectives.\\\"\\r\\n2,\\\"Adjectives in -er form the Superlative by appending -rimus to the Nominative of the Positive. The Comparative is regular.\\\"\\r\\n3,\\\"Five Adjectives in -ilis form the Superlative by adding -limus to the Stem of the Positive deprived of its final vowel. The Comparative is regular. They are facilis, difficilis, similis, dissimilis, humilis.\\\"\\r\\n4,\\\"The superlatives in -mus like īmus, summus, prīmus, are relics of old forms of comparison.\\\"\\r\\n\";","export default \"Ending,Number,Case,Gender,Type,Footnote\\r\\nissima,singular,nominative,feminine,regular,\\r\\nissimus,singular,nominative,masculine,regular,\\r\\nissimum,singular,nominative,neuter,regular,\\r\\nentissima,singular,nominative,feminine,irregular,1\\r\\nentissimus,singular,nominative,masculine,irregular,1\\r\\nentissimum,singular,nominative,neuter,irregular,1\\r\\nrima,singular,nominative,feminine,irregular,2\\r\\nrimus,singular,nominative,masculine,irregular,2\\r\\nrimum,singular,nominative,neuter,irregular,2\\r\\nlima,singular,nominative,feminine,irregular,3\\r\\nlimus,singular,nominative,masculine,irregular,3\\r\\nlimum,singular,nominative,neuter,irregular,3\\r\\nma,singular,nominative,feminine,irregular,4\\r\\nmus,singular,nominative,masculine,irregular,4\\r\\nmum,singular,nominative,neuter,irregular,4\\r\\nissimae,singular,genitive,feminine,regular,\\r\\nissimī,singular,genitive,masculine,regular,\\r\\nissimī,singular,genitive,neuter,regular,\\r\\nissimae,singular,dative,feminine,regular,\\r\\nissimō,singular,dative,masculine,regular,\\r\\nissimō,singular,dative,neuter,regular,\\r\\nissimam,singular,accusative,feminine,regular,\\r\\nissimum,singular,accusative,masculine,regular,\\r\\nissimum,singular,accusative,neuter,regular,\\r\\nissimā,singular,ablative,feminine,regular,\\r\\nissimō,singular,ablative,masculine,regular,\\r\\nissimō,singular,ablative,neuter,regular,\\r\\nissima,singular,vocative,feminine,regular,\\r\\nissime,singular,vocative,masculine,regular,\\r\\nissimum,singular,vocative,neuter,regular,\\r\\nissimae,plural,nominative,feminine,regular,\\r\\nissimī,plural,nominative,masculine,regular,\\r\\nissima,plural,nominative,neuter,regular,\\r\\nissimārum,plural,genitive,feminine,regular,\\r\\nissimōrum,plural,genitive,masculine,regular,\\r\\nissimōrum,plural,genitive,neuter,regular,\\r\\nissimīs,plural,dative,feminine,regular,\\r\\nissimīs,plural,dative,masculine,regular,\\r\\nissimīs,plural,dative,neuter,regular,\\r\\nissimās,plural,accusative,feminine,regular,\\r\\nissimōs,plural,accusative,masculine,regular,\\r\\nissima,plural,accusative,neuter,regular,\\r\\nissimīs,plural,ablative,feminine,regular,\\r\\nissimīs,plural,ablative,masculine,regular,\\r\\nissimīs,plural,ablative,neuter,regular,\\r\\nissimae,plural,vocative,feminine,regular,\\r\\nissimī,plural,vocative,masculine,regular,\\r\\nissima,plural,vocative,neuter,regular,\\r\\n\";","export default \"Index,Text\\r\\n1,Old forms.\\r\\n2,Alternate forms.\\r\\n3,\\\"The original forms of ferrem and ferre are fer-sēm and fer-se, respectively.\\\"\\r\\n4,Gerundive (Future Passive Participle)\\r\\n5,singular\\r\\n6,\\\"The verbs nōlō and malō are compounds of volo. They therefore attach nō- or mā- to the beginning of each verb, in place of vo- or vu-. Exceptions to this are found in the present tense: nōlō nōlumus mālō mālumus nōn vīs nōn vultis māvīs māvultis nōn vult nōlunt māvult mālunt In addition, nōlō is the only verb of the three that has present and future tense imperative forms of the verb: nōlī, nōlīte, and nōlītō, nōlītōte, respectively.\\\"\\r\\n7,An earlier form.\\r\\n8,\\\"The perfect passive participle ending will change according to its subject's gender, number and case. Endings shown here are the masculine, feminine and neuter nominative singular.\\\"\\r\\n9,A passive form of the verb that is used impersonally is itum est.\\r\\n10,\\\"While the perfect form of this verb is regular, ii usually contracts to i when it is followed by an s. Thus, īstī, īstis and īsse\\\"\\r\\n11,It is rare that the “v” appear as a form.\\r\\n12,Used by early writers.\";","export default \"Lemma,PrincipalParts,Form,Case,Footnote\\r\\nfero,ferre_tuli_latus,lātum,accusative,\\r\\nfero,ferre_tuli_latus,lātū,ablative,\\r\\neo,ire_ivi(ii)_itus,itum,accusative,\\r\\neo,ire_ivi(ii)_itus,itū,ablative,\\r\\nqueo,quire_quivi(ii)_quitus,quitum,accusative,\\r\\nqueo,quire_quivi(ii)_quitus,quitū,ablative,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequitum,accusative,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequitū,ablative,\\r\\nadeo,adire_adivi(ii)_aditus,aditum,accusative,\\r\\nadeo,adire_adivi(ii)_aditus,aditū,ablative,\\r\\nineo,inire_inivi(ii)_initus,initum,accusative,\\r\\nineo,inire_inivi(ii)_initus,initū,ablative,\\r\\nveneo,venire_venivi(ii)_venitus,vēnitum,accusative,\\r\\nveneo,venire_venivi(ii)_venitus,vēnitū,ablative,\\r\\n\";","export default \"Ending,Case,Footnote\\r\\num,accusative,\\r\\nū,ablative,\\r\\n\";","export default \"Index,Text\\r\\n2,Chiefly in poetry.\\r\\n3,\\\"In tenses based on the perfect stem (the perfect, pluperfect and future perfect of the Active voice) a v between two vowels is often lost with contraction of the two vowels, thus āvī to ā, ēvī to ē, ōvi to ō. Perfects in īvī often omit the v but rarely contract the vowels, except before ss or st, and sometimes in the third person. In addition to the use of v or u, the Active perfect stem can also be formed in a number of other ways, such as the addition of s to the root (eg carpsi), reduplication of the root (eg cecidi from cado), and simple lengthening of the vowel (eg vidī from video or legī from lego).\\\"\\r\\n4,\\\"Dic, duc, fac, and fer lack a final vowel in the imperative in classical Latin. The singular imperative of the verb sciō is always scītō, and the plural is usually scītōte.\\\"\\r\\n5,Common in epic poetry.\\r\\n6,Present in early Latin but chiefly confined to popular use until Livy and later writers.\\r\\n7,The verb fīō is a 4th conjugation verb that is irregular in only two forms: the present infinitive fierī and the imperfect subjunctive fierem.\";","export default \"Index,Text\\r\\n1,Old forms.\\r\\n2,Alternate forms.\\r\\n3,\\\"The original forms of ferrem and ferre are fer-sēm and fer-se, respectively.\\\"\\r\\n4,Gerundive (Future Passive Participle)\\r\\n5,singular\\r\\n6,\\\"The verbs nōlō and malō are compounds of volo. They therefore attach nō- or mā- to the beginning of each verb, in place of vo- or vu-. Exceptions to this are found in the present tense: nōlō nōlumus mālō mālumus nōn vīs nōn vultis māvīs māvultis nōn vult nōlunt māvult mālunt In addition, nōlō is the only verb of the three that has present and future tense imperative forms of the verb: nōlī, nōlīte, and nōlītō, nōlītōte, respectively.\\\"\\r\\n7,An earlier form.\\r\\n8,\\\"The perfect passive participle ending will change according to its subject's gender, number and case. Endings shown here are the masculine, feminine and neuter nominative singular.\\\"\\r\\n9,A passive form of the verb that is used impersonally is itum est.\\r\\n10,\\\"While the perfect form of this verb is regular, ii usually contracts to i when it is followed by an s. Thus, īstī, īstis and īsse\\\"\\r\\n11,It is rare that the “v” appear as a form.\\r\\n12,Used by early writers.\\r\\n14,\\\"Earlier form prod, retains its original d before e.\\\"\\r\\n15,Syncopated perfect often drops the “v” and contracts vowel.\\r\\n16,Uncommon.\\r\\n\";","export default \"Lemma,PrincipalParts,Form,Voice,Mood,Tense,Number,Person,Footnote\\r\\nsum,esse_fui_futurus,sum,,indicative,present,singular,1st,\\r\\nsum,esse_fui_futurus,es,,indicative,present,singular,2nd,\\r\\nsum,esse_fui_futurus,est,,indicative,present,singular,3rd,\\r\\nsum,esse_fui_futurus,sumus,,indicative,present,plural,1st,\\r\\nsum,esse_fui_futurus,estis,,indicative,present,plural,2nd,\\r\\nsum,esse_fui_futurus,sunt,,indicative,present,plural,3rd,\\r\\nsum,esse_fui_futurus,sim,,subjunctive,present,singular,1st,\\r\\nsum,esse_fui_futurus,siem,,subjunctive,present,singular,1st,1\\r\\nsum,esse_fui_futurus,fuam,,subjunctive,present,singular,1st,1\\r\\nsum,esse_fui_futurus,sīs,,subjunctive,present,singular,2nd,\\r\\nsum,esse_fui_futurus,siēs,,subjunctive,present,singular,2nd,1\\r\\nsum,esse_fui_futurus,fuās,,subjunctive,present,singular,2nd,1\\r\\nsum,esse_fui_futurus,sit,,subjunctive,present,singular,3rd,\\r\\nsum,esse_fui_futurus,siet,,subjunctive,present,singular,3rd,1\\r\\nsum,esse_fui_futurus,fuat,,subjunctive,present,singular,3rd,1\\r\\nsum,esse_fui_futurus,sīmus,,subjunctive,present,plural,1st,\\r\\nsum,esse_fui_futurus,sītis,,subjunctive,present,plural,2nd,\\r\\nsum,esse_fui_futurus,sint,,subjunctive,present,plural,3rd,\\r\\nsum,esse_fui_futurus,sient,,subjunctive,present,plural,3rd,1\\r\\nsum,esse_fui_futurus,fuant,,subjunctive,present,plural,3rd,1\\r\\nsum,esse_fui_futurus,es,,imperative,present,singular,2nd,\\r\\nsum,esse_fui_futurus,este,,imperative,present,plural,2nd,\\r\\nsum,esse_fui_futurus,esse,,infinitive,present,,,\\r\\nsum,esse_fui_futurus,eram,,indicative,imperfect,singular,1st,\\r\\nsum,esse_fui_futurus,erās,,indicative,imperfect,singular,2nd,\\r\\nsum,esse_fui_futurus,erat,,indicative,imperfect,singular,3rd,\\r\\nsum,esse_fui_futurus,erāmus,,indicative,imperfect,plural,1st,\\r\\nsum,esse_fui_futurus,erātis,,indicative,imperfect,plural,2nd,\\r\\nsum,esse_fui_futurus,erant,,indicative,imperfect,plural,3rd,\\r\\nsum,esse_fui_futurus,essem,,subjunctive,imperfect,singular,1st,\\r\\nsum,esse_fui_futurus,forem,,subjunctive,imperfect,singular,1st,2\\r\\nsum,esse_fui_futurus,essēs,,subjunctive,imperfect,singular,2nd,\\r\\nsum,esse_fui_futurus,forēs,,subjunctive,imperfect,singular,2nd,2\\r\\nsum,esse_fui_futurus,esset,,subjunctive,imperfect,singular,3rd,\\r\\nsum,esse_fui_futurus,foret,,subjunctive,imperfect,singular,3rd,2\\r\\nsum,esse_fui_futurus,essēmus,,subjunctive,imperfect,plural,1st,\\r\\nsum,esse_fui_futurus,forēmus,,subjunctive,imperfect,plural,1st,2\\r\\nsum,esse_fui_futurus,essētis,,subjunctive,imperfect,plural,2nd,\\r\\nsum,esse_fui_futurus,forētis,,subjunctive,imperfect,plural,2nd,2\\r\\nsum,esse_fui_futurus,essent,,subjunctive,imperfect,plural,3rd,\\r\\nsum,esse_fui_futurus,forent,,subjunctive,imperfect,plural,3rd,2\\r\\nsum,esse_fui_futurus,erō,,indicative,future,singular,1st,\\r\\nsum,esse_fui_futurus,eris,,indicative,future,singular,2nd,\\r\\nsum,esse_fui_futurus,erit,,indicative,future,singular,3rd,\\r\\nsum,esse_fui_futurus,escit,,indicative,future,singular,3rd,1\\r\\nsum,esse_fui_futurus,erimus,,indicative,future,plural,1st,\\r\\nsum,esse_fui_futurus,eritis,,indicative,future,plural,2nd,\\r\\nsum,esse_fui_futurus,erunt,,indicative,future,plural,3rd,\\r\\nsum,esse_fui_futurus,escunt,,indicative,future,plural,3rd,1\\r\\nsum,esse_fui_futurus,estō,,imperative,future,singular,2nd,\\r\\nsum,esse_fui_futurus,estō,,imperative,future,singular,3rd,\\r\\nsum,esse_fui_futurus,estōte,,imperative,future,plural,2nd,\\r\\nsum,esse_fui_futurus,suntō,,imperative,future,plural,3rd,\\r\\nsum,esse_fui_futurus,futūrus esse,,infinitive,future,,,\\r\\nsum,esse_fui_futurus,fore,,infinitive,future,,,\\r\\nsum,esse_fui_futurus,fuī,,indicative,perfect,singular,1st,\\r\\nsum,esse_fui_futurus,fuistī,,indicative,perfect,singular,2nd,\\r\\nsum,esse_fui_futurus,fuit,,indicative,perfect,singular,3rd,\\r\\nsum,esse_fui_futurus,fuimus,,indicative,perfect,plural,1st,\\r\\nsum,esse_fui_futurus,fuistis,,indicative,perfect,plural,2nd,\\r\\nsum,esse_fui_futurus,fuērunt,,indicative,perfect,plural,3rd,\\r\\nsum,esse_fui_futurus,fuēre,,indicative,perfect,plural,3rd,\\r\\nsum,esse_fui_futurus,fuerim,,subjunctive,perfect,singular,1st,\\r\\nsum,esse_fui_futurus,fueris,,subjunctive,perfect,singular,2nd,\\r\\nsum,esse_fui_futurus,fuerit,,subjunctive,perfect,singular,3rd,\\r\\nsum,esse_fui_futurus,fuerimus,,subjunctive,perfect,plural,1st,\\r\\nsum,esse_fui_futurus,fūvimus,,subjunctive,perfect,plural,1st,\\r\\nsum,esse_fui_futurus,fueritis,,subjunctive,perfect,plural,2nd,\\r\\nsum,esse_fui_futurus,fuerint,,subjunctive,perfect,plural,3rd,\\r\\nsum,esse_fui_futurus,fuisse,,infinitive,perfect,,,\\r\\nsum,esse_fui_futurus,fueram,,indicative,pluperfect,singular,1st,\\r\\nsum,esse_fui_futurus,fuerās,,indicative,pluperfect,singular,2nd,\\r\\nsum,esse_fui_futurus,fuerat,,indicative,pluperfect,singular,3rd,\\r\\nsum,esse_fui_futurus,fuerāmus,,indicative,pluperfect,plural,1st,\\r\\nsum,esse_fui_futurus,fuerātis,,indicative,pluperfect,plural,2nd,\\r\\nsum,esse_fui_futurus,fuerant,,indicative,pluperfect,plural,3rd,\\r\\nsum,esse_fui_futurus,fuissem,,subjunctive,pluperfect,singular,1st,\\r\\nsum,esse_fui_futurus,fuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nsum,esse_fui_futurus,fuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nsum,esse_fui_futurus,fūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\nsum,esse_fui_futurus,fuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nsum,esse_fui_futurus,fuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nsum,esse_fui_futurus,fuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nsum,esse_fui_futurus,fuerō,,indicative,future_perfect,singular,1st,\\r\\nsum,esse_fui_futurus,fueris,,indicative,future_perfect,singular,2nd,\\r\\nsum,esse_fui_futurus,fuerit,,indicative,future_perfect,singular,3rd,\\r\\nsum,esse_fui_futurus,fuerimus,,indicative,future_perfect,plural,1st,\\r\\nsum,esse_fui_futurus,fueritis,,indicative,future_perfect,plural,2nd,\\r\\nsum,esse_fui_futurus,fuerint,,indicative,future_perfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferō,active,indicative,present,singular,1st,\\r\\nfero,ferre_tuli_latus,fers,active,indicative,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,fert,active,indicative,present,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferimus,active,indicative,present,plural,1st,\\r\\nfero,ferre_tuli_latus,fertis,active,indicative,present,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferunt,active,indicative,present,plural,3rd,\\r\\nfero,ferre_tuli_latus,feram,active,subjunctive,present,singular,1st,\\r\\nfero,ferre_tuli_latus,ferās,active,subjunctive,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferat,active,subjunctive,present,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferāmus,active,subjunctive,present,plural,1st,\\r\\nfero,ferre_tuli_latus,ferātis,active,subjunctive,present,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferant,active,subjunctive,present,plural,3rd,\\r\\nfero,ferre_tuli_latus,fer,active,imperative,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferte,active,imperative,present,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferre,active,infinitive,present,,,3\\r\\nfero,ferre_tuli_latus,feror,passive,indicative,present,singular,1st,\\r\\nfero,ferre_tuli_latus,ferris,passive,indicative,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferre,passive,indicative,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,fertur,passive,indicative,present,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferimur,passive,indicative,present,plural,1st,\\r\\nfero,ferre_tuli_latus,feriminī,passive,indicative,present,plural,2nd,\\r\\nfero,ferre_tuli_latus,feruntur,passive,indicative,present,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferar,passive,subjunctive,present,singular,1st,\\r\\nfero,ferre_tuli_latus,ferāris,passive,subjunctive,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferāre,passive,subjunctive,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferātur,passive,subjunctive,present,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferāmur,passive,subjunctive,present,plural,1st,\\r\\nfero,ferre_tuli_latus,ferāminī,passive,subjunctive,present,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferantur,passive,subjunctive,present,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferre,passive,imperative,present,singular,2nd,\\r\\nfero,ferre_tuli_latus,feriminī,passive,imperative,present,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferrī,passive,infinitive,present,,,\\r\\nfero,ferre_tuli_latus,ferēbam,active,indicative,imperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,ferēbās,active,indicative,imperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferēbat,active,indicative,imperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferēbāmus,active,indicative,imperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,ferēbātis,active,indicative,imperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferēbant,active,indicative,imperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferrem,active,subjunctive,imperfect,singular,1st,3\\r\\nfero,ferre_tuli_latus,ferrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferret,active,subjunctive,imperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,ferrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferrent,active,subjunctive,imperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferēbar,passive,indicative,imperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,ferēbāris,passive,indicative,imperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferēbāre,passive,indicative,imperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferēbātur,passive,indicative,imperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferēbāmur,passive,indicative,imperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,ferēbāminī,passive,indicative,imperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferēbantur,passive,indicative,imperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferrer,passive,subjunctive,imperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,ferrēris,passive,subjunctive,imperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferrēre,passive,subjunctive,imperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferrētur,passive,subjunctive,imperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferrēmur,passive,subjunctive,imperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,ferrēminī,passive,subjunctive,imperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferrentur,passive,subjunctive,imperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,feram,active,indicative,future,singular,1st,\\r\\nfero,ferre_tuli_latus,ferēs,active,indicative,future,singular,2nd,\\r\\nfero,ferre_tuli_latus,feret,active,indicative,future,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferēmus,active,indicative,future,plural,1st,\\r\\nfero,ferre_tuli_latus,ferētis,active,indicative,future,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferent,active,indicative,future,plural,3rd,\\r\\nfero,ferre_tuli_latus,ferar,passive,indicative,future,singular,1st,\\r\\nfero,ferre_tuli_latus,ferēris,passive,indicative,future,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferēre,passive,indicative,future,singular,2nd,\\r\\nfero,ferre_tuli_latus,ferētur,passive,indicative,future,singular,3rd,\\r\\nfero,ferre_tuli_latus,ferēmur,passive,indicative,future,plural,1st,\\r\\nfero,ferre_tuli_latus,ferēminī,passive,indicative,future,plural,2nd,\\r\\nfero,ferre_tuli_latus,ferentur,passive,indicative,future,plural,3rd,\\r\\nfero,ferre_tuli_latus,fertō,active,imperative,future,singular,2nd,\\r\\nfero,ferre_tuli_latus,fertōte,active,imperative,future,plural,2nd,\\r\\nfero,ferre_tuli_latus,fertō,active,imperative,future,singular,3rd,\\r\\nfero,ferre_tuli_latus,feruntō,active,imperative,future,plural,3rd,\\r\\nfero,ferre_tuli_latus,fertor,passive,imperative,future,singular,2nd,\\r\\nfero,ferre_tuli_latus,fertor,passive,imperative,future,singular,3rd,\\r\\nfero,ferre_tuli_latus,feruntor,passive,imperative,future,plural,3rd,\\r\\nfero,ferre_tuli_latus,latūrus esse,active,infinitive,future,,,\\r\\nfero,ferre_tuli_latus,latūm īrī,passive,infinitive,future,,,\\r\\nfero,ferre_tuli_latus,tulī,active,indicative,perfect,singular,1st,\\r\\nfero,ferre_tuli_latus,tulistī,active,indicative,perfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,tulit,active,indicative,perfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,tulimus,active,indicative,perfect,plural,1st,\\r\\nfero,ferre_tuli_latus,tulistis,active,indicative,perfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,tulērunt,active,indicative,perfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,tulerim,active,subjunctive,perfect,singular,1st,\\r\\nfero,ferre_tuli_latus,tulerīs,active,subjunctive,perfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,tulerit,active,subjunctive,perfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,tulerimus,active,subjunctive,perfect,plural,1st,\\r\\nfero,ferre_tuli_latus,tuleritis,active,subjunctive,perfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,tulerint,active,subjunctive,perfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) sum\\\",passive,indicative,perfect,singular,1st,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) es\\\",passive,indicative,perfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) est\\\",passive,indicative,perfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) sumus\\\",passive,indicative,perfect,plural,1st,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) estis\\\",passive,indicative,perfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) sunt\\\",passive,indicative,perfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) sim\\\",passive,subjunctive,perfect,singular,1st,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) sīs\\\",passive,subjunctive,perfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um)sit\\\",passive,subjunctive,perfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) sīmus\\\",passive,subjunctive,perfect,plural,1st,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) sītis\\\",passive,subjunctive,perfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a)sint\\\",passive,subjunctive,perfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,tulisse,active,infinitive,perfect,,,\\r\\nfero,ferre_tuli_latus,lātus esse,passive,infinitive,perfect,,,\\r\\nfero,ferre_tuli_latus,tuleram,active,indicative,pluperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,tulerās,active,indicative,pluperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,tulerat,active,indicative,pluperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,tulerāmus,active,indicative,pluperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,tulerātis,active,indicative,pluperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,tulerant,active,indicative,pluperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,tulissem,active,subjunctive,pluperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,tulissēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,tulisset,active,subjunctive,pluperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,tulissēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,tulissētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,tulissent,active,subjunctive,pluperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) eram\\\",passive,indicative,pluperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) erās\\\",passive,indicative,pluperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) erat\\\",passive,indicative,pluperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, a) erāmus\\\",passive,indicative,pluperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, a) erātis\\\",passive,indicative,pluperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, a) erant\\\",passive,indicative,pluperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) essem\\\",passive,subjunctive,pluperfect,singular,1st,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) essēs\\\",passive,subjunctive,pluperfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) esset\\\",passive,subjunctive,pluperfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) essēmus\\\",passive,subjunctive,pluperfect,plural,1st,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) essētis\\\",passive,subjunctive,pluperfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) essent\\\",passive,subjunctive,pluperfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,tulerō,active,indicative,future_perfect,singular,1st,\\r\\nfero,ferre_tuli_latus,tuleris,active,indicative,future_perfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,tulerit,active,indicative,future_perfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,tulerimus,active,indicative,future_perfect,plural,1st,\\r\\nfero,ferre_tuli_latus,tuleritis,active,indicative,future_perfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,tulerint,active,indicative,future_perfect,plural,3rd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) erō\\\",passive,indicative,future_perfect,singular,1st,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) eris\\\",passive,indicative,future_perfect,singular,2nd,\\r\\nfero,ferre_tuli_latus,\\\"lātus (-a, -um) erit\\\",passive,indicative,future_perfect,singular,3rd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) erimus\\\",passive,indicative,future_perfect,plural,1st,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) ēritis\\\",passive,indicative,future_perfect,plural,2nd,\\r\\nfero,ferre_tuli_latus,\\\"latī (-ae, -a) ērunt\\\",passive,indicative,future_perfect,plural,3rd,\\r\\nvolo,velle_volui_-,volō,,indicative,present,singular,1st,\\r\\nvolo,velle_volui_-,vīs,,indicative,present,singular,2nd,\\r\\nvolo,velle_volui_-,vult,,indicative,present,singular,3rd,\\r\\nvolo,velle_volui_-,volt,,indicative,present,singular,3rd,7\\r\\nvolo,velle_volui_-,volumus,,indicative,present,plural,1st,\\r\\nvolo,velle_volui_-,vultis,,indicative,present,plural,2nd,\\r\\nvolo,velle_volui_-,volunt,,indicative,present,plural,3rd,\\r\\nvolo,velle_volui_-,velim,,subjunctive,present,singular,1st,\\r\\nvolo,velle_volui_-,velīs,,subjunctive,present,singular,2nd,\\r\\nvolo,velle_volui_-,velit,,subjunctive,present,singular,3rd,\\r\\nvolo,velle_volui_-,velīmus,,subjunctive,present,plural,1st,\\r\\nvolo,velle_volui_-,velītis,,subjunctive,present,plural,2nd,\\r\\nvolo,velle_volui_-,velint,,subjunctive,present,plural,3rd,\\r\\nvolo,velle_volui_-,velle,,infinitive,present,,,\\r\\nvolo,velle_volui_-,volēbam,,indicative,imperfect,singular,1st,\\r\\nvolo,velle_volui_-,volēbās,,indicative,imperfect,singular,2nd,\\r\\nvolo,velle_volui_-,volēbat,,indicative,imperfect,singular,3rd,\\r\\nvolo,velle_volui_-,volēbāmus,,indicative,imperfect,plural,1st,\\r\\nvolo,velle_volui_-,volēbātis,,indicative,imperfect,plural,2nd,\\r\\nvolo,velle_volui_-,volēbant,,indicative,imperfect,plural,3rd,\\r\\nvolo,velle_volui_-,vellem,,subjunctive,imperfect,singular,1st,\\r\\nvolo,velle_volui_-,vellēs,,subjunctive,imperfect,singular,2nd,\\r\\nvolo,velle_volui_-,vellet,,subjunctive,imperfect,singular,3rd,\\r\\nvolo,velle_volui_-,vellēmus,,subjunctive,imperfect,plural,1st,\\r\\nvolo,velle_volui_-,vellētis,,subjunctive,imperfect,plural,2nd,\\r\\nvolo,velle_volui_-,vellent,,subjunctive,imperfect,plural,3rd,\\r\\nvolo,velle_volui_-,volam,,indicative,future,singular,1st,\\r\\nvolo,velle_volui_-,volēs,,indicative,future,singular,2nd,\\r\\nvolo,velle_volui_-,volet,,indicative,future,singular,3rd,\\r\\nvolo,velle_volui_-,volēmus,,indicative,future,plural,1st,\\r\\nvolo,velle_volui_-,volētis,,indicative,future,plural,2nd,\\r\\nvolo,velle_volui_-,volent,,indicative,future,plural,3rd,\\r\\nvolo,velle_volui_-,voluī,,indicative,perfect,singular,1st,\\r\\nvolo,velle_volui_-,voluistī,,indicative,perfect,singular,2nd,\\r\\nvolo,velle_volui_-,voluit,,indicative,perfect,singular,3rd,\\r\\nvolo,velle_volui_-,voluimus,,indicative,perfect,plural,1st,\\r\\nvolo,velle_volui_-,voluistis,,indicative,perfect,plural,2nd,\\r\\nvolo,velle_volui_-,voluērunt,,indicative,perfect,plural,3rd,\\r\\nvolo,velle_volui_-,voluerim,,subjunctive,perfect,singular,1st,\\r\\nvolo,velle_volui_-,voluerīs,,subjunctive,perfect,singular,2nd,\\r\\nvolo,velle_volui_-,voluerit,,subjunctive,perfect,singular,3rd,\\r\\nvolo,velle_volui_-,voluerīmus,,subjunctive,perfect,plural,1st,\\r\\nvolo,velle_volui_-,voluerītis,,subjunctive,perfect,plural,2nd,\\r\\nvolo,velle_volui_-,voluerint,,subjunctive,perfect,plural,3rd,\\r\\nvolo,velle_volui_-,voluisse,,infinitive,perfect,,,\\r\\nvolo,velle_volui_-,volueram,,indicative,pluperfect,singular,1st,\\r\\nvolo,velle_volui_-,voluerās,,indicative,pluperfect,singular,2nd,\\r\\nvolo,velle_volui_-,voluerat,,indicative,pluperfect,singular,3rd,\\r\\nvolo,velle_volui_-,voluerāmus,,indicative,pluperfect,plural,1st,\\r\\nvolo,velle_volui_-,voluerātis,,indicative,pluperfect,plural,2nd,\\r\\nvolo,velle_volui_-,voluerant,,indicative,pluperfect,plural,3rd,\\r\\nvolo,velle_volui_-,voluissem,,subjunctive,pluperfect,singular,1st,\\r\\nvolo,velle_volui_-,voluissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nvolo,velle_volui_-,voluisset,,subjunctive,pluperfect,singular,3rd,\\r\\nvolo,velle_volui_-,voluissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nvolo,velle_volui_-,voluissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nvolo,velle_volui_-,voluissent,,subjunctive,pluperfect,plural,3rd,\\r\\nvolo,velle_volui_-,voluerō,,indicative,future_perfect,singular,1st,\\r\\nvolo,velle_volui_-,volueris,,indicative,future_perfect,singular,2nd,\\r\\nvolo,velle_volui_-,voluerit,,indicative,future_perfect,singular,3rd,\\r\\nvolo,velle_volui_-,voluerimus,,indicative,future_perfect,plural,1st,\\r\\nvolo,velle_volui_-,volueritis,,indicative,future_perfect,plural,2nd,\\r\\nvolo,velle_volui_-,voluerint,,indicative,future_perfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,eō,,indicative,present,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īs,,indicative,present,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,it,,indicative,present,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,īmus,,indicative,present,plural,1st,\\r\\neo,ire_ivi(ii)_itus,ītis,,indicative,present,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,eunt,,indicative,present,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,eam,,subjunctive,present,singular,1st,\\r\\neo,ire_ivi(ii)_itus,eās,,subjunctive,present,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,eat,,subjunctive,present,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,eāmus,,subjunctive,present,plural,1st,\\r\\neo,ire_ivi(ii)_itus,eātis,,subjunctive,present,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,eant,,subjunctive,present,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,ī,,imperative,present,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,īte,,imperative,present,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,īre,,infinitive,present,,,\\r\\neo,ire_ivi(ii)_itus,ībam,,indicative,imperfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,ības,,indicative,imperfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,ībat,,indicative,imperfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,ībāmus,,indicative,imperfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,ībātis,,indicative,imperfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,ībant,,indicative,imperfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,īrem,,subjunctive,imperfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īrēs,,subjunctive,imperfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,īret,,subjunctive,imperfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,īrēmus,,subjunctive,imperfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,īrētis,,subjunctive,imperfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,īrent,,subjunctive,imperfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,ībō,,indicative,future,singular,1st,\\r\\neo,ire_ivi(ii)_itus,ībis,,indicative,future,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,ībit,,indicative,future,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,ībimus,,indicative,future,plural,1st,\\r\\neo,ire_ivi(ii)_itus,ībitis,,indicative,future,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,ībunt,,indicative,future,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,ītō,,imperative,future,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,ītō,,imperative,future,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,ītōte,,imperative,future,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,euntō,,imperative,future,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,itūrus esse,,infinitive,future,,,\\r\\neo,ire_ivi(ii)_itus,iī,,indicative,perfect,singular,1st,10\\r\\neo,ire_ivi(ii)_itus,īvī,,indicative,perfect,singular,1st,11\\r\\neo,ire_ivi(ii)_itus,īstī,,indicative,perfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,iit,,indicative,perfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,iimus,,indicative,perfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,īstis,,indicative,perfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,iērunt,,indicative,perfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,ierim,,subjunctive,perfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īverim,,subjunctive,perfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,ierīs,,subjunctive,perfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,ierit,,subjunctive,perfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,ierīmus,,subjunctive,perfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,ierītis,,subjunctive,perfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,ierint,,subjunctive,perfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,īsse,,infinitive,perfect,,,10\\r\\neo,ire_ivi(ii)_itus,īvisse,,infinitive,perfect,,,\\r\\neo,ire_ivi(ii)_itus,ieram,,indicative,pluperfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īveram,,indicative,pluperfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,ierās,,indicative,pluperfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,ierat,,indicative,pluperfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,ierāmus,,indicative,pluperfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,ierātis,,indicative,pluperfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,ierant,,indicative,pluperfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,īssem,,subjunctive,pluperfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īvissem,,subjunctive,pluperfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īssēs,,subjunctive,pluperfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,īsset,,subjunctive,pluperfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,īssēmus,,subjunctive,pluperfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,īssētis,,subjunctive,pluperfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,īssent,,subjunctive,pluperfect,plural,3rd,\\r\\neo,ire_ivi(ii)_itus,ierō,,indicative,future_perfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,īverō,,indicative,future_perfect,singular,1st,\\r\\neo,ire_ivi(ii)_itus,ieris,,indicative,future_perfect,singular,2nd,\\r\\neo,ire_ivi(ii)_itus,ierit,,indicative,future_perfect,singular,3rd,\\r\\neo,ire_ivi(ii)_itus,ierimus,,indicative,future_perfect,plural,1st,\\r\\neo,ire_ivi(ii)_itus,ieritis,,indicative,future_perfect,plural,2nd,\\r\\neo,ire_ivi(ii)_itus,ierint,,indicative,future_perfect,plural,3rd,\\r\\npossum,posse_potui_-,possum,,indicative,present,singular,1st,\\r\\npossum,posse_potui_-,\\\"potis, -e sum\\\",,indicative,present,singular,1st,12\\r\\npossum,posse_potui_-,potes,,indicative,present,singular,2nd,\\r\\npossum,posse_potui_-,\\\"potis, -e es\\\",,indicative,present,singular,2nd,12\\r\\npossum,posse_potui_-,potest,,indicative,present,singular,3rd,\\r\\npossum,posse_potui_-,\\\"potis, -e est\\\",,indicative,present,singular,3rd,12\\r\\npossum,posse_potui_-,possumus,,indicative,present,plural,1st,\\r\\npossum,posse_potui_-,\\\"potes, -ia sumus\\\",,indicative,present,plural,1st,12\\r\\npossum,posse_potui_-,potestis,,indicative,present,plural,2nd,\\r\\npossum,posse_potui_-,\\\"potes, -ia estis\\\",,indicative,present,plural,2nd,12\\r\\npossum,posse_potui_-,possunt,,indicative,present,plural,3rd,\\r\\npossum,posse_potui_-,\\\"potes, -ia sunt\\\",,indicative,present,plural,3rd,12\\r\\npossum,posse_potui_-,possim,,subjunctive,present,singular,1st,\\r\\npossum,posse_potui_-,possiem,,subjunctive,present,singular,1st,12\\r\\npossum,posse_potui_-,possīs,,subjunctive,present,singular,2nd,\\r\\npossum,posse_potui_-,possiēs,,subjunctive,present,singular,2nd,\\r\\npossum,posse_potui_-,possit,,subjunctive,present,singular,3rd,\\r\\npossum,posse_potui_-,postisit,,subjunctive,present,singular,3rd,12\\r\\npossum,posse_potui_-,possiet,,subjunctive,present,singular,3rd,\\r\\npossum,posse_potui_-,possīmus,,subjunctive,present,plural,1st,\\r\\npossum,posse_potui_-,possiemus,,subjunctive,present,plural,1st,\\r\\npossum,posse_potui_-,possītis,,subjunctive,present,plural,2nd,\\r\\npossum,posse_potui_-,possietis,,subjunctive,present,plural,2nd,\\r\\npossum,posse_potui_-,possint,,subjunctive,present,plural,3rd,\\r\\npossum,posse_potui_-,possient,,subjunctive,present,plural,3rd,\\r\\npossum,posse_potui_-,posse,,infinitive,present,,,\\r\\npossum,posse_potui_-,potesse,,infinitive,present,,,12\\r\\npossum,posse_potui_-,poteram,,indicative,imperfect,singular,1st,\\r\\npossum,posse_potui_-,poterās,,indicative,imperfect,singular,2nd,\\r\\npossum,posse_potui_-,poterat,,indicative,imperfect,singular,3rd,\\r\\npossum,posse_potui_-,poterāmus,,indicative,imperfect,plural,1st,\\r\\npossum,posse_potui_-,poterātis,,indicative,imperfect,plural,2nd,\\r\\npossum,posse_potui_-,poterant,,indicative,imperfect,plural,3rd,\\r\\npossum,posse_potui_-,possem,,subjunctive,imperfect,singular,1st,\\r\\npossum,posse_potui_-,possēs,,subjunctive,imperfect,singular,2nd,\\r\\npossum,posse_potui_-,posset,,subjunctive,imperfect,singular,3rd,\\r\\npossum,posse_potui_-,possēmus,,subjunctive,imperfect,plural,1st,\\r\\npossum,posse_potui_-,possētis,,subjunctive,imperfect,plural,2nd,\\r\\npossum,posse_potui_-,possent,,subjunctive,imperfect,plural,3rd,\\r\\npossum,posse_potui_-,poterō,,indicative,future,singular,1st,\\r\\npossum,posse_potui_-,poteris,,indicative,future,singular,2nd,\\r\\npossum,posse_potui_-,poterit,,indicative,future,singular,3rd,\\r\\npossum,posse_potui_-,poterimus,,indicative,future,plural,1st,\\r\\npossum,posse_potui_-,poteritis,,indicative,future,plural,2nd,\\r\\npossum,posse_potui_-,poterunt,,indicative,future,plural,3rd,\\r\\npossum,posse_potui_-,poterint,,indicative,future,plural,3rd,12\\r\\npossum,posse_potui_-,potuī,,indicative,perfect,singular,1st,\\r\\npossum,posse_potui_-,potuistī,,indicative,perfect,singular,2nd,\\r\\npossum,posse_potui_-,potuit,,indicative,perfect,singular,3rd,\\r\\npossum,posse_potui_-,potuimus,,indicative,perfect,plural,1st,\\r\\npossum,posse_potui_-,potuistis,,indicative,perfect,plural,2nd,\\r\\npossum,posse_potui_-,potuērunt,,indicative,perfect,plural,3rd,\\r\\npossum,posse_potui_-,potuerim,,subjunctive,perfect,singular,1st,\\r\\npossum,posse_potui_-,potuerīs,,subjunctive,perfect,singular,2nd,\\r\\npossum,posse_potui_-,potuerit,,subjunctive,perfect,singular,3rd,\\r\\npossum,posse_potui_-,potuerīmus,,subjunctive,perfect,plural,1st,\\r\\npossum,posse_potui_-,potuerītis,,subjunctive,perfect,plural,2nd,\\r\\npossum,posse_potui_-,potuerint,,subjunctive,perfect,plural,3rd,\\r\\npossum,posse_potui_-,potuisse,,infinitive,perfect,,,\\r\\npossum,posse_potui_-,potueram,,indicative,pluperfect,singular,1st,\\r\\npossum,posse_potui_-,potuerās,,indicative,pluperfect,singular,2nd,\\r\\npossum,posse_potui_-,potuerat,,indicative,pluperfect,singular,3rd,\\r\\npossum,posse_potui_-,potuerāmus,,indicative,pluperfect,plural,1st,\\r\\npossum,posse_potui_-,potuerātis,,indicative,pluperfect,plural,2nd,\\r\\npossum,posse_potui_-,potuerant,,indicative,pluperfect,plural,3rd,\\r\\npossum,posse_potui_-,potuissem,,subjunctive,pluperfect,singular,1st,\\r\\npossum,posse_potui_-,potuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\npossum,posse_potui_-,potuisset,,subjunctive,pluperfect,singular,3rd,\\r\\npossum,posse_potui_-,potuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\npossum,posse_potui_-,potuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\npossum,posse_potui_-,potuissent,,subjunctive,pluperfect,plural,3rd,\\r\\npossum,posse_potui_-,potuerō,,indicative,future_perfect,singular,1st,\\r\\npossum,posse_potui_-,potueris,,indicative,future_perfect,singular,2nd,\\r\\npossum,posse_potui_-,potuerit,,indicative,future_perfect,singular,3rd,\\r\\npossum,posse_potui_-,potuerimus,,indicative,future_perfect,plural,1st,\\r\\npossum,posse_potui_-,potueritis,,indicative,future_perfect,plural,2nd,\\r\\npossum,posse_potui_-,potuerint,,indicative,future_perfect,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,prosum,,indicative,present,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,prodes,,indicative,present,singular,2nd,14\\r\\nprosum,prodesse_profui_profuturus,prodest,,indicative,present,singular,3rd,14\\r\\nprosum,prodesse_profui_profuturus,prosumus,,indicative,present,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,prodestis,,indicative,present,plural,2nd,14\\r\\nprosum,prodesse_profui_profuturus,prosunt,,indicative,present,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,prosim,,subjunctive,present,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,prosiem,,subjunctive,present,singular,1st,1\\r\\nprosum,prodesse_profui_profuturus,profuam,,subjunctive,present,singular,1st,1\\r\\nprosum,prodesse_profui_profuturus,prosīs,,subjunctive,present,singular,2nd,\\r\\nprosum,prodesse_profui_profuturus,prosiēs,,subjunctive,present,singular,2nd,1\\r\\nprosum,prodesse_profui_profuturus,profuās,,subjunctive,present,singular,2nd,1\\r\\nprosum,prodesse_profui_profuturus,prosit,,subjunctive,present,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,prosiet,,subjunctive,present,singular,3rd,1\\r\\nprosum,prodesse_profui_profuturus,profuat,,subjunctive,present,singular,3rd,1\\r\\nprosum,prodesse_profui_profuturus,prosīmus,,subjunctive,present,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,prosītis,,subjunctive,present,plural,2nd,\\r\\nprosum,prodesse_profui_profuturus,prosint,,subjunctive,present,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,prosient,,subjunctive,present,plural,3rd,1\\r\\nprosum,prodesse_profui_profuturus,profuant,,subjunctive,present,plural,3rd,1\\r\\nprosum,prodesse_profui_profuturus,prodes,,imperative,present,singular,2nd,14\\r\\nprosum,prodesse_profui_profuturus,prodeste,,imperative,present,plural,2nd,14\\r\\nprosum,prodesse_profui_profuturus,prodesse,,infinitive,present,,,14\\r\\nprosum,prodesse_profui_profuturus,proderam,,indicative,imperfect,singular,1st,14\\r\\nprosum,prodesse_profui_profuturus,proderās,,indicative,imperfect,singular,2nd,14\\r\\nprosum,prodesse_profui_profuturus,proderat,,indicative,imperfect,singular,3rd,14\\r\\nprosum,prodesse_profui_profuturus,proderāmus,,indicative,imperfect,plural,1st,14\\r\\nprosum,prodesse_profui_profuturus,proderātis,,indicative,imperfect,plural,2nd,14\\r\\nprosum,prodesse_profui_profuturus,proderant,,indicative,imperfect,plural,3rd,14\\r\\nprosum,prodesse_profui_profuturus,prodessem,,subjunctive,imperfect,singular,1st,14\\r\\nprosum,prodesse_profui_profuturus,proforem,,subjunctive,imperfect,singular,1st,2\\r\\nprosum,prodesse_profui_profuturus,prodessēs,,subjunctive,imperfect,singular,2nd,14\\r\\nprosum,prodesse_profui_profuturus,proforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nprosum,prodesse_profui_profuturus,prodesset,,subjunctive,imperfect,singular,3rd,14\\r\\nprosum,prodesse_profui_profuturus,proforet,,subjunctive,imperfect,singular,3rd,2\\r\\nprosum,prodesse_profui_profuturus,prodessēmus,,subjunctive,imperfect,plural,1st,14\\r\\nprosum,prodesse_profui_profuturus,proforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nprosum,prodesse_profui_profuturus,prodessētis,,subjunctive,imperfect,plural,2nd,14\\r\\nprosum,prodesse_profui_profuturus,proforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nprosum,prodesse_profui_profuturus,prodessent,,subjunctive,imperfect,plural,3rd,14\\r\\nprosum,prodesse_profui_profuturus,proforent,,subjunctive,imperfect,plural,3rd,2\\r\\nprosum,prodesse_profui_profuturus,proderō,,indicative,future,singular,1st,14\\r\\nprosum,prodesse_profui_profuturus,proderis,,indicative,future,singular,2nd,14\\r\\nprosum,prodesse_profui_profuturus,proderit,,indicative,future,singular,3rd,14\\r\\nprosum,prodesse_profui_profuturus,prodescit,,indicative,future,singular,3rd,1\\r\\nprosum,prodesse_profui_profuturus,proderimus,,indicative,future,plural,1st,14\\r\\nprosum,prodesse_profui_profuturus,proderitis,,indicative,future,plural,2nd,14\\r\\nprosum,prodesse_profui_profuturus,proderunt,,indicative,future,plural,3rd,14\\r\\nprosum,prodesse_profui_profuturus,prodescunt,,indicative,future,plural,3rd,1\\r\\nprosum,prodesse_profui_profuturus,prodestō,,imperative,future,singular,2nd,14\\r\\nprosum,prodesse_profui_profuturus,prodestō,,imperative,future,singular,3rd,14\\r\\nprosum,prodesse_profui_profuturus,prodestōte,,imperative,future,plural,2nd,14\\r\\nprosum,prodesse_profui_profuturus,prosuntō,,imperative,future,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,profutūrus esse,,infinitive,future,,,\\r\\nprosum,prodesse_profui_profuturus,profore,,infinitive,future,,,\\r\\nprosum,prodesse_profui_profuturus,profuī,,indicative,perfect,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,profuistī,,indicative,perfect,singular,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuit,,indicative,perfect,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuimus,,indicative,perfect,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,profuistis,,indicative,perfect,plural,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuērunt,,indicative,perfect,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuēre,,indicative,perfect,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuerim,,subjunctive,perfect,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,profueris,,subjunctive,perfect,singular,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuerit,,subjunctive,perfect,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuerimus,,subjunctive,perfect,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,profūvimus,,subjunctive,perfect,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,profueritis,,subjunctive,perfect,plural,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuerint,,subjunctive,perfect,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuisse,,infinitive,perfect,,,\\r\\nprosum,prodesse_profui_profuturus,profueram,,indicative,pluperfect,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,profuerās,,indicative,pluperfect,singular,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuerat,,indicative,pluperfect,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuerāmus,,indicative,pluperfect,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,profuerātis,,indicative,pluperfect,plural,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuerant,,indicative,pluperfect,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuissem,,subjunctive,pluperfect,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,profuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,profūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,profuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuerō,,indicative,future_perfect,singular,1st,\\r\\nprosum,prodesse_profui_profuturus,profueris,,indicative,future_perfect,singular,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuerit,,indicative,future_perfect,singular,3rd,\\r\\nprosum,prodesse_profui_profuturus,profuerimus,,indicative,future_perfect,plural,1st,\\r\\nprosum,prodesse_profui_profuturus,profueritis,,indicative,future_perfect,plural,2nd,\\r\\nprosum,prodesse_profui_profuturus,profuerint,,indicative,future_perfect,plural,3rd,\\r\\nabsum,abesse_afui_afuturus,absum,,indicative,present,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,abes,,indicative,present,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,abest,,indicative,present,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,absumus,,indicative,present,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,abestis,,indicative,present,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,absunt,,indicative,present,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,absim,,subjunctive,present,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,absīs,,subjunctive,present,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,absit,,subjunctive,present,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,absīmus,,subjunctive,present,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,absītis,,subjunctive,present,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,absint,,subjunctive,present,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,abes,,imperative,present,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,abeste,,imperative,present,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,abesse,,infinitive,present,,,\\r\\nabsum,abesse_abfui_abfuturus,aberam,,indicative,imperfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,aberās,,indicative,imperfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,aberat,,indicative,imperfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,aberāmus,,indicative,imperfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,aberātis,,indicative,imperfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,aberant,,indicative,imperfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,abessem,,subjunctive,imperfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,aforem,,subjunctive,imperfect,singular,1st,2\\r\\nabsum,abesse_abfui_abfuturus,abessēs,,subjunctive,imperfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,aforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nabsum,abesse_abfui_abfuturus,abesset,,subjunctive,imperfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,aforet,,subjunctive,imperfect,singular,3rd,2\\r\\nabsum,abesse_abfui_abfuturus,abessēmus,,subjunctive,imperfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,aforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nabsum,abesse_abfui_abfuturus,abessētis,,subjunctive,imperfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,aforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nabsum,abesse_abfui_abfuturus,abessent,,subjunctive,imperfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,aforent,,subjunctive,imperfect,plural,3rd,2\\r\\nabsum,abesse_abfui_abfuturus,aberō,,indicative,future,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,aberis,,indicative,future,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,abere,,indicative,future,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,aberit,,indicative,future,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,aberimus,,indicative,future,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,aberitis,,indicative,future,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,aberunt,,indicative,future,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,abestō,,imperative,future,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,abestō,,imperative,future,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,abestōte,,imperative,future,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,absuntō,,imperative,future,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,abfutūrus esse,,infinitive,future,,,\\r\\nabsum,abesse_abfui_abfuturus,afore,,infinitive,future,,,\\r\\nabsum,abesse_abfui_abfuturus,afuī,,indicative,perfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,afuistī,,indicative,perfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuit,,indicative,perfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuimus,,indicative,perfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,afuistis,,indicative,perfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuērunt,,indicative,perfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuēre,,indicative,perfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuerim,,subjunctive,perfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,afueris,,subjunctive,perfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuerit,,subjunctive,perfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuerimus,,subjunctive,perfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,afueritis,,subjunctive,perfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuerint,,subjunctive,perfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuisse,,infinitive,perfect,,,\\r\\nabsum,abesse_abfui_abfuturus,afueram,,indicative,pluperfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,afuerās,,indicative,pluperfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuerat,,indicative,pluperfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuerāmus,,indicative,pluperfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,afuerātis,,indicative,pluperfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuerant,,indicative,pluperfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuissem,,subjunctive,pluperfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,afuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,afuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuerō,,indicative,future_perfect,singular,1st,\\r\\nabsum,abesse_abfui_abfuturus,afueris,,indicative,future_perfect,singular,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuerit,,indicative,future_perfect,singular,3rd,\\r\\nabsum,abesse_abfui_abfuturus,afuerimus,,indicative,future_perfect,plural,1st,\\r\\nabsum,abesse_abfui_abfuturus,afueritis,,indicative,future_perfect,plural,2nd,\\r\\nabsum,abesse_abfui_abfuturus,afuerint,,indicative,future_perfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adsum,,indicative,present,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,ades,,indicative,present,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adest,,indicative,present,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adsumus,,indicative,present,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adestis,,indicative,present,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adsunt,,indicative,present,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adsim,,subjunctive,present,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adsīs,,subjunctive,present,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adsit,,subjunctive,present,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adsīmus,,subjunctive,present,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adsītis,,subjunctive,present,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adsint,,subjunctive,present,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,ades,,imperative,present,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adeste,,imperative,present,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adesse,,infinitive,present,,,\\r\\nadsum,adesse_adfui_adfuturus,aderam,,indicative,imperfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,aderās,,indicative,imperfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,aderat,,indicative,imperfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,aderāmus,,indicative,imperfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,aderātis,,indicative,imperfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,aderant,,indicative,imperfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adessem,,subjunctive,imperfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adforem,,subjunctive,imperfect,singular,1st,2\\r\\nadsum,adesse_adfui_adfuturus,adessēs,,subjunctive,imperfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nadsum,adesse_adfui_adfuturus,adesset,,subjunctive,imperfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adforet,,subjunctive,imperfect,singular,3rd,2\\r\\nadsum,adesse_adfui_adfuturus,adessēmus,,subjunctive,imperfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nadsum,adesse_adfui_adfuturus,adessētis,,subjunctive,imperfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nadsum,adesse_adfui_adfuturus,adessent,,subjunctive,imperfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adforent,,subjunctive,imperfect,plural,3rd,2\\r\\nadsum,adesse_adfui_adfuturus,aderō,,indicative,future,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,aderis,,indicative,future,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adere,,indicative,future,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,aderit,,indicative,future,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,aderimus,,indicative,future,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,aderitis,,indicative,future,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,aderunt,,indicative,future,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adestō,,imperative,future,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adestō,,imperative,future,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adestōte,,imperative,future,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adsuntō,,imperative,future,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfutūrus esse,,infinitive,future,,,\\r\\nadsum,adesse_adfui_adfuturus,adfore,,infinitive,future,,,\\r\\nadsum,adesse_adfui_adfuturus,adfuī,,indicative,perfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfuistī,,indicative,perfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuit,,indicative,perfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuimus,,indicative,perfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfuistis,,indicative,perfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuērunt,,indicative,perfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuēre,,indicative,perfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerim,,subjunctive,perfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfueris,,subjunctive,perfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerit,,subjunctive,perfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerimus,,subjunctive,perfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfueritis,,subjunctive,perfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerint,,subjunctive,perfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuisse,,infinitive,perfect,,,\\r\\nadsum,adesse_adfui_adfuturus,adfueram,,indicative,pluperfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfuerās,,indicative,pluperfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerat,,indicative,pluperfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerāmus,,indicative,pluperfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfuerātis,,indicative,pluperfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerant,,indicative,pluperfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuissem,,subjunctive,pluperfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerō,,indicative,future_perfect,singular,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfueris,,indicative,future_perfect,singular,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerit,,indicative,future_perfect,singular,3rd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerimus,,indicative,future_perfect,plural,1st,\\r\\nadsum,adesse_adfui_adfuturus,adfueritis,,indicative,future_perfect,plural,2nd,\\r\\nadsum,adesse_adfui_adfuturus,adfuerint,,indicative,future_perfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subsum,,indicative,present,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subes,,indicative,present,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subest,,indicative,present,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subsumus,,indicative,present,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subestis,,indicative,present,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subsunt,,indicative,present,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subsim,,subjunctive,present,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subsīs,,subjunctive,present,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subsit,,subjunctive,present,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subsīmus,,subjunctive,present,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subsītis,,subjunctive,present,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subsint,,subjunctive,present,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subes,,imperative,present,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subeste,,imperative,present,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subesse,,infinitive,present,,,\\r\\nsubsum,subesse_subfui_subfuturus,suberam,,indicative,imperfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,suberās,,indicative,imperfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,suberat,,indicative,imperfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,suberāmus,,indicative,imperfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,suberātis,,indicative,imperfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,suberant,,indicative,imperfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subessem,,subjunctive,imperfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subforem,,subjunctive,imperfect,singular,1st,2\\r\\nsubsum,subesse_subfui_subfuturus,subessēs,,subjunctive,imperfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nsubsum,subesse_subfui_subfuturus,subesset,,subjunctive,imperfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subforet,,subjunctive,imperfect,singular,3rd,2\\r\\nsubsum,subesse_subfui_subfuturus,subessēmus,,subjunctive,imperfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nsubsum,subesse_subfui_subfuturus,subessētis,,subjunctive,imperfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nsubsum,subesse_subfui_subfuturus,subessent,,subjunctive,imperfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subforent,,subjunctive,imperfect,plural,3rd,2\\r\\nsubsum,subesse_subfui_subfuturus,suberō,,indicative,future,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,suberis,,indicative,future,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subere,,indicative,future,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,suberit,,indicative,future,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,suberimus,,indicative,future,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,suberitis,,indicative,future,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,suberunt,,indicative,future,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subestō,,imperative,future,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subestō,,imperative,future,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subestōte,,imperative,future,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subsuntō,,imperative,future,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfutūrus esse,,infinitive,future,,,\\r\\nsubsum,subesse_subfui_subfuturus,subfore,,infinitive,future,,,\\r\\nsubsum,subesse_subfui_subfuturus,subfuī,,indicative,perfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfuistī,,indicative,perfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuit,,indicative,perfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuimus,,indicative,perfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfuistis,,indicative,perfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuērunt,,indicative,perfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuēre,,indicative,perfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerim,,subjunctive,perfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfueris,,subjunctive,perfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerit,,subjunctive,perfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerimus,,subjunctive,perfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfueritis,,subjunctive,perfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerint,,subjunctive,perfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuisse,,infinitive,perfect,,,\\r\\nsubsum,subesse_subfui_subfuturus,subfueram,,indicative,pluperfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerās,,indicative,pluperfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerat,,indicative,pluperfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerāmus,,indicative,pluperfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerātis,,indicative,pluperfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerant,,indicative,pluperfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuissem,,subjunctive,pluperfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerō,,indicative,future_perfect,singular,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfueris,,indicative,future_perfect,singular,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerit,,indicative,future_perfect,singular,3rd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerimus,,indicative,future_perfect,plural,1st,\\r\\nsubsum,subesse_subfui_subfuturus,subfueritis,,indicative,future_perfect,plural,2nd,\\r\\nsubsum,subesse_subfui_subfuturus,subfuerint,,indicative,future_perfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,supersum,,indicative,present,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superes,,indicative,present,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superest,,indicative,present,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,supersumus,,indicative,present,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superestis,,indicative,present,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supersunt,,indicative,present,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,supersim,,subjunctive,present,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,supersīs,,subjunctive,present,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supersit,,subjunctive,present,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,supersīmus,,subjunctive,present,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,supersītis,,subjunctive,present,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supersint,,subjunctive,present,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superes,,imperative,present,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supereste,,imperative,present,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superesse,,infinitive,present,,,\\r\\nsupersum,superesse_superfui_superfuturus,supereram,,indicative,imperfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,supererās,,indicative,imperfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supererat,,indicative,imperfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,supererāmus,,indicative,imperfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,supererātis,,indicative,imperfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supererant,,indicative,imperfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superessem,,subjunctive,imperfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superforem,,subjunctive,imperfect,singular,1st,2\\r\\nsupersum,superesse_superfui_superfuturus,superessēs,,subjunctive,imperfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nsupersum,superesse_superfui_superfuturus,superesset,,subjunctive,imperfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superforet,,subjunctive,imperfect,singular,3rd,2\\r\\nsupersum,superesse_superfui_superfuturus,superessēmus,,subjunctive,imperfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nsupersum,superesse_superfui_superfuturus,superessētis,,subjunctive,imperfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nsupersum,superesse_superfui_superfuturus,superessent,,subjunctive,imperfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superforent,,subjunctive,imperfect,plural,3rd,2\\r\\nsupersum,superesse_superfui_superfuturus,supererō,,indicative,future,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,supereris,,indicative,future,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superere,,indicative,future,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supererit,,indicative,future,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,supererimus,,indicative,future,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,supereritis,,indicative,future,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supererunt,,indicative,future,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superestō,,imperative,future,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superestō,,imperative,future,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superestōte,,imperative,future,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,supersuntō,,imperative,future,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfutūrus esse,,infinitive,future,,,\\r\\nsupersum,superesse_superfui_superfuturus,superfore,,infinitive,future,,,\\r\\nsupersum,superesse_superfui_superfuturus,superfuī,,indicative,perfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfuistī,,indicative,perfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuit,,indicative,perfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuimus,,indicative,perfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfuistis,,indicative,perfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuērunt,,indicative,perfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuēre,,indicative,perfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerim,,subjunctive,perfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfueris,,subjunctive,perfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerit,,subjunctive,perfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerimus,,subjunctive,perfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfueritis,,subjunctive,perfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerint,,subjunctive,perfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuisse,,infinitive,perfect,,,\\r\\nsupersum,superesse_superfui_superfuturus,superfueram,,indicative,pluperfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerās,,indicative,pluperfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerat,,indicative,pluperfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerāmus,,indicative,pluperfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerātis,,indicative,pluperfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerant,,indicative,pluperfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuissem,,subjunctive,pluperfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerō,,indicative,future_perfect,singular,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfueris,,indicative,future_perfect,singular,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerit,,indicative,future_perfect,singular,3rd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerimus,,indicative,future_perfect,plural,1st,\\r\\nsupersum,superesse_superfui_superfuturus,superfueritis,,indicative,future_perfect,plural,2nd,\\r\\nsupersum,superesse_superfui_superfuturus,superfuerint,,indicative,future_perfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,desum,,indicative,present,singular,1st,\\r\\ndesum,deesse_defui_defuturus,dees,,indicative,present,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deest,,indicative,present,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,desumus,,indicative,present,plural,1st,\\r\\ndesum,deesse_defui_defuturus,deestis,,indicative,present,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,desunt,,indicative,present,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,desim,,subjunctive,present,singular,1st,\\r\\ndesum,deesse_defui_defuturus,desīs,,subjunctive,present,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,desit,,subjunctive,present,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,desīmus,,subjunctive,present,plural,1st,\\r\\ndesum,deesse_defui_defuturus,desītis,,subjunctive,present,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,desint,,subjunctive,present,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,dees,,imperative,present,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deeste,,imperative,present,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,deesse,,infinitive,present,,,\\r\\ndesum,deesse_defui_defuturus,deeram,,indicative,imperfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,deerās,,indicative,imperfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deerat,,indicative,imperfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,deerāmus,,indicative,imperfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,deerātis,,indicative,imperfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,deerant,,indicative,imperfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,deessem,,subjunctive,imperfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,deforem,,subjunctive,imperfect,singular,1st,2\\r\\ndesum,deesse_defui_defuturus,deessēs,,subjunctive,imperfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deforēs,,subjunctive,imperfect,singular,2nd,2\\r\\ndesum,deesse_defui_defuturus,deesset,,subjunctive,imperfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,deforet,,subjunctive,imperfect,singular,3rd,2\\r\\ndesum,deesse_defui_defuturus,deessēmus,,subjunctive,imperfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,deforēmus,,subjunctive,imperfect,plural,1st,2\\r\\ndesum,deesse_defui_defuturus,deessētis,,subjunctive,imperfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,deforētis,,subjunctive,imperfect,plural,2nd,2\\r\\ndesum,deesse_defui_defuturus,deessent,,subjunctive,imperfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,deforent,,subjunctive,imperfect,plural,3rd,2\\r\\ndesum,deesse_defui_defuturus,deerō,,indicative,future,singular,1st,\\r\\ndesum,deesse_defui_defuturus,deeris,,indicative,future,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deere,,indicative,future,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deerit,,indicative,future,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,deerimus,,indicative,future,plural,1st,\\r\\ndesum,deesse_defui_defuturus,deeritis,,indicative,future,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,deerunt,,indicative,future,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,deestō,,imperative,future,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,deestō,,imperative,future,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,deestōte,,imperative,future,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,desuntō,,imperative,future,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,defutūrus esse,,infinitive,future,,,\\r\\ndesum,deesse_defui_defuturus,defore,,infinitive,future,,,\\r\\ndesum,deesse_defui_defuturus,defuī,,indicative,perfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,defuistī,,indicative,perfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,defuit,,indicative,perfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,defuimus,,indicative,perfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,defuistis,,indicative,perfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,defuērunt,,indicative,perfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,defuēre,,indicative,perfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,defuerim,,subjunctive,perfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,defueris,,subjunctive,perfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,defuerit,,subjunctive,perfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,defuerimus,,subjunctive,perfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,defūvimus,,subjunctive,perfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,defueritis,,subjunctive,perfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,defuerint,,subjunctive,perfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,defuisse,,infinitive,perfect,,,\\r\\ndesum,deesse_defui_defuturus,defueram,,indicative,pluperfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,defuerās,,indicative,pluperfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,defuerat,,indicative,pluperfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,defuerāmus,,indicative,pluperfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,defuerātis,,indicative,pluperfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,defuerant,,indicative,pluperfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,defuissem,,subjunctive,pluperfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,defuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,defuisset,,subjunctive,pluperfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,defuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,defuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,defuissent,,subjunctive,pluperfect,plural,3rd,\\r\\ndesum,deesse_defui_defuturus,defuerō,,indicative,future_perfect,singular,1st,\\r\\ndesum,deesse_defui_defuturus,defueris,,indicative,future_perfect,singular,2nd,\\r\\ndesum,deesse_defui_defuturus,defuerit,,indicative,future_perfect,singular,3rd,\\r\\ndesum,deesse_defui_defuturus,defuerimus,,indicative,future_perfect,plural,1st,\\r\\ndesum,deesse_defui_defuturus,defueritis,,indicative,future_perfect,plural,2nd,\\r\\ndesum,deesse_defui_defuturus,defuerint,,indicative,future_perfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,insum,,indicative,present,singular,1st,\\r\\ninsum,inesse_infui_infuturus,ines,,indicative,present,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,inest,,indicative,present,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,insumus,,indicative,present,plural,1st,\\r\\ninsum,inesse_infui_infuturus,inestis,,indicative,present,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,insunt,,indicative,present,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,insim,,subjunctive,present,singular,1st,\\r\\ninsum,inesse_infui_infuturus,insīs,,subjunctive,present,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,insit,,subjunctive,present,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,insīmus,,subjunctive,present,plural,1st,\\r\\ninsum,inesse_infui_infuturus,insītis,,subjunctive,present,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,insint,,subjunctive,present,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,ines,,imperative,present,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,ineste,,imperative,present,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,inesse,,infinitive,present,,,\\r\\ninsum,inesse_infui_infuturus,ineram,,indicative,imperfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,inerās,,indicative,imperfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,inerat,,indicative,imperfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,inerāmus,,indicative,imperfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,inerātis,,indicative,imperfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,inerant,,indicative,imperfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,inessem,,subjunctive,imperfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,inforem,,subjunctive,imperfect,singular,1st,2\\r\\ninsum,inesse_infui_infuturus,inessēs,,subjunctive,imperfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,inforēs,,subjunctive,imperfect,singular,2nd,2\\r\\ninsum,inesse_infui_infuturus,inesset,,subjunctive,imperfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,inforet,,subjunctive,imperfect,singular,3rd,2\\r\\ninsum,inesse_infui_infuturus,inessēmus,,subjunctive,imperfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,inforēmus,,subjunctive,imperfect,plural,1st,2\\r\\ninsum,inesse_infui_infuturus,inessētis,,subjunctive,imperfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,inforētis,,subjunctive,imperfect,plural,2nd,2\\r\\ninsum,inesse_infui_infuturus,inessent,,subjunctive,imperfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,inforent,,subjunctive,imperfect,plural,3rd,2\\r\\ninsum,inesse_infui_infuturus,inerō,,indicative,future,singular,1st,\\r\\ninsum,inesse_infui_infuturus,ineris,,indicative,future,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,inere,,indicative,future,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,inerit,,indicative,future,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,inerimus,,indicative,future,plural,1st,\\r\\ninsum,inesse_infui_infuturus,ineritis,,indicative,future,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,inerunt,,indicative,future,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,inestō,,imperative,future,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,inestō,,imperative,future,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,inestōte,,imperative,future,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,insuntō,,imperative,future,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,infutūrus esse,,infinitive,future,,,\\r\\ninsum,inesse_infui_infuturus,infore,,infinitive,future,,,\\r\\ninsum,inesse_infui_infuturus,infuī,,indicative,perfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,infuistī,,indicative,perfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,infuit,,indicative,perfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,infuimus,,indicative,perfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,infuistis,,indicative,perfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,infuērunt,,indicative,perfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,infuēre,,indicative,perfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,infuerim,,subjunctive,perfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,infueris,,subjunctive,perfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,infuerit,,subjunctive,perfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,infuerimus,,subjunctive,perfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,infueritis,,subjunctive,perfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,infuerint,,subjunctive,perfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,infuisse,,infinitive,perfect,,,\\r\\ninsum,inesse_infui_infuturus,infueram,,indicative,pluperfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,infuerās,,indicative,pluperfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,infuerat,,indicative,pluperfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,infuerāmus,,indicative,pluperfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,infuerātis,,indicative,pluperfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,infuerant,,indicative,pluperfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,infuissem,,subjunctive,pluperfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,infuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,infuisset,,subjunctive,pluperfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,infuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,infuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,infuissent,,subjunctive,pluperfect,plural,3rd,\\r\\ninsum,inesse_infui_infuturus,infuerō,,indicative,future_perfect,singular,1st,\\r\\ninsum,inesse_infui_infuturus,infueris,,indicative,future_perfect,singular,2nd,\\r\\ninsum,inesse_infui_infuturus,infuerit,,indicative,future_perfect,singular,3rd,\\r\\ninsum,inesse_infui_infuturus,infuerimus,,indicative,future_perfect,plural,1st,\\r\\ninsum,inesse_infui_infuturus,infueritis,,indicative,future_perfect,plural,2nd,\\r\\ninsum,inesse_infui_infuturus,infuerint,,indicative,future_perfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,intersum,,indicative,present,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interes,,indicative,present,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interest,,indicative,present,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,intersumus,,indicative,present,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interestis,,indicative,present,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intersunt,,indicative,present,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,intersim,,subjunctive,present,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,intersīs,,subjunctive,present,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intersit,,subjunctive,present,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,intersīmus,,subjunctive,present,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,intersītis,,subjunctive,present,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intersint,,subjunctive,present,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interes,,imperative,present,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intereste,,imperative,present,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interesse,,infinitive,present,,,\\r\\nintersum,interesse_interfui_interfuturus,intereram,,indicative,imperfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,intererās,,indicative,imperfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intererat,,indicative,imperfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,intererāmus,,indicative,imperfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,intererātis,,indicative,imperfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intererant,,indicative,imperfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interessem,,subjunctive,imperfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interforem,,subjunctive,imperfect,singular,1st,2\\r\\nintersum,interesse_interfui_interfuturus,interessēs,,subjunctive,imperfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nintersum,interesse_interfui_interfuturus,interesset,,subjunctive,imperfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interforet,,subjunctive,imperfect,singular,3rd,2\\r\\nintersum,interesse_interfui_interfuturus,interessēmus,,subjunctive,imperfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nintersum,interesse_interfui_interfuturus,interessētis,,subjunctive,imperfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nintersum,interesse_interfui_interfuturus,interessent,,subjunctive,imperfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interforent,,subjunctive,imperfect,plural,3rd,2\\r\\nintersum,interesse_interfui_interfuturus,intererō,,indicative,future,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,intereris,,indicative,future,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interere,,indicative,future,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intererit,,indicative,future,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,intererimus,,indicative,future,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,intereritis,,indicative,future,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intererunt,,indicative,future,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interestō,,imperative,future,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interestō,,imperative,future,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interestōte,,imperative,future,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,intersuntō,,imperative,future,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfutūrus esse,,infinitive,future,,,\\r\\nintersum,interesse_interfui_interfuturus,interfore,,infinitive,future,,,\\r\\nintersum,interesse_interfui_interfuturus,interfuī,,indicative,perfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfuistī,,indicative,perfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuit,,indicative,perfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuimus,,indicative,perfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfuistis,,indicative,perfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuērunt,,indicative,perfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuēre,,indicative,perfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerim,,subjunctive,perfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfueris,,subjunctive,perfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerit,,subjunctive,perfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerimus,,subjunctive,perfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfueritis,,subjunctive,perfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerint,,subjunctive,perfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuisse,,infinitive,perfect,,,\\r\\nintersum,interesse_interfui_interfuturus,interfueram,,indicative,pluperfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfuerās,,indicative,pluperfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerat,,indicative,pluperfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerāmus,,indicative,pluperfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfuerātis,,indicative,pluperfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerant,,indicative,pluperfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuissem,,subjunctive,pluperfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerō,,indicative,future_perfect,singular,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfueris,,indicative,future_perfect,singular,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerit,,indicative,future_perfect,singular,3rd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerimus,,indicative,future_perfect,plural,1st,\\r\\nintersum,interesse_interfui_interfuturus,interfueritis,,indicative,future_perfect,plural,2nd,\\r\\nintersum,interesse_interfui_interfuturus,interfuerint,,indicative,future_perfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obsum,,indicative,present,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obes,,indicative,present,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obest,,indicative,present,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obsumus,,indicative,present,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obestis,,indicative,present,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obsunt,,indicative,present,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obsim,,subjunctive,present,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obsīs,,subjunctive,present,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obsit,,subjunctive,present,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obsīmus,,subjunctive,present,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obsītis,,subjunctive,present,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obsint,,subjunctive,present,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obes,,imperative,present,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obeste,,imperative,present,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obesse,,infinitive,present,,,\\r\\nobsum,obesse_obfui_obfuturus,oberam,,indicative,imperfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,oberās,,indicative,imperfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,oberat,,indicative,imperfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,oberāmus,,indicative,imperfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,oberātis,,indicative,imperfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,oberant,,indicative,imperfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obessem,,subjunctive,imperfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obforem,,subjunctive,imperfect,singular,1st,2\\r\\nobsum,obesse_obfui_obfuturus,obessēs,,subjunctive,imperfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obforēs,,subjunctive,imperfect,singular,2nd,2\\r\\nobsum,obesse_obfui_obfuturus,obesset,,subjunctive,imperfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obforet,,subjunctive,imperfect,singular,3rd,2\\r\\nobsum,obesse_obfui_obfuturus,obessēmus,,subjunctive,imperfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obforēmus,,subjunctive,imperfect,plural,1st,2\\r\\nobsum,obesse_obfui_obfuturus,obessētis,,subjunctive,imperfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obforētis,,subjunctive,imperfect,plural,2nd,2\\r\\nobsum,obesse_obfui_obfuturus,obessent,,subjunctive,imperfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obforent,,subjunctive,imperfect,plural,3rd,2\\r\\nobsum,obesse_obfui_obfuturus,oberō,,indicative,future,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,oberis,,indicative,future,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obere,,indicative,future,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,oberit,,indicative,future,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,oberimus,,indicative,future,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,oberitis,,indicative,future,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,oberunt,,indicative,future,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obestō,,imperative,future,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obestō,,imperative,future,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obestōte,,imperative,future,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obsuntō,,imperative,future,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfutūrus esse,,infinitive,future,,,\\r\\nobsum,obesse_obfui_obfuturus,obfore,,infinitive,future,,,\\r\\nobsum,obesse_obfui_obfuturus,obfuī,,indicative,perfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfuistī,,indicative,perfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuit,,indicative,perfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuimus,,indicative,perfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfuistis,,indicative,perfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuērunt,,indicative,perfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuēre,,indicative,perfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerim,,subjunctive,perfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfueris,,subjunctive,perfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerit,,subjunctive,perfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerimus,,subjunctive,perfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfueritis,,subjunctive,perfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerint,,subjunctive,perfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuisse,,infinitive,perfect,,,\\r\\nobsum,obesse_obfui_obfuturus,obfueram,,indicative,pluperfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfuerās,,indicative,pluperfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerat,,indicative,pluperfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerāmus,,indicative,pluperfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfuerātis,,indicative,pluperfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerant,,indicative,pluperfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuissem,,subjunctive,pluperfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuisset,,subjunctive,pluperfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuissent,,subjunctive,pluperfect,plural,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerō,,indicative,future_perfect,singular,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfueris,,indicative,future_perfect,singular,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerit,,indicative,future_perfect,singular,3rd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerimus,,indicative,future_perfect,plural,1st,\\r\\nobsum,obesse_obfui_obfuturus,obfueritis,,indicative,future_perfect,plural,2nd,\\r\\nobsum,obesse_obfui_obfuturus,obfuerint,,indicative,future_perfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praesum,,indicative,present,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praees,,indicative,present,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeest,,indicative,present,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praesumus,,indicative,present,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeestis,,indicative,present,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praesunt,,indicative,present,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praesim,,subjunctive,present,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praesīs,,subjunctive,present,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praesit,,subjunctive,present,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praesīmus,,subjunctive,present,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praesītis,,subjunctive,present,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praesint,,subjunctive,present,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praees,,imperative,present,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeeste,,imperative,present,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeesse,,infinitive,present,,,\\r\\npraesum,praeesse_praefui_praefuturus,praeeram,,indicative,imperfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeerās,,indicative,imperfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeerat,,indicative,imperfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeerāmus,,indicative,imperfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeerātis,,indicative,imperfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeerant,,indicative,imperfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeessem,,subjunctive,imperfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeforem,,subjunctive,imperfect,singular,1st,2\\r\\npraesum,praeesse_praefui_praefuturus,praeessēs,,subjunctive,imperfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeforēs,,subjunctive,imperfect,singular,2nd,2\\r\\npraesum,praeesse_praefui_praefuturus,praeesset,,subjunctive,imperfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeforet,,subjunctive,imperfect,singular,3rd,2\\r\\npraesum,praeesse_praefui_praefuturus,praeessēmus,,subjunctive,imperfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeforēmus,,subjunctive,imperfect,plural,1st,2\\r\\npraesum,praeesse_praefui_praefuturus,praeessētis,,subjunctive,imperfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeforētis,,subjunctive,imperfect,plural,2nd,2\\r\\npraesum,praeesse_praefui_praefuturus,praeessent,,subjunctive,imperfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeforent,,subjunctive,imperfect,plural,3rd,2\\r\\npraesum,praeesse_praefui_praefuturus,praeerō,,indicative,future,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeeris,,indicative,future,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeere,,indicative,future,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeerit,,indicative,future,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeerimus,,indicative,future,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praeeritis,,indicative,future,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeerunt,,indicative,future,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeestō,,imperative,future,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praeestō,,imperative,future,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praeestōte,,imperative,future,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praesuntō,,imperative,future,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefutūrus esse,,infinitive,future,,,\\r\\npraesum,praeesse_praefui_praefuturus,praefore,,infinitive,future,,,\\r\\npraesum,praeesse_praefui_praefuturus,praefuī,,indicative,perfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefuistī,,indicative,perfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuit,,indicative,perfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuimus,,indicative,perfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefuistis,,indicative,perfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuērunt,,indicative,perfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuēre,,indicative,perfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerim,,subjunctive,perfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefueris,,subjunctive,perfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerit,,subjunctive,perfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerimus,,subjunctive,perfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefueritis,,subjunctive,perfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerint,,subjunctive,perfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuisse,,infinitive,perfect,,,\\r\\npraesum,praeesse_praefui_praefuturus,praefueram,,indicative,pluperfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerās,,indicative,pluperfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerat,,indicative,pluperfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerāmus,,indicative,pluperfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerātis,,indicative,pluperfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerant,,indicative,pluperfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuissem,,subjunctive,pluperfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefuissēs,,subjunctive,pluperfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuisset,,subjunctive,pluperfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefūvisset,,subjunctive,pluperfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuissēmus,,subjunctive,pluperfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefuissētis,,subjunctive,pluperfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuissent,,subjunctive,pluperfect,plural,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerō,,indicative,future_perfect,singular,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefueris,,indicative,future_perfect,singular,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerit,,indicative,future_perfect,singular,3rd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerimus,,indicative,future_perfect,plural,1st,\\r\\npraesum,praeesse_praefui_praefuturus,praefueritis,,indicative,future_perfect,plural,2nd,\\r\\npraesum,praeesse_praefui_praefuturus,praefuerint,,indicative,future_perfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,nolō,,indicative,present,singular,1st,\\r\\nnolo,nolle_nolui_-,\\\"non vīs\\\",,indicative,present,singular,2nd,\\r\\nnolo,nolle_nolui_-,\\\"non vult\\\",,indicative,present,singular,3rd,\\r\\nnolo,nolle_nolui_-,nolumus,,indicative,present,plural,1st,\\r\\nnolo,nolle_nolui_-,\\\"non vultis\\\",,indicative,present,plural,2nd,\\r\\nnolo,nolle_nolui_-,nolunt,,indicative,present,plural,3rd,\\r\\nnolo,nolle_nolui_-,nolim,,subjunctive,present,singular,1st,\\r\\nnolo,nolle_nolui_-,nolīs,,subjunctive,present,singular,2nd,\\r\\nnolo,nolle_nolui_-,nolit,,subjunctive,present,singular,3rd,\\r\\nnolo,nolle_nolui_-,nolīmus,,subjunctive,present,plural,1st,\\r\\nnolo,nolle_nolui_-,nolītis,,subjunctive,present,plural,2nd,\\r\\nnolo,nolle_nolui_-,nolint,,subjunctive,present,plural,3rd,\\r\\nnolo,nolle_nolui_-,nolle,,infinitive,present,,,\\r\\nnolo,nolle_nolui_-,nolēbam,,indicative,imperfect,singular,1st,\\r\\nnolo,nolle_nolui_-,nolēbās,,indicative,imperfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,nolēbat,,indicative,imperfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,nolēbāmus,,indicative,imperfect,plural,1st,\\r\\nnolo,nolle_nolui_-,nolēbātis,,indicative,imperfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,nolēbant,,indicative,imperfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,nollem,,subjunctive,imperfect,singular,1st,\\r\\nnolo,nolle_nolui_-,nollēs,,subjunctive,imperfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,nollet,,subjunctive,imperfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,nollēmus,,subjunctive,imperfect,plural,1st,\\r\\nnolo,nolle_nolui_-,nollētis,,subjunctive,imperfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,nollent,,subjunctive,imperfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,nolam,,indicative,future,singular,1st,\\r\\nnolo,nolle_nolui_-,nolēs,,indicative,future,singular,2nd,\\r\\nnolo,nolle_nolui_-,nolet,,indicative,future,singular,3rd,\\r\\nnolo,nolle_nolui_-,nolēmus,,indicative,future,plural,1st,\\r\\nnolo,nolle_nolui_-,nolētis,,indicative,future,plural,2nd,\\r\\nnolo,nolle_nolui_-,nolent,,indicative,future,plural,3rd,\\r\\nnolo,nolle_nolui_-,noluī,,indicative,perfect,singular,1st,\\r\\nnolo,nolle_nolui_-,noluistī,,indicative,perfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,noluit,,indicative,perfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,noluimus,,indicative,perfect,plural,1st,\\r\\nnolo,nolle_nolui_-,noluistis,,indicative,perfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,noluērunt,,indicative,perfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,noluēre,,indicative,perfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,noluerim,,subjunctive,perfect,singular,1st,\\r\\nnolo,nolle_nolui_-,noluerīs,,subjunctive,perfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,noluerit,,subjunctive,perfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,noluerīmus,,subjunctive,perfect,plural,1st,\\r\\nnolo,nolle_nolui_-,noluerītis,,subjunctive,perfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,noluerint,,subjunctive,perfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,noluisse,,infinitive,perfect,,,\\r\\nnolo,nolle_nolui_-,nolueram,,indicative,pluperfect,singular,1st,\\r\\nnolo,nolle_nolui_-,noluerās,,indicative,pluperfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,noluerat,,indicative,pluperfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,noluerāmus,,indicative,pluperfect,plural,1st,\\r\\nnolo,nolle_nolui_-,noluerātis,,indicative,pluperfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,noluerant,,indicative,pluperfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,noluissem,,subjunctive,pluperfect,singular,1st,\\r\\nnolo,nolle_nolui_-,noluissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,noluisset,,subjunctive,pluperfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,noluissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nnolo,nolle_nolui_-,noluissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,noluissent,,subjunctive,pluperfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,noluerō,,indicative,future_perfect,singular,1st,\\r\\nnolo,nolle_nolui_-,nolueris,,indicative,future_perfect,singular,2nd,\\r\\nnolo,nolle_nolui_-,noluerit,,indicative,future_perfect,singular,3rd,\\r\\nnolo,nolle_nolui_-,noluerimus,,indicative,future_perfect,plural,1st,\\r\\nnolo,nolle_nolui_-,nolueritis,,indicative,future_perfect,plural,2nd,\\r\\nnolo,nolle_nolui_-,noluerint,,indicative,future_perfect,plural,3rd,\\r\\nnolo,nolle_nolui_-,nolī,active,imperative,present,singular,2nd,\\r\\nnolo,nolle_nolui_-,nolīte,active,imperative,present,plural,2nd,\\r\\nnolo,nolle_nolui_-,nolītō,active,imperative,future,singular,2nd,\\r\\nnolo,nolle_nolui_-,nolītō,active,imperative,future,singular,3rd,\\r\\nnolo,nolle_nolui_-,nolītōte,active,imperative,future,plural,2nd,\\r\\nnolo,nolle_nolui_-,noluntō,active,imperative,future,plural,3rd,\\r\\nmalo,malle_malui_-,malō,,indicative,present,singular,1st,\\r\\nmalo,malle_malui_-,mavīs,,indicative,present,singular,2nd,\\r\\nmalo,malle_malui_-,mavult,,indicative,present,singular,3rd,\\r\\nmalo,malle_malui_-,malumus,,indicative,present,plural,1st,\\r\\nmalo,malle_malui_-,mavultis,,indicative,present,plural,2nd,\\r\\nmalo,malle_malui_-,malunt,,indicative,present,plural,3rd,\\r\\nmalo,malle_malui_-,malim,,subjunctive,present,singular,1st,\\r\\nmalo,malle_malui_-,malīs,,subjunctive,present,singular,2nd,\\r\\nmalo,malle_malui_-,malit,,subjunctive,present,singular,3rd,\\r\\nmalo,malle_malui_-,malīmus,,subjunctive,present,plural,1st,\\r\\nmalo,malle_malui_-,malītis,,subjunctive,present,plural,2nd,\\r\\nmalo,malle_malui_-,malint,,subjunctive,present,plural,3rd,\\r\\nmalo,malle_malui_-,malle,,infinitive,present,,,\\r\\nmalo,malle_malui_-,malēbam,,indicative,imperfect,singular,1st,\\r\\nmalo,malle_malui_-,malēbās,,indicative,imperfect,singular,2nd,\\r\\nmalo,malle_malui_-,malēbat,,indicative,imperfect,singular,3rd,\\r\\nmalo,malle_malui_-,malēbāmus,,indicative,imperfect,plural,1st,\\r\\nmalo,malle_malui_-,malēbātis,,indicative,imperfect,plural,2nd,\\r\\nmalo,malle_malui_-,malēbant,,indicative,imperfect,plural,3rd,\\r\\nmalo,malle_malui_-,mallem,,subjunctive,imperfect,singular,1st,\\r\\nmalo,malle_malui_-,mallēs,,subjunctive,imperfect,singular,2nd,\\r\\nmalo,malle_malui_-,mallet,,subjunctive,imperfect,singular,3rd,\\r\\nmalo,malle_malui_-,mallēmus,,subjunctive,imperfect,plural,1st,\\r\\nmalo,malle_malui_-,mallētis,,subjunctive,imperfect,plural,2nd,\\r\\nmalo,malle_malui_-,mallent,,subjunctive,imperfect,plural,3rd,\\r\\nmalo,malle_malui_-,malam,,indicative,future,singular,1st,\\r\\nmalo,malle_malui_-,malēs,,indicative,future,singular,2nd,\\r\\nmalo,malle_malui_-,malet,,indicative,future,singular,3rd,\\r\\nmalo,malle_malui_-,malēmus,,indicative,future,plural,1st,\\r\\nmalo,malle_malui_-,malētis,,indicative,future,plural,2nd,\\r\\nmalo,malle_malui_-,malent,,indicative,future,plural,3rd,\\r\\nmalo,malle_malui_-,maluī,,indicative,perfect,singular,1st,\\r\\nmalo,malle_malui_-,maluistī,,indicative,perfect,singular,2nd,\\r\\nmalo,malle_malui_-,maluit,,indicative,perfect,singular,3rd,\\r\\nmalo,malle_malui_-,maluimus,,indicative,perfect,plural,1st,\\r\\nmalo,malle_malui_-,maluistis,,indicative,perfect,plural,2nd,\\r\\nmalo,malle_malui_-,maluērunt,,indicative,perfect,plural,3rd,\\r\\nmalo,malle_malui_-,maluēre,,indicative,perfect,plural,3rd,\\r\\nmalo,malle_malui_-,maluerim,,subjunctive,perfect,singular,1st,\\r\\nmalo,malle_malui_-,maluerīs,,subjunctive,perfect,singular,2nd,\\r\\nmalo,malle_malui_-,maluerit,,subjunctive,perfect,singular,3rd,\\r\\nmalo,malle_malui_-,maluerīmus,,subjunctive,perfect,plural,1st,\\r\\nmalo,malle_malui_-,maluerītis,,subjunctive,perfect,plural,2nd,\\r\\nmalo,malle_malui_-,maluerint,,subjunctive,perfect,plural,3rd,\\r\\nmalo,malle_malui_-,maluisse,,infinitive,perfect,,,\\r\\nmalo,malle_malui_-,malueram,,indicative,pluperfect,singular,1st,\\r\\nmalo,malle_malui_-,maluerās,,indicative,pluperfect,singular,2nd,\\r\\nmalo,malle_malui_-,maluerat,,indicative,pluperfect,singular,3rd,\\r\\nmalo,malle_malui_-,maluerāmus,,indicative,pluperfect,plural,1st,\\r\\nmalo,malle_malui_-,maluerātis,,indicative,pluperfect,plural,2nd,\\r\\nmalo,malle_malui_-,maluerant,,indicative,pluperfect,plural,3rd,\\r\\nmalo,malle_malui_-,maluissem,,subjunctive,pluperfect,singular,1st,\\r\\nmalo,malle_malui_-,maluissēs,,subjunctive,pluperfect,singular,2nd,\\r\\nmalo,malle_malui_-,maluisset,,subjunctive,pluperfect,singular,3rd,\\r\\nmalo,malle_malui_-,maluissēmus,,subjunctive,pluperfect,plural,1st,\\r\\nmalo,malle_malui_-,maluissētis,,subjunctive,pluperfect,plural,2nd,\\r\\nmalo,malle_malui_-,maluissent,,subjunctive,pluperfect,plural,3rd,\\r\\nmalo,malle_malui_-,maluerō,,indicative,future_perfect,singular,1st,\\r\\nmalo,malle_malui_-,malueris,,indicative,future_perfect,singular,2nd,\\r\\nmalo,malle_malui_-,maluerit,,indicative,future_perfect,singular,3rd,\\r\\nmalo,malle_malui_-,maluerimus,,indicative,future_perfect,plural,1st,\\r\\nmalo,malle_malui_-,malueritis,,indicative,future_perfect,plural,2nd,\\r\\nmalo,malle_malui_-,maluerint,,indicative,future_perfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,queō,active,indicative,present,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīs,active,indicative,present,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quit,active,indicative,present,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīmus,active,indicative,present,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quītis,active,indicative,present,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,queunt,active,indicative,present,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,queam,active,subjunctive,present,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,queās,active,subjunctive,present,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,queat,active,subjunctive,present,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,queāmus,active,subjunctive,present,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,queātis,active,subjunctive,present,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,queant,active,subjunctive,present,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quī,active,imperative,present,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīte,active,imperative,present,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīre,active,infinitive,present,,,\\r\\nqueo,quire_quivi(ii)_quitus,quītur,passive,indicative,present,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,queātur,passive,subjunctive,present,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīrī,passive,infinitive,present,,,\\r\\nqueo,quire_quivi(ii)_quitus,quībam,active,indicative,imperfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quībās,active,indicative,imperfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quībat,active,indicative,imperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quībāmus,active,indicative,imperfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quībātis,active,indicative,imperfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quībant,active,indicative,imperfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīrem,active,subjunctive,imperfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīret,active,subjunctive,imperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīrent,active,subjunctive,imperfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quībātur,passive,indicative,imperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīrētur,passive,subjunctive,imperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quībō,active,indicative,future,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quībis,active,indicative,future,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quībit,active,indicative,future,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quībimus,active,indicative,future,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quībitis,active,indicative,future,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quībunt,active,indicative,future,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quībitur,passive,indicative,future,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quītō,active,imperative,future,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quītō,active,imperative,future,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quītōte,active,imperative,future,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,queuntō,active,imperative,future,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quitūrus esse,active,infinitive,future,,,\\r\\nqueo,quire_quivi(ii)_quitus,quiī,active,indicative,perfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīvī,active,indicative,perfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīstī,active,indicative,perfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīvistī,active,indicative,perfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quiit,active,indicative,perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīvit,active,indicative,perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quivimus,active,indicative,perfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīvistis,active,indicative,perfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quivērunt,active,indicative,perfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quivēre,active,indicative,perfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quierim,active,subjunctive,perfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quierīs,active,subjunctive,perfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quierit,active,subjunctive,perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīverit,active,subjunctive,perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quierimus,active,subjunctive,perfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quieritis,active,subjunctive,perfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quierint,active,subjunctive,perfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,\\\"quitus (-a, -um) est\\\",passive,indicative,perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,\\\"quitus (-a, -um) sit\\\",passive,subjunctive,perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīsse,active,infinitive,perfect,,,\\r\\nqueo,quire_quivi(ii)_quitus,quitum esse,passive,infinitive,perfect,,,\\r\\nqueo,quire_quivi(ii)_quitus,quieram,active,indicative,pluperfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quierās,active,indicative,pluperfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quierat,active,indicative,pluperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quierāmus,active,indicative,pluperfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quierātis,active,indicative,pluperfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quierant,active,indicative,pluperfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīssem,active,subjunctive,pluperfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīssēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīsset,active,subjunctive,pluperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīssēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quīssētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quīssent,active,subjunctive,pluperfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quīvissent,active,subjunctive,pluperfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,\\\"quitus (-a, -um) erat\\\",passive,indicative,pluperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,\\\"quitus (-a, -um) esset\\\",passive,subjunctive,pluperfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quierō,active,indicative,future_perfect,singular,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quieris,active,indicative,future_perfect,singular,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quierit,active,indicative,future_perfect,singular,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,quierimus,active,indicative,future_perfect,plural,1st,\\r\\nqueo,quire_quivi(ii)_quitus,quieritis,active,indicative,future_perfect,plural,2nd,\\r\\nqueo,quire_quivi(ii)_quitus,quierint,active,indicative,future_perfect,plural,3rd,\\r\\nqueo,quire_quivi(ii)_quitus,\\\"quitus (-a, -um) erit\\\",passive,indicative,future_perfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeō,active,indicative,present,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīs,active,indicative,present,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequit,active,indicative,present,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīmus,active,indicative,present,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequītis,active,indicative,present,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeunt,active,indicative,present,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeam,active,subjunctive,present,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeās,active,subjunctive,present,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeat,active,subjunctive,present,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeāmus,active,subjunctive,present,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeātis,active,subjunctive,present,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeant,active,subjunctive,present,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequī,active,imperative,present,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīte,active,imperative,present,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīre,active,infinitive,present,,,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībam,active,indicative,imperfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībās,active,indicative,imperfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībat,active,indicative,imperfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībāmus,active,indicative,imperfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībātis,active,indicative,imperfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībant,active,indicative,imperfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīrem,active,subjunctive,imperfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīret,active,subjunctive,imperfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīrent,active,subjunctive,imperfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībō,active,indicative,future,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībis,active,indicative,future,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībit,active,indicative,future,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībimus,active,indicative,future,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībitis,active,indicative,future,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequībunt,active,indicative,future,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequītō,active,imperative,future,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequītō,active,imperative,future,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequītōte,active,imperative,future,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequeuntō,active,imperative,future,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequitūrus esse,active,infinitive,future,,,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequiī,active,indicative,perfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīvī,active,indicative,perfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīstī,active,indicative,perfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīvistī,active,indicative,perfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequiit,active,indicative,perfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīvit,active,indicative,perfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequivimus,active,indicative,perfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīvistis,active,indicative,perfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequivērunt,active,indicative,perfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequivēre,active,indicative,perfect,plural,3rd,15\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverim,active,subjunctive,perfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverīs,active,subjunctive,perfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverit,active,subjunctive,perfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverimus,active,subjunctive,perfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīveritis,active,subjunctive,perfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverint,active,subjunctive,perfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīvisse,active,infinitive,perfect,,,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīsse,active,infinitive,perfect,,,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequieram,active,indicative,pluperfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierās,active,indicative,pluperfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverat,active,indicative,pluperfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierat,active,indicative,pluperfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierāmus,active,indicative,pluperfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierātis,active,indicative,pluperfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīverant,active,indicative,pluperfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierant,active,indicative,pluperfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīssem,active,subjunctive,pluperfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīssēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīvisset,active,subjunctive,pluperfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīsset,active,subjunctive,pluperfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīssēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīssētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequīssent,active,subjunctive,pluperfect,plural,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierō,active,indicative,future_perfect,singular,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequieris,active,indicative,future_perfect,singular,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierit,active,indicative,future_perfect,singular,3rd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierimus,active,indicative,future_perfect,plural,1st,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequieritis,active,indicative,future_perfect,plural,2nd,\\r\\nnequeo,nequire_nequivi(ii)_nequitus,nequierint,active,indicative,future_perfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adeō,active,indicative,present,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīs,active,indicative,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adit,active,indicative,present,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīmus,active,indicative,present,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adītis,active,indicative,present,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeunt,active,indicative,present,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adeam,active,subjunctive,present,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adeās,active,subjunctive,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeat,active,subjunctive,present,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adeāmus,active,subjunctive,present,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adeātis,active,subjunctive,present,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeant,active,subjunctive,present,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adī,active,imperative,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīte,active,imperative,present,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīre,active,infinitive,present,,,\\r\\nadeo,adire_adivi(ii)_aditus,adeor,passive,indicative,present,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīris,passive,indicative,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīre,passive,indicative,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adītur,passive,indicative,present,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīmur,passive,indicative,present,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīminī,passive,indicative,present,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeuntur,passive,indicative,present,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adear,passive,subjunctive,present,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adeāris,passive,subjunctive,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeāre,passive,subjunctive,present,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeātur,passive,subjunctive,present,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adeāmur,passive,subjunctive,present,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adeāminī,passive,subjunctive,present,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeantur,passive,subjunctive,present,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrī,passive,infinitive,present,,,\\r\\nadeo,adire_adivi(ii)_aditus,adīrier,passive,infinitive,present,,,\\r\\nadeo,adire_adivi(ii)_aditus,adībam,active,indicative,imperfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībās,active,indicative,imperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībat,active,indicative,imperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībāmus,active,indicative,imperfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībātis,active,indicative,imperfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībant,active,indicative,imperfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrem,active,subjunctive,imperfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīret,active,subjunctive,imperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrent,active,subjunctive,imperfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībar,passive,indicative,imperfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībāris,passive,indicative,imperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībāre,passive,indicative,imperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībātur,passive,indicative,imperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībāmur,passive,indicative,imperfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībāminī,passive,indicative,imperfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībantur,passive,indicative,imperfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrer,passive,subjunctive,imperfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīrēris,passive,subjunctive,imperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrēre,passive,subjunctive,imperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrētur,passive,subjunctive,imperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrēmur,passive,subjunctive,imperfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīrēminī,passive,subjunctive,imperfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīrentur,passive,subjunctive,imperfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībō,active,indicative,future,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībis,active,indicative,future,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībit,active,indicative,future,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībimus,active,indicative,future,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībitis,active,indicative,future,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībunt,active,indicative,future,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībor,passive,indicative,future,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīberis,passive,indicative,future,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībere,passive,indicative,future,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībitur,passive,indicative,future,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adībimur,passive,indicative,future,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adībiminī,passive,indicative,future,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adībuntur,passive,indicative,future,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adītō,active,imperative,future,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adītō,active,imperative,future,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adītōte,active,imperative,future,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adeuntō,active,imperative,future,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,aditūrus esse,active,infinitive,future,,,\\r\\nadeo,adire_adivi(ii)_aditus,aditum īrī,passive,infinitive,future,,,\\r\\nadeo,adire_adivi(ii)_aditus,adiī,active,indicative,perfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīvī,active,indicative,perfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīstī,active,indicative,perfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīvistī,active,indicative,perfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adiit,active,indicative,perfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīvit,active,indicative,perfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adivimus,active,indicative,perfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīvistis,active,indicative,perfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adivērunt,active,indicative,perfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adivēre,active,indicative,perfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adierim,active,subjunctive,perfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adierīs,active,subjunctive,perfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adierit,active,subjunctive,perfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adierimus,active,subjunctive,perfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adieritis,active,subjunctive,perfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adierint,active,subjunctive,perfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,\\\"aditus (-a, -um) est\\\",passive,indicative,perfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,\\\"aditus (-a, -um) sit\\\",passive,subjunctive,perfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīsse,active,infinitive,perfect,,,\\r\\nadeo,adire_adivi(ii)_aditus,aditus esse,passive,infinitive,perfect,,,\\r\\nadeo,adire_adivi(ii)_aditus,adieram,active,indicative,pluperfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adierās,active,indicative,pluperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adierat,active,indicative,pluperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adierāmus,active,indicative,pluperfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adierātis,active,indicative,pluperfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adierant,active,indicative,pluperfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīssem,active,subjunctive,pluperfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīssēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīsset,active,subjunctive,pluperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adīssēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adīssētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adīssent,active,subjunctive,pluperfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,\\\"aditus (-a, -um) erat\\\",passive,indicative,pluperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,\\\"aditus (-a, -um) esset\\\",passive,subjunctive,pluperfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adierō,active,indicative,future_perfect,singular,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adieris,active,indicative,future_perfect,singular,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adierit,active,indicative,future_perfect,singular,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,adierimus,active,indicative,future_perfect,plural,1st,\\r\\nadeo,adire_adivi(ii)_aditus,adieritis,active,indicative,future_perfect,plural,2nd,\\r\\nadeo,adire_adivi(ii)_aditus,adierint,active,indicative,future_perfect,plural,3rd,\\r\\nadeo,adire_adivi(ii)_aditus,\\\"aditus (-a, -um) erit\\\",passive,indicative,future_perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,ineō,active,indicative,present,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīs,active,indicative,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,init,active,indicative,present,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīmus,active,indicative,present,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inītis,active,indicative,present,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineunt,active,indicative,present,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,ineam,active,subjunctive,present,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,ineās,active,subjunctive,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineat,active,subjunctive,present,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,ineāmus,active,subjunctive,present,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,ineātis,active,subjunctive,present,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineant,active,subjunctive,present,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inī,active,imperative,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīte,active,imperative,present,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīre,active,infinitive,present,,,\\r\\nineo,inire_inivi(ii)_initus,ineor,passive,indicative,present,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīris,passive,indicative,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīre,passive,indicative,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inītur,passive,indicative,present,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīmur,passive,indicative,present,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inīminī,passive,indicative,present,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineuntur,passive,indicative,present,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inear,passive,subjunctive,present,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,ineāris,passive,subjunctive,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineāre,passive,subjunctive,present,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineātur,passive,subjunctive,present,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,ineāmur,passive,subjunctive,present,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,ineāminī,passive,subjunctive,present,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineantur,passive,subjunctive,present,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīrī,passive,infinitive,present,,,\\r\\nineo,inire_inivi(ii)_initus,inībam,active,indicative,imperfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inībās,active,indicative,imperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībat,active,indicative,imperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībāmus,active,indicative,imperfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inībātis,active,indicative,imperfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībant,active,indicative,imperfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīrem,active,subjunctive,imperfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīret,active,subjunctive,imperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inīrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīrent,active,subjunctive,imperfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībar,passive,indicative,imperfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inībāris,passive,indicative,imperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībāre,passive,indicative,imperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībātur,passive,indicative,imperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībāmur,passive,indicative,imperfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inībāminī,passive,indicative,imperfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībantur,passive,indicative,imperfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīrer,passive,subjunctive,imperfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīrēris,passive,subjunctive,imperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīrēre,passive,subjunctive,imperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīrētur,passive,subjunctive,imperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīrēmur,passive,subjunctive,imperfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inīrēminī,passive,subjunctive,imperfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīrentur,passive,subjunctive,imperfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībō,active,indicative,future,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inībis,active,indicative,future,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībit,active,indicative,future,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībimus,active,indicative,future,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inībitis,active,indicative,future,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībunt,active,indicative,future,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībor,passive,indicative,future,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīberis,passive,indicative,future,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībere,passive,indicative,future,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībitur,passive,indicative,future,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inībimur,passive,indicative,future,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inībiminī,passive,indicative,future,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inībuntur,passive,indicative,future,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inītō,active,imperative,future,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inītō,active,imperative,future,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inītōte,active,imperative,future,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,ineuntō,active,imperative,future,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,initūrus esse,active,infinitive,future,,,\\r\\nineo,inire_inivi(ii)_initus,initum īrī,passive,infinitive,future,,,\\r\\nineo,inire_inivi(ii)_initus,iniī,active,indicative,perfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīvī,active,indicative,perfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīstī,active,indicative,perfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīvistī,active,indicative,perfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,iniit,active,indicative,perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīvit,active,indicative,perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inivimus,active,indicative,perfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inīvistis,active,indicative,perfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inivērunt,active,indicative,perfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inivēre,active,indicative,perfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inierim,active,subjunctive,perfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inierīs,active,subjunctive,perfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inierit,active,subjunctive,perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inierimus,active,subjunctive,perfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inieritis,active,subjunctive,perfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inierint,active,subjunctive,perfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,\\\"initus (-a, -um) est\\\",passive,indicative,perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,\\\"initus (-a, -um) sit\\\",passive,subjunctive,perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīsse,active,infinitive,perfect,,,\\r\\nineo,inire_inivi(ii)_initus,initus esse,passive,infinitive,perfect,,,\\r\\nineo,inire_inivi(ii)_initus,inieram,active,indicative,pluperfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inierās,active,indicative,pluperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inierat,active,indicative,pluperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inierāmus,active,indicative,pluperfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inierātis,active,indicative,pluperfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inierant,active,indicative,pluperfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīssem,active,subjunctive,pluperfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inīssēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīsset,active,subjunctive,pluperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inīssēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inīssētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inīssent,active,subjunctive,pluperfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,\\\"initus (-a, -um) erat\\\",passive,indicative,pluperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,\\\"initus (-a, -um) esset\\\",passive,subjunctive,pluperfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inierō,active,indicative,future_perfect,singular,1st,\\r\\nineo,inire_inivi(ii)_initus,inieris,active,indicative,future_perfect,singular,2nd,\\r\\nineo,inire_inivi(ii)_initus,inierit,active,indicative,future_perfect,singular,3rd,\\r\\nineo,inire_inivi(ii)_initus,inierimus,active,indicative,future_perfect,plural,1st,\\r\\nineo,inire_inivi(ii)_initus,inieritis,active,indicative,future_perfect,plural,2nd,\\r\\nineo,inire_inivi(ii)_initus,inierint,active,indicative,future_perfect,plural,3rd,\\r\\nineo,inire_inivi(ii)_initus,\\\"initus (-a, -um) erit\\\",passive,indicative,future_perfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneō,active,indicative,present,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīs,active,indicative,present,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnit,active,indicative,present,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīmus,active,indicative,present,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnītis,active,indicative,present,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneunt,active,indicative,present,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneam,active,subjunctive,present,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēneās,active,subjunctive,present,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneat,active,subjunctive,present,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneāmus,active,subjunctive,present,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēneātis,active,subjunctive,present,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneant,active,subjunctive,present,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnī,active,imperative,present,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīte,active,imperative,present,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīre,active,infinitive,present,,,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībam,active,indicative,imperfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībās,active,indicative,imperfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībat,active,indicative,imperfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībāmus,active,indicative,imperfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībātis,active,indicative,imperfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībant,active,indicative,imperfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīrem,active,subjunctive,imperfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīret,active,subjunctive,imperfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīrent,active,subjunctive,imperfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībō,active,indicative,future,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībis,active,indicative,future,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībit,active,indicative,future,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībimus,active,indicative,future,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībitis,active,indicative,future,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnībunt,active,indicative,future,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnītō,active,imperative,future,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnītō,active,imperative,future,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnītōte,active,imperative,future,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēneuntō,active,imperative,future,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnitūrus esse,active,infinitive,future,,,\\r\\nveneo,venire_venivi(ii)_venitus,vēniī,active,indicative,perfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīvī,active,indicative,perfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīstī,active,indicative,perfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīvistī,active,indicative,perfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēniit,active,indicative,perfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīvit,active,indicative,perfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīvimus,active,indicative,perfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīvistis,active,indicative,perfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnivērunt,active,indicative,perfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnivēre,active,indicative,perfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierim,active,subjunctive,perfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierīs,active,subjunctive,perfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierit,active,subjunctive,perfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierimus,active,subjunctive,perfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnieritis,active,subjunctive,perfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierint,active,subjunctive,perfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīsse,active,infinitive,perfect,,,\\r\\nveneo,venire_venivi(ii)_venitus,vēnieram,active,indicative,pluperfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierās,active,indicative,pluperfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierat,active,indicative,pluperfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierāmus,active,indicative,pluperfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierātis,active,indicative,pluperfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierant,active,indicative,pluperfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīssem,active,subjunctive,pluperfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīssēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīsset,active,subjunctive,pluperfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīssēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīssētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnīssent,active,subjunctive,pluperfect,plural,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierō,active,indicative,future_perfect,singular,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnieris,active,indicative,future_perfect,singular,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierit,active,indicative,future_perfect,singular,3rd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierimus,active,indicative,future_perfect,plural,1st,\\r\\nveneo,venire_venivi(ii)_venitus,vēnieritis,active,indicative,future_perfect,plural,2nd,\\r\\nveneo,venire_venivi(ii)_venitus,vēnierint,active,indicative,future_perfect,plural,3rd,\\r\\ninquiam,-_-_-,inquam,active,indicative,present,singular,1st,\\r\\ninquiam,-_-_-,inquis,active,indicative,present,singular,2nd,\\r\\ninquiam,-_-_-,inquit,active,indicative,present,singular,3rd,\\r\\ninquiam,-_-_-,inquimus,active,indicative,present,plural,1st,16\\r\\ninquiam,-_-_-,inquitis,active,indicative,present,plural,2nd,16\\r\\ninquiam,-_-_-,inquiunt,active,indicative,present,plural,3rd,\\r\\ninquiam,-_-_-,inquiēbat,active,indicative,imperfect,singular,3rd,16\\r\\ninquiam,-_-_-,inquiēs,active,indicative,future,singular,2nd,\\r\\ninquiam,-_-_-,inquiet,active,indicative,future,singular,3rd,\\r\\ninquiam,-_-_-,inquiī,active,indicative,perfect,singular,1st,16\\r\\ninquiam,-_-_-,inquīstī,active,indicative,perfect,singular,2nd,16\\r\\ninquiam,-_-_-,inque,,imperative,present,singular,2nd,16\\r\\ninquiam,-_-_-,inquitō,,imperative,present,plural,2nd,16\\r\\nodeo,odire_odivi(ii)_-,odeō,active,indicative,present,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīs,active,indicative,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odit,active,indicative,present,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīmus,active,indicative,present,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odītis,active,indicative,present,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeunt,active,indicative,present,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odeam,active,subjunctive,present,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odeās,active,subjunctive,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeat,active,subjunctive,present,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odeāmus,active,subjunctive,present,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odeātis,active,subjunctive,present,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeant,active,subjunctive,present,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odī,active,imperative,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīte,active,imperative,present,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīre,active,infinitive,present,,,\\r\\nodeo,odire_odivi(ii)_-,odeor,passive,indicative,present,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīris,passive,indicative,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīre,passive,indicative,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odītur,passive,indicative,present,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīmur,passive,indicative,present,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odīminī,passive,indicative,present,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeuntur,passive,indicative,present,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odear,passive,subjunctive,present,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odeāris,passive,subjunctive,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeāre,passive,subjunctive,present,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeātur,passive,subjunctive,present,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odeāmur,passive,subjunctive,present,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odeāminī,passive,subjunctive,present,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeantur,passive,subjunctive,present,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīrī,passive,infinitive,present,,,\\r\\nodeo,odire_odivi(ii)_-,odīrier,passive,infinitive,present,,,\\r\\nodeo,odire_odivi(ii)_-,odībam,active,indicative,imperfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odībās,active,indicative,imperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībat,active,indicative,imperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībāmus,active,indicative,imperfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odībātis,active,indicative,imperfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībant,active,indicative,imperfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīrem,active,subjunctive,imperfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīrēs,active,subjunctive,imperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīret,active,subjunctive,imperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīrēmus,active,subjunctive,imperfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odīrētis,active,subjunctive,imperfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīrent,active,subjunctive,imperfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībar,passive,indicative,imperfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odībāris,passive,indicative,imperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībāre,passive,indicative,imperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībātur,passive,indicative,imperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībāmur,passive,indicative,imperfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odībāminī,passive,indicative,imperfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībantur,passive,indicative,imperfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīrer,passive,subjunctive,imperfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīrēris,passive,subjunctive,imperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīrēre,passive,subjunctive,imperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīrētur,passive,subjunctive,imperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīrēmur,passive,subjunctive,imperfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odīrēminī,passive,subjunctive,imperfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīrentur,passive,subjunctive,imperfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībō,active,indicative,future,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odībis,active,indicative,future,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībit,active,indicative,future,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībimus,active,indicative,future,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odībitis,active,indicative,future,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībunt,active,indicative,future,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībor,passive,indicative,future,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīberis,passive,indicative,future,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībere,passive,indicative,future,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībitur,passive,indicative,future,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odībimur,passive,indicative,future,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odībiminī,passive,indicative,future,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odībuntur,passive,indicative,future,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odītō,active,imperative,future,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odītō,active,imperative,future,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odītōte,active,imperative,future,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odeuntō,active,imperative,future,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,oditūrus esse,active,infinitive,future,,,\\r\\nodeo,odire_odivi(ii)_-,oditum īrī,passive,infinitive,future,,,\\r\\nodeo,odire_odivi(ii)_-,odiī,active,indicative,perfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīvī,active,indicative,perfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīstī,active,indicative,perfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīvistī,active,indicative,perfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odiit,active,indicative,perfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīvit,active,indicative,perfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odivimus,active,indicative,perfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odīvistis,active,indicative,perfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odivērunt,active,indicative,perfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odivēre,active,indicative,perfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odierim,active,subjunctive,perfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odierīs,active,subjunctive,perfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odierit,active,subjunctive,perfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odierimus,active,subjunctive,perfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odieritis,active,subjunctive,perfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odierint,active,subjunctive,perfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,\\\"oditus (-a, -um) est\\\",passive,indicative,perfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,\\\"oditus (-a, -um) sit\\\",passive,subjunctive,perfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīsse,active,infinitive,perfect,,,\\r\\nodeo,odire_odivi(ii)_-,oditus esse,passive,infinitive,perfect,,,\\r\\nodeo,odire_odivi(ii)_-,odieram,active,indicative,pluperfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odierās,active,indicative,pluperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odierat,active,indicative,pluperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odierāmus,active,indicative,pluperfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odierātis,active,indicative,pluperfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odierant,active,indicative,pluperfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīssem,active,subjunctive,pluperfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odīssēs,active,subjunctive,pluperfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīsset,active,subjunctive,pluperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odīssēmus,active,subjunctive,pluperfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odīssētis,active,subjunctive,pluperfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odīssent,active,subjunctive,pluperfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,\\\"oditus (-a, -um) erat\\\",passive,indicative,pluperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,\\\"oditus (-a, -um) esset\\\",passive,subjunctive,pluperfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odierō,active,indicative,future_perfect,singular,1st,\\r\\nodeo,odire_odivi(ii)_-,odieris,active,indicative,future_perfect,singular,2nd,\\r\\nodeo,odire_odivi(ii)_-,odierit,active,indicative,future_perfect,singular,3rd,\\r\\nodeo,odire_odivi(ii)_-,odierimus,active,indicative,future_perfect,plural,1st,\\r\\nodeo,odire_odivi(ii)_-,odieritis,active,indicative,future_perfect,plural,2nd,\\r\\nodeo,odire_odivi(ii)_-,odierint,active,indicative,future_perfect,plural,3rd,\\r\\nodeo,odire_odivi(ii)_-,\\\"oditus (-a, -um) erit\\\",passive,indicative,future_perfect,singular,3rd,\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\";","export default \"Ending,Conjugation,Voice,Mood,Tense,Number,Person,Case,Type,Footnote\\r\\nō,1st,active,indicative,present,singular,1st,,regular,\\r\\nās,1st,active,indicative,present,singular,2nd,,regular,\\r\\nat,1st,active,indicative,present,singular,3rd,,regular,\\r\\nāmus,1st,active,indicative,present,plural,1st,,regular,\\r\\nātis,1st,active,indicative,present,plural,2nd,,regular,\\r\\nant,1st,active,indicative,present,plural,3rd,,regular,\\r\\nem,1st,active,subjunctive,present,singular,1st,,regular,\\r\\nēs,1st,active,subjunctive,present,singular,2nd,,regular,\\r\\net,1st,active,subjunctive,present,singular,3rd,,regular,\\r\\nēmus,1st,active,subjunctive,present,plural,1st,,regular,\\r\\nētis,1st,active,subjunctive,present,plural,2nd,,regular,\\r\\nent,1st,active,subjunctive,present,plural,3rd,,regular,\\r\\neō,2nd,active,indicative,present,singular,1st,,regular,\\r\\nēs,2nd,active,indicative,present,singular,2nd,,regular,\\r\\nēt,2nd,active,indicative,present,singular,3rd,,regular,\\r\\nēmus,2nd,active,indicative,present,plural,1st,,regular,\\r\\nētis,2nd,active,indicative,present,plural,2nd,,regular,\\r\\nent,2nd,active,indicative,present,plural,3rd,,regular,\\r\\neam,2nd,active,subjunctive,present,singular,1st,,regular,\\r\\neās,2nd,active,subjunctive,present,singular,2nd,,regular,\\r\\neat,2nd,active,subjunctive,present,singular,3rd,,regular,\\r\\neāmus,2nd,active,subjunctive,present,plural,1st,,regular,\\r\\neātis,2nd,active,subjunctive,present,plural,2nd,,regular,\\r\\neant,2nd,active,subjunctive,present,plural,3rd,,regular,\\r\\nō,3rd,active,indicative,present,singular,1st,,regular,\\r\\nis,3rd,active,indicative,present,singular,2nd,,regular,\\r\\nit,3rd,active,indicative,present,singular,3rd,,regular,\\r\\nimus,3rd,active,indicative,present,plural,1st,,regular,\\r\\nitis,3rd,active,indicative,present,plural,2nd,,regular,\\r\\nunt,3rd,active,indicative,present,plural,3rd,,regular,\\r\\nam,3rd,active,subjunctive,present,singular,1st,,regular,\\r\\nās,3rd,active,subjunctive,present,singular,2nd,,regular,\\r\\nat,3rd,active,subjunctive,present,singular,3rd,,regular,\\r\\nāmus,3rd,active,subjunctive,present,plural,1st,,regular,\\r\\nātis,3rd,active,subjunctive,present,plural,2nd,,regular,\\r\\nant,3rd,active,subjunctive,present,plural,3rd,,regular,\\r\\niō,4th,active,indicative,present,singular,1st,,regular,\\r\\nīs,4th,active,indicative,present,singular,2nd,,regular,\\r\\nit,4th,active,indicative,present,singular,3rd,,regular,\\r\\nīmus,4th,active,indicative,present,plural,1st,,regular,\\r\\nītis,4th,active,indicative,present,plural,2nd,,regular,\\r\\niunt,4th,active,indicative,present,plural,3rd,,regular,\\r\\niam,4th,active,subjunctive,present,singular,1st,,regular,\\r\\niās,4th,active,subjunctive,present,singular,2nd,,regular,\\r\\niat,4th,active,subjunctive,present,singular,3rd,,regular,\\r\\niāmus,4th,active,subjunctive,present,plural,1st,,regular,\\r\\niātis,4th,active,subjunctive,present,plural,2nd,,regular,\\r\\niant,4th,active,subjunctive,present,plural,3rd,,regular,\\r\\nābam,1st,active,indicative,imperfect,singular,1st,,regular,\\r\\nābas,1st,active,indicative,imperfect,singular,2nd,,regular,\\r\\nābat,1st,active,indicative,imperfect,singular,3rd,,regular,\\r\\nābāmus,1st,active,indicative,imperfect,plural,1st,,regular,\\r\\nābātis,1st,active,indicative,imperfect,plural,2nd,,regular,\\r\\nābant,1st,active,indicative,imperfect,plural,3rd,,regular,\\r\\nārem,1st,active,subjunctive,imperfect,singular,1st,,regular,\\r\\nārēs,1st,active,subjunctive,imperfect,singular,2nd,,regular,\\r\\nāret,1st,active,subjunctive,imperfect,singular,3rd,,regular,\\r\\nārēmus,1st,active,subjunctive,imperfect,plural,1st,,regular,\\r\\nārētis,1st,active,subjunctive,imperfect,plural,2nd,,regular,\\r\\nārent,1st,active,subjunctive,imperfect,plural,3rd,,regular,\\r\\nēbam,2nd,active,indicative,imperfect,singular,1st,,regular,\\r\\nēbās,2nd,active,indicative,imperfect,singular,2nd,,regular,\\r\\nēbat,2nd,active,indicative,imperfect,singular,3rd,,regular,\\r\\nēbāmus,2nd,active,indicative,imperfect,plural,1st,,regular,\\r\\nēbātis,2nd,active,indicative,imperfect,plural,2nd,,regular,\\r\\nēbant,2nd,active,indicative,imperfect,plural,3rd,,regular,\\r\\nērem,2nd,active,subjunctive,imperfect,singular,1st,,regular,\\r\\nērēs,2nd,active,subjunctive,imperfect,singular,2nd,,regular,\\r\\nēret,2nd,active,subjunctive,imperfect,singular,3rd,,regular,\\r\\nērēmus,2nd,active,subjunctive,imperfect,plural,1st,,regular,\\r\\nērētis,2nd,active,subjunctive,imperfect,plural,2nd,,regular,\\r\\nērēnt,2nd,active,subjunctive,imperfect,plural,3rd,,regular,\\r\\nēbam,3rd,active,indicative,imperfect,singular,1st,,regular,\\r\\nēbās,3rd,active,indicative,imperfect,singular,2nd,,regular,\\r\\nēbat,3rd,active,indicative,imperfect,singular,3rd,,regular,\\r\\nēbāmus,3rd,active,indicative,imperfect,plural,1st,,regular,\\r\\nēbātis,3rd,active,indicative,imperfect,plural,2nd,,regular,\\r\\nēbant,3rd,active,indicative,imperfect,plural,3rd,,regular,\\r\\nerem,3rd,active,subjunctive,imperfect,singular,1st,,regular,\\r\\nerēs,3rd,active,subjunctive,imperfect,singular,2nd,,regular,\\r\\neret,3rd,active,subjunctive,imperfect,singular,3rd,,regular,\\r\\nerēmus,3rd,active,subjunctive,imperfect,plural,1st,,regular,\\r\\nerētis,3rd,active,subjunctive,imperfect,plural,2nd,,regular,\\r\\nerent,3rd,active,subjunctive,imperfect,plural,3rd,,regular,\\r\\niēbam,4th,active,indicative,imperfect,singular,1st,,regular,\\r\\nībam,4th,active,indicative,imperfect,singular,1st,,irregular,2\\r\\niēbas,4th,active,indicative,imperfect,singular,2nd,,regular,\\r\\nības,4th,active,indicative,imperfect,singular,2nd,,irregular,\\r\\niēbat,4th,active,indicative,imperfect,singular,3rd,,regular,\\r\\nībat,4th,active,indicative,imperfect,singular,3rd,,irregular,\\r\\niēbāmus,4th,active,indicative,imperfect,plural,1st,,regular,\\r\\nībāmus,4th,active,indicative,imperfect,plural,1st,,irregular,\\r\\niēbātis,4th,active,indicative,imperfect,plural,2nd,,regular,\\r\\nībātis,4th,active,indicative,imperfect,plural,2nd,,irregular,\\r\\niēbant,4th,active,indicative,imperfect,plural,3rd,,regular,\\r\\nībant,4th,active,indicative,imperfect,plural,3rd,,irregular,\\r\\nīrem,4th,active,subjunctive,imperfect,singular,1st,,regular,\\r\\nīrēs,4th,active,subjunctive,imperfect,singular,2nd,,regular,\\r\\nīret,4th,active,subjunctive,imperfect,singular,3rd,,regular,\\r\\nīrēmus,4th,active,subjunctive,imperfect,plural,1st,,regular,\\r\\nīrētis,4th,active,subjunctive,imperfect,plural,2nd,,regular,\\r\\nīrēnt,4th,active,subjunctive,imperfect,plural,3rd,,regular,\\r\\nābo,1st,active,indicative,future,singular,1st,,regular,\\r\\nābis,1st,active,indicative,future,singular,2nd,,regular,\\r\\nābit,1st,active,indicative,future,singular,3rd,,regular,\\r\\nābimus,1st,active,indicative,future,plural,1st,,regular,\\r\\nābitis,1st,active,indicative,future,plural,2nd,,regular,\\r\\nābunt,1st,active,indicative,future,plural,3rd,,regular,\\r\\n,1st,active,subjunctive,future,singular,1st,,,\\r\\n,1st,active,subjunctive,future,singular,2nd,,,\\r\\n,1st,active,subjunctive,future,singular,3rd,,,\\r\\n,1st,active,subjunctive,future,plural,1st,,,\\r\\n,1st,active,subjunctive,future,plural,2nd,,,\\r\\n,1st,active,subjunctive,future,plural,3rd,,,\\r\\nēbō,2nd,active,indicative,future,singular,1st,,regular,\\r\\nēbis,2nd,active,indicative,future,singular,2nd,,regular,\\r\\nēbit,2nd,active,indicative,future,singular,3rd,,regular,\\r\\nēbimus,2nd,active,indicative,future,plural,1st,,regular,\\r\\nēbitis,2nd,active,indicative,future,plural,2nd,,regular,\\r\\nēbunt,2nd,active,indicative,future,plural,3rd,,regular,\\r\\n,2nd,active,subjunctive,future,singular,1st,,regular,\\r\\n,2nd,active,subjunctive,future,singular,2nd,,,\\r\\n,2nd,active,subjunctive,future,singular,3rd,,,\\r\\n,2nd,active,subjunctive,future,plural,1st,,,\\r\\n,2nd,active,subjunctive,future,plural,2nd,,,\\r\\n,2nd,active,subjunctive,future,plural,3rd,,,\\r\\nam,3rd,active,indicative,future,singular,1st,,regular,\\r\\nēs,3rd,active,indicative,future,singular,2nd,,regular,\\r\\net,3rd,active,indicative,future,singular,3rd,,regular,\\r\\nēmus,3rd,active,indicative,future,plural,1st,,regular,\\r\\nētis,3rd,active,indicative,future,plural,2nd,,regular,\\r\\nent,3rd,active,indicative,future,plural,3rd,,regular,\\r\\n,3rd,active,subjunctive,future,singular,1st,,,\\r\\n,3rd,active,subjunctive,future,singular,2nd,,,\\r\\n,3rd,active,subjunctive,future,singular,3rd,,,\\r\\n,3rd,active,subjunctive,future,plural,1st,,,\\r\\n,3rd,active,subjunctive,future,plural,2nd,,,\\r\\n,3rd,active,subjunctive,future,plural,3rd,,,\\r\\niam,4th,active,indicative,future,singular,1st,,regular,\\r\\nībō,4th,active,indicative,future,singular,1st,,irregular,2\\r\\niēs,4th,active,indicative,future,singular,2nd,,regular,\\r\\nībis,4th,active,indicative,future,singular,2nd,,irregular,\\r\\niet,4th,active,indicative,future,singular,3rd,,regular,\\r\\nībit,4th,active,indicative,future,singular,3rd,,irregular,\\r\\niēmus,4th,active,indicative,future,plural,1st,,regular,\\r\\nībimus,4th,active,indicative,future,plural,1st,,irregular,\\r\\niētis,4th,active,indicative,future,plural,2nd,,regular,\\r\\nībitis,4th,active,indicative,future,plural,2nd,,irregular,\\r\\nient,4th,active,indicative,future,plural,3rd,,regular,\\r\\nībunt,4th,active,indicative,future,plural,3rd,,irregular,\\r\\n,4th,active,subjunctive,future,singular,1st,,,\\r\\n,4th,active,subjunctive,future,singular,2nd,,,\\r\\n,4th,active,subjunctive,future,singular,3rd,,,\\r\\n,4th,active,subjunctive,future,plural,1st,,,\\r\\n,4th,active,subjunctive,future,plural,2nd,,,\\r\\n,4th,active,subjunctive,future,plural,3rd,,,\\r\\nī,1st,active,indicative,perfect,singular,1st,,regular,\\r\\nistī,1st,active,indicative,perfect,singular,2nd,,regular,\\r\\nit,1st,active,indicative,perfect,singular,3rd,,regular,\\r\\nimus,1st,active,indicative,perfect,plural,1st,,regular,\\r\\nistis,1st,active,indicative,perfect,plural,2nd,,regular,\\r\\nērunt,1st,active,indicative,perfect,plural,3rd,,regular,\\r\\nēre,1st,active,indicative,perfect,plural,3rd,,irregular,6\\r\\nerim,1st,active,subjunctive,perfect,singular,1st,,regular,\\r\\neris,1st,active,subjunctive,perfect,singular,2nd,,regular,\\r\\nerit,1st,active,subjunctive,perfect,singular,3rd,,regular,\\r\\nerimus,1st,active,subjunctive,perfect,plural,1st,,regular,\\r\\neritis,1st,active,subjunctive,perfect,plural,2nd,,regular,\\r\\nerint,1st,active,subjunctive,perfect,plural,3rd,,regular,\\r\\nī,2nd,active,indicative,perfect,singular,1st,,regular,\\r\\nistī,2nd,active,indicative,perfect,singular,2nd,,regular,\\r\\nit,2nd,active,indicative,perfect,singular,3rd,,regular,\\r\\nimus,2nd,active,indicative,perfect,plural,1st,,regular,\\r\\nistis,2nd,active,indicative,perfect,plural,2nd,,regular,\\r\\nērunt,2nd,active,indicative,perfect,plural,3rd,,regular,\\r\\nēre,2nd,active,indicative,perfect,plural,3rd,,irregular,6\\r\\nerim,2nd,active,subjunctive,perfect,singular,1st,,regular,\\r\\neris,2nd,active,subjunctive,perfect,singular,2nd,,regular,\\r\\nerit,2nd,active,subjunctive,perfect,singular,3rd,,regular,\\r\\nerimus,2nd,active,subjunctive,perfect,plural,1st,,regular,\\r\\neritis,2nd,active,subjunctive,perfect,plural,2nd,,regular,\\r\\nerint,2nd,active,subjunctive,perfect,plural,3rd,,regular,\\r\\nī,3rd,active,indicative,perfect,singular,1st,,regular,\\r\\nistī,3rd,active,indicative,perfect,singular,2nd,,regular,\\r\\nit,3rd,active,indicative,perfect,singular,3rd,,regular,\\r\\nimus,3rd,active,indicative,perfect,plural,1st,,regular,\\r\\nistis,3rd,active,indicative,perfect,plural,2nd,,regular,\\r\\nērunt,3rd,active,indicative,perfect,plural,3rd,,regular,\\r\\nēre,3rd,active,indicative,perfect,plural,3rd,,irregular,6\\r\\nerim,3rd,active,subjunctive,perfect,singular,1st,,regular,\\r\\neris,3rd,active,subjunctive,perfect,singular,2nd,,regular,\\r\\nerit,3rd,active,subjunctive,perfect,singular,3rd,,regular,\\r\\nerimus,3rd,active,subjunctive,perfect,plural,1st,,regular,\\r\\neritis,3rd,active,subjunctive,perfect,plural,2nd,,regular,\\r\\nerint,3rd,active,subjunctive,perfect,plural,3rd,,regular,\\r\\ni,4th,active,indicative,perfect,singular,1st,,regular,\\r\\nistī,4th,active,indicative,perfect,singular,2nd,,regular,\\r\\nit,4th,active,indicative,perfect,singular,3rd,,regular,\\r\\nimus,4th,active,indicative,perfect,plural,1st,,regular,\\r\\nistis,4th,active,indicative,perfect,plural,2nd,,regular,\\r\\nērunt,4th,active,indicative,perfect,plural,3rd,,regular,\\r\\nēre,4th,active,indicative,perfect,plural,3rd,,irregular,6\\r\\nerim,4th,active,subjunctive,perfect,singular,1st,,regular,\\r\\neris,4th,active,subjunctive,perfect,singular,2nd,,regular,\\r\\nerit,4th,active,subjunctive,perfect,singular,3rd,,regular,\\r\\nerimus,4th,active,subjunctive,perfect,plural,1st,,regular,\\r\\neritis,4th,active,subjunctive,perfect,plural,2nd,,regular,\\r\\nerint,4th,active,subjunctive,perfect,plural,3rd,,regular,\\r\\neram,1st,active,indicative,pluperfect,singular,1st,,regular,\\r\\nerās,1st,active,indicative,pluperfect,singular,2nd,,regular,\\r\\nerat,1st,active,indicative,pluperfect,singular,3rd,,regular,\\r\\nerāmus,1st,active,indicative,pluperfect,plural,1st,,regular,\\r\\nerātis,1st,active,indicative,pluperfect,plural,2nd,,regular,\\r\\nerant,1st,active,indicative,pluperfect,plural,3rd,,regular,\\r\\nissem,1st,active,subjunctive,pluperfect,singular,1st,,regular,\\r\\nissēs,1st,active,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nisset,1st,active,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nissemus,1st,active,subjunctive,pluperfect,plural,1st,,regular,\\r\\nissēs,1st,active,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nisset,1st,active,subjunctive,pluperfect,plural,3rd,,regular,\\r\\neram,2nd,active,indicative,pluperfect,singular,1st,,regular,\\r\\nerās,2nd,active,indicative,pluperfect,singular,2nd,,regular,\\r\\nerat,2nd,active,indicative,pluperfect,singular,3rd,,regular,\\r\\nerāmus,2nd,active,indicative,pluperfect,plural,1st,,regular,\\r\\nerātis,2nd,active,indicative,pluperfect,plural,2nd,,regular,\\r\\nerant,2nd,active,indicative,pluperfect,plural,3rd,,regular,\\r\\nissem,2nd,active,subjunctive,pluperfect,singular,1st,,regular,\\r\\nissēs,2nd,active,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nisset,2nd,active,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nissēmus,2nd,active,subjunctive,pluperfect,plural,1st,,regular,\\r\\nissētis,2nd,active,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nissent,2nd,active,subjunctive,pluperfect,plural,3rd,,regular,\\r\\neram,3rd,active,indicative,pluperfect,singular,1st,,regular,\\r\\nerās,3rd,active,indicative,pluperfect,singular,2nd,,regular,\\r\\nerat,3rd,active,indicative,pluperfect,singular,3rd,,regular,\\r\\nerāmus,3rd,active,indicative,pluperfect,plural,1st,,regular,\\r\\nerātis,3rd,active,indicative,pluperfect,plural,2nd,,regular,\\r\\nerant,3rd,active,indicative,pluperfect,plural,3rd,,regular,\\r\\nissem,3rd,active,subjunctive,pluperfect,singular,1st,,regular,\\r\\nissēs,3rd,active,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nisset,3rd,active,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nissēmus,3rd,active,subjunctive,pluperfect,plural,1st,,regular,\\r\\nissētis,3rd,active,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nissent,3rd,active,subjunctive,pluperfect,plural,3rd,,regular,\\r\\neram,4th,active,indicative,pluperfect,singular,1st,,regular,\\r\\nerās,4th,active,indicative,pluperfect,singular,2nd,,regular,\\r\\nerat,4th,active,indicative,pluperfect,singular,3rd,,regular,\\r\\nerāmus,4th,active,indicative,pluperfect,plural,1st,,regular,\\r\\nerātis,4th,active,indicative,pluperfect,plural,2nd,,regular,\\r\\nerant,4th,active,indicative,pluperfect,plural,3rd,,regular,\\r\\nissem,4th,active,subjunctive,pluperfect,singular,1st,,regular,\\r\\nissēs,4th,active,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nisset,4th,active,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nissēmus,4th,active,subjunctive,pluperfect,plural,1st,,regular,\\r\\nissētis,4th,active,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nissent,4th,active,subjunctive,pluperfect,plural,3rd,,regular,\\r\\nerō,1st,active,indicative,future_perfect,singular,1st,,regular,\\r\\neris,1st,active,indicative,future_perfect,singular,2nd,,regular,\\r\\nerit,1st,active,indicative,future_perfect,singular,3rd,,regular,\\r\\nerimus,1st,active,indicative,future_perfect,plural,1st,,regular,\\r\\neritis,1st,active,indicative,future_perfect,plural,2nd,,regular,\\r\\nerint,1st,active,indicative,future_perfect,plural,3rd,,regular,\\r\\n,1st,active,subjunctive,future_perfect,singular,1st,,,\\r\\n,1st,active,subjunctive,future_perfect,singular,2nd,,,\\r\\n,1st,active,subjunctive,future_perfect,singular,3rd,,,\\r\\n,1st,active,subjunctive,future_perfect,plural,1st,,,\\r\\n,1st,active,subjunctive,future_perfect,plural,2nd,,,\\r\\n,1st,active,subjunctive,future_perfect,plural,3rd,,,\\r\\nerō,2nd,active,indicative,future_perfect,singular,1st,,regular,\\r\\neris,2nd,active,indicative,future_perfect,singular,2nd,,regular,\\r\\nerit,2nd,active,indicative,future_perfect,singular,3rd,,regular,\\r\\nerimus,2nd,active,indicative,future_perfect,plural,1st,,regular,\\r\\neritis,2nd,active,indicative,future_perfect,plural,2nd,,regular,\\r\\nerint,2nd,active,indicative,future_perfect,plural,3rd,,regular,\\r\\n,2nd,active,subjunctive,future_perfect,singular,1st,,,\\r\\n,2nd,active,subjunctive,future_perfect,singular,2nd,,,\\r\\n,2nd,active,subjunctive,future_perfect,singular,3rd,,,\\r\\n,2nd,active,subjunctive,future_perfect,plural,1st,,,\\r\\n,2nd,active,subjunctive,future_perfect,plural,2nd,,,\\r\\n,2nd,active,subjunctive,future_perfect,plural,3rd,,,\\r\\nerō,3rd,active,indicative,future_perfect,singular,1st,,regular,\\r\\neris,3rd,active,indicative,future_perfect,singular,2nd,,regular,\\r\\nerit,3rd,active,indicative,future_perfect,singular,3rd,,regular,\\r\\nerimus,3rd,active,indicative,future_perfect,plural,1st,,regular,\\r\\neritis,3rd,active,indicative,future_perfect,plural,2nd,,regular,\\r\\nerint,3rd,active,indicative,future_perfect,plural,3rd,,regular,\\r\\n,3rd,active,subjunctive,future_perfect,singular,1st,,,\\r\\n,3rd,active,subjunctive,future_perfect,singular,2nd,,,\\r\\n,3rd,active,subjunctive,future_perfect,singular,3rd,,,\\r\\n,3rd,active,subjunctive,future_perfect,plural,1st,,,\\r\\n,3rd,active,subjunctive,future_perfect,plural,2nd,,,\\r\\n,3rd,active,subjunctive,future_perfect,plural,3rd,,,\\r\\nerō,4th,active,indicative,future_perfect,singular,1st,,regular,\\r\\neris,4th,active,indicative,future_perfect,singular,2nd,,regular,\\r\\nerit,4th,active,indicative,future_perfect,singular,3rd,,regular,\\r\\nerimus,4th,active,indicative,future_perfect,plural,1st,,regular,\\r\\neritis,4th,active,indicative,future_perfect,plural,2nd,,regular,\\r\\nerint,4th,active,indicative,future_perfect,plural,3rd,,regular,\\r\\n,4th,active,subjunctive,future_perfect,singular,1st,,,\\r\\n,4th,active,subjunctive,future_perfect,singular,2nd,,,\\r\\n,4th,active,subjunctive,future_perfect,singular,3rd,,,\\r\\n,4th,active,subjunctive,future_perfect,plural,1st,,,\\r\\n,4th,active,subjunctive,future_perfect,plural,2nd,,,\\r\\n,4th,active,subjunctive,future_perfect,plural,3rd,,,\\r\\nor,1st,passive,indicative,present,singular,1st,,regular,\\r\\nāris,1st,passive,indicative,present,singular,2nd,,regular,\\r\\nāre,1st,passive,indicative,present,singular,2nd,,irregular,5\\r\\nātur,1st,passive,indicative,present,singular,3rd,,regular,\\r\\nāmur,1st,passive,indicative,present,plural,1st,,regular,\\r\\nāminī,1st,passive,indicative,present,plural,2nd,,regular,\\r\\nantur,1st,passive,indicative,present,plural,3rd,,regular,\\r\\ner,1st,passive,subjunctive,present,singular,1st,,regular,\\r\\nēris,1st,passive,subjunctive,present,singular,2nd,,regular,\\r\\nēre,1st,passive,subjunctive,present,singular,2nd,,regular,\\r\\nētur,1st,passive,subjunctive,present,singular,3rd,,regular,\\r\\nēmur,1st,passive,subjunctive,present,plural,1st,,regular,\\r\\nēminī,1st,passive,subjunctive,present,plural,2nd,,regular,\\r\\nentur,1st,passive,subjunctive,present,plural,3rd,,regular,\\r\\neor,2nd,passive,indicative,present,singular,1st,,regular,\\r\\nēris,2nd,passive,indicative,present,singular,2nd,,regular,\\r\\nēre,2nd,passive,indicative,present,singular,2nd,,regular,\\r\\nētur,2nd,passive,indicative,present,singular,3rd,,regular,\\r\\nēmur,2nd,passive,indicative,present,plural,1st,,regular,\\r\\nēminī,2nd,passive,indicative,present,plural,2nd,,regular,\\r\\nentur,2nd,passive,indicative,present,plural,3rd,,regular,\\r\\near,2nd,passive,subjunctive,present,singular,1st,,regular,\\r\\neāris,2nd,passive,subjunctive,present,singular,2nd,,regular,\\r\\neāre,2nd,passive,subjunctive,present,singular,2nd,,regular,\\r\\neātur,2nd,passive,subjunctive,present,singular,3rd,,regular,\\r\\neāmur,2nd,passive,subjunctive,present,plural,1st,,regular,\\r\\neāminī,2nd,passive,subjunctive,present,plural,2nd,,regular,\\r\\neantur,2nd,passive,subjunctive,present,plural,3rd,,regular,\\r\\nor,3rd,passive,indicative,present,singular,1st,,regular,\\r\\neris,3rd,passive,indicative,present,singular,2nd,,regular,\\r\\nere,3rd,passive,indicative,present,singular,2nd,,regular,\\r\\nitur,3rd,passive,indicative,present,singular,3rd,,regular,\\r\\nimur,3rd,passive,indicative,present,plural,1st,,regular,\\r\\niminī,3rd,passive,indicative,present,plural,2nd,,regular,\\r\\nuntur,3rd,passive,indicative,present,plural,3rd,,regular,\\r\\nar,3rd,passive,subjunctive,present,singular,1st,,regular,\\r\\nāris,3rd,passive,subjunctive,present,singular,2nd,,regular,\\r\\nāre,3rd,passive,subjunctive,present,singular,2nd,,regular,\\r\\nātur,3rd,passive,subjunctive,present,singular,3rd,,regular,\\r\\nāmur,3rd,passive,subjunctive,present,plural,1st,,regular,\\r\\nāminī,3rd,passive,subjunctive,present,plural,2nd,,regular,\\r\\nantur,3rd,passive,subjunctive,present,plural,3rd,,regular,\\r\\nior,4th,passive,indicative,present,singular,1st,,regular,\\r\\nīris,4th,passive,indicative,present,singular,2nd,,regular,\\r\\nīre,4th,passive,indicative,present,singular,2nd,,regular,\\r\\nītur,4th,passive,indicative,present,singular,3rd,,regular,\\r\\nīmur,4th,passive,indicative,present,plural,1st,,regular,\\r\\nīminī,4th,passive,indicative,present,plural,2nd,,regular,\\r\\niuntur,4th,passive,indicative,present,plural,3rd,,regular,\\r\\niar,4th,passive,subjunctive,present,singular,1st,,regular,\\r\\niāris,4th,passive,subjunctive,present,singular,2nd,,regular,\\r\\niāre,4th,passive,subjunctive,present,singular,2nd,,regular,\\r\\niātur,4th,passive,subjunctive,present,singular,3rd,,regular,\\r\\niāmur,4th,passive,subjunctive,present,plural,1st,,regular,\\r\\niāminī,4th,passive,subjunctive,present,plural,2nd,,regular,\\r\\niantur,4th,passive,subjunctive,present,plural,3rd,,regular,\\r\\nābar,1st,passive,indicative,imperfect,singular,1st,,regular,\\r\\nābāris,1st,passive,indicative,imperfect,singular,2nd,,regular,\\r\\nābāre,1st,passive,indicative,imperfect,singular,2nd,,regular,\\r\\nābātur,1st,passive,indicative,imperfect,singular,3rd,,regular,\\r\\nābāmur,1st,passive,indicative,imperfect,plural,1st,,regular,\\r\\nābāminī,1st,passive,indicative,imperfect,plural,2nd,,regular,\\r\\nābantur,1st,passive,indicative,imperfect,plural,3rd,,regular,\\r\\nārer,1st,passive,subjunctive,imperfect,singular,1st,,regular,\\r\\nārēris,1st,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nārēre,1st,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nārētur,1st,passive,subjunctive,imperfect,singular,3rd,,regular,\\r\\nārēmur,1st,passive,subjunctive,imperfect,plural,1st,,regular,\\r\\nārēminī,1st,passive,subjunctive,imperfect,plural,2nd,,regular,\\r\\nārentur,1st,passive,subjunctive,imperfect,plural,3rd,,regular,\\r\\nēbar,2nd,passive,indicative,imperfect,singular,1st,,regular,\\r\\nēbāris,2nd,passive,indicative,imperfect,singular,2nd,,regular,\\r\\nēbāre,2nd,passive,indicative,imperfect,singular,2nd,,regular,\\r\\nēbātur,2nd,passive,indicative,imperfect,singular,3rd,,regular,\\r\\nēbāmur,2nd,passive,indicative,imperfect,plural,1st,,regular,\\r\\nēbāminī,2nd,passive,indicative,imperfect,plural,2nd,,regular,\\r\\nēbantur,2nd,passive,indicative,imperfect,plural,3rd,,regular,\\r\\nērer,2nd,passive,subjunctive,imperfect,singular,1st,,regular,\\r\\nērēris,2nd,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nērēre,2nd,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nērētur,2nd,passive,subjunctive,imperfect,singular,3rd,,regular,\\r\\nērēmur,2nd,passive,subjunctive,imperfect,plural,1st,,regular,\\r\\nērēminī,2nd,passive,subjunctive,imperfect,plural,2nd,,regular,\\r\\nērentur,2nd,passive,subjunctive,imperfect,plural,3rd,,regular,\\r\\nēbar,3rd,passive,indicative,imperfect,singular,1st,,regular,\\r\\nēbāris,3rd,passive,indicative,imperfect,singular,2nd,,regular,\\r\\nēbāre,3rd,passive,indicative,imperfect,singular,2nd,,regular,\\r\\nēbātur,3rd,passive,indicative,imperfect,singular,3rd,,regular,\\r\\nēbāmur,3rd,passive,indicative,imperfect,plural,1st,,regular,\\r\\nēbāminī,3rd,passive,indicative,imperfect,plural,2nd,,regular,\\r\\nēbantur,3rd,passive,indicative,imperfect,plural,3rd,,regular,\\r\\nerer,3rd,passive,subjunctive,imperfect,singular,1st,,regular,\\r\\nerēris,3rd,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nerēre,3rd,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nerētur,3rd,passive,subjunctive,imperfect,singular,3rd,,regular,\\r\\nerēmur,3rd,passive,subjunctive,imperfect,plural,1st,,regular,\\r\\nerēminī,3rd,passive,subjunctive,imperfect,plural,2nd,,regular,\\r\\nerentur,3rd,passive,subjunctive,imperfect,plural,3rd,,regular,\\r\\niēbar,4th,passive,indicative,imperfect,singular,1st,,regular,\\r\\niēbāris,4th,passive,indicative,imperfect,singular,2nd,,regular,\\r\\niēbāre,4th,passive,indicative,imperfect,singular,2nd,,regular,\\r\\niēbātur,4th,passive,indicative,imperfect,singular,3rd,,regular,\\r\\niēbāmur,4th,passive,indicative,imperfect,plural,1st,,regular,\\r\\niēbāminī,4th,passive,indicative,imperfect,plural,2nd,,regular,\\r\\niēbantur,4th,passive,indicative,imperfect,plural,3rd,,regular,\\r\\nīrer,4th,passive,subjunctive,imperfect,singular,1st,,regular,\\r\\nīrēris,4th,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nīrēre,4th,passive,subjunctive,imperfect,singular,2nd,,regular,\\r\\nīrētur,4th,passive,subjunctive,imperfect,singular,3rd,,regular,\\r\\nīrēmur,4th,passive,subjunctive,imperfect,plural,1st,,regular,\\r\\nīrēminī,4th,passive,subjunctive,imperfect,plural,2nd,,regular,\\r\\nīrentur,4th,passive,subjunctive,imperfect,plural,3rd,,regular,\\r\\nābor,1st,passive,indicative,future,singular,1st,,regular,\\r\\nāberis,1st,passive,indicative,future,singular,2nd,,regular,\\r\\nābere,1st,passive,indicative,future,singular,2nd,,irregular,\\r\\nābitur,1st,passive,indicative,future,singular,3rd,,regular,\\r\\nābimur,1st,passive,indicative,future,plural,1st,,regular,\\r\\nābiminī,1st,passive,indicative,future,plural,2nd,,regular,\\r\\nābuntur,1st,passive,indicative,future,plural,3rd,,regular,\\r\\n,1st,passive,subjunctive,future,singular,1st,,,\\r\\n,1st,passive,subjunctive,future,singular,2nd,,,\\r\\n,1st,passive,subjunctive,future,singular,3rd,,,\\r\\n,1st,passive,subjunctive,future,plural,1st,,,\\r\\n,1st,passive,subjunctive,future,plural,2nd,,,\\r\\n,1st,passive,subjunctive,future,plural,3rd,,,\\r\\nēbor,2nd,passive,indicative,future,singular,1st,,regular,\\r\\nēberis,2nd,passive,indicative,future,singular,2nd,,regular,\\r\\nēbere,2nd,passive,indicative,future,singular,2nd,,regular,\\r\\nēbitur,2nd,passive,indicative,future,singular,3rd,,regular,\\r\\nēbimur,2nd,passive,indicative,future,plural,1st,,regular,\\r\\nēbiminī,2nd,passive,indicative,future,plural,2nd,,regular,\\r\\nēbuntur,2nd,passive,indicative,future,plural,3rd,,regular,\\r\\n,2nd,passive,subjunctive,future,singular,1st,,,\\r\\n,2nd,passive,subjunctive,future,singular,2nd,,,\\r\\n,2nd,passive,subjunctive,future,singular,3rd,,,\\r\\n,2nd,passive,subjunctive,future,plural,1st,,,\\r\\n,2nd,passive,subjunctive,future,plural,2nd,,,\\r\\n,2nd,passive,subjunctive,future,plural,3rd,,,\\r\\nar,3rd,passive,indicative,future,singular,1st,,regular,\\r\\nēris,3rd,passive,indicative,future,singular,2nd,,regular,\\r\\nēre,3rd,passive,indicative,future,singular,2nd,,irregular,\\r\\nētur,3rd,passive,indicative,future,singular,3rd,,regular,\\r\\nēmur,3rd,passive,indicative,future,plural,1st,,regular,\\r\\nēminī,3rd,passive,indicative,future,plural,2nd,,regular,\\r\\nentur,3rd,passive,indicative,future,plural,3rd,,regular,\\r\\n,3rd,passive,subjunctive,future,singular,1st,,,\\r\\n,3rd,passive,subjunctive,future,singular,2nd,,,\\r\\n,3rd,passive,subjunctive,future,singular,3rd,,,\\r\\n,3rd,passive,subjunctive,future,plural,1st,,,\\r\\n,3rd,passive,subjunctive,future,plural,2nd,,,\\r\\n,3rd,passive,subjunctive,future,plural,3rd,,,\\r\\niar,4th,passive,indicative,future,singular,1st,,regular,\\r\\niēris,4th,passive,indicative,future,singular,2nd,,regular,\\r\\nīēre,4th,passive,indicative,future,singular,2nd,,irregular,\\r\\niētur,4th,passive,indicative,future,singular,3rd,,regular,\\r\\niēmur,4th,passive,indicative,future,plural,1st,,regular,\\r\\niēminī,4th,passive,indicative,future,plural,2nd,,regular,\\r\\nientur,4th,passive,indicative,future,plural,3rd,,regular,\\r\\n,4th,passive,subjunctive,future,singular,1st,,,\\r\\n,4th,passive,subjunctive,future,singular,2nd,,,\\r\\n,4th,passive,subjunctive,future,singular,3rd,,,\\r\\n,4th,passive,subjunctive,future,plural,1st,,,\\r\\n,4th,passive,subjunctive,future,plural,2nd,,,\\r\\n,4th,passive,subjunctive,future,plural,3rd,,,\\r\\nus sum,1st,passive,indicative,perfect,singular,1st,,regular,\\r\\nus fui,1st,passive,indicative,perfect,singular,1st,,regular,\\r\\nus es,1st,passive,indicative,perfect,singular,2nd,,regular,\\r\\nus fuisti,1st,passive,indicative,perfect,singular,2nd,,regular,\\r\\nus est,1st,passive,indicative,perfect,singular,3rd,,regular,\\r\\nus fuit,1st,passive,indicative,perfect,singular,3rd,,regular,\\r\\nī sumus,1st,passive,indicative,perfect,plural,1st,,regular,\\r\\nī fuimus,1st,passive,indicative,perfect,plural,1st,,irregular,\\r\\nī estis,1st,passive,indicative,perfect,plural,2nd,,regular,\\r\\nī fuistis,1st,passive,indicative,perfect,plural,2nd,,irregular,\\r\\nī sunt,1st,passive,indicative,perfect,plural,3rd,,regular,\\r\\nī fuerunt,1st,passive,indicative,perfect,plural,3rd,,irregular,\\r\\nus sim,1st,passive,subjunctive,perfect,singular,1st,,regular,\\r\\nus fuerim,1st,passive,subjunctive,perfect,singular,1st,,irregular,\\r\\nus sīs,1st,passive,subjunctive,perfect,singular,2nd,,regular,\\r\\nus fueris,1st,passive,subjunctive,perfect,singular,2nd,,irregular,\\r\\nus sit,1st,passive,subjunctive,perfect,singular,3rd,,regular,\\r\\nus fuerit,1st,passive,subjunctive,perfect,singular,3rd,,regular,\\r\\nī sīmus,1st,passive,subjunctive,perfect,plural,1st,,regular,\\r\\nī fuerimus,1st,passive,subjunctive,perfect,plural,1st,,irregular,\\r\\nī sītis,1st,passive,subjunctive,perfect,plural,2nd,,regular,\\r\\nī fueritis,1st,passive,subjunctive,perfect,plural,2nd,,irregular,\\r\\nī sint,1st,passive,subjunctive,perfect,plural,3rd,,regular,\\r\\nī fuerint,1st,passive,subjunctive,perfect,plural,3rd,,irregular,\\r\\nus sum,2nd,passive,indicative,perfect,singular,1st,,regular,\\r\\nus es,2nd,passive,indicative,perfect,singular,2nd,,regular,\\r\\nus est,2nd,passive,indicative,perfect,singular,3rd,,regular,\\r\\nī sumus,2nd,passive,indicative,perfect,plural,1st,,regular,\\r\\nī estis,2nd,passive,indicative,perfect,plural,2nd,,regular,\\r\\nī sunt,2nd,passive,indicative,perfect,plural,3rd,,regular,\\r\\nus sim,2nd,passive,subjunctive,perfect,singular,1st,,regular,\\r\\nus sīs,2nd,passive,subjunctive,perfect,singular,2nd,,regular,\\r\\nus sit,2nd,passive,subjunctive,perfect,singular,3rd,,regular,\\r\\nī sīmus,2nd,passive,subjunctive,perfect,plural,1st,,regular,\\r\\nī sītis,2nd,passive,subjunctive,perfect,plural,2nd,,regular,\\r\\nī sint,2nd,passive,subjunctive,perfect,plural,3rd,,regular,\\r\\nus sum,3rd,passive,indicative,perfect,singular,1st,,regular,\\r\\nus es,3rd,passive,indicative,perfect,singular,2nd,,regular,\\r\\nus est,3rd,passive,indicative,perfect,singular,3rd,,regular,\\r\\nī sumus,3rd,passive,indicative,perfect,plural,1st,,regular,\\r\\nī estis,3rd,passive,indicative,perfect,plural,2nd,,regular,\\r\\nī sunt,3rd,passive,indicative,perfect,plural,3rd,,regular,\\r\\nus sim,3rd,passive,subjunctive,perfect,singular,1st,,regular,\\r\\nus sīs,3rd,passive,subjunctive,perfect,singular,2nd,,regular,\\r\\nus sit,3rd,passive,subjunctive,perfect,singular,3rd,,regular,\\r\\nī sīmus,3rd,passive,subjunctive,perfect,plural,1st,,regular,\\r\\nī sītis,3rd,passive,subjunctive,perfect,plural,2nd,,regular,\\r\\nī sint,3rd,passive,subjunctive,perfect,plural,3rd,,regular,\\r\\nus sum,4th,passive,indicative,perfect,singular,1st,,regular,\\r\\nus es,4th,passive,indicative,perfect,singular,2nd,,regular,\\r\\nus est,4th,passive,indicative,perfect,singular,3rd,,regular,\\r\\nī sumus,4th,passive,indicative,perfect,plural,1st,,regular,\\r\\nī estis,4th,passive,indicative,perfect,plural,2nd,,regular,\\r\\nī sunt,4th,passive,indicative,perfect,plural,3rd,,regular,\\r\\nus sim,4th,passive,subjunctive,perfect,singular,1st,,regular,\\r\\nus sīs,4th,passive,subjunctive,perfect,singular,2nd,,regular,\\r\\nus sit,4th,passive,subjunctive,perfect,singular,3rd,,regular,\\r\\nī sīmus,4th,passive,subjunctive,perfect,plural,1st,,regular,\\r\\nī sītis,4th,passive,subjunctive,perfect,plural,2nd,,regular,\\r\\nī sint,4th,passive,subjunctive,perfect,plural,3rd,,regular,\\r\\nus eram,1st,passive,indicative,pluperfect,singular,1st,,regular,\\r\\nus fueram,1st,passive,indicative,pluperfect,singular,1st,,irregular,\\r\\nus erās,1st,passive,indicative,pluperfect,singular,2nd,,regular,\\r\\nus fueras,1st,passive,indicative,pluperfect,singular,2nd,,irregular,\\r\\nus erat,1st,passive,indicative,pluperfect,singular,3rd,,regular,\\r\\nus fuerat,1st,passive,indicative,pluperfect,singular,3rd,,irregular,\\r\\nī erāmus,1st,passive,indicative,pluperfect,plural,1st,,regular,\\r\\nī fueramus,1st,passive,indicative,pluperfect,plural,1st,,irregular,\\r\\nī erātis,1st,passive,indicative,pluperfect,plural,2nd,,regular,\\r\\nī fueratis,1st,passive,indicative,pluperfect,plural,2nd,,irregular,\\r\\nī erant,1st,passive,indicative,pluperfect,plural,3rd,,regular,\\r\\nī fuerant,1st,passive,indicative,pluperfect,plural,3rd,,irregular,\\r\\nus essem,1st,passive,subjunctive,pluperfect,singular,1st,,regular,\\r\\nus fuissem,1st,passive,subjunctive,pluperfect,singular,1st,,irregular,\\r\\nus essēs,1st,passive,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nus fuissēs,1st,passive,subjunctive,pluperfect,singular,2nd,,irregular,\\r\\nus esset,1st,passive,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nus fuisset,1st,passive,subjunctive,pluperfect,singular,3rd,,irregular,\\r\\nī essēmus,1st,passive,subjunctive,pluperfect,plural,1st,,regular,\\r\\nī fuissēmus,1st,passive,subjunctive,pluperfect,plural,1st,,irregular,\\r\\nī essētis,1st,passive,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nī fuissētis,1st,passive,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nī essent,1st,passive,subjunctive,pluperfect,plural,3rd,,regular,\\r\\nī fuissent,1st,passive,subjunctive,pluperfect,plural,3rd,,regular,\\r\\nus eram,2nd,passive,indicative,pluperfect,singular,1st,,regular,\\r\\nus erās,2nd,passive,indicative,pluperfect,singular,2nd,,regular,\\r\\nus erat,2nd,passive,indicative,pluperfect,singular,3rd,,regular,\\r\\nī erāmus,2nd,passive,indicative,pluperfect,plural,1st,,regular,\\r\\nī erātis,2nd,passive,indicative,pluperfect,plural,2nd,,regular,\\r\\nī erant,2nd,passive,indicative,pluperfect,plural,3rd,,regular,\\r\\nus essem,2nd,passive,subjunctive,pluperfect,singular,1st,,regular,\\r\\nus essēs,2nd,passive,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nus esset,2nd,passive,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nī essēmus,2nd,passive,subjunctive,pluperfect,plural,1st,,regular,\\r\\nī essētis,2nd,passive,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nī essent,2nd,passive,subjunctive,pluperfect,plural,3rd,,regular,\\r\\nus eram,3rd,passive,indicative,pluperfect,singular,1st,,regular,\\r\\nus erās,3rd,passive,indicative,pluperfect,singular,2nd,,regular,\\r\\nus erat,3rd,passive,indicative,pluperfect,singular,3rd,,regular,\\r\\nī erāmus,3rd,passive,indicative,pluperfect,plural,1st,,regular,\\r\\nī erātis,3rd,passive,indicative,pluperfect,plural,2nd,,regular,\\r\\nī erant,3rd,passive,indicative,pluperfect,plural,3rd,,regular,\\r\\nus essem,3rd,passive,subjunctive,pluperfect,singular,1st,,regular,\\r\\nus essēs,3rd,passive,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nus esset,3rd,passive,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nī essēmus,3rd,passive,subjunctive,pluperfect,plural,1st,,regular,\\r\\nī essētis,3rd,passive,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nī essent,3rd,passive,subjunctive,pluperfect,plural,3rd,,regular,\\r\\nus eram,4th,passive,indicative,pluperfect,singular,1st,,regular,\\r\\nus erās,4th,passive,indicative,pluperfect,singular,2nd,,regular,\\r\\nus erat,4th,passive,indicative,pluperfect,singular,3rd,,regular,\\r\\nī erāmus,4th,passive,indicative,pluperfect,plural,1st,,regular,\\r\\nī erātis,4th,passive,indicative,pluperfect,plural,2nd,,regular,\\r\\nī erant,4th,passive,indicative,pluperfect,plural,3rd,,regular,\\r\\nus essem,4th,passive,subjunctive,pluperfect,singular,1st,,regular,\\r\\nus essēs,4th,passive,subjunctive,pluperfect,singular,2nd,,regular,\\r\\nus esset,4th,passive,subjunctive,pluperfect,singular,3rd,,regular,\\r\\nī essēmus,4th,passive,subjunctive,pluperfect,plural,1st,,regular,\\r\\nī essētis,4th,passive,subjunctive,pluperfect,plural,2nd,,regular,\\r\\nī essent,4th,passive,subjunctive,pluperfect,plural,3rd,,regular,\\r\\nus erō,1st,passive,indicative,future_perfect,singular,1st,,regular,\\r\\nus eris,1st,passive,indicative,future_perfect,singular,2nd,,regular,\\r\\nus erit,1st,passive,indicative,future_perfect,singular,3rd,,regular,\\r\\nī erimus,1st,passive,indicative,future_perfect,plural,1st,,regular,\\r\\nī eritis,1st,passive,indicative,future_perfect,plural,2nd,,regular,\\r\\nī erunt,1st,passive,indicative,future_perfect,plural,3rd,,regular,\\r\\n,1st,passive,subjunctive,future_perfect,singular,1st,,,\\r\\n,1st,passive,subjunctive,future_perfect,singular,2nd,,,\\r\\n,1st,passive,subjunctive,future_perfect,singular,3rd,,,\\r\\n,1st,passive,subjunctive,future_perfect,plural,1st,,,\\r\\n,1st,passive,subjunctive,future_perfect,plural,2nd,,,\\r\\n,1st,passive,subjunctive,future_perfect,plural,3rd,,,\\r\\nus erō,2nd,passive,indicative,future_perfect,singular,1st,,regular,\\r\\nus eris,2nd,passive,indicative,future_perfect,singular,2nd,,regular,\\r\\nus erit,2nd,passive,indicative,future_perfect,singular,3rd,,regular,\\r\\nī erimus,2nd,passive,indicative,future_perfect,plural,1st,,regular,\\r\\nī eritis,2nd,passive,indicative,future_perfect,plural,2nd,,regular,\\r\\nī erunt,2nd,passive,indicative,future_perfect,plural,3rd,,regular,\\r\\n,2nd,passive,subjunctive,future_perfect,singular,1st,,,\\r\\n,2nd,passive,subjunctive,future_perfect,singular,2nd,,,\\r\\n,2nd,passive,subjunctive,future_perfect,singular,3rd,,,\\r\\n,2nd,passive,subjunctive,future_perfect,plural,1st,,,\\r\\n,2nd,passive,subjunctive,future_perfect,plural,2nd,,,\\r\\n,2nd,passive,subjunctive,future_perfect,plural,3rd,,,\\r\\nus erō,3rd,passive,indicative,future_perfect,singular,1st,,regular,\\r\\nus eris,3rd,passive,indicative,future_perfect,singular,2nd,,regular,\\r\\nus erit,3rd,passive,indicative,future_perfect,singular,3rd,,regular,\\r\\nī erimus,3rd,passive,indicative,future_perfect,plural,1st,,regular,\\r\\nī eritis,3rd,passive,indicative,future_perfect,plural,2nd,,regular,\\r\\nī erunt,3rd,passive,indicative,future_perfect,plural,3rd,,regular,\\r\\n,3rd,passive,subjunctive,future_perfect,singular,1st,,,\\r\\n,3rd,passive,subjunctive,future_perfect,singular,2nd,,,\\r\\n,3rd,passive,subjunctive,future_perfect,singular,3rd,,,\\r\\n,3rd,passive,subjunctive,future_perfect,plural,1st,,,\\r\\n,3rd,passive,subjunctive,future_perfect,plural,2nd,,,\\r\\n,3rd,passive,subjunctive,future_perfect,plural,3rd,,,\\r\\nus erō,4th,passive,indicative,future_perfect,singular,1st,,regular,\\r\\nus eris,4th,passive,indicative,future_perfect,singular,2nd,,regular,\\r\\nus erit,4th,passive,indicative,future_perfect,singular,3rd,,regular,\\r\\nī erimus,4th,passive,indicative,future_perfect,plural,1st,,regular,\\r\\nī eritis,4th,passive,indicative,future_perfect,plural,2nd,,regular,\\r\\nī erunt,4th,passive,indicative,future_perfect,plural,3rd,,regular,\\r\\n,4th,passive,subjunctive,future_perfect,singular,1st,,,\\r\\n,4th,passive,subjunctive,future_perfect,singular,2nd,,,\\r\\n,4th,passive,subjunctive,future_perfect,singular,3rd,,,\\r\\n,4th,passive,subjunctive,future_perfect,plural,1st,,,\\r\\n,4th,passive,subjunctive,future_perfect,plural,2nd,,,\\r\\n,4th,passive,subjunctive,future_perfect,plural,3rd,,,\\r\\nā,1st,active,imperative,present,singular,2nd,,regular,3\\r\\nāte,1st,active,imperative,present,plural,2nd,,regular,\\r\\nāre,1st,passive,imperative,present,singular,2nd,,regular,\\r\\nāminī,1st,passive,imperative,present,plural,2nd,,regular,\\r\\nē,2nd,active,imperative,present,singular,2nd,,regular,3\\r\\nēte,2nd,active,imperative,present,plural,2nd,,regular,\\r\\nēre,2nd,passive,imperative,present,singular,2nd,,regular,\\r\\nēminī,2nd,passive,imperative,present,plural,2nd,,regular,\\r\\ne,3rd,active,imperative,present,singular,2nd,,regular,3\\r\\nīte,3rd,active,imperative,present,plural,2nd,,regular,\\r\\nere,3rd,passive,imperative,present,singular,2nd,,regular,\\r\\niminī,3rd,passive,imperative,present,plural,2nd,,regular,\\r\\nī,4th,active,imperative,present,singular,2nd,,regular,3\\r\\nīte,4th,active,imperative,present,plural,2nd,,regular,\\r\\nīre,4th,passive,imperative,present,singular,2nd,,regular,\\r\\nīminī,4th,passive,imperative,present,plural,2nd,,regular,\\r\\nātō,1st,active,imperative,future,singular,2nd,,regular,\\r\\nātō,1st,active,imperative,future,singular,3rd,,regular,\\r\\nātote,1st,active,imperative,future,plural,2nd,,regular,\\r\\nantō,1st,active,imperative,future,plural,3rd,,regular,\\r\\nātōr,1st,passive,imperative,future,singular,2nd,,regular,\\r\\n,1st,passive,imperative,future,plural,2nd,,,\\r\\nātor,1st,passive,imperative,future,singular,3rd,,regular,\\r\\nantor,1st,passive,imperative,future,plural,3rd,,regular,\\r\\nētō,2nd,active,imperative,future,singular,2nd,,regular,\\r\\nētō,2nd,active,imperative,future,singular,3rd,,regular,\\r\\nētōte,2nd,active,imperative,future,plural,2nd,,regular,\\r\\nentō,2nd,active,imperative,future,plural,3rd,,regular,\\r\\nētor,2nd,passive,imperative,future,singular,2nd,,regular,\\r\\n,2nd,passive,imperative,future,plural,2nd,,,\\r\\nētor,2nd,passive,imperative,future,singular,3rd,,regular,\\r\\nentor,2nd,passive,imperative,future,plural,3rd,,regular,\\r\\nitō,3rd,active,imperative,future,singular,2nd,,regular,\\r\\nitō,3rd,active,imperative,future,singular,3rd,,regular,\\r\\nitōte,3rd,active,imperative,future,plural,2nd,,regular,\\r\\nuntō,3rd,active,imperative,future,plural,3rd,,regular,\\r\\nitor,3rd,passive,imperative,future,singular,2nd,,regular,\\r\\n,3rd,passive,imperative,future,plural,2nd,,,\\r\\nitor,3rd,passive,imperative,future,singular,3rd,,regular,\\r\\nuntor,3rd,passive,imperative,future,plural,3rd,,regular,\\r\\nītō,4th,active,imperative,future,singular,2nd,,regular,\\r\\nītō,4th,active,imperative,future,singular,3rd,,regular,\\r\\nītōte,4th,active,imperative,future,plural,2nd,,regular,\\r\\niuntō,4th,active,imperative,future,plural,3rd,,regular,\\r\\nītor,4th,passive,imperative,future,singular,2nd,,regular,\\r\\n,4th,passive,imperative,future,plural,2nd,,,\\r\\nītor,4th,passive,imperative,future,singular,3rd,,regular,\\r\\niuntor,4th,passive,imperative,future,plural,3rd,,regular,\\r\\nāre,1st,active,infinitive,present,,,,regular,\\r\\nēre,2nd,active,infinitive,present,,,,regular,\\r\\nere,3rd,active,infinitive,present,,,,regular,\\r\\nīre,4th,active,infinitive,present,,,,regular,\\r\\nisse,1st,active,infinitive,perfect,,,,regular,\\r\\nisse,2nd,active,infinitive,perfect,,,,regular,\\r\\nisse,3rd,active,infinitive,perfect,,,,regular,\\r\\nisse,4th,active,infinitive,perfect,,,,regular,\\r\\nūrus esse,1st,active,infinitive,future,,,,regular,\\r\\nūrus esse,2nd,active,infinitive,future,,,,regular,\\r\\nūrus esse,3rd,active,infinitive,future,,,,regular,\\r\\nūrus esse,4th,active,infinitive,future,,,,regular,\\r\\nārī,1st,passive,infinitive,present,,,,regular,\\r\\nērī,2nd,passive,infinitive,present,,,,regular,\\r\\nī,3rd,passive,infinitive,present,,,,regular,\\r\\nīrī,4th,passive,infinitive,present,,,,regular,\\r\\nus esse,1st,passive,infinitive,perfect,,,,regular,\\r\\nus esse,2nd,passive,infinitive,perfect,,,,regular,\\r\\nus esse,3rd,passive,infinitive,perfect,,,,regular,\\r\\nus esse,4th,passive,infinitive,perfect,,,,regular,\\r\\num īrī,1st,passive,infinitive,future,,,,regular,\\r\\num īrī,2nd,passive,infinitive,future,,,,regular,\\r\\num īri,3rd,passive,infinitive,future,,,,regular,\\r\\num īrī,4th,passive,infinitive,future,,,,regular,\\r\\n\";","export default \"ID ref,Match order,Part of speech,Stem type,Declension,Gender,Lemma,Morph flags,Dialect\\r\\nadjpdgm1,1,adjective,,1st 2nd,,ἄξιος,,\\r\\nadjpdgm1,1,adjective,,1st 2nd,,ἀγαθός,,\\r\\nadjpdgm2,1,adjective,,1st 2nd,,ἄδικος,,\\r\\nadjpdgm3,1,adjective,,3rd,,ἀληθής,,\\r\\nadjpdgm3,1,adjective,,3rd,,σώφρων,,\\r\\nadjpdgm4,1,adjective,,3rd,,ἡδύς,,\\r\\nadjpdgm4,1,adjective,,3rd,,μέλας,,\\r\\nadjpdgm5,1,adjective,,3rd,,χαρίεις,,\\r\\nadjpdgm5,1,adjective,,3rd,,πᾶς,,\\r\\nadjpdgm6,1,adjective,,1st 2nd,,χρύσεος,,\\r\\nadjpdgm6,1,adjective,,1st 2nd,,ἀργύρεος,,\\r\\nadjpdgm7,1,adjective,,1st 2nd,,εὔνους,,\\r\\nadjpdgm7,1,adjective,,1st 2nd,,ἁπλόος,,\\r\\nadjpdgm8,1,adjective,,1st 2nd,,ἴλαος,,\\r\\nadjpdgm8,1,adjective,,1st 2nd,,πλέως,,\\r\\nadjpdgm8,1,adjective,,1st 2nd,,πλέως,,\\r\\n\\r\\n\";","export default \"ID ref,Match order,Part of speech,Stem type,Declension,Gender,Lemma,Morph flags,Dialect\\r\\nnounpdgm1,1,noun,os_ou,2nd,masculine,ἄνθρωπος,,\\r\\nnounpdgm1,1,noun,os_ou,2nd,neuter,ἔργον,,\\r\\nnounpdgm2,1,noun,h_hs,1st,feminine,χώρα,,\\r\\nnounpdgm2,1,noun,h_hs,1st,feminine,γνώμη,,\\r\\nnounpdgm3,1,noun,,1st,feminine,ὑγίεια,,\\r\\nnounpdgm3,1,noun,,1st,feminine,θάλασσα,,\\r\\nnounpdgm4,1,noun,,1st,masculine,νεανίης,,\\r\\nnounpdgm4,1,noun,,1st,masculine,στρατιώτης,,\\r\\nnounpdgm5,1,noun,y_pos,3rd,masculine,κλώψ,,\\r\\nnounpdgm5,1,noun,c_kos,3rd,masculine,φύλαξ,,\\r\\nnounpdgm6,1,noun,is_itos,3rd,,χάρις,,\\r\\nnounpdgm6,1,noun,is_idos,3rd,,ἀσπίς,,\\r\\nnounpdgm6,1,noun,s_dos,3rd,,Ἑλλάς,,\\r\\nnounpdgm7,1,noun,wn_ontos,3rd,,γέρων,,\\r\\nnounpdgm7,1,noun,as_antos,3rd,,γίγας,,\\r\\nnounpdgm7,1,noun,ous_ontos,3rd,,ὀδούς,,\\r\\nnounpdgm8,1,noun,ma_matos,3rd,neuter,πρᾶγμα,,\\r\\nnounpdgm8,1,noun,as_atos,3rd,neuter,τέρας,,\\r\\nnounpdgm9,1,noun,wr_oros,3rd,,ῥήτωρ,,\\r\\nnounpdgm9,1,noun,wn_onos,3rd,,δαίμων,,\\r\\nnounpdgm9,1,noun,n_nos,3rd,,ἀγών,,\\r\\nnounpdgm9,1,noun,irreg_decl3,3rd,,ἅλς,,\\r\\nnounpdgm10,1,noun,hr_eros,3rd,,πατήρ,,\\r\\nnounpdgm10,1,noun,hr_eros,3rd,,μήτηρ,,\\r\\nnounpdgm10,1,noun,hr_eros,3rd,,θυγάτηρ,,\\r\\nnounpdgm10,1,noun,irreg_decl3,3rd,,ἀνήρ,,\\r\\nnounpdgm11,1,noun,hs_eos,3rd,,τριήρης,,\\r\\nnounpdgm11,1,noun,hs_eos,3rd,,γένος,,\\r\\nnounpdgm11,1,noun,as_aos,3rd,,γέρας,,\\r\\nnounpdgm12,1,noun,irreg_decl3,3rd,,γυνή,,\\r\\nnounpdgm12,1,noun,irreg_decl3,3rd,,χείρ,,\\r\\nnounpdgm12,1,noun,eus_ews,3rd,,υἱός,,\\r\\nnounpdgm13,1,noun,is_ews,3rd,,πόλις,,\\r\\nnounpdgm13,1,noun,us_ews,3rd,,πῆχυς,,\\r\\nnounpdgm13,1,noun,us_ews,3rd,,ἄστυ,,\\r\\nnounpdgm13,1,noun,uLs_uos,3rd,,ἰχθύς,,\\r\\nnounpdgm14,1,noun,eus_ews,3rd,,ἱππεύς,,\\r\\nnounpdgm14,1,noun,irreg_decl3,3rd,,γραῦς,,\\r\\nnounpdgm14,1,noun,irreg_decl3,3rd,,ναῦς,,\\r\\nnounpdgm14,1,noun,irreg_decl3,3rd,,βοῦς,,\\r\\nnounpdgm15,1,noun,oos_oou,2nd,,νόος,,\\r\\nnounpdgm15,1,noun,oos_oon,2nd,,περίπλους,,\\r\\nnounpdgm15,1,noun,eos_eou,2nd,,κάνεον,,\\r\\nnounpdgm16,1,noun,eh_ehs,1st,,γῆ,,\\r\\nnounpdgm16,1,noun,eh_ehs,1st,,συκῆ,,\\r\\nnounpdgm16,1,noun,ah_ahs,1st,,μνᾶ,,\\r\\nnounpdgm16,1,noun,ehs_eou,1st,,Ἑρμῆς,,\\r\\nnounpdgm17,1,noun,,2nd,,ναός,,\\r\\nnounpdgm17,1,noun,,3rd,,ναός,,\\r\\nnounpdgm17,1,noun,,2nd,,λαός,,\\r\\nnounpdgm17,1,noun,,3rd,,λαός,,\\r\\nnounpdgm17,1,noun,,2nd,,ἠώς,,\\r\\nnounpdgm17,1,noun,,3rd,,ἠώς,,\\r\\nnounpdgm17,1,noun,,2nd,,λαγῶς,,\\r\\nnounpdgm17,1,noun,,3rd,,λαγῶς,,\\r\\nnounpdgm18,1,noun,,3rd,,αἰδώς,,\\r\\nnounpdgm18,1,noun,,3rd,,ἥρως,,\\r\\n\";","export default \"ID ref,Match order,Part of speech,Stem type,Voice,Mood,Tense,Lemma,Morph flags,Dialect\\r\\nverbpdgm54,13,verb_participle,w_stem,active,,,,,\\r\\nverbpdgm54,12,verb_participle,reg_fut,,,,,,\\r\\nverbpdgm54,12,verb_participle,evw_pr,,,,,,\\r\\nverbpdgm55,12,verb_participle,ww_pr,,,,,,\\r\\nverbpdgm55,12,verb_participle,ew_fut,,,,,,\\r\\nverbpdgm55,12,verb_participle,ew_pr,,,,,,\\r\\nverbpdgm55,12,verb_participle,ow_pr,,,,,,\\r\\nverbpdgm56,12,verb_participle,aw_pr,,,,,,\\r\\nverbpdgm56,12,verb_participle,ajw_pr,,,,,,\\r\\nverbpdgm56,12,verb_participle,aw_fut,,,,,,\\r\\nverbpdgm57,12,verb_participle,aor2,,,,,,\\r\\nverbpdgm57,14,verb_participle,irreg_mi,,,present,εἰμί,,\\r\\nverbpdgm57,14,verb_participle,irreg_mi,,,present,εἶμι,,\\r\\nverbpdgm58,12,verb_participle,aor1,,,,,,\\r\\nverbpdgm59,12,verb_participle,ami_pr,,,,,,\\r\\nverbpdgm59,12,verb_participle,ath_h_aor,,,,,,\\r\\nverbpdgm59,12,verb_participle,ami_aor,,,,,,\\r\\nverbpdgm59,12,verb_participle,irreg_mi,,,,,,\\r\\nverbpdgm60,12,verb_participle,emi_pr,,,,,,\\r\\nverbpdgm60,13,verb_participle,emi_aor,active,,,,,\\r\\nverbpdgm60,12,verb_participle,aor_pass,,,,,,\\r\\nverbpdgm60,11,verb_participle,aor2_pass,,,,,,\\r\\nverbpdgm60,13,verb_participle,irreg_mi,active,,,,,\\r\\nverbpdgm61,12,verb_participle,omi_pr,,,,,,\\r\\nverbpdgm61,12,verb_participle,omi_aor,,,,,,\\r\\nverbpdgm61,12,verb_participle,ath_w_aor,,,,,,\\r\\nverbpdgm62,12,verb_participle,umi_pr,,,,,,\\r\\nverbpdgm62,12,verb_participle,ath_u_aor,,,,,,\\r\\nverbpdgm63,12,verb_participle,perf_act,,,,,,\\r\\nverbpdgm64,12,verb_participle,perf2_act,,,,,,\\r\\nverbpdgm65,13,verb_participle,w_stem,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,w_stem,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,aor2,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,aor1,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,reg_fut,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ew_fut,middle,,,,,\\r\\nverbpdgm65,12,verb_participle,fut_perf,,,,,,\\r\\nverbpdgm65,13,verb_participle,ow_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,ow_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ew_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,ew_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,evw_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,evw_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,aw_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,aw_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ajw_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,ajw_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ow_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,ow_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,emi_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,emi_pr,passive,,,,,\\r\\nverbpdgm65,13,verb_participle,emi_aor,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,irreg_mi,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,irreg_mi,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,omi_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,omi_pr,midle,,,,,\\r\\nverbpdgm65,13,verb_participle,omi_aor,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ami_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,ami_pr,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ami_short,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,ami_short,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,ami_aor,middle,,,,,\\r\\nverbpdgm65,13,verb_participle,umi_pr,mediopassive,,,,,\\r\\nverbpdgm65,13,verb_participle,umi_pr,middle,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_vow,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_d,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_mp,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_g,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_l,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_gx,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_p,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_n,,,,,,\\r\\nverbpdgm66,12,verb_participle,perfp_un,,,,,,\\r\\n\";","export default \"Index,Text\\r\\n1,\\\"With neuter plural subject, periphrastic forms are sometimes found in the indicative, but more commonly the 3rd singular form is used instead.\\\"\\r\\n2,\\\"thus is late Greek with a neuter plural subject, but in classical Attic the 3rd singular form is used with neuter plural subject.\\\"\";","export default \"ID ref,Match order,Part of speech,Stem type,Voice,Mood,Tense,Lemma,Morph flags,Dialect\\r\\nverbpdgm1,2,verb,w_stem,active,,,,,\\r\\nverbpdgm2,2,verb,w_stem,mediopassive,,,,,\\r\\nverbpdgm2,2,verb,w_stem,middle,,,,,\\r\\nverbpdgm3,1,verb,reg_fut,,,,,,\\r\\nverbpdgm3,3,verb,aor_pass,passive,,future,,,\\r\\nverbpdgm4,2,verb,ew_fut,,,,,,\\r\\nverbpdgm5,3,verb,aw_fut,,,,,,\\r\\nverbpdgm6,1,verb,aor2,active,,,,,\\r\\nverbpdgm7,1,verb,aor2,middle,,,,,\\r\\nverbpdgm7,1,verb,aor2,mediopassive,,,,,\\r\\nverbpdgm8,1,verb,aor1,active,,,,,\\r\\nverbpdgm9,1,verb,aor1,middle,,,,,\\r\\nverbpdgm10,1,verb,aor_pass,,,,,,\\r\\nverbpdgm10,1,verb,aor2_pass,,,,,,\\r\\nverbpdgm11,1,verb,perf_act,,,,,,\\r\\nverbpdgm11,5,verb,,active,indicative,perfect,ἵημι,,\\r\\nverbpdgm15,3,verb,perf_act,active,,pluperfect,,,\\r\\nverbpdgm12,1,verb,,mediopassive,indicative,perfect,,,\\r\\nverbpdgm12,1,verb,,mediopassive,infinitive,perfect,,,\\r\\nverbpdgm13,1,verb,,mediopassive,subjunctive,perfect,,,\\r\\nverbpdgm13,1,verb,,middle,subjunctive,perfect,,,\\r\\nverbpdgm13,1,verb,,mediopassive,optative,perfect,,,\\r\\nverbpdgm13,1,verb,,middle,optative,perfect,,,\\r\\nverbpdgm13,1,verb,,mediopassive,imperative,perfect,,,\\r\\nverbpdgm13,1,verb,,middle,imperative,perfect,,,\\r\\nverbpdgm14,1,verb,,mediopassive,subjunctive,perfect,,,\\r\\nverbpdgm14,1,verb,,middle,subjunctive,perfect,μιμνήσκω,,\\r\\nverbpdgm14,1,verb,,mediopassive,optative,perfect,μιμνήσκω,,\\r\\nverbpdgm14,1,verb,,middle,optative,perfect,μιμνήσκω,,\\r\\nverbpdgm14,1,verb,,mediopassive,imperative,perfect,μιμνήσκω,,\\r\\nverbpdgm14,1,verb,,middle,imperative,perfect,μιμνήσκω,,\\r\\nverbpdgm15,1,verb,,mediopassive,indicative,pluperfect,,,\\r\\nverbpdgm16,1,verb,fut_perf,,,,,,\\r\\nverbpdgm17,1,verb,perf2_act,,,,,,\\r\\nverbpdgm17,5,verb,perf2_act,,,,ἵστημι,,\\r\\nverbpdgm17b,1,verb,perf2_act,,,,,,\\r\\nverbpdgm17b,1,verb,perf2_act,,,,,,\\r\\nverbpdgm17b,5,verb,perf2_act,,,,θνήσκω,,\\r\\nverbpdgm17c,1,verb,perf2_act,,,,,,\\r\\nverbpdgm17c,5,verb,perf2_act,,,,δέδια,,\\r\\nverbpdgm17c,5,verb,perf2_act,,,,δείδω,,\\r\\nverbpdgm17c,5,verb,perf_act,,,,δείδω,,\\r\\nverbpdgm17c,5,verb,perf_act,,,pluperfect,δείδω,,\\r\\nverbpdgm18,1,verb,ew_pr,active,,,,,\\r\\nverbpdgm20,1,verb,ew_pr,mediopassive,,,,,\\r\\nverbpdgm20,1,verb,ew_pr,middle,,,,,\\r\\nverbpdgm19,1,verb,evw_pr,,,,,,\\r\\nverbpdgm21,2,verb,evw_pr,mediopassive,,,,,\\r\\nverbpdgm21,2,verb,evw_pr,middle,,,,,\\r\\nverbpdgm22,1,verb,aw_pr,,,,,,\\r\\nverbpdgm23,1,verb,ajw_pr,,,,,,\\r\\nverbpdgm24,2,verb,aw_pr,mediopassive,,,,,\\r\\nverbpdgm24,2,verb,aw_pr,middle,,,,,\\r\\nverbpdgm25,2,verb,ajw_pr,mediopassive,,,,,\\r\\nverbpdgm25,2,verb,ajw_pr,middle,,,,,\\r\\nverbpdgm26,2,verb,ow_pr,active,,,,,\\r\\nverbpdgm27,2,verb,ow_pr,mediopassive,,,,,\\r\\nverbpdgm27,2,verb,ow_pr,middle,,,,,\\r\\nverbpdgm26,2,verb,ww_pr,active,,,,,\\r\\nverbpdgm27,2,verb,ww_pr,mediopassive,,,,,\\r\\nverbpdgm27,2,verb,ww_pr,middle,,,,,\\r\\nverbpdgm28,2,verb,emi_pr,active,,,,,\\r\\nverbpdgm28,5,verb,,active,,present,τίθημι,,\\r\\nverbpdgm28,5,verb,,active,,imperfect,τίθημι,,\\r\\nverbpdgm29,2,verb,emi_pr,mediopassive,,,,,\\r\\nverbpdgm29,5,verb,,mediopassive,,present,τίθημι,,\\r\\nverbpdgm29,5,verb,,middle,,present,τίθημι,,\\r\\nverbpdgm29,5,verb,,mediopassive,,imperfect,τίθημι,,\\r\\nverbpdgm29,5,verb,,middle,,imperfect,τίθημι,,\\r\\nverbpdgm29,2,verb,emi_pr,middle,,,,,\\r\\nverbpdgm30,2,verb,emi_aor,active,,,,,\\r\\nverbpdgm30,5,verb,,active,,aorist,τίθημι,,\\r\\nverbpdgm31,2,verb,emi_aor,middle,,,,,\\r\\nverbpdgm31,2,verb,emi_aor,mediopassive,,,,,\\r\\nverbpdgm31,5,verb,,mediopassive,,aorist,τίθημι,,\\r\\nverbpdgm31,5,verb,,middle,,aorist,τίθημι,,\\r\\nverbpdgm32,2,verb,,active,,,ἵημι,,\\r\\nverbpdgm33,5,verb,,mediopassive,,present,ἵημι,,\\r\\nverbpdgm33,5,verb,,middle,,present,ἵημι,,\\r\\nverbpdgm34,5,verb,,active,,aorist,ἵημι,,\\r\\nverbpdgm35,5,verb,,middle,,aorist,ἵημι,,\\r\\nverbpdgm35,5,verb,,mediopassive,,aorist,ἵημι,,\\r\\nverbpdgm36,2,verb,omi_pr,active,,,,,\\r\\nverbpdgm37,2,verb,omi_pr,mediopassive,,,,,\\r\\nverbpdgm37,2,verb,omi_pr,middle,,,,,\\r\\nverbpdgm38,2,verb,omi_aor,active,,,,,\\r\\nverbpdgm39,2,verb,omi_aor,middle,,,,,\\r\\nverbpdgm39,2,verb,omi_aor,mediopassive,,,,,\\r\\nverbpdgm39,2,verb,ami_aor,middle,,,,,\\r\\nverbpdgm39,2,verb,ami_aor,mediopassive,,,,,\\r\\nverbpdgm40,2,verb,ami_pr,active,,,,,\\r\\nverbpdgm41,2,verb,ami_pr,mediopassive,,,,,\\r\\nverbpdgm41,2,verb,ami_pr,middle,,,,,\\r\\nverbpdgm42,2,verb,ami_aor,active,,,,,\\r\\nverbpdgm43,1,verb,ami_short,,,,,,\\r\\nverbpdgm43b,1,verb,ami_short,,,,,,\\r\\nverbpdgm43,5,verb,ami_short,,,,δύναμαι,,\\r\\nverbpdgm43b,5,verb,ami_short,,,,ἐπίσταμαι,,\\r\\nverbpdgm44,2,verb,umi_pr,active,,,,,\\r\\nverbpdgm45,2,verb,umi_pr,mediopassive,,,,,\\r\\nverbpdgm45,2,verb,umi_pr,middle,,,,,\\r\\nverbpdgm46,5,verb,irreg_mi,,,,εἰμί,,\\r\\nverbpdgm46,5,verb,reg_fut,,,,εἰμί,,\\r\\nverbpdgm47,5,verb,irreg_mi,,,,εἶμι,,\\r\\nverbpdgm48,1,verb,ath_primary,active,,,,,\\r\\nverbpdgm48,3,verb,,active,,present,φημί,,\\r\\nverbpdgm48,2,verb,ath_primary,active,,present,,,\\r\\nverbpdgm48,2,verb,ath_primary,active,,imperfect,,,\\r\\nverbpdgm49,1,verb,ath_h_aor,,,,,,\\r\\nverbpdgm50,1,verb,ath_w_aor,active,,,,,\\r\\nverbpdgm51,5,verb,ath_w_aor,,,,ἁλίσκομαι,,\\r\\nverbpdgm52,1,verb,ath_u_aor,,,,,,\\r\\nverbpdgm53,2,verb,ath_primary,,,perfect,,,\\r\\nverbpdgm53,5,verb,,active,,,οἶδα,,\\r\\n\";","import InflectionData from './lib/inflection-data.js'\r\nimport LanguageDatasetFactory from './lib/language-dataset-factory.js'\r\nimport LatinDataSet from './lib/lang/latin/latin-language-dataset.js'\r\nimport GreekDataSet from './lib/lang/greek/greek-language-dataset.js'\r\nimport ViewSetFactory from './views/lib/view-set-factory.js'\r\n\r\nexport { InflectionData, LanguageDatasetFactory, LatinDataSet, GreekDataSet, ViewSetFactory }\r\n","import { Logger } from 'alpheios-data-models'\r\nimport ExtendedLanguageData from './extended-language-data'\r\n\r\nexport default class ExtendedGreekData extends ExtendedLanguageData {\r\n  constructor () {\r\n    super()\r\n    this._type = ExtendedLanguageData.types().EXTENDED_GREEK_DATA // For deserialization\r\n    this.primary = false\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    let data = new ExtendedGreekData() // eslint-disable-line prefer-const\r\n    data.primary = jsonObject.primary\r\n    return data\r\n  }\r\n\r\n  merge (extendedGreekData) {\r\n    if (this.primary !== extendedGreekData.primary) {\r\n      Logger.getInstance().log('Mismatch', this.primary, extendedGreekData.primary)\r\n    }\r\n    let merged = new ExtendedGreekData() // eslint-disable-line prefer-const\r\n    merged.primary = this.primary\r\n    return merged\r\n  }\r\n}\r\n","export default class ExtendedLanguageData {\r\n  constructor () {\r\n    this._type = undefined // This is a base class\r\n  }\r\n\r\n  static types () {\r\n    return {\r\n      EXTENDED_GREEK_DATA: 'ExtendedGreekData'\r\n    }\r\n  }\r\n\r\n  /* static readObject (jsonObject) {\r\n    if (!jsonObject._type) {\r\n      throw new Error('Extended language data has no type information. Unable to deserialize.')\r\n    } else if (jsonObject._type === ExtendedLanguageData.types().EXTENDED_GREEK_DATA) {\r\n      return ExtendedGreekData.readObject(jsonObject)\r\n    } else {\r\n      throw new Error(`Unsupported extended language data of type \"${jsonObject._type}\".`)\r\n    }\r\n  } */\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\n\r\nexport default class Footnote {\r\n  constructor (index, text, partOfSpeech) {\r\n    this.index = index\r\n    this.text = text\r\n    this[Feature.types.part] = partOfSpeech\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    this.index = jsonObject.index\r\n    this.text = jsonObject.text\r\n    this[Feature.types.part] = jsonObject[Feature.types.part]\r\n    return new Footnote(jsonObject.index, jsonObject.text, jsonObject[Feature.types.part])\r\n  }\r\n}\r\n","import Morpheme from './morpheme.js'\r\n\r\nexport default class Form extends Morpheme {\r\n}\r\n","// import * as Models from 'alpheios-data-models'\r\n// import InflectionItemsGroup from './inflection-items-group.js'\r\n// import Suffix from './suffix'\r\n// import Footnote from './footnote'\r\n\r\n/**\r\n * A return value for inflection queries. Stores suffixes, forms and corresponding footnotes.\r\n * Inflection data is grouped first by a part of speech within a [Models.Feature.types.part] property object.\r\n * Inside that object, it is grouped by type: suffixes, or forms.\r\n */\r\nexport default class InflectionData {\r\n  constructor (homonym) {\r\n    this.homonym = homonym\r\n    this.pos = new Map()\r\n  }\r\n\r\n  addInflectionSet (infectionSet) {\r\n    this.pos.set(infectionSet.partOfSpeech, infectionSet)\r\n  }\r\n\r\n  get targetWord () {\r\n    if (this.homonym && this.homonym.targetWord) {\r\n      return this.homonym.targetWord\r\n    }\r\n  }\r\n\r\n  get languageID () {\r\n    if (this.homonym) {\r\n      return this.homonym.languageID\r\n    }\r\n  }\r\n\r\n  get hasInflectionSets () {\r\n    return this.pos.size > 0\r\n  }\r\n\r\n  /**\r\n   * Returns a list of parts of speech that have any inflection data for them.\r\n   * @return {string[]} Names of parts of speech, as strings, in an array.\r\n   */\r\n  get partsOfSpeech () {\r\n    return Array.from(this.pos.keys())\r\n  }\r\n\r\n  /**\r\n   * Returns either suffixes or forms of a given part of speech.\r\n   * @param {string} partOfSpeech.\r\n   * @param {string} inflectionType.\r\n   * @return {Suffix[] | Form[]}\r\n   */\r\n  getMorphemes (partOfSpeech, inflectionType) {\r\n    if (this.pos.has(partOfSpeech)) {\r\n      const inflectionSet = this.pos.get(partOfSpeech)\r\n      if (inflectionSet.types.has(inflectionType)) {\r\n        return inflectionSet.types.get(inflectionType).types\r\n      }\r\n    }\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * Returns footnotes for either suffixes or forms of a given part of speech.\r\n   * @param {string} partOfSpeech.\r\n   * @param {string} inflectionType.\r\n   * @return {Map}\r\n   */\r\n  getFootnotesMap (partOfSpeech, inflectionType) {\r\n    if (this.pos.has(partOfSpeech)) {\r\n      const inflectionSet = this.pos.get(partOfSpeech)\r\n      if (inflectionSet.types.has(inflectionType)) {\r\n        return inflectionSet.types.get(inflectionType).footnotesMap\r\n      }\r\n    }\r\n    return new Map()\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\n\r\nexport default class InflectionList {\r\n  constructor (type) {\r\n    this.type = type\r\n    this.items = [] // Suffixes or forms\r\n    this.footnotesMap = new Map() // Footnotes (if any)\r\n  }\r\n\r\n  /**\r\n   * Adds an individual item to the `items` array.\r\n   * @param {Object} item\r\n   */\r\n  addItem (item) {\r\n    if (!item) {\r\n      throw new Error('Inflection item cannot be empty')\r\n    }\r\n    this.items.push(item)\r\n  }\r\n\r\n  /**\r\n   * Adds suffix of form items\r\n   * @param {Suffix[] | Form[] | Paradigm[]} items\r\n   */\r\n  addItems (items) {\r\n    if (!items) {\r\n      throw new Error('Inflection items cannot be empty')\r\n    }\r\n    if (!Array.isArray(items)) {\r\n      throw new Error('Inflection items must be in an array')\r\n    }\r\n    if (items.length === 0) {\r\n      throw new Error('Inflection items array must not be empty')\r\n    }\r\n    // Store only new items, avoid duplicates\r\n    for (const item of items) {\r\n      if (!this.hasItem(item)) {\r\n        this.items.push(item)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a singe footnote object. If a footonte with the same index exists, it will be rewritten.\r\n   * @param {string} index - A footnote index\r\n   * @param {Footnote} footnote - A footnote object\r\n   */\r\n  addFootnote (index, footnote) {\r\n    this.footnotesMap.set(index, footnote)\r\n  }\r\n\r\n  /**\r\n   * Checks if item with the same ID is already stored in array of inflection data.\r\n   * @param {Suffix | Form | Paradigm} morpheme - An item to be checked against stored in inflection data.\r\n   * @return {boolean} True if this item is stored in inflection data, false otherwise.\r\n   */\r\n  hasItem (morpheme) {\r\n    return this.items.some(i => i.id === morpheme.id)\r\n  }\r\n\r\n  /**\r\n   * Checks if an array of items has at least one element that matches an inflection.\r\n   *  A match is determined as a result of item's `match` function.\r\n   * @param {Inflection[]} inflections - One or several inflection to match against.\r\n   * @return {boolean} - True if there is at least one match, false otherwise\r\n   */\r\n  hasMatches (inflections) {\r\n    return this.items.some(i => i.matches(inflections))\r\n  }\r\n\r\n  /**\r\n   * Returns an array of items that `matches` an inflection. A match is determined as a result of item's `match`\r\n   * function. Returned value is determined by item's `match` function as well.\r\n   * @param {Inflection[]} inflections - An inflection to match against.\r\n   * @return {Suffix[]|Form[]|Paradigm[]} An array of objects. Each object is returned by a `match` function of an individual item.\r\n   * Its format is dependent on the `match` function implementation.\r\n   */\r\n  getMatches (inflections) {\r\n    return this.items.filter(i => i.matches(inflections))\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted (as numbers) array of footnote indexes that are used by items within an `items` array\r\n   * @return {number[]}\r\n   */\r\n  get footnotesInUse () {\r\n    let set = new Set() // eslint-disable-line prefer-const\r\n    // Scan all selected morphemes to build a unique set of footnote indexes\r\n    for (const item of this.items) {\r\n      if (item.hasOwnProperty(Feature.types.footnote)) { // eslint-disable-line no-prototype-builtins\r\n        // Footnote indexes are stored in an array\r\n        for (const index of item[Feature.types.footnote]) {\r\n          set.add(index)\r\n        }\r\n      }\r\n    }\r\n    return Array.from(set).sort((a, b) => parseInt(a) - parseInt(b))\r\n  }\r\n}\r\n","import { Logger } from 'alpheios-data-models'\r\nimport InflectionList from './inflection-list.js'\r\n\r\n/**\r\n * Stores inflections data of different types {such as `Suffix`, `Form`, or `Paradigm`} in a `types` map. Items are grouped by type.\r\n * May also store inflections that corresponds to stored inflection data.\r\n */\r\nexport default class InflectionSet {\r\n  constructor (partOfSpeech, languageID) {\r\n    this.languageID = languageID\r\n    this.partOfSpeech = partOfSpeech\r\n\r\n    // Stores inflections (i.e. a form of a word with grammatical features as returned by a morph analyzer\r\n    this.inflections = []\r\n    this.isImplemented = false // Whether we implemented support for inflections from this set\r\n\r\n    // Stores inflections data (suffixes, forms, and paradigms) for inflections\r\n    this.types = new Map()\r\n  }\r\n\r\n  /**\r\n   * Checks if an `InflectionSet` has any types stored. If it does not, it means that an `InflectionSet` is empty.\r\n   * @return {boolean}\r\n   */\r\n  get hasTypes () {\r\n    return this.types.size !== 0\r\n  }\r\n\r\n  /**\r\n   * Return a list of item types this set contains.\r\n   * @return {Function<Morpheme>[]}\r\n   */\r\n  get inflectionTypes () {\r\n    return Array.from(this.types.keys())\r\n  }\r\n\r\n  /**\r\n   * Checks whether an inflection set has any items of certain type that matches an inflection.\r\n   * @param {Function<Suffix> | Function<Form> | Function<Paradigm>} itemType - A type of an item.\r\n   * @param {Inflection[]} inflections - One or several inflections to match.\r\n   * @return {boolean} True if there are matches, false otherwise\r\n   */\r\n  hasMatchingItems (itemType, inflections) {\r\n    return (this.types.has(itemType) && this.types.get(itemType).hasMatches(inflections))\r\n  }\r\n\r\n  /**\r\n   * Returns an array of items of certain type that matches an inflection.\r\n   * @param {Function<Suffix> | Function<Form> | Function<Paradigm>} itemType - A type of an item.\r\n   * @param {Inflection[]} inflections - One or several inflections to match.\r\n   * @return {Suffix[] | Form[] | Paradigm[] | []} Array of items of a particular type if any matches found.\r\n   * An empty array otherwise.\r\n   */\r\n  getMatchingItems (itemType, inflections) {\r\n    return this.types.has(itemType) ? this.types.get(itemType).getMatches(inflections) : []\r\n  }\r\n\r\n  /**\r\n   * Adds a single inflection item to the set\r\n   * @param {Suffix | Form | Paradigm} inflection\r\n   */\r\n  addInflectionItem (inflection) {\r\n    this.addInflectionItems([inflection])\r\n  }\r\n\r\n  /**\r\n   * Adds an array of inflection items of the same type.\r\n   * @param {Suffix[] | Form[] | Paradigm[]} items\r\n   */\r\n  addInflectionItems (items) {\r\n    // We assume all inflection items have the same type\r\n    const classType = items[0].constructor\r\n\r\n    if (!this.types.has(classType)) {\r\n      this.types.set(classType, classType.createList())\r\n    }\r\n\r\n    this.types.get(classType).addItems(items)\r\n  }\r\n\r\n  /**\r\n   * Adds an InflectionSet to the existing one. All inflections of a foreign inflection set\r\n   * will be added to the current one. Inflection data items (Suffixes, Forms, Paradigms) will\r\n   * be added only if they do not exist in the current InflectionSet.\r\n   * @param inflectionSet\r\n   */\r\n  addInflectionSet (inflectionSet) {\r\n    if (this.languageID === inflectionSet.languageID && this.partOfSpeech === inflectionSet.partOfSpeech) {\r\n      this.inflections.push(...inflectionSet.inflections)\r\n      for (const items of this.types.values()) {\r\n        this.addInflectionItems(items)\r\n      }\r\n    } else {\r\n      Logger.getInstance().warn(`Cannot add inflectionSet [languageID=${inflectionSet.languageID.toString()}, POFS=${inflectionSet.partOfSpeech}]` +\r\n        ` to [languageID=${this.languageID.toString()}, POFS=${this.partOfSpeech}]`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a footnote object to inflection data of a specific class type.\r\n   * @param {Suffix | Form | Paradigm} classType.\r\n   * @param {number} index - A footnote index.\r\n   * @param {Footnote} footnote - A Footnote object.\r\n   */\r\n  addFootnote (classType, index, footnote) {\r\n    if (!this.types.has(classType)) {\r\n      this.types.set(classType, new InflectionList(classType))\r\n    }\r\n    this.types.get(classType).addFootnote(index, footnote)\r\n  }\r\n}\r\n","/*\r\n * Greek language data module\r\n */\r\nimport { Constants, Feature, FeatureImporter } from 'alpheios-data-models'\r\n\r\nimport LanguageDataset from '@lib/language-dataset.js'\r\nimport ExtendedGreekData from '@lib/extended-greek-data'\r\nimport Suffix from '@lib/suffix.js'\r\nimport Form from '@lib/form.js'\r\n\r\nimport nounSuffixesCSV from '@lib/lang/greek/data/noun/suffixes.csv'\r\nimport nounFootnotesCSV from '@lib/lang/greek/data/noun/footnotes.csv'\r\n\r\nimport adjectiveSuffixesCSV from '@lib/lang/greek/data/adjective/suffixes.csv'\r\nimport adjectiveFootnotesCSV from '@lib/lang/greek/data/adjective/footnotes.csv'\r\n\r\nimport articleFormsCSV from '@lib/lang/greek/data/article/forms.csv'\r\n\r\nimport numeralFormsCSV from '@lib/lang/greek/data/numeral/forms.csv'\r\nimport numeralFootnotesCSV from '@lib/lang/greek/data/numeral/footnotes.csv'\r\n\r\nimport pronounFormsCSV from '@lib/lang/greek/data/pronoun/forms.csv'\r\nimport pronounFootnotesCSV from '@lib/lang/greek/data/pronoun/footnotes.csv'\r\n\r\n// import GroupFeatureType from '@views/lib/group-feature-type.js'\r\n\r\n/* import adjectiveSuffixesCSV from './data/adjective/suffixes.csv';\r\nimport adjectiveFootnotesCSV from './data/adjective/footnotes.csv';\r\nimport verbSuffixesCSV from './data/verb/suffixes.csv';\r\nimport verbFootnotesCSV from './data/verb/footnotes.csv'; */\r\n\r\nimport papaparse from 'papaparse'\r\n\r\n// region Definition of grammatical features\r\n/*\r\n Define grammatical features of a language. Those grammatical features definitions will also be used by morphological\r\n analyzer's language modules as well.\r\n */\r\n\r\n// endregion Definition of grammatical features\r\n\r\nexport default class GreekLanguageDataset extends LanguageDataset {\r\n  constructor () {\r\n    super(GreekLanguageDataset.languageID)\r\n\r\n    this.typeFeatures = this.model.typeFeatures\r\n    this.typeFeatures.set(Feature.types.footnote, new Feature(Feature.types.footnote, [], GreekLanguageDataset.languageID))\r\n    this.typeFeatures.set(Feature.types.fullForm, new Feature(Feature.types.fullForm, [], GreekLanguageDataset.languageID))\r\n    this.typeFeatures.set(Feature.types.hdwd, new Feature(Feature.types.hdwd, [], GreekLanguageDataset.languageID))\r\n    this.typeFeatures.set(Feature.types.dialect, new Feature(Feature.types.dialect, [], GreekLanguageDataset.languageID))\r\n\r\n    // Create an importer with default values for every feature\r\n    for (let feature of this.typeFeatures.values()) { // eslint-disable-line prefer-const\r\n      feature.addImporter(new FeatureImporter(feature.values, true))\r\n    }\r\n\r\n    // Custom importers for Greek-specific feature values\r\n    this.typeFeatures.get(Feature.types.gender).getImporter()\r\n      .map(this.constructor.constants.GEND_MASCULINE_FEMININE, [Constants.GEND_MASCULINE, Constants.GEND_FEMININE])\r\n      .map(this.constructor.constants.GEND_MASCULINE_FEMININE_NEUTER, [Constants.GEND_MASCULINE, Constants.GEND_FEMININE, Constants.GEND_NEUTER])\r\n    this.typeFeatures.get(Feature.types.tense).getImporter()\r\n      .map('future_perfect', [Constants.TENSE_FUTURE_PERFECT])\r\n  }\r\n\r\n  static get languageID () {\r\n    return Constants.LANG_GREEK\r\n  }\r\n\r\n  static get constants () {\r\n    // TODO: Shall we move it to constants in data models?\r\n    return {\r\n      GEND_MASCULINE_FEMININE: 'masculine feminine',\r\n      GEND_MASCULINE_FEMININE_NEUTER: 'masculine feminine neuter'\r\n    }\r\n  }\r\n\r\n  // For noun and adjectives\r\n  addSuffixes (partOfSpeech, data, pofsFootnotes) {\r\n    // An order of columns in a data CSV file\r\n    const n = {\r\n      suffix: 0,\r\n      number: 1,\r\n      grmCase: 2,\r\n      declension: 3,\r\n      gender: 4,\r\n      type: 5,\r\n      primary: 6,\r\n      footnote: 7\r\n    }\r\n    // Some suffix values will mean a lack of suffix, they will be mapped to a null\r\n    const noSuffixValue = '-'\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let suffixValue = item[n.suffix]\r\n      // Handle special suffix values\r\n      if (suffixValue === noSuffixValue) {\r\n        suffixValue = null\r\n      }\r\n\r\n      let primary = false\r\n      const features = [partOfSpeech,\r\n        this.typeFeatures.get(Feature.types.number).createFromImporter(item[n.number]),\r\n        this.typeFeatures.get(Feature.types.grmCase).createFromImporter(item[n.grmCase]),\r\n        this.typeFeatures.get(Feature.types.declension).createFromImporter(item[n.declension]),\r\n        this.typeFeatures.get(Feature.types.gender).createFromImporter(item[n.gender]),\r\n        this.typeFeatures.get(Feature.types.type).createFromImporter(item[n.type])]\r\n      if (item[n.primary] === 'primary') {\r\n        primary = true\r\n      }\r\n      if (item[n.footnote]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[n.footnote].split(' ')\r\n        features.push(this.typeFeatures.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n\r\n      let extendedGreekData = new ExtendedGreekData() // eslint-disable-line prefer-const\r\n      extendedGreekData.primary = primary\r\n      const extendedLangData = {\r\n        [Constants.STR_LANG_CODE_GRC]: extendedGreekData\r\n      }\r\n\r\n      this.addInflectionData(partOfSpeech.value, Suffix, suffixValue, features, footnotes, extendedLangData)\r\n    }\r\n  }\r\n\r\n  addArticleForms (partOfSpeech, data) {\r\n    // An order of columns in a data CSV file\r\n    const n = {\r\n      form: 0,\r\n      number: 1,\r\n      grmCase: 2,\r\n      gender: 3,\r\n      type: 4,\r\n      primary: 5\r\n    }\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      const formValue = item[n.form]\r\n\r\n      let primary = false\r\n      const features = [partOfSpeech,\r\n        this.typeFeatures.get(Feature.types.number).createFromImporter(item[n.number]),\r\n        this.typeFeatures.get(Feature.types.grmCase).createFromImporter(item[n.grmCase]),\r\n        this.typeFeatures.get(Feature.types.gender).createFromImporter(item[n.gender]),\r\n        this.typeFeatures.get(Feature.types.type).createFromImporter(item[n.type])]\r\n      if (item[n.primary] === 'primary') {\r\n        primary = true\r\n      }\r\n\r\n      let extendedGreekData = new ExtendedGreekData() // eslint-disable-line prefer-const\r\n      extendedGreekData.primary = primary\r\n      const extendedLangData = {\r\n        [Constants.STR_LANG_CODE_GRC]: extendedGreekData\r\n      }\r\n\r\n      this.addInflectionData(partOfSpeech.value, Form, formValue, features, [], extendedLangData)\r\n    }\r\n  }\r\n\r\n  // For numerals\r\n  addNumeralForms (partOfSpeech, data, pofsFootnotes) {\r\n    // An order of columns in a data CSV file\r\n    // this.numeralGroupingLemmas = ['εἱς - μία - ἑν (1)', 'δύο (2)', 'τρεῖς - τρία (3)', 'τέτταρες - τέτταρα (4)']\r\n    this.numeralGroupingLemmas = []\r\n\r\n    const n = {\r\n      form: 0,\r\n      hdwd: 1,\r\n      number: 2,\r\n      grmCase: 3,\r\n      gender: 4,\r\n      type: 5,\r\n      primary: 6,\r\n      footnote: 7\r\n    }\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      const form = item[n.form]\r\n\r\n      let features = [ // eslint-disable-line prefer-const\r\n        partOfSpeech,\r\n        this.typeFeatures.get(Feature.types.fullForm).createFromImporter(form)\r\n      ]\r\n\r\n      if (item[n.hdwd]) {\r\n        features.push(this.typeFeatures.get(Feature.types.hdwd).createFromImporter(item[n.hdwd]))\r\n\r\n        if (this.numeralGroupingLemmas.indexOf(item[n.hdwd]) === -1) { this.numeralGroupingLemmas.push(item[n.hdwd]) }\r\n      }\r\n\r\n      if (item[n.number]) { features.push(this.typeFeatures.get(Feature.types.number).createFromImporter(item[n.number])) }\r\n      if (item[n.grmCase]) { features.push(this.typeFeatures.get(Feature.types.grmCase).createFromImporter(item[n.grmCase])) }\r\n      if (item[n.gender]) { features.push(this.typeFeatures.get(Feature.types.gender).createFromImporter(item[n.gender])) }\r\n      if (item[n.type]) { features.push(this.typeFeatures.get(Feature.types.type).createFromImporter(item[n.type])) }\r\n\r\n      const primary = (item[n.primary] === 'primary')\r\n\r\n      if (item[n.footnote]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[n.footnote].split(' ')\r\n        features.push(this.typeFeatures.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n\r\n      let extendedGreekData = new ExtendedGreekData() // eslint-disable-line prefer-const\r\n      extendedGreekData.primary = primary\r\n      const extendedLangData = {\r\n        [Constants.STR_LANG_CODE_GRC]: extendedGreekData\r\n      }\r\n\r\n      this.numeralGroupingLemmas.sort((a, b) => {\r\n        const aN = parseInt(a.match(/[0-9]+/g)[0])\r\n        const bN = parseInt(b.match(/[0-9]+/g)[0])\r\n        return aN - bN\r\n      })\r\n\r\n      this.addInflectionData(partOfSpeech.value, Form, form, features, footnotes, extendedLangData)\r\n    }\r\n  }\r\n\r\n  // For pronoun\r\n  addPronounForms (partOfSpeech, data, pofsFootnotes) {\r\n    this.pronounGroupingLemmas = new Map([\r\n      ['demonstrative', ['ὅδε', 'οὗτος', 'ἐκεῖνος']]\r\n    ])\r\n\r\n    // An order of columns in a data CSV file\r\n    const n = {\r\n      form: 0,\r\n      hdwd: 1,\r\n      grmClass: 2,\r\n      person: 3,\r\n      number: 4,\r\n      grmCase: 5,\r\n      gender: 6,\r\n      type: 7,\r\n      primary: 8,\r\n      dialect: 9,\r\n      footnote: 10\r\n    }\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      const form = item[n.form]\r\n\r\n      let features = [ // eslint-disable-line prefer-const\r\n        partOfSpeech,\r\n        this.typeFeatures.get(Feature.types.fullForm).createFromImporter(form)\r\n      ]\r\n\r\n      if (item[n.hdwd]) {\r\n        features.push(this.typeFeatures.get(Feature.types.hdwd).createFromImporter(item[n.hdwd]))\r\n      }\r\n      if (item[n.grmClass]) { features.push(this.typeFeatures.get(Feature.types.grmClass).createFromImporter(item[n.grmClass])) }\r\n      if (item[n.person]) { features.push(this.typeFeatures.get(Feature.types.person).createFromImporter(item[n.person])) }\r\n      if (item[n.number]) { features.push(this.typeFeatures.get(Feature.types.number).createFromImporter(item[n.number])) }\r\n      if (item[n.grmCase]) { features.push(this.typeFeatures.get(Feature.types.grmCase).createFromImporter(item[n.grmCase])) }\r\n      if (item[n.gender]) { features.push(this.typeFeatures.get(Feature.types.gender).createFromImporter(item[n.gender])) }\r\n      if (item[n.type]) { features.push(this.typeFeatures.get(Feature.types.type).createFromImporter(item[n.type])) }\r\n\r\n      const primary = (item[n.primary] === 'primary')\r\n\r\n      // Dialects could have multiple values\r\n      const dialects = item[n.dialect].split(',')\r\n      if (item[n.dialect] && dialects && dialects.length > 0) {\r\n        features.push(this.typeFeatures.get(Feature.types.dialect).createFeatures(dialects))\r\n      }\r\n\r\n      // Footnotes. There can be multiple footnote indexes separated by commas\r\n      if (item[n.footnote]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[n.footnote].split(' ')\r\n        features.push(this.typeFeatures.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n\r\n      let extendedGreekData = new ExtendedGreekData() // eslint-disable-line prefer-const\r\n      extendedGreekData.primary = primary\r\n      const extendedLangData = {\r\n        [Constants.STR_LANG_CODE_GRC]: extendedGreekData\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Form, form, features, footnotes, extendedLangData)\r\n    }\r\n  }\r\n\r\n  addFootnotes (partOfSpeech, classType, data) {\r\n    let footnotes = [] // eslint-disable-line prefer-const\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const footnote = this.addFootnote(partOfSpeech.value, classType, data[i][0], data[i][1])\r\n      footnotes.push(footnote)\r\n    }\r\n    return footnotes\r\n  }\r\n\r\n  loadData () {\r\n    let partOfSpeech\r\n    let suffixes\r\n    let forms\r\n    let pofsFootnotes\r\n    let footnotes\r\n\r\n    // Nouns\r\n    partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_NOUN)\r\n    pofsFootnotes = papaparse.parse(nounFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, pofsFootnotes.data)\r\n    suffixes = papaparse.parse(nounSuffixesCSV, { skipEmptyLines: true })\r\n    this.addSuffixes(partOfSpeech, suffixes.data, footnotes)\r\n\r\n    // Adjective\r\n    partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_ADJECTIVE)\r\n    pofsFootnotes = papaparse.parse(adjectiveFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, pofsFootnotes.data)\r\n    suffixes = papaparse.parse(adjectiveSuffixesCSV, { skipEmptyLines: true })\r\n    this.addSuffixes(partOfSpeech, suffixes.data, footnotes)\r\n\r\n    // Articles\r\n    partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_ARTICLE)\r\n    forms = papaparse.parse(articleFormsCSV, { skipEmptyLines: true })\r\n    this.addArticleForms(partOfSpeech, forms.data)\r\n\r\n    // Pronouns\r\n    partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_PRONOUN)\r\n    pofsFootnotes = papaparse.parse(pronounFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, pofsFootnotes.data)\r\n    forms = papaparse.parse(pronounFormsCSV, { skipEmptyLines: true })\r\n    this.addPronounForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    // Numerals\r\n    partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_NUMERAL)\r\n    pofsFootnotes = papaparse.parse(numeralFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, pofsFootnotes.data)\r\n    forms = papaparse.parse(numeralFormsCSV, { skipEmptyLines: true })\r\n    this.addNumeralForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    this.dataLoaded = true\r\n    return this\r\n  }\r\n\r\n  isIrregular (inflection) {\r\n    // All pronouns are irregular right now\r\n    return inflection[Feature.types.part].value === Constants.POFS_PRONOUN\r\n  }\r\n\r\n  /**\r\n   * Returns an array of lemmas that are used to group values within inflection tables,\r\n   * such as for demonstrative pronouns\r\n   * @param {string} grammarClass - A name of a pronoun class\r\n   * @return {string[]} An array of lemma values\r\n   */\r\n  getPronounGroupingLemmas (grammarClass) {\r\n    return this.pronounGroupingLemmas.has(grammarClass) ? this.pronounGroupingLemmas.get(grammarClass) : []\r\n  }\r\n\r\n  getPronounGroupingLemmaFeatures (grammarClass) {\r\n    return this.getPronounGroupingLemmas(grammarClass).map(lemma => new Feature(Feature.types.hdwd, lemma, GreekLanguageDataset.languageID))\r\n  }\r\n\r\n  getNumeralGroupingLemmas () {\r\n    return this.numeralGroupingLemmas\r\n  }\r\n\r\n  getNumeralGroupingLemmaFeatures () {\r\n    return this.numeralGroupingLemmas.map(lemma => new Feature(Feature.types.hdwd, lemma, GreekLanguageDataset.languageID))\r\n  }\r\n\r\n  static getObligatoryMatchList (inflection) {\r\n    if (inflection.hasFeatureValue(Feature.types.part, Constants.POFS_PRONOUN)) {\r\n      // If it is a pronoun, it must match a grammatical class\r\n      return [Feature.types.part, Feature.types.grmClass]\r\n    } else if ([Constants.POFS_NUMERAL, Constants.POFS_ARTICLE].includes(inflection[Feature.types.part].value)) {\r\n      // If it is a numeral, it must match a part of speach\r\n      return [Feature.types.part]\r\n    } else if (inflection.constraints.fullFormBased) {\r\n      // Not a pronoun, but the other form-based word\r\n      return [Feature.types.part, Feature.types.fullForm]\r\n    } else {\r\n      // Default value for suffix matching\r\n      return [Feature.types.part]\r\n    }\r\n  }\r\n\r\n  static getOptionalMatchList (inflection) {\r\n    let featureOptions = []\r\n\r\n    if ([Constants.POFS_PRONOUN, Constants.POFS_NUMERAL, Constants.POFS_ARTICLE].includes(inflection[Feature.types.part].value)) {\r\n      featureOptions = [\r\n        Feature.types.grmCase,\r\n        Feature.types.gender,\r\n        Feature.types.number\r\n      ]\r\n    } else if (inflection.hasFeatureValue(Feature.types.part, Constants.POFS_ADJECTIVE)) {\r\n      featureOptions = [\r\n        Feature.types.grmCase,\r\n        Feature.types.gender,\r\n        Feature.types.number,\r\n        Feature.types.declension\r\n      ]\r\n    } else {\r\n      featureOptions = [\r\n        Feature.types.grmCase,\r\n        Feature.types.declension,\r\n        Feature.types.gender,\r\n        Feature.types.number,\r\n        Feature.types.voice,\r\n        Feature.types.mood,\r\n        Feature.types.tense,\r\n        Feature.types.person\r\n      ]\r\n    }\r\n\r\n    return featureOptions.filter(f => inflection[f])\r\n  }\r\n\r\n  /**\r\n   * Returns a list of features that should be the same for the morphology match.\r\n   * @param {Inflection} inflection - An inflection for which a list needs to be built.\r\n   * @return {string[]} An array of feature names.\r\n   */\r\n  static getMorphologyMatchList (inflection) {\r\n    let featureOptions = []\r\n\r\n    if ([Constants.POFS_PRONOUN, Constants.POFS_NUMERAL, Constants.POFS_ARTICLE].includes(inflection[Feature.types.part].value)) {\r\n      featureOptions = [\r\n        Feature.types.grmCase,\r\n        Feature.types.gender,\r\n        Feature.types.number,\r\n        Feature.types.person\r\n\r\n      ]\r\n    } else if (inflection.hasFeatureValue(Feature.types.part, Constants.POFS_ADJECTIVE)) {\r\n      featureOptions = [\r\n        Feature.types.grmCase,\r\n        Feature.types.gender,\r\n        Feature.types.number,\r\n        Feature.types.declension\r\n      ]\r\n    } else {\r\n      featureOptions = [\r\n        Feature.types.grmCase,\r\n        Feature.types.declension,\r\n        Feature.types.gender,\r\n        Feature.types.number,\r\n        Feature.types.voice,\r\n        Feature.types.mood,\r\n        Feature.types.tense,\r\n        Feature.types.person\r\n      ]\r\n    }\r\n\r\n    return featureOptions.filter(f => inflection[f])\r\n  }\r\n}\r\n","/*\r\n * Latin language data module\r\n */\r\nimport { Constants, Feature, FeatureImporter, Lemma, Language } from 'alpheios-data-models'\r\nimport LanguageDataset from '@lib/language-dataset.js'\r\nimport Suffix from '@lib/suffix.js'\r\nimport Form from '@lib/form.js'\r\n// import ComparisonFeature from '@lib/comparison-feature.js'\r\nimport nounSuffixesCSV from '@lib/lang/latin/data/noun/suffixes.csv'\r\nimport nounFootnotesCSV from '@lib/lang/latin/data/noun/footnotes.csv'\r\nimport pronounFormsCSV from '@lib/lang/latin/data/pronoun/forms.csv'\r\nimport pronounFootnotesCSV from '@lib/lang/latin/data/pronoun/footnotes.csv'\r\nimport adjectiveSuffixesCSV from '@lib/lang/latin/data/adjective/suffixes.csv'\r\nimport adjectiveFootnotesCSV from '@lib/lang/latin/data/adjective/footnotes.csv'\r\nimport verbSuffixesCSV from '@lib/lang/latin/data/verb/suffixes.csv'\r\nimport verbFootnotesCSV from '@lib/lang/latin/data/verb/footnotes.csv'\r\nimport verbFormsCSV from '@lib/lang/latin/data/verb/forms.csv'\r\nimport verbFormFootnotesCSV from '@lib/lang/latin/data/verb/form_footnotes.csv'\r\nimport verbParticipleSuffixesCSV from '@lib/lang/latin/data/participle/suffixes.csv'\r\nimport verbParticipleFormsCSV from '@lib/lang/latin/data/participle/forms.csv'\r\nimport verbParticipleFormFootnotesCSV from '@lib/lang/latin/data/participle/form_footnotes.csv'\r\nimport verbSupineSuffixesCSV from '@lib/lang/latin/data/supine/suffixes.csv'\r\nimport verbSupineFormsCSV from '@lib/lang/latin/data/supine/forms.csv'\r\nimport verbSupineFormFootnotesCSV from '@lib/lang/latin/data/supine/form_footnotes.csv'\r\nimport gerundiveFormsCSV from '@lib/lang/latin/data/gerundive/forms.csv'\r\nimport gerundiveFormFootnotesCSV from '@lib/lang/latin/data/gerundive/form_footnotes.csv'\r\nimport adjectiveComparativeSuffixesCSV from '@lib/lang/latin/data/comparative/suffixes.csv'\r\nimport adjectiveComparativeFootnotesCSV from '@lib/lang/latin/data/comparative/footnotes.csv'\r\nimport adjectiveSuperlativeSuffixesCSV from '@lib/lang/latin/data/superlative/suffixes.csv'\r\nimport adjectiveSuperlativeFootnotesCSV from '@lib/lang/latin/data/superlative/footnotes.csv'\r\nimport papaparse from 'papaparse'\r\n\r\n/*\r\n Define grammatical features of a language. Those grammatical features definitions will also be used by morphological\r\n analyzer's language modules as well.\r\n */\r\nexport default class LatinLanguageDataset extends LanguageDataset {\r\n  constructor () {\r\n    super(LatinLanguageDataset.languageID)\r\n\r\n    this.features = this.model.typeFeatures\r\n    this.features.set(Feature.types.footnote, new Feature(Feature.types.footnote, [], LatinLanguageDataset.languageID))\r\n    this.features.set(Feature.types.fullForm, new Feature(Feature.types.fullForm, [], LatinLanguageDataset.languageID))\r\n    this.features.set(Feature.types.word, new Feature(Feature.types.word, [], LatinLanguageDataset.languageID))\r\n\r\n    // Create an importer with default values for every feature\r\n    for (let feature of this.features.values()) { // eslint-disable-line prefer-const\r\n      feature.addImporter(new FeatureImporter(feature.values, true))\r\n    }\r\n\r\n    // Create importer mapping for special language-specific values\r\n    this.features.get(Feature.types.declension).getImporter()\r\n      .map(this.constructor.constants.ORD_1ST_2ND, [Constants.ORD_1ST, Constants.ORD_2ND])\r\n    this.features.get(Feature.types.declension).getImporter()\r\n      .map(this.constructor.constants.ORD_1ST_2ND_3RD, [Constants.ORD_1ST, Constants.ORD_2ND, Constants.ORD_3RD])\r\n    this.features.get(Feature.types.gender).getImporter()\r\n      .map(this.constructor.constants.GEND_MASCULINE_FEMININE, [Constants.GEND_MASCULINE, Constants.GEND_FEMININE])\r\n\r\n    this.features.get(Feature.types.tense).getImporter()\r\n      .map('future_perfect', Constants.TENSE_FUTURE_PERFECT)\r\n\r\n    /**\r\n     * A map of irregular form lemmas for which we have data.\r\n     * key - Part of speech name.\r\n     * value - array of lemmas.\r\n     * @type {Map<string, Lemma[]>}\r\n     */\r\n    this.irregularLemmas = new Map()\r\n    for (const pofs of this.constructor.constants.IRREG_POFS) {\r\n      this.irregularLemmas.set(pofs, [])\r\n    }\r\n  }\r\n\r\n  static get language () {\r\n    return Language.LATIN\r\n  }\r\n\r\n  static get languageID () {\r\n    return Constants.LANG_LATIN\r\n  }\r\n\r\n  static get constants () {\r\n    return {\r\n      // Parts of speech that could have irregular forms\r\n      IRREG_POFS: [Constants.POFS_VERB, Constants.POFS_VERB_PARTICIPLE, Constants.POFS_SUPINE, Constants.POFS_GERUNDIVE],\r\n      ORD_1ST_2ND: '1st 2nd',\r\n      ORD_1ST_2ND_3RD: '1st 2nd 3rd',\r\n      GEND_MASCULINE_FEMININE: 'masculine feminine'\r\n    }\r\n  }\r\n\r\n  // For noun and adjectives\r\n  addSuffixes (partOfSpeech, data, pofsFootnotes) {\r\n    // An order of columns in a data CSV file\r\n    const n = {\r\n      suffix: 0,\r\n      number: 1,\r\n      grmCase: 2,\r\n      declension: 3,\r\n      gender: 4,\r\n      type: 5,\r\n      footnote: 6\r\n    }\r\n    // Some suffix values will mean a lack of suffix, they will be mapped to a null\r\n    const noSuffixValue = '-'\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let suffix = item[n.suffix]\r\n      // Handle special suffix values\r\n      if (!suffix || suffix === noSuffixValue) {\r\n        suffix = null\r\n      }\r\n\r\n      let features = [partOfSpeech, // eslint-disable-line prefer-const\r\n        this.features.get(Feature.types.number).createFromImporter(item[n.number]),\r\n        this.features.get(Feature.types.grmCase).createFromImporter(item[n.grmCase]),\r\n        this.features.get(Feature.types.declension).createFromImporter(item[n.declension]),\r\n        this.features.get(Feature.types.gender).createFromImporter(item[n.gender]),\r\n        this.features.get(Feature.types.type).createFromImporter(item[n.type])]\r\n      if (item[n.footnote]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[n.footnote].split(' ')\r\n        features.push(this.features.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Suffix, suffix, features, footnotes)\r\n    }\r\n  }\r\n\r\n  // For comparatives and superlatives\r\n  addCompSuffixes (partOfSpeech, data, pofsFootnotes, compFeature) {\r\n    // An order of columns in a data CSV file\r\n\r\n    // no declension for comparatives and superlatives\r\n    const n = {\r\n      suffix: 0,\r\n      number: 1,\r\n      grmCase: 2,\r\n      gender: 3,\r\n      type: 4,\r\n      footnote: 5\r\n    }\r\n    // Some suffix values will mean a lack of suffix, they will be mapped to a null\r\n    const noSuffixValue = '-'\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let suffix = item[n.suffix]\r\n      // Handle special suffix values\r\n      if (!suffix || suffix === noSuffixValue) {\r\n        suffix = null\r\n      }\r\n\r\n      let features = [partOfSpeech, // eslint-disable-line prefer-const\r\n        this.features.get(Feature.types.number).createFromImporter(item[n.number]),\r\n        this.features.get(Feature.types.grmCase).createFromImporter(item[n.grmCase]),\r\n        this.features.get(Feature.types.gender).createFromImporter(item[n.gender]),\r\n        this.features.get(Feature.types.type).createFromImporter(item[n.type]),\r\n        compFeature]\r\n      if (item[n.footnote]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[n.footnote].split(' ')\r\n        features.push(this.features.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Suffix, suffix, features, footnotes)\r\n    }\r\n  }\r\n\r\n  // For pronouns\r\n  addPronounForms (partOfSpeech, data, pofsFootnotes) {\r\n    const n = {\r\n      formSet: 0,\r\n      headword: 1,\r\n      grmClass: 2,\r\n      person: 3,\r\n      number: 4,\r\n      case: 5,\r\n      type: 6,\r\n      form: 7,\r\n      footnote: 8\r\n    }\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let features = [partOfSpeech] // eslint-disable-line prefer-const\r\n      //    if (item[n.formSet]) {\r\n      //      features.push(languageModel.features[Feature.types.formSet]createFromImporter(item[0]))\r\n      //    }\r\n      // TODO read a headword into a principalPars array\r\n      //  if (item[n.headword]) { }\r\n      if (item[n.grmClass]) {\r\n        features.push(this.features.get(Feature.types.grmClass).createFromImporter(item[n.grmClass]))\r\n      }\r\n      if (item[n.person]) {\r\n        features.push(this.features.get(Feature.types.person).createFromImporter(item[n.person]))\r\n      }\r\n      if (item[n.number]) {\r\n        features.push(this.features.get(Feature.types.number).createFromImporter(item[n.number]))\r\n      }\r\n      if (item[n.case]) {\r\n        features.push(this.features.get(Feature.types.case).createFromImporter(item[n.case]))\r\n      }\r\n      if (item[n.type]) {\r\n        features.push(this.features.get(Feature.types.type).createFromImporter(item[n.type]))\r\n      }\r\n      const form = item[n.form] ? item[n.form] : ''\r\n\r\n      // Footnotes\r\n      if (item[n.footnote]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[n.footnote].split(' ')\r\n        features.push(this.features.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Form, form, features, footnotes)\r\n    }\r\n  }\r\n\r\n  // For verbs\r\n  addVerbSuffixes (partOfSpeech, data, pofsFootnotes) {\r\n    // Some suffix values will mean a lack of suffix, they will be mapped to a null\r\n    const noSuffixValue = '-'\r\n    let footnotes = []\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let suffix = item[0]\r\n      // Handle special suffix values\r\n      if (!suffix || suffix === noSuffixValue) {\r\n        suffix = null\r\n      }\r\n\r\n      let features = [partOfSpeech] // eslint-disable-line prefer-const\r\n      const columns = [\r\n        Feature.types.conjugation,\r\n        Feature.types.voice,\r\n        Feature.types.mood,\r\n        Feature.types.tense,\r\n        Feature.types.number,\r\n        Feature.types.person,\r\n        Feature.types.case,\r\n        Feature.types.type\r\n      ]\r\n      columns.forEach((c, j) => {\r\n        try {\r\n          if (item[j + 1]) {\r\n            features.push(this.features.get(c).createFromImporter(item[j + 1]))\r\n          }\r\n        } catch (e) {\r\n          // ignore empty or non-parsable values\r\n        }\r\n      })\r\n\r\n      const grammartype = item[7]\r\n      // Type information can be empty if no ending is provided\r\n      if (grammartype) {\r\n        features.push(this.features.get(Feature.types.type).createFromImporter(grammartype))\r\n      }\r\n      // Footnotes\r\n      if (item[9]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[9].split(' ')\r\n        features.push(this.features.get(Feature.types.footnote).createFeatures(indexes))\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Suffix, suffix, features, footnotes)\r\n    }\r\n  }\r\n\r\n  addVerbParticipleSuffixes (partOfSpeech, data) {\r\n    // Some suffix values will mean a lack of suffix, they will be mapped to a null\r\n    const noSuffixValue = '-'\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let suffix = item[0]\r\n      // Handle special suffix values\r\n      if (!suffix || suffix === noSuffixValue) {\r\n        suffix = null\r\n      }\r\n\r\n      let features = [partOfSpeech] // eslint-disable-line prefer-const\r\n      const columns = [\r\n        Feature.types.conjugation,\r\n        Feature.types.voice,\r\n        Feature.types.mood,\r\n        Feature.types.tense,\r\n        Feature.types.number,\r\n        Feature.types.person,\r\n        Feature.types.case,\r\n        Feature.types.type\r\n      ]\r\n      columns.forEach((c, j) => {\r\n        try {\r\n          if (item[j + 1]) {\r\n            features.push(this.features.get(c).createFromImporter(item[j + 1]))\r\n          }\r\n        } catch (e) {\r\n          // ignore empty or non-parsable values\r\n        }\r\n      })\r\n\r\n      const grammartype = item[7]\r\n      // Type information can be empty if no ending is provided\r\n      if (grammartype) {\r\n        features.push(this.features.get(Feature.types.type).createFromImporter(grammartype))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Suffix, suffix, features)\r\n    }\r\n  }\r\n\r\n  addVerbSupineSuffixes (partOfSpeech, data) {\r\n    // Some suffix values will mean a lack of suffix, they will be mapped to a null\r\n    const noSuffixValue = '-'\r\n\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      let suffix = item[0]\r\n      // Handle special suffix values\r\n      if (!suffix || suffix === noSuffixValue) {\r\n        suffix = null\r\n      }\r\n\r\n      let features = [partOfSpeech] // eslint-disable-line prefer-const\r\n      // Ending,Conjugation,Voice,Mood,Tense,Number,Person,Case,Type,Footnote\r\n      const columns = [\r\n        Feature.types.case\r\n      ]\r\n      columns.forEach((c, j) => {\r\n        try {\r\n          if (item[j + 1]) {\r\n            features.push(this.features.get(c).createFromImporter(item[j + 1]))\r\n          }\r\n        } catch (e) {\r\n          // ignore empty or non-parsable values\r\n        }\r\n      })\r\n\r\n      this.addInflectionData(partOfSpeech.value, Suffix, suffix, features)\r\n    }\r\n  }\r\n\r\n  // For Lemmas of verbs and verb participles\r\n  addVerbForms (partOfSpeech, data, pofsFootnotes = []) {\r\n    let footnotes = []\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      const hdwd = item[0]\r\n      const principalParts = item[1].split(/_/)\r\n      const lemma = new Lemma(hdwd, LatinLanguageDataset.language, principalParts)\r\n\r\n      const form = item[2]\r\n\r\n      // Lemma,PrincipalParts,Form,Voice,Mood,Tense,Number,Person,Footnote\r\n      let features = [ // eslint-disable-line prefer-const\r\n        partOfSpeech\r\n      ]\r\n\r\n      if (hdwd && lemma) {\r\n        features.push(this.features.get(Feature.types.word).createFromImporter(hdwd))\r\n        if (!this.irregularLemmas.get(partOfSpeech.value).some(item => item.word === lemma.word)) {\r\n          this.irregularLemmas.get(partOfSpeech.value).push(lemma)\r\n        }\r\n      }\r\n\r\n      if (item[3]) {\r\n        features.push(this.features.get(Feature.types.voice).createFromImporter(item[3]))\r\n      }\r\n      if (item[4]) {\r\n        features.push(this.features.get(Feature.types.mood).createFromImporter(item[4]))\r\n      }\r\n      if (item[5]) {\r\n        features.push(this.features.get(Feature.types.tense).createFromImporter(item[5]))\r\n      }\r\n      if (item[6]) {\r\n        features.push(this.features.get(Feature.types.number).createFromImporter(item[6]))\r\n      }\r\n      if (item[7]) {\r\n        features.push(this.features.get(Feature.types.person).createFromImporter(item[7]))\r\n      }\r\n\r\n      // Footnotes\r\n      if (item[8]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[8].split(' ')\r\n        features.push(this.features.get(Feature.types.footnote).createFeatures(indexes))\r\n\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Form, form, features, footnotes)\r\n    }\r\n  }\r\n\r\n  // For Lemmas of supine and gerundive\r\n  addSupineGerundiveForms (partOfSpeech, data, pofsFootnotes = []) {\r\n    let footnotes = []\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const item = data[i]\r\n      const lemmaWord = item[0]\r\n      const principalParts = item[1].split(/_/)\r\n      const form = item[2]\r\n\r\n      // Lemma,PrincipalParts,Form,Voice,Mood,Tense,Number,Person,Footnote\r\n      let features = [ // eslint-disable-line prefer-const\r\n        partOfSpeech/*,\r\n        this.features.get(Feature.types.fullForm).createFromImporter(lemma.word) */\r\n      ]\r\n\r\n      if (lemmaWord) {\r\n        const lemma = new Lemma(lemmaWord, LatinLanguageDataset.language, principalParts)\r\n        features.push(this.features.get(Feature.types.word).createFromImporter(lemmaWord))\r\n        if (!this.irregularLemmas.get(partOfSpeech.value).some(item => item.word === lemma.word)) {\r\n          this.irregularLemmas.get(partOfSpeech.value).push(lemma)\r\n        }\r\n      }\r\n\r\n      if (item[3]) {\r\n        features.push(this.features.get(Feature.types.case).createFromImporter(item[3]))\r\n      }\r\n\r\n      // Footnotes\r\n      if (item[4]) {\r\n        // There can be multiple footnote indexes separated by spaces\r\n        const indexes = item[4].split(' ')\r\n        features.push(this.features.get(Feature.types.footnote).createFeatures(indexes))\r\n\r\n        footnotes = pofsFootnotes.filter(f => indexes.includes(f.index))\r\n      }\r\n      this.addInflectionData(partOfSpeech.value, Form, form, features, footnotes)\r\n    }\r\n  }\r\n\r\n  addFootnotes (partOfSpeech, classType, data) {\r\n    let footnotes = [] // eslint-disable-line prefer-const\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n      const footnote = this.addFootnote(partOfSpeech.value, classType, data[i][0], data[i][1])\r\n      footnotes.push(footnote)\r\n    }\r\n    return footnotes\r\n  }\r\n\r\n  loadData () {\r\n    let partOfSpeech\r\n    let suffixes\r\n    let forms\r\n    let footnotesData\r\n    let footnotes\r\n    let compFeature\r\n\r\n    // Nouns\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_NOUN)\r\n    footnotesData = papaparse.parse(nounFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, footnotesData.data)\r\n    suffixes = papaparse.parse(nounSuffixesCSV, { skipEmptyLines: true })\r\n    this.addSuffixes(partOfSpeech, suffixes.data, footnotes)\r\n\r\n    // Pronouns\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_PRONOUN)\r\n    footnotesData = papaparse.parse(pronounFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, footnotesData.data)\r\n    forms = papaparse.parse(pronounFormsCSV, { skipEmptyLines: true })\r\n    this.addPronounForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    // Adjectives\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_ADJECTIVE)\r\n    footnotesData = papaparse.parse(adjectiveFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, footnotesData.data)\r\n    suffixes = papaparse.parse(adjectiveSuffixesCSV, { skipEmptyLines: true })\r\n    this.addSuffixes(partOfSpeech, suffixes.data, footnotes)\r\n\r\n    // Comparatives\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_ADJECTIVE)\r\n    compFeature = this.features.get(Feature.types.comparison).createFeature(Constants.COMP_COMPARITIVE)\r\n    footnotesData = papaparse.parse(adjectiveComparativeFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, footnotesData.data)\r\n    suffixes = papaparse.parse(adjectiveComparativeSuffixesCSV, { skipEmptyLines: true })\r\n    this.addCompSuffixes(partOfSpeech, suffixes.data, footnotes, compFeature)\r\n\r\n    // Superlatives\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_ADJECTIVE)\r\n    compFeature = this.features.get(Feature.types.comparison).createFeature(Constants.COMP_SUPERLATIVE)\r\n    footnotesData = papaparse.parse(adjectiveSuperlativeFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, footnotesData.data)\r\n    suffixes = papaparse.parse(adjectiveSuperlativeSuffixesCSV, { skipEmptyLines: true })\r\n    this.addCompSuffixes(partOfSpeech, suffixes.data, footnotes, compFeature)\r\n\r\n    // Verbs\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_VERB)\r\n    footnotesData = papaparse.parse(verbFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Suffix, footnotesData.data)\r\n\r\n    suffixes = papaparse.parse(verbSuffixesCSV, { skipEmptyLines: true })\r\n    this.addVerbSuffixes(partOfSpeech, suffixes.data, footnotes)\r\n\r\n    footnotesData = papaparse.parse(verbFormFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, footnotesData.data)\r\n\r\n    forms = papaparse.parse(verbFormsCSV, { skipEmptyLines: true })\r\n    this.addVerbForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    // Verb Participles\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_VERB_PARTICIPLE)\r\n    suffixes = papaparse.parse(verbParticipleSuffixesCSV, { skipEmptyLines: true })\r\n    this.addVerbParticipleSuffixes(partOfSpeech, suffixes.data)\r\n\r\n    footnotesData = papaparse.parse(verbParticipleFormFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, footnotesData.data)\r\n    forms = papaparse.parse(verbParticipleFormsCSV, { skipEmptyLines: true })\r\n    this.addVerbForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    // Verb Supine\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_SUPINE)\r\n    suffixes = papaparse.parse(verbSupineSuffixesCSV, { skipEmptyLines: true })\r\n    this.addVerbSupineSuffixes(partOfSpeech, suffixes.data)\r\n\r\n    footnotesData = papaparse.parse(verbSupineFormFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, footnotesData.data)\r\n    forms = papaparse.parse(verbSupineFormsCSV, { skipEmptyLines: true })\r\n    this.addSupineGerundiveForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    // Gerundive\r\n    partOfSpeech = this.features.get(Feature.types.part).createFeature(Constants.POFS_GERUNDIVE)\r\n    footnotesData = papaparse.parse(gerundiveFormFootnotesCSV, { skipEmptyLines: true })\r\n    footnotes = this.addFootnotes(partOfSpeech, Form, footnotesData.data)\r\n    forms = papaparse.parse(gerundiveFormsCSV, { skipEmptyLines: true })\r\n    this.addSupineGerundiveForms(partOfSpeech, forms.data, footnotes)\r\n\r\n    this.dataLoaded = true\r\n    return this\r\n  }\r\n\r\n  isIrregular (inflection) {\r\n    const pofs = inflection[Feature.types.part].value\r\n    if (this.irregularLemmas.has(pofs)) {\r\n      if (inflection[Feature.types.conjugation] && inflection[Feature.types.conjugation].value === Constants.TYPE_IRREGULAR) {\r\n        // This is an irregular verb that was identified by a morphological analyzer\r\n        return true\r\n      } else if (inflection[Feature.types.word]) {\r\n        return this.irregularLemmas.get(pofs).some(item => item.word === inflection[Feature.types.word].value)\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Checks whether we implemented (i.e. have word data) a particular word (stored in inflection.word).\r\n   * Currently those are irregular verbs that are not in our data CSV files.\r\n   * @param {Inflection} inflection - An inflection we need to check\r\n   * @return {boolean} - True if verb is implemented yet, false otherwise\r\n   */\r\n  isImplemented (inflection) {\r\n    /*\r\n    Identifies words that are not implemented. Currently those are irregular verbs that are not in our data CSV files.\r\n     */\r\n    const pofs = inflection[Feature.types.part].value\r\n    return Boolean(\r\n      !this.isIrregular(inflection) ||\r\n      this.irregularLemmas.get(pofs).some(item => item.word === inflection[Feature.types.word].value)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a list of irregular lemmas matching one or more inflections.\r\n   * @param {Inflection[]} inflections - An array of inflections that will be used to search for matching lemmas.\r\n   * @return {Lemma[] | []} Array of matching Lemma objects or an empty array if nothing is found.\r\n   */\r\n  getMatchingIrregularLemmas (inflections) {\r\n    let lemmas = [] // eslint-disable-line prefer-const\r\n    for (const inflection of inflections) {\r\n      const pofs = inflection[Feature.types.part].value\r\n      if (this.irregularLemmas.has(pofs)) {\r\n        const lemma = this.irregularLemmas.get(pofs).find(item => item.word === inflection[Feature.types.word].value)\r\n        if (lemma) {\r\n          lemmas.push(lemma)\r\n        }\r\n      }\r\n    }\r\n    return lemmas\r\n  }\r\n\r\n  static getObligatoryMatchList (inflection) {\r\n    if (inflection.constraints.irregular ||\r\n      inflection.hasFeatureValue(Feature.types.part, Constants.POFS_SUPINE) ||\r\n      inflection.hasFeatureValue(Feature.types.part, Constants.POFS_GERUNDIVE)\r\n    ) {\r\n      return [Feature.types.part, Feature.types.fullForm, Feature.types.word]\r\n    } else if (inflection.hasFeatureValue(Feature.types.part, Constants.POFS_VERB)) {\r\n      return [Feature.types.part]\r\n    } else if (inflection.constraints.fullFormBased) {\r\n      return [Feature.types.part, Feature.types.fullForm]\r\n    } else {\r\n      // Default value for suffix matching\r\n      return [Feature.types.part]\r\n    }\r\n  }\r\n\r\n  static getOptionalMatchList (inflection) {\r\n    const featureOptions = [\r\n      Feature.types.grmCase,\r\n      Feature.types.declension,\r\n      Feature.types.gender,\r\n      Feature.types.number,\r\n      Feature.types.voice,\r\n      Feature.types.mood,\r\n      Feature.types.tense,\r\n      Feature.types.person,\r\n      Feature.types.conjugation\r\n    ]\r\n\r\n    if (inflection.constraints.irregular) {\r\n      return [\r\n        Feature.types.mood,\r\n        Feature.types.tense,\r\n        Feature.types.number,\r\n        Feature.types.person,\r\n        Feature.types.voice,\r\n        Feature.types.conjugation\r\n      ]\r\n    } else {\r\n      return featureOptions.filter(f => inflection[f])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a list of features that should be the same for the morphology match.\r\n   * @param {Inflection} inflection - An inflection for which a list needs to be built.\r\n   * @return {string[]} An array of feature names.\r\n   */\r\n  static getMorphologyMatchList (inflection) {\r\n    const featureOptions = [\r\n      Feature.types.grmCase,\r\n      Feature.types.declension,\r\n      Feature.types.gender,\r\n      Feature.types.number,\r\n      Feature.types.voice,\r\n      Feature.types.mood,\r\n      Feature.types.tense,\r\n      Feature.types.person,\r\n      Feature.types.conjugation\r\n    ]\r\n\r\n    if (inflection.constraints.irregular) {\r\n      return [\r\n        Feature.types.grmCase,\r\n        Feature.types.mood,\r\n        Feature.types.tense,\r\n        Feature.types.number,\r\n        Feature.types.person,\r\n        Feature.types.voice,\r\n        Feature.types.conjugation\r\n      ]\r\n    } else {\r\n      return featureOptions.filter(f => inflection[f])\r\n    }\r\n  }\r\n}\r\n","import LatinDataset from './lang/latin/latin-language-dataset.js'\r\nimport GreekDataset from './lang/greek/greek-language-dataset.js'\r\nimport GreekParadigmDataset from '@/paradigm/data/greek/greek-paradigm-dataset.js'\r\n\r\n// Stores a LanguageDatasetFactory's single instance\r\nlet datasetFactory\r\n\r\n/**\r\n * Creates and stores datasets for all available languages. This is a singleton.\r\n * When created, datasets' data is not loaded yet. It will be loaded on a first call (lazy initialization).\r\n */\r\nexport default class LanguageDatasetFactory {\r\n  /**\r\n   * @param {Constructor[]} languageData - Language datasets of supported languages.\r\n   */\r\n  constructor (languageData = [LatinDataset, GreekParadigmDataset, GreekDataset]) {\r\n    this.sets = new Map()\r\n    for (const LngDataset of languageData) {\r\n      if (!this.sets.has(LngDataset.languageID)) {\r\n        this.sets.set(LngDataset.languageID, [])\r\n      }\r\n      this.sets.get(LngDataset.languageID).push(new LngDataset())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a single instance of self.\r\n   * @return {LanguageDatasetFactory} A self instances.\r\n   */\r\n  static get instance () {\r\n    if (!datasetFactory) {\r\n      datasetFactory = new LanguageDatasetFactory()\r\n    }\r\n    return datasetFactory\r\n  }\r\n\r\n  /**\r\n   * Returns an instance of a dataset for a language ID given.\r\n   * @param {symbol} languageID - A language ID of a dataset to be retrieved.\r\n   * @return {LanguageDataset} An instance of a language dataset.\r\n   */\r\n  static getDatasets (languageID) {\r\n    const instance = this.instance\r\n\r\n    if (instance.sets.has(languageID)) {\r\n      let datasets = instance.sets.get(languageID) // eslint-disable-line prefer-const\r\n      datasets.forEach(dataset => {\r\n        if (!dataset.dataLoaded) {\r\n          dataset.loadData()\r\n        }\r\n      })\r\n      return datasets\r\n    }\r\n  }\r\n\r\n  static getDataset (languageID, constructorName) {\r\n    const datasets = this.getDatasets(languageID)\r\n    if (!datasets) {\r\n      return\r\n    }\r\n    if (constructorName) {\r\n      return datasets.find(dataset => dataset.constructor.name.endsWith(constructorName))\r\n    }\r\n    return datasets[0]\r\n  }\r\n}\r\n","import { Feature, LanguageModelFactory as LMF, Constants, Logger } from 'alpheios-data-models'\r\nimport Morpheme from './morpheme.js'\r\nimport Suffix from './suffix.js'\r\nimport Form from './form.js'\r\n\r\nimport Footnote from './footnote.js'\r\nimport InflectionSet from './inflection-set.js'\r\nimport InflectionData from './inflection-data.js'\r\nimport MatchData from './match-data.js'\r\n\r\n/**\r\n * Stores inflection language data\r\n */\r\nexport default class LanguageDataset {\r\n  /**\r\n   * Initializes a LanguageDataset.\r\n   * @param {symbol} languageID - A language ID of a data set.\r\n   */\r\n  constructor (languageID) {\r\n    if (!languageID) {\r\n      // Language is not supported\r\n      throw new Error('Language ID cannot be empty.')\r\n    }\r\n\r\n    this.languageID = languageID\r\n    this.dataLoaded = false\r\n    this.model = LMF.getLanguageModel(languageID)\r\n    this.pos = new Map()\r\n    this.footnotes = [] // Footnotes\r\n  }\r\n\r\n  /**\r\n   * Checks weather a language dataset has data on a certain word (stored in inflection.word) or not.\r\n   * @param {Inflection} inflection - An inflection that needs to be checked.\r\n   * @return {boolean} True if word is supported, false otherwise\r\n   */\r\n  isImplemented (inflection) {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Each grammatical feature can be either a single or an array of Feature objects. The latter is the case when\r\n   * an ending can belong to several grammatical features at once (i.e. belong to both 'masculine' and\r\n   * 'feminine' genders.\r\n   *\r\n   * @param {string} partOfSpeech - A part of speech this inflection belongs to.\r\n   * @param {Function} ClassType - either Suffix, Form, or Paradigm\r\n   * @param {string | null} itemValue - A text of an item. It is either a string or null if there is no suffix.\r\n   * @param {Feature[]} features - An array of Feature objects.\r\n   * @param {Footnote[]} footnotes - Footnotes in an array.\r\n   * @param {ExtendedLanguageData} extendedLangData\r\n   */\r\n  addInflectionData (partOfSpeech, ClassType, itemValue, features, footnotes = [], extendedLangData = undefined) {\r\n    let item = new ClassType(itemValue) // eslint-disable-line prefer-const\r\n    item.extendedLangData = extendedLangData\r\n\r\n    // Go through all features provided\r\n    for (const feature of features) {\r\n      /*\r\n      Footnotes are special because they are stored as both single or multi-value feature and\r\n      as an array of Footnote objects into a `footnote` prop (so they can be iterated over during table construction)\r\n       */\r\n      if (feature.type === Feature.types.footnote) {\r\n        item[Feature.types.footnote] = item[Feature.types.footnote] || []\r\n        item[Feature.types.footnote].push(...feature.values)\r\n        item.footnotes = footnotes\r\n      } else {\r\n        item.features[feature.type] = feature\r\n      }\r\n    }\r\n\r\n    if (!this.pos.has(partOfSpeech)) {\r\n      this.pos.set(partOfSpeech, new InflectionSet(partOfSpeech, this.languageID))\r\n    }\r\n\r\n    this.pos.get(partOfSpeech).addInflectionItem(item)\r\n  }\r\n\r\n  /**\r\n   * Stores a footnote item.\r\n   * @param {string} partOfSpeech - A part of speech this footnote belongs to\r\n   * @param {Function} classType - A class constructor of either a Suffix or a Form\r\n   * @param {number} index - A footnote's index.\r\n   * @param {string} text - A footnote's text.\r\n   * @return {Footnote} A footnote object that was added to the language dataset.\r\n   */\r\n  addFootnote (partOfSpeech, classType, index, text) {\r\n    if (!index) {\r\n      throw new Error('Footnote index data should not be empty.')\r\n    }\r\n\r\n    if (!text) {\r\n      throw new Error('Footnote text data should not be empty.')\r\n    }\r\n\r\n    const footnote = new Footnote(index, text, partOfSpeech)\r\n\r\n    // this.footnotes.push(footnote)\r\n\r\n    if (!this.pos.has(partOfSpeech)) {\r\n      this.pos.set(partOfSpeech, new InflectionSet(partOfSpeech, this.languageID))\r\n    }\r\n    this.pos.get(partOfSpeech).addFootnote(classType, index, footnote)\r\n    return footnote\r\n  }\r\n\r\n  /**\r\n   * Checks for obligatory matches between an inflection and an item.\r\n   * @param {Inflection} inflection - An inflection object.\r\n   * @param {Morpheme} item - An inflection data item: a Suffix, a Form, or a Paradigm.\r\n   * @param {Morpheme.comparisonTypes} comparisonType - What matching algorithm to use (exact or partial).\r\n   * @return {Object} A results in the following format:\r\n   *   {Feature[]} matchedItems - Features that matched (if any)\r\n   *   {boolean} matchResult - True if all obligatory matches are fulfilled, false otherwise.\r\n   */\r\n  static getObligatoryMatches (inflection, item, comparisonType = Morpheme.comparisonTypes.EXACT) {\r\n    return this.checkMatches(inflection.constraints.obligatoryMatches, inflection, item, comparisonType)\r\n  }\r\n\r\n  /**\r\n   * Checks for optional matches between an inflection and an item.\r\n   * @param {Inflection} inflection - An inflection object.\r\n   * @param {Morpheme} item - An inflection data item: a Suffix, a Form, or a Paradigm.\r\n   * @param {Morpheme.comparisonTypes} comparisonType - What matching algorithm to use (exact or partial).\r\n   * @return {Object} A results in the following format:\r\n   *   {Feature[]} matchedItems - Features that matched (if any)\r\n   *   {boolean} matchResult - True if all obligatory matches are fulfilled, false otherwise.\r\n   */\r\n  static getOptionalMatches (inflection, item, comparisonType = Morpheme.comparisonTypes.EXACT) {\r\n    return this.checkMatches(inflection.constraints.optionalMatches, inflection, item, comparisonType)\r\n  }\r\n\r\n  static getMorphologyMatches (inflection, item, comparisonType = Morpheme.comparisonTypes.EXACT) {\r\n    return this.checkMatches(inflection.constraints.morphologyMatches, inflection, item, comparisonType)\r\n  }\r\n\r\n  /**\r\n   * Checks if values of features from `featureList` are the same between an inflection\r\n   * and a morpheme. If item does not have a feature from `featureList`, such feature\r\n   * will be still counted as a match. It is required to produce a full match in cases\r\n   * when a morpheme has incomplete feature data.\r\n   * @param {string[]} featureList - A list of feature names that should be checked for matching values.\r\n   * @param {Inflection} inflection - An inflection object.\r\n   * @param {Suffix|Form|Paradigm|Morpheme} item - A morpheme object.\r\n   * @param {Morpheme.comparisonTypes} comparisonType - What matching algorithm to use (exact or partial).\r\n   * @return {{fullMatch: boolean, matchedItems: string[]}} Match results object:\r\n   * fullMatch: true if all features form a list are the same between an inflection and an item.\r\n   * matchItems: a list of feature names that are the same between an inflection and an item.\r\n   */\r\n  static checkMatches (featureList, inflection, item, comparisonType = Morpheme.comparisonTypes.EXACT) {\r\n    let fullMatchQty = featureList.length\r\n    const matches = featureList.reduce((acc, f) => {\r\n      if (inflection.hasOwnProperty(f) && item.features.hasOwnProperty(f) && item.featureMatch(inflection[f], comparisonType)) { // eslint-disable-line no-prototype-builtins\r\n        acc.push(f)\r\n      } else if (!inflection.hasOwnProperty(f) || !item.features.hasOwnProperty(f)) { // eslint-disable-line no-prototype-builtins\r\n        /*\r\n        If either inflection or item does not have a certain feature,\r\n        this feature is excluded from a comparison\r\n         */\r\n        if (!inflection.constraints.pronounClassRequired || f !== Feature.types.grmClass) {\r\n          fullMatchQty--\r\n        }\r\n      }\r\n      return acc\r\n    }, [])\r\n\r\n    // we can't consider it a match if there were NO common features\r\n    // so we have to test to make sure there is at least one matching feature\r\n    // required and found\r\n    const result = (matches.length > 0 && matches.length === fullMatchQty)\r\n    return { fullMatch: result, matchedItems: matches }\r\n  }\r\n\r\n  setBaseInflectionData (inflection) {\r\n    inflection.constraints = Object.assign(inflection.constraints, this.model.getInflectionConstraints(inflection))\r\n    if (inflection.constraints.paradigmBased && inflection.constraints.suffixBased) {\r\n      if (inflection[Feature.types.part].value === Constants.POFS_VERB) {\r\n        inflection.constraints.suffixBased = false\r\n      }\r\n    }\r\n\r\n    inflection.constraints.implemented = this.isImplemented(inflection)\r\n    if (inflection.constraints.implemented) {\r\n      inflection.constraints.obligatoryMatches = this.constructor.getObligatoryMatchList(inflection)\r\n      inflection.constraints.optionalMatches = this.constructor.getOptionalMatchList(inflection)\r\n      inflection.constraints.morphologyMatches = this.constructor.getMorphologyMatchList(inflection)\r\n    }\r\n  }\r\n\r\n  setPronounInflectionData (partOfSpeech, inflection) {\r\n    if (inflection.constraints.pronounClassRequired) {\r\n      /*\r\n      A `class` grammatical feature is an obligatory match for Greek pronouns. Class, however, is not present in\r\n      the Inflection object at the time we receive it from a morphological analyzer because a morphological analyzer\r\n      does not provide such data. To fix this, for pronouns we need to figure out what the `class` feature value is\r\n      by finding an exact pronoun form match in inflection data and obtaining a corresponding `class` value.\r\n      The value found will then be attached to an Inflection object.\r\n       */\r\n      // Get a class this inflection belongs to\r\n      const grmClasses = this.model.getPronounClasses(this.pos.get(partOfSpeech).types.get(Form).items, inflection.getForm(), inflection.lemma.word, true)\r\n\r\n      if (!grmClasses) {\r\n        Logger.getInstance().warn(`Cannot determine a grammar class for a ${inflection.form} pronoun.\r\n              Table construction will probably fail`)\r\n      } else {\r\n        // One or more values found\r\n        inflection.addFeature(grmClasses)\r\n      }\r\n    }\r\n  }\r\n\r\n  setIrregularInflectionData (inflection) {\r\n    // Check if this is an irregular word after a `word` feature is added\r\n    inflection.constraints.irregular = this.isIrregular(inflection)\r\n    if (inflection.constraints.irregular) {\r\n      // Irregular words are always full form based\r\n      inflection.constraints.fullFormBased = true\r\n      // inflection.constraints.suffixBased = false // Turn this on to not show regular tables for irregular verbs\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets inflection grammar properties based on inflection data\r\n   * @param {Inflection} inflection - An inflection data object\r\n   * @param {Lemma} lemma\r\n   * @return {Inflection} A modified inflection data object\r\n   */\r\n  setInflectionData (inflection, lemma) {\r\n    /*\r\n     Sets possible constraints by language model. It uses part of speech matching mostly.\r\n     However, language model cannot always determine those constraints reliably.\r\n     In that case it will return a list of all possible constraints and we would need\r\n     to verify with ones hold and which ones not. For example, verbs in Latin\r\n     can be both suffix based and full form based. A language model will return both\r\n     suffixBased and fullFormBased flags set to true and we will need to determine\r\n     which one of those makes sense for each particular verb.\r\n     */\r\n    let partOfSpeech = inflection[Feature.types.part]\r\n    if (!partOfSpeech) {\r\n      throw new Error('Part of speech data is missing in an inflection')\r\n    }\r\n\r\n    if (!partOfSpeech.isSingle) {\r\n      throw new Error('Part of speech data should have only one value')\r\n    }\r\n    partOfSpeech = inflection[Feature.types.part].value\r\n\r\n    if (!this.pos.get(partOfSpeech)) {\r\n      // There is no source data for this part of speech\r\n      Logger.getInstance().warn(`There is no source data for the following part of speech: ${partOfSpeech}`)\r\n      return inflection\r\n    }\r\n\r\n    inflection.lemma = lemma\r\n    inflection.addFeature(new Feature(Feature.types.word, lemma.word, lemma.languageID))\r\n    // irregular data must be set first because if a word is irregular\r\n    // it affects base inflection tests\r\n    this.setIrregularInflectionData(inflection)\r\n    this.setBaseInflectionData(inflection)\r\n    this.setPronounInflectionData(partOfSpeech, inflection)\r\n\r\n    if (inflection.constraints.implemented && !inflection.constraints.paradigmBased) {\r\n      // Set match features data\r\n      /*\r\n      Check if inflection if full form based if `fullFormBased` flag is set\r\n      (i.e. inflection model knows it can be full form based)\r\n      or if no other flags are set (we don't know what type of inflection it is and want to check all to figure out).\r\n       */\r\n\r\n      if (inflection.constraints.fullFormBased || !inflection.constraints.suffixBased) {\r\n        /*\r\n          If we don't know what inflection is based upon, let's assume\r\n          this inflection is full form based and let's try to find matching forms.\r\n          For this, we need set a `fullFormBased` flag on inflection temporarily\r\n          and clear it if no matching forms are found (because it cannot be based on full forms then).\r\n          This flag is required for matcher to compare full forms, not suffixes.\r\n          */\r\n        inflection.constraints.fullFormBased = true\r\n        // TODO: This is done for almost every word and it does scan across many items. Need to optimize\r\n        const hasMatchingForms = this.hasMatchingForms(partOfSpeech, inflection)\r\n        if (hasMatchingForms) {\r\n          // inflection.constraints.suffixBased = false // Enable this to not show regular tables for form-based words\r\n        } else {\r\n          // This cannot be a full form based inflection\r\n          inflection.constraints.fullFormBased = false\r\n        }\r\n      }\r\n\r\n      /*\r\n        If we did not figure out what type of inflection it is,\r\n        then it is probably suffix based as this type is more prevalent\r\n        */\r\n      if (!inflection.constraints.fullFormBased && !inflection.constraints.paradigmBased) {\r\n        // If it is not full form based, then probably it is suffix base\r\n        inflection.constraints.suffixBased = true\r\n      }\r\n    }\r\n    return inflection\r\n  }\r\n\r\n  /**\r\n   * Build a map of inflections keyed by part of speech.\r\n   * Lexemes in homonym are sorted by a morph adapter, and we will rely on that sort order.\r\n   * An order of part of speech keys determines an order of parts of speech in the output.\r\n   * An order of inflections within a part of speech will be determined by an order of\r\n   * inflection table views within a ViewSet object.\r\n   * @deprecated Will be removed when will have no usages\r\n   * @param {Homonym} homonym - A homonym containing lexemes with inflections\r\n   * @return {Map<{string}, {Inflection[]}>} Maps on array of inflections to a part of speech\r\n   */\r\n  groupInflections (homonym) {\r\n    let inflections = new Map() // eslint-disable-line prefer-const\r\n    for (const lexeme of homonym.lexemes) {\r\n      for (let inflection of lexeme.inflections) {\r\n        inflection = this.setInflectionData(inflection, lexeme.lemma)\r\n        const pofsValue = inflection[Feature.types.part].value\r\n        if (!inflections.has(pofsValue)) { inflections.set(pofsValue, []) }\r\n        inflections.get(pofsValue).push(inflection)\r\n      }\r\n    }\r\n    return inflections\r\n  }\r\n\r\n  /**\r\n   * In order to use morphemes with Vue.js, each morpheme in a table has to be unique.\r\n   * However, a if morpheme has a feature with multiple values, that same morpheme will be\r\n   * included into multiple inflection table cells.\r\n   * To avoid that, we need to replace a single morpheme with multiple values of a feature by\r\n   * multiple morphemes each having features with single value only.\r\n   * @param {Suffix[]|Form[]|Paradigm[]} morphemes - An array of morpheme that might have features with multiple values\r\n   * @return {Suffix[]|Form[]|Paradigm[]} An array of morphemes where all features have single values\r\n   */\r\n  static splitMultiValMorphems (morphemes) {\r\n    let result = [] // eslint-disable-line prefer-const\r\n    for (const morpheme of morphemes) {\r\n      let multivalFeatures = [] // eslint-disable-line prefer-const\r\n      for (const featureName of Object.keys(morpheme.features)) {\r\n        if (morpheme.features[featureName].isMultiple) {\r\n          multivalFeatures.push(morpheme.features[featureName])\r\n        }\r\n      }\r\n\r\n      if (multivalFeatures.length > 0) {\r\n        result.push(...morpheme.split(multivalFeatures))\r\n      } else {\r\n        result.push(morpheme)\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Creates an inflection set filled with inflection data.\r\n   * @param {string} pofsValue - A part of speech of the inflection set.\r\n   * @param {Inflection[]} inflections - An array of inflections.\r\n   * @param {Object} options - Matcher options, see `matcher()` for more details.\r\n   * @return {InflectionSet} Constructed inflection set.\r\n   */\r\n  createInflectionSet (pofsValue, inflections, options) {\r\n    let inflectionSet = new InflectionSet(pofsValue, this.languageID) // eslint-disable-line prefer-const\r\n\r\n    inflectionSet.inflections = inflections.filter(i => i.constraints.implemented === true)\r\n    inflectionSet.isImplemented = inflectionSet.inflections.length > 0\r\n\r\n    if (inflectionSet.isImplemented) {\r\n      const sourceSet = this.pos.get(pofsValue)\r\n      if (!sourceSet) {\r\n        // There is no source data for this part of speech\r\n        Logger.getInstance().warn(`There is no source data for the following part of speech: ${pofsValue}`)\r\n        return inflectionSet\r\n      }\r\n\r\n      /*\r\n        There might be cases when we don't know beforehand if an inflection is form based.\r\n        In this case, if `fullFormBased` constraint not set, we'll try to find matching forms within a source data.\r\n        If any found, `fullFormBased` constraint will be set to true.\r\n      */\r\n\r\n      // If at least one inflection in a group has a constraint, we'll search for data based on that criteria\r\n      const suffixBased = inflections.some(i => i.constraints.suffixBased)\r\n      const formBased = inflections.some(i => i.constraints.fullFormBased)\r\n\r\n      // Check for suffix matches\r\n      if (suffixBased) {\r\n        if (sourceSet.types.has(Suffix)) {\r\n          const items = sourceSet.types.get(Suffix).items.reduce(this.reducerGen(inflectionSet.inflections, options), [])\r\n          if (items.length > 0) {\r\n            inflectionSet.addInflectionItems(items)\r\n          }\r\n        }\r\n      }\r\n\r\n      // If there is at least on full form based inflection, search for full form items\r\n      if (formBased) {\r\n        // Match against form based inflection only\r\n        const formInflections = inflectionSet.inflections.filter(i => i.constraints.fullFormBased)\r\n        const items = sourceSet.types.get(Form).items.reduce(this.reducerGen(formInflections, options), [])\r\n        if (items.length > 0) {\r\n          inflectionSet.addInflectionItems(items)\r\n        }\r\n      }\r\n\r\n      this.createInflectionSetFootnote(inflectionSet, sourceSet)\r\n    }\r\n    return inflectionSet\r\n  }\r\n\r\n  createInflectionSetFootnote (inflectionSet, sourceSet) {\r\n    // Add footnotes\r\n    if (inflectionSet.hasTypes) {\r\n      const finalSourceSet = sourceSet\r\n      for (const inflectionType of inflectionSet.inflectionTypes) {\r\n        const footnotesSource = finalSourceSet.types.get(inflectionType).footnotesMap\r\n        const footnotesInUse = inflectionSet.types.get(inflectionType).footnotesInUse\r\n        for (const footnote of footnotesSource.values()) {\r\n          if (footnotesInUse.includes(footnote.index)) {\r\n            inflectionSet.addFootnote(inflectionType, footnote.index, footnote)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated Will be removed when will have no usages\r\n   * @param homonym\r\n   * @return {InflectionData}\r\n   */\r\n  getInflectionData (homonym) {\r\n    // Add support for languages\r\n    let result = new InflectionData(homonym) // eslint-disable-line prefer-const\r\n    const inflections = this.groupInflections(homonym)\r\n\r\n    // Scan for matches for all parts of speech separately\r\n    for (const [pofsValue, inflectionsGroup] of inflections.entries()) {\r\n      const inflectionSet = this.createInflectionSet(pofsValue, inflectionsGroup)\r\n      result.addInflectionSet(inflectionSet)\r\n    }\r\n    return result\r\n  }\r\n\r\n  hasMatchingForms (partOfSpeech, inflection) {\r\n    if (this.pos.has(partOfSpeech)) {\r\n      const inflectionSet = this.pos.get(partOfSpeech)\r\n\r\n      if (inflectionSet.types.has(Form)) {\r\n        return inflectionSet.types.get(Form).items.find(item => this.matcher([inflection], item, { findMatches: false })) !== undefined\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  reducerGen (inflections, options) {\r\n    const instance = this\r\n    function reducerFn (accumulator, item) {\r\n      const result = instance.matcher(inflections, item, options)\r\n      if (result) {\r\n        accumulator.push(result)\r\n      }\r\n      return accumulator\r\n    }\r\n    return reducerFn.bind(this)\r\n  }\r\n\r\n  /**\r\n   * Decides whether a suffix is a match to any of inflections, and if it is, what type of match it is.\r\n   * @param {Inflection[]} inflections - an array of inflection objects to be matched against a suffix.\r\n   * @param {Suffix} item - a suffix to be matched with inflections.\r\n   * @param {Object} options - An options object that may contain the following properties:\r\n   *        findMatches - whether to find form, suffix, and morphology matches. Default: true\r\n   *        findMorphologyMatches - whether to find morphology matches. If set, overrides values set by `findMatches`\r\n   * @returns {Suffix | null} if a match is found, returns a suffix object modified with some\r\n   * additional information about a match. if no matches found, returns null.\r\n   */\r\n  matcher (inflections, item, options = {}) {\r\n    if (!options.hasOwnProperty('findMatches')) { // eslint-disable-line no-prototype-builtins\r\n      options.findMatches = true // Default value\r\n    }\r\n    if (!options.hasOwnProperty('findMorphologyMatches')) { // eslint-disable-line no-prototype-builtins\r\n      // If not specified explicitly, will be controlled by `findMatches` value\r\n      options.findMorphologyMatches = options.findMatches // Default value\r\n    }\r\n    // Any of those features must match between an inflection and an ending\r\n    let bestMatchData = null // information about the best match we would be able to find\r\n\r\n    /*\r\n     There can be only one full match between an inflection and a suffix (except when suffix has multiple values?)\r\n     But there could be multiple partial matches. So we should try to find the best match possible and return it.\r\n     a fullFeature match is when one of inflections has all grammatical features fully matching those of a suffix\r\n     */\r\n\r\n    for (const inflection of inflections) {\r\n      // Create a match profile\r\n      let matchData = new MatchData() // eslint-disable-line prefer-const\r\n      if (options.findMatches) {\r\n        matchData.suffixMatch = inflection.smartWordCompare(item.value, item.constructor.name, { fuzzySuffix: true })\r\n      }\r\n      // Check for obligatory matches\r\n      const obligatoryMatches = this.constructor.getObligatoryMatches(inflection, item, Morpheme.comparisonTypes.PARTIAL)\r\n      if (obligatoryMatches.fullMatch) {\r\n        matchData.matchedFeatures.push(...obligatoryMatches.matchedItems)\r\n      } else {\r\n        // If obligatory features do not match, there is no reason to do other tests on this inflection\r\n        // continue to the next one\r\n        continue\r\n      }\r\n\r\n      /*\r\n      Check for optional matches. Use `All_VALUES` matching algorithm\r\n      as multiple values in inflection and morpheme can go in different order.\r\n       */\r\n      const optionalMatches = this.constructor.getOptionalMatches(inflection, item, Morpheme.comparisonTypes.PARTIAL)\r\n      matchData.matchedFeatures.push(...optionalMatches.matchedItems)\r\n\r\n      if (options.findMorphologyMatches) {\r\n        const morphologyMatches = this.constructor.getMorphologyMatches(inflection, item, Morpheme.comparisonTypes.PARTIAL)\r\n        matchData.morphologyMatch = morphologyMatches.fullMatch\r\n      } else {\r\n        matchData.morphologyMatch = false\r\n      }\r\n\r\n      if (matchData.suffixMatch && obligatoryMatches.fullMatch && optionalMatches.fullMatch) {\r\n        // This is a full match\r\n        matchData.fullMatch = true\r\n\r\n        // There can be only one full match, no need to search any further\r\n        if (options.findMatches) {\r\n          item.match = matchData\r\n        }\r\n        return item\r\n      }\r\n      bestMatchData = this.bestMatch(bestMatchData, matchData)\r\n    }\r\n\r\n    if (bestMatchData) {\r\n      // There is some match found\r\n      if (options.findMatches) {\r\n        item.match = bestMatchData\r\n      }\r\n      return item\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Decides whether matchA is 'better' (i.e. has more items matched) than matchB or not\r\n   * @param {MatchData} matchA\r\n   * @param {MatchData} matchB\r\n   * @returns {MatchData} A best of two matches\r\n   */\r\n  bestMatch (matchA, matchB) {\r\n    // If one of the arguments is not set, return the other one\r\n    if (!matchA && matchB) {\r\n      return matchB\r\n    }\r\n\r\n    if (!matchB && matchA) {\r\n      return matchA\r\n    }\r\n\r\n    // item match has a priority\r\n    if (matchA.suffixMatch !== matchB.suffixMatch) {\r\n      if (matchA.suffixMatch > matchB.suffixMatch) {\r\n        return matchA\r\n      } else {\r\n        return matchB\r\n      }\r\n    }\r\n\r\n    // If same on suffix matche, compare by how many features matched\r\n    if (matchA.matchedFeatures.length >= matchB.matchedFeatures.length) {\r\n      // Arbitrarily return matchA if matches are the same\r\n      return matchA\r\n    } else {\r\n      return matchB\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether a word in an inflection is irregular or not.\r\n   * @param {Inflection} inflection - Inflection to be checked.\r\n   * @return {boolean} - True if the word is irregular, false otherwise.\r\n   */\r\n  isIrregular (inflection) {\r\n    return false\r\n  }\r\n}\r\n","/**\r\n * Detailed information about a match type.\r\n */\r\nexport default class MatchData {\r\n  constructor () {\r\n    this.suffixMatch = false // Whether two suffixes are the same.\r\n    this.formMatch = false // Whether two forms of the word are the same\r\n    this.fullMatch = false // Whether two suffixes and all grammatical features, including part of speech, are the same.\r\n    this.morphologyMatch = false // Whether all morphological features are the same\r\n    this.matchedFeatures = [] // How many features matches each other.\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    let matchData = new MatchData() // eslint-disable-line prefer-const\r\n    matchData.suffixMatch = jsonObject.suffixMatch\r\n    matchData.fullMatch = jsonObject.fullMatch\r\n    for (const feature of jsonObject.matchedFeatures) {\r\n      matchData.matchedFeatures.push(feature)\r\n    }\r\n    return matchData\r\n  }\r\n\r\n  toString () {\r\n    return `MatchData: suffixMatch: ${this.suffixMatch}, formMatch: ${this.formMatch}, fullMatch: ${this.fullMatch}, morphologyMatch: ${this.morphologyMatch},` +\r\n      ` matchedFeatures: [${this.matchedFeatures}]`\r\n  }\r\n}\r\n","import { Feature, Logger } from 'alpheios-data-models'\r\nimport InflectionList from './inflection-list.js'\r\nimport MatchData from './match-data'\r\nimport ExtendedLanguageData from './extended-language-data'\r\nimport uuidv4 from 'uuid/v4'\r\n\r\n/**\r\n * Suffix is an ending of a word with none or any grammatical features associated with it.\r\n * Features are stored in properties whose names are type of a grammatical feature (i.e. case, gender, etc.)\r\n * Each feature can have a single or multiple values associated with it (i.e. gender can be either 'masculine',\r\n * a single value, or 'masculine' and 'feminine'. That's why all values are stored in an array.\r\n */\r\nexport default class Morpheme {\r\n  /**\r\n   * Initializes a Suffix object.\r\n   * @param {string | null} morphemeValue - A suffix text or null if suffix is empty.\r\n   */\r\n  constructor (morphemeValue) {\r\n    if (morphemeValue === undefined) {\r\n      throw new Error('Morpheme value should not be empty.')\r\n    }\r\n    this.id = uuidv4()\r\n    this.value = morphemeValue\r\n    this.features = {}\r\n    this.featureGroups = {}\r\n\r\n    /*\r\n    Extended language data stores additional suffix information that is specific for a particular language.\r\n    It uses the following schema:\r\n    {string} language(key): {object} extended language data. This object is specific for each language\r\n    and is defined in a language model.\r\n     */\r\n    this.extendedLangData = {}\r\n    this.match = undefined\r\n\r\n    /**\r\n     * @type {Footnote[]}\r\n     */\r\n    this.footnotes = []\r\n  }\r\n\r\n  /**\r\n   * Creates a list of items of the same type as self\r\n   * @return {InflectionList}\r\n   */\r\n  static createList () {\r\n    return new InflectionList(this)\r\n  }\r\n\r\n  static get comparisonTypes () {\r\n    return {\r\n      /**\r\n       * Should have the same number of values. Every value should match its counterpart's value and its order.\r\n       */\r\n      EXACT: 'Exact Match',\r\n      /**\r\n       * Should have the same number of values. Every value should match a value of its counterpart.\r\n       * Same as `EXACT`, but does not compare value's order.\r\n       */\r\n      ALL_VALUES: 'All values',\r\n      /**\r\n       * At least one value between two features should be the same.\r\n       */\r\n      PARTIAL: 'Partial Match'\r\n    }\r\n  }\r\n\r\n  get hasFootnotes () {\r\n    return Boolean(this.footnotes.length)\r\n  }\r\n\r\n  static readObject (jsonObject) {\r\n    let suffix = new this(jsonObject.value) // eslint-disable-line prefer-const\r\n\r\n    if (jsonObject.features) {\r\n      for (const key in jsonObject.features) {\r\n        if (jsonObject.features.hasOwnProperty(key)) { // eslint-disable-line no-prototype-builtins\r\n          suffix.features[key] = jsonObject.features[key]\r\n        }\r\n      }\r\n    }\r\n\r\n    if (jsonObject.featureGroups) {\r\n      for (const key in jsonObject.featureGroups) {\r\n        if (jsonObject.featureGroups.hasOwnProperty(key)) { // eslint-disable-line no-prototype-builtins\r\n          suffix.featureGroups[key] = []\r\n          for (const value of jsonObject.featureGroups[key]) {\r\n            suffix.featureGroups[key].push(value)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (jsonObject[Feature.types.footnote]) {\r\n      suffix[Feature.types.footnote] = []\r\n      for (const footnote of jsonObject[Feature.types.footnote]) {\r\n        suffix[Feature.types.footnote].push(footnote)\r\n      }\r\n    }\r\n\r\n    if (jsonObject.match) {\r\n      suffix.match = MatchData.readObject(jsonObject.match)\r\n    }\r\n\r\n    for (const lang in jsonObject.extendedLangData) {\r\n      if (jsonObject.extendedLangData.hasOwnProperty(lang)) { // eslint-disable-line no-prototype-builtins\r\n        suffix.extendedLangData[lang] = ExtendedLanguageData.readObject(jsonObject.extendedLangData[lang])\r\n      }\r\n    }\r\n    return suffix\r\n  }\r\n\r\n  /**\r\n   * Returns a copy of itself. Used in splitting suffixes with multi-value features.\r\n   * @returns {Suffix}\r\n   */\r\n  clone () {\r\n    // TODO: do all-feature two-level cloning\r\n    let clone = new this.constructor(this.value) // eslint-disable-line prefer-const\r\n    for (const key in this.features) {\r\n      if (this.features.hasOwnProperty(key)) { // eslint-disable-line no-prototype-builtins\r\n        clone.features[key] = this.features[key]\r\n      }\r\n    }\r\n    for (const key in this.featureGroups) {\r\n      if (this.featureGroups.hasOwnProperty(key)) { // eslint-disable-line no-prototype-builtins\r\n        clone.featureGroups[key] = this.featureGroups[key]\r\n      }\r\n    }\r\n\r\n    if (this[Feature.types.footnote]) {\r\n      clone[Feature.types.footnote] = this[Feature.types.footnote]\r\n    }\r\n\r\n    if (this.match) {\r\n      clone.match = this.match\r\n    }\r\n\r\n    clone.footnotes.push(...this.footnotes)\r\n\r\n    for (const lang in this.extendedLangData) {\r\n      if (this.extendedLangData.hasOwnProperty(lang)) { // eslint-disable-line no-prototype-builtins\r\n        clone.extendedLangData[lang] = this.extendedLangData[lang]\r\n      }\r\n    }\r\n    return clone\r\n  }\r\n\r\n  /**\r\n   * Checks if a morpheme has at least one common feature value with a `feature`.\r\n   * @param {Feature} feature - A feature we need to match with the ones stored inside the morpheme object.\r\n   * @param {Morpheme.comparisonTypes} comparisonType - What matching algorithm to use (exact or partial).\r\n   * @returns {boolean} - True if a `feature` has at least one value in common with a morpheme, false otherwise.\r\n   */\r\n  featureMatch (feature, comparisonType) {\r\n    const matchingValues = this.matchingValues(feature, comparisonType)\r\n    return matchingValues.length > 0\r\n  }\r\n\r\n  /**\r\n   * Returns a list of values that are the same between a morpheme and a comparisonFeature.\r\n   * Both morpheme and a comparisonFeature can have either single or multiple values.\r\n   * A match is found if morpheme has one or several values of a comparisonFeature.\r\n   * @param {Feature} comparisonFeature - A feature morpheme should be compared with.\r\n   * @param {Morpheme.comparisonTypes} comparisonType - What matching algorithm to use (exact or partial).\r\n   * An exact match requires all values of this and comparison features to be the same. This and comparison\r\n   * features should also have the same number and order of values.\r\n   * A partial match requires this and comparison features to have at least one intersecting feature value.\r\n   * @return {string[]} A list of matching feature values\r\n   */\r\n  matchingValues (comparisonFeature, comparisonType = Morpheme.comparisonTypes.EXACT) {\r\n    let matches = [] // eslint-disable-line prefer-const\r\n\r\n    if (comparisonFeature && this.features.hasOwnProperty(comparisonFeature.type)) { // eslint-disable-line no-prototype-builtins\r\n      const morphemeValue = this.features[comparisonFeature.type]\r\n\r\n      if (comparisonType === Morpheme.comparisonTypes.EXACT) {\r\n        // Match all values and their order\r\n        if (morphemeValue.value === comparisonFeature.value) {\r\n          matches.push(comparisonFeature.value)\r\n        }\r\n      } else if (comparisonType === Morpheme.comparisonTypes.ALL_VALUES) {\r\n        // Match all values between themselves, ignore order\r\n        let match = true\r\n        for (const value of morphemeValue.values) {\r\n          match = match && comparisonFeature.values.includes(value)\r\n        }\r\n        if (match) {\r\n          matches.push(comparisonFeature.value)\r\n        }\r\n      } else if (comparisonType === Morpheme.comparisonTypes.PARTIAL) {\r\n        // At least one value should be the same\r\n        for (const cfValue of comparisonFeature.values) {\r\n          if (morphemeValue.values.includes(cfValue)) {\r\n            matches.push(cfValue)\r\n          }\r\n        }\r\n      } else {\r\n        Logger.getInstance().warn(`Comparison type \"${comparisonType}\" is not supported`)\r\n      }\r\n    }\r\n\r\n    return matches\r\n  }\r\n\r\n  /**\r\n   * Find feature groups in Suffix.featureGroups that are the same between suffixes provided\r\n   * @param suffixes\r\n   */\r\n  static getCommonGroups (suffixes) {\r\n    const features = Object.keys(suffixes[0].featureGroups)\r\n\r\n    const commonGroups = features.filter(feature => {\r\n      let result = true\r\n      for (let i = 1; i < suffixes.length; i++) {\r\n        result = result && suffixes[i].features.hasOwnProperty(feature) // eslint-disable-line no-prototype-builtins\r\n      }\r\n      return result\r\n    })\r\n    return commonGroups\r\n  }\r\n\r\n  /**\r\n   * Finds out if an suffix is in the same group with some other suffix. The other suffix is provided as a function argument.\r\n   * Two suffixes are considered to be in the same group if they are:\r\n   * a. Have at least one common group in featureGroups;\r\n   * b. Have the same suffix\r\n   * c. Have values of all features the same except for those that belong to a common group(s)\r\n   * d. Values of the common group features must be complementary. Here is an example:\r\n   * Let's say a 'gender' group can have values such as 'masculine' and 'feminine'. Then suffixes will be combined\r\n   * only if gender value of one suffix is 'masculine' and the other value is 'feminine'. If both suffixes have the same\r\n   * either 'masculine' or 'feminine' value, they sill not be combined as are not being complementary.\r\n   * @param {Suffix} suffix - An other suffix that we compare this suffix with.\r\n   * @returns {boolean} - True if both suffixes are in the same group, false otherwise.\r\n   */\r\n  isInSameGroupWith (suffix) {\r\n    const commonGroups = Morpheme.getCommonGroups([this, suffix])\r\n    if (commonGroups.length < 1) {\r\n      // If elements do not have common groups in Suffix.featureGroups then they are not in the same group\r\n      return false\r\n    }\r\n\r\n    let commonValues = {} // eslint-disable-line prefer-const\r\n    commonGroups.forEach((feature) => { commonValues[feature] = new Set([this.features[feature]]) })\r\n\r\n    let result = true\r\n    result = result && this.value === suffix.value\r\n    // If suffixes does not match don't check any further\r\n    if (!result) {\r\n      return false\r\n    }\r\n\r\n    // Check all features to be a match, except those that are possible group values\r\n    for (const feature of Object.keys(this.features)) {\r\n      if (commonGroups.indexOf(feature) >= 0) {\r\n        commonValues[feature].add(suffix.features[feature])\r\n        // Do not compare common groups\r\n        continue\r\n      }\r\n\r\n      result = result && this.features[feature] === suffix.features[feature]\r\n      // If feature mismatch discovered, do not check any further\r\n      if (!result) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    commonGroups.forEach(feature => {\r\n      result = result && commonValues[feature].size === 2\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Splits a morpheme that has multiple values of one or more grammatical features into an array of Morpheme objects\r\n   * with each Morpheme object having only a single value of those grammatical features. Initial multiple values\r\n   * are stored in a featureGroups[featureType] property as an array of values.\r\n   * @param {Feature[]} features - Multiple grammatical feature values.\r\n   * @param {number} level - Iteration level for recursive call tracking.\r\n   * @returns {Morpheme[]} - An array of morphemes.\r\n   */\r\n  split (features, level = 0) {\r\n    // TODO: Not tested for multiple features (as there were no such cases yet)\r\n    let morphemes = [] // eslint-disable-line prefer-const\r\n    const currentFeature = features[level]\r\n    for (const value of currentFeature.values) {\r\n      if (level < features.length - 1) {\r\n        const splitted = this.splitByFeature(features, level + 1)\r\n        for (let morpheme of splitted) { // eslint-disable-line prefer-const\r\n          morpheme.features[currentFeature.type] = currentFeature.createFeature(value)\r\n          morpheme.featureGroups[currentFeature.type] = currentFeature.values\r\n          morphemes.push(morpheme)\r\n        }\r\n      } else {\r\n        // The last level\r\n        let copy = this.clone() // eslint-disable-line prefer-const\r\n        copy.features[currentFeature.type] = currentFeature.createFeature(value)\r\n        copy.featureGroups[currentFeature.type] = currentFeature.values\r\n        morphemes.push(copy)\r\n      }\r\n    }\r\n    return morphemes\r\n  }\r\n\r\n  /**\r\n   * Combines suffixes that are in the same group together. Suffixes to be combined must have their values listed\r\n   * in an array stored as featureGroups[featureType] property.\r\n   * @param {Suffix[]} suffixes - An array of suffixes to be combined.\r\n   * @param {function} mergeFunction - A function that will merge two suffixes. By default it uses Suffix.merge,\r\n   * but provides a way to supply a presentation specific functions. Please see Suffix.merge for more\r\n   * information on function format.\r\n   * @returns {Suffix[]} An array of suffixes with some items possibly combined together.\r\n   */\r\n  static combine (suffixes, mergeFunction = Morpheme.merge) {\r\n    let matchFound = false\r\n    let matchIdx\r\n\r\n    do {\r\n      matchFound = false\r\n\r\n      /*\r\n      Go through an array of suffixes end compare each suffix with each other (two-way compare) one time. \\\r\n      If items are in the same group, merge two suffixes, break out of a loop,\r\n      and remove one matching suffix (the second one) from an array.\r\n      Then repeat on a modified array until no further matches found.\r\n       */\r\n      for (let i = 0; i < suffixes.length; i++) {\r\n        if (matchFound) {\r\n          continue\r\n        }\r\n        for (let j = i + 1; j < suffixes.length; j++) {\r\n          if (suffixes[i].isInSameGroupWith(suffixes[j])) {\r\n            matchIdx = j\r\n            matchFound = true\r\n            mergeFunction(suffixes[i], suffixes[j])\r\n          }\r\n        }\r\n      }\r\n\r\n      if (matchFound) {\r\n        suffixes.splice(matchIdx, 1)\r\n      }\r\n    }\r\n    while (matchFound)\r\n    return suffixes\r\n  }\r\n\r\n  /**\r\n   * This function provide a logic of to merge data of two suffix object that were previously split together.\r\n   * @param {Suffix} suffixA - A first of two suffixes to merge (to be returned).\r\n   * @param {Suffix} suffixB - A second ending to merge (to be discarded).\r\n   * @returns {Suffix} A modified value of ending A.\r\n   */\r\n  static merge (suffixA, suffixB) {\r\n    const commonGroups = Morpheme.getCommonGroups([suffixA, suffixB])\r\n    for (const type of commonGroups) {\r\n      // Combine values using a comma separator. Can do anything else if we need to.\r\n      suffixA.features[type] = suffixA.features[type] + ', ' + suffixB.features[type]\r\n    }\r\n    return suffixA\r\n  }\r\n\r\n  toString () {\r\n    let string = `${this.constructor.name} value: ${this.value}, id: ${this.id}\\n  features:  `\r\n    for (const [feature, value] of Object.entries(this.features)) {\r\n      string += `${feature}: ${value.value}, `\r\n    }\r\n    if (this.match) { string += `\\n  ${this.match}` }\r\n    return string\r\n  }\r\n}\r\n","import Morpheme from './morpheme.js'\r\n\r\nexport default class Suffix extends Morpheme {\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport Paradigm from '@/paradigm/lib/paradigm.js'\r\n\r\n// Verb paradigm tables\r\nimport paradigm01 from '@/paradigm/data/greek/verb/tables/paradigm-01.json'\r\nimport paradigm02 from '@/paradigm/data/greek/verb/tables/paradigm-02.json'\r\nimport paradigm03 from '@/paradigm/data/greek/verb/tables/paradigm-03.json'\r\nimport paradigm04 from '@/paradigm/data/greek/verb/tables/paradigm-04.json'\r\nimport paradigm05 from '@/paradigm/data/greek/verb/tables/paradigm-05.json'\r\nimport paradigm06 from '@/paradigm/data/greek/verb/tables/paradigm-06.json'\r\nimport paradigm07 from '@/paradigm/data/greek/verb/tables/paradigm-07.json'\r\nimport paradigm08 from '@/paradigm/data/greek/verb/tables/paradigm-08.json'\r\nimport paradigm09 from '@/paradigm/data/greek/verb/tables/paradigm-09.json'\r\nimport paradigm10 from '@/paradigm/data/greek/verb/tables/paradigm-10.json'\r\nimport paradigm11 from '@/paradigm/data/greek/verb/tables/paradigm-11.json'\r\nimport paradigm12 from '@/paradigm/data/greek/verb/tables/paradigm-12.json'\r\nimport paradigm13 from '@/paradigm/data/greek/verb/tables/paradigm-13.json'\r\nimport paradigm14 from '@/paradigm/data/greek/verb/tables/paradigm-14.json'\r\nimport paradigm15 from '@/paradigm/data/greek/verb/tables/paradigm-15.json'\r\nimport paradigm16 from '@/paradigm/data/greek/verb/tables/paradigm-16.json'\r\nimport paradigm17 from '@/paradigm/data/greek/verb/tables/paradigm-17.json'\r\nimport paradigm17b from '@/paradigm/data/greek/verb/tables/paradigm-17b.json'\r\nimport paradigm17c from '@/paradigm/data/greek/verb/tables/paradigm-17c.json'\r\nimport paradigm18 from '@/paradigm/data/greek/verb/tables/paradigm-18.json'\r\nimport paradigm19 from '@/paradigm/data/greek/verb/tables/paradigm-19.json'\r\nimport paradigm20 from '@/paradigm/data/greek/verb/tables/paradigm-20.json'\r\nimport paradigm21 from '@/paradigm/data/greek/verb/tables/paradigm-21.json'\r\nimport paradigm22 from '@/paradigm/data/greek/verb/tables/paradigm-22.json'\r\nimport paradigm23 from '@/paradigm/data/greek/verb/tables/paradigm-23.json'\r\nimport paradigm24 from '@/paradigm/data/greek/verb/tables/paradigm-24.json'\r\nimport paradigm25 from '@/paradigm/data/greek/verb/tables/paradigm-25.json'\r\nimport paradigm26 from '@/paradigm/data/greek/verb/tables/paradigm-26.json'\r\nimport paradigm27 from '@/paradigm/data/greek/verb/tables/paradigm-27.json'\r\nimport paradigm28 from '@/paradigm/data/greek/verb/tables/paradigm-28.json'\r\nimport paradigm29 from '@/paradigm/data/greek/verb/tables/paradigm-29.json'\r\nimport paradigm30 from '@/paradigm/data/greek/verb/tables/paradigm-30.json'\r\nimport paradigm31 from '@/paradigm/data/greek/verb/tables/paradigm-31.json'\r\nimport paradigm32 from '@/paradigm/data/greek/verb/tables/paradigm-32.json'\r\nimport paradigm33 from '@/paradigm/data/greek/verb/tables/paradigm-33.json'\r\nimport paradigm34 from '@/paradigm/data/greek/verb/tables/paradigm-34.json'\r\nimport paradigm35 from '@/paradigm/data/greek/verb/tables/paradigm-35.json'\r\nimport paradigm36 from '@/paradigm/data/greek/verb/tables/paradigm-36.json'\r\nimport paradigm37 from '@/paradigm/data/greek/verb/tables/paradigm-37.json'\r\nimport paradigm38 from '@/paradigm/data/greek/verb/tables/paradigm-38.json'\r\nimport paradigm39 from '@/paradigm/data/greek/verb/tables/paradigm-39.json'\r\nimport paradigm40 from '@/paradigm/data/greek/verb/tables/paradigm-40.json'\r\nimport paradigm41 from '@/paradigm/data/greek/verb/tables/paradigm-41.json'\r\nimport paradigm42 from '@/paradigm/data/greek/verb/tables/paradigm-42.json'\r\nimport paradigm43 from '@/paradigm/data/greek/verb/tables/paradigm-43.json'\r\nimport paradigm43b from '@/paradigm/data/greek/verb/tables/paradigm-43b.json'\r\nimport paradigm44 from '@/paradigm/data/greek/verb/tables/paradigm-44.json'\r\nimport paradigm45 from '@/paradigm/data/greek/verb/tables/paradigm-45.json'\r\nimport paradigm46 from '@/paradigm/data/greek/verb/tables/paradigm-46.json'\r\nimport paradigm47 from '@/paradigm/data/greek/verb/tables/paradigm-47.json'\r\nimport paradigm48 from '@/paradigm/data/greek/verb/tables/paradigm-48.json'\r\nimport paradigm49 from '@/paradigm/data/greek/verb/tables/paradigm-49.json'\r\nimport paradigm50 from '@/paradigm/data/greek/verb/tables/paradigm-50.json'\r\nimport paradigm51 from '@/paradigm/data/greek/verb/tables/paradigm-51.json'\r\nimport paradigm52 from '@/paradigm/data/greek/verb/tables/paradigm-52.json'\r\nimport paradigm53 from '@/paradigm/data/greek/verb/tables/paradigm-53.json'\r\n// Verb paradigm rules and footnotes\r\nimport verbParadigmRulesCSV from '@/paradigm/data/greek/verb/rules.csv'\r\nimport verbParadigmFootnotesCSV from '@/paradigm/data/greek/verb/footnotes.csv'\r\n\r\n// Verb participle paradigm tables\r\nimport paradigm54 from '@/paradigm/data/greek/verb-participle/tables/paradigm-54.json'\r\nimport paradigm55 from '@/paradigm/data/greek/verb-participle/tables/paradigm-55.json'\r\nimport paradigm56 from '@/paradigm/data/greek/verb-participle/tables/paradigm-56.json'\r\nimport paradigm57 from '@/paradigm/data/greek/verb-participle/tables/paradigm-57.json'\r\nimport paradigm58 from '@/paradigm/data/greek/verb-participle/tables/paradigm-58.json'\r\nimport paradigm59 from '@/paradigm/data/greek/verb-participle/tables/paradigm-59.json'\r\nimport paradigm60 from '@/paradigm/data/greek/verb-participle/tables/paradigm-60.json'\r\nimport paradigm61 from '@/paradigm/data/greek/verb-participle/tables/paradigm-61.json'\r\nimport paradigm62 from '@/paradigm/data/greek/verb-participle/tables/paradigm-62.json'\r\nimport paradigm63 from '@/paradigm/data/greek/verb-participle/tables/paradigm-63.json'\r\nimport paradigm64 from '@/paradigm/data/greek/verb-participle/tables/paradigm-64.json'\r\nimport paradigm65 from '@/paradigm/data/greek/verb-participle/tables/paradigm-65.json'\r\nimport paradigm66 from '@/paradigm/data/greek/verb-participle/tables/paradigm-66.json'\r\n// Verb participle rules\r\nimport verbParticipleParadigmRulesCSV from '@/paradigm/data/greek/verb-participle/rules.csv'\r\n\r\n// Noun paradigm tables\r\nimport paradigmNoun1 from '@/paradigm/data/greek/noun/tables/paradigm-noun-1.json'\r\nimport paradigmNoun2 from '@/paradigm/data/greek/noun/tables/paradigm-noun-2.json'\r\nimport paradigmNoun3 from '@/paradigm/data/greek/noun/tables/paradigm-noun-3.json'\r\nimport paradigmNoun4 from '@/paradigm/data/greek/noun/tables/paradigm-noun-4.json'\r\nimport paradigmNoun5 from '@/paradigm/data/greek/noun/tables/paradigm-noun-5.json'\r\nimport paradigmNoun6 from '@/paradigm/data/greek/noun/tables/paradigm-noun-6.json'\r\nimport paradigmNoun7 from '@/paradigm/data/greek/noun/tables/paradigm-noun-7.json'\r\nimport paradigmNoun8 from '@/paradigm/data/greek/noun/tables/paradigm-noun-8.json'\r\nimport paradigmNoun9 from '@/paradigm/data/greek/noun/tables/paradigm-noun-9.json'\r\nimport paradigmNoun10 from '@/paradigm/data/greek/noun/tables/paradigm-noun-10.json'\r\nimport paradigmNoun11 from '@/paradigm/data/greek/noun/tables/paradigm-noun-11.json'\r\nimport paradigmNoun12 from '@/paradigm/data/greek/noun/tables/paradigm-noun-12.json'\r\nimport paradigmNoun13 from '@/paradigm/data/greek/noun/tables/paradigm-noun-13.json'\r\nimport paradigmNoun14 from '@/paradigm/data/greek/noun/tables/paradigm-noun-14.json'\r\nimport paradigmNoun15 from '@/paradigm/data/greek/noun/tables/paradigm-noun-15.json'\r\nimport paradigmNoun16 from '@/paradigm/data/greek/noun/tables/paradigm-noun-16.json'\r\nimport paradigmNoun17 from '@/paradigm/data/greek/noun/tables/paradigm-noun-17.json'\r\nimport paradigmNoun18 from '@/paradigm/data/greek/noun/tables/paradigm-noun-18.json'\r\n\r\n// Noun rules\r\nimport nounParadigmRulesCSV from '@/paradigm/data/greek/noun/rules.csv'\r\n\r\n// Adjective paradigm tables\r\nimport paradigmAdj1 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-1.json'\r\nimport paradigmAdj2 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-2.json'\r\nimport paradigmAdj3 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-3.json'\r\nimport paradigmAdj4 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-4.json'\r\nimport paradigmAdj5 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-5.json'\r\nimport paradigmAdj6 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-6.json'\r\nimport paradigmAdj7 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-7.json'\r\nimport paradigmAdj8 from '@/paradigm/data/greek/adjective/tables/paradigm-adjective-8.json'\r\n\r\n// Adjective rules\r\nimport adjectiveParadigmRulesCSV from '@/paradigm/data/greek/adjective/rules.csv'\r\n\r\nexport default class GreekParadigmData {\r\n  static get languageID () {\r\n    return Constants.LANG_GREEK\r\n  }\r\n\r\n  static get verbParadigmTables () {\r\n    const partOfSpeech = Constants.POFS_VERB\r\n    return new Map([\r\n        ['verbpdgm1', new Paradigm(this.languageID, partOfSpeech, paradigm01)],\r\n        ['verbpdgm2', new Paradigm(this.languageID, partOfSpeech, paradigm02)],\r\n        ['verbpdgm3', new Paradigm(this.languageID, partOfSpeech, paradigm03)],\r\n        ['verbpdgm4', new Paradigm(this.languageID, partOfSpeech, paradigm04)],\r\n        ['verbpdgm5', new Paradigm(this.languageID, partOfSpeech, paradigm05)],\r\n        ['verbpdgm6', new Paradigm(this.languageID, partOfSpeech, paradigm06)],\r\n        ['verbpdgm7', new Paradigm(this.languageID, partOfSpeech, paradigm07)],\r\n        ['verbpdgm8', new Paradigm(this.languageID, partOfSpeech, paradigm08)],\r\n        ['verbpdgm9', new Paradigm(this.languageID, partOfSpeech, paradigm09)],\r\n        ['verbpdgm10', new Paradigm(this.languageID, partOfSpeech, paradigm10)],\r\n        ['verbpdgm11', new Paradigm(this.languageID, partOfSpeech, paradigm11)],\r\n        ['verbpdgm12', new Paradigm(this.languageID, partOfSpeech, paradigm12)],\r\n        ['verbpdgm13', new Paradigm(this.languageID, partOfSpeech, paradigm13)],\r\n        ['verbpdgm14', new Paradigm(this.languageID, partOfSpeech, paradigm14)],\r\n        ['verbpdgm15', new Paradigm(this.languageID, partOfSpeech, paradigm15)],\r\n        ['verbpdgm16', new Paradigm(this.languageID, partOfSpeech, paradigm16)],\r\n        ['verbpdgm17', new Paradigm(this.languageID, partOfSpeech, paradigm17)],\r\n        ['verbpdgm17b', new Paradigm(this.languageID, partOfSpeech, paradigm17b)],\r\n        ['verbpdgm17c', new Paradigm(this.languageID, partOfSpeech, paradigm17c)],\r\n        ['verbpdgm18', new Paradigm(this.languageID, partOfSpeech, paradigm18)],\r\n        ['verbpdgm19', new Paradigm(this.languageID, partOfSpeech, paradigm19)],\r\n        ['verbpdgm20', new Paradigm(this.languageID, partOfSpeech, paradigm20)],\r\n        ['verbpdgm21', new Paradigm(this.languageID, partOfSpeech, paradigm21)],\r\n        ['verbpdgm22', new Paradigm(this.languageID, partOfSpeech, paradigm22)],\r\n        ['verbpdgm23', new Paradigm(this.languageID, partOfSpeech, paradigm23)],\r\n        ['verbpdgm24', new Paradigm(this.languageID, partOfSpeech, paradigm24)],\r\n        ['verbpdgm25', new Paradigm(this.languageID, partOfSpeech, paradigm25)],\r\n        ['verbpdgm26', new Paradigm(this.languageID, partOfSpeech, paradigm26)],\r\n        ['verbpdgm27', new Paradigm(this.languageID, partOfSpeech, paradigm27)],\r\n        ['verbpdgm28', new Paradigm(this.languageID, partOfSpeech, paradigm28)],\r\n        ['verbpdgm29', new Paradigm(this.languageID, partOfSpeech, paradigm29)],\r\n        ['verbpdgm30', new Paradigm(this.languageID, partOfSpeech, paradigm30)],\r\n        ['verbpdgm31', new Paradigm(this.languageID, partOfSpeech, paradigm31)],\r\n        ['verbpdgm32', new Paradigm(this.languageID, partOfSpeech, paradigm32)],\r\n        ['verbpdgm33', new Paradigm(this.languageID, partOfSpeech, paradigm33)],\r\n        ['verbpdgm34', new Paradigm(this.languageID, partOfSpeech, paradigm34)],\r\n        ['verbpdgm35', new Paradigm(this.languageID, partOfSpeech, paradigm35)],\r\n        ['verbpdgm36', new Paradigm(this.languageID, partOfSpeech, paradigm36)],\r\n        ['verbpdgm37', new Paradigm(this.languageID, partOfSpeech, paradigm37)],\r\n        ['verbpdgm38', new Paradigm(this.languageID, partOfSpeech, paradigm38)],\r\n        ['verbpdgm39', new Paradigm(this.languageID, partOfSpeech, paradigm39)],\r\n        ['verbpdgm40', new Paradigm(this.languageID, partOfSpeech, paradigm40)],\r\n        ['verbpdgm41', new Paradigm(this.languageID, partOfSpeech, paradigm41)],\r\n        ['verbpdgm42', new Paradigm(this.languageID, partOfSpeech, paradigm42)],\r\n        ['verbpdgm43', new Paradigm(this.languageID, partOfSpeech, paradigm43)],\r\n        ['verbpdgm43b', new Paradigm(this.languageID, partOfSpeech, paradigm43b)],\r\n        ['verbpdgm44', new Paradigm(this.languageID, partOfSpeech, paradigm44)],\r\n        ['verbpdgm45', new Paradigm(this.languageID, partOfSpeech, paradigm45)],\r\n        ['verbpdgm46', new Paradigm(this.languageID, partOfSpeech, paradigm46)],\r\n        ['verbpdgm47', new Paradigm(this.languageID, partOfSpeech, paradigm47)],\r\n        ['verbpdgm48', new Paradigm(this.languageID, partOfSpeech, paradigm48)],\r\n        ['verbpdgm49', new Paradigm(this.languageID, partOfSpeech, paradigm49)],\r\n        ['verbpdgm50', new Paradigm(this.languageID, partOfSpeech, paradigm50)],\r\n        ['verbpdgm51', new Paradigm(this.languageID, partOfSpeech, paradigm51)],\r\n        ['verbpdgm52', new Paradigm(this.languageID, partOfSpeech, paradigm52)],\r\n        ['verbpdgm53', new Paradigm(this.languageID, partOfSpeech, paradigm53)]\r\n    ])\r\n  }\r\n\r\n  static get verbParadigmRules () {\r\n    return verbParadigmRulesCSV\r\n  }\r\n\r\n  static get verbParadigmFootnotes () {\r\n    return verbParadigmFootnotesCSV\r\n  }\r\n\r\n  static get verbParticipleParadigmTables () {\r\n    const partOfSpeech = Constants.POFS_VERB_PARTICIPLE\r\n    return new Map([\r\n        ['verbpdgm54', new Paradigm(this.languageID, partOfSpeech, paradigm54)],\r\n        ['verbpdgm55', new Paradigm(this.languageID, partOfSpeech, paradigm55)],\r\n        ['verbpdgm56', new Paradigm(this.languageID, partOfSpeech, paradigm56)],\r\n        ['verbpdgm57', new Paradigm(this.languageID, partOfSpeech, paradigm57)],\r\n        ['verbpdgm58', new Paradigm(this.languageID, partOfSpeech, paradigm58)],\r\n        ['verbpdgm59', new Paradigm(this.languageID, partOfSpeech, paradigm59)],\r\n        ['verbpdgm60', new Paradigm(this.languageID, partOfSpeech, paradigm60)],\r\n        ['verbpdgm61', new Paradigm(this.languageID, partOfSpeech, paradigm61)],\r\n        ['verbpdgm62', new Paradigm(this.languageID, partOfSpeech, paradigm62)],\r\n        ['verbpdgm63', new Paradigm(this.languageID, partOfSpeech, paradigm63)],\r\n        ['verbpdgm64', new Paradigm(this.languageID, partOfSpeech, paradigm64)],\r\n        ['verbpdgm65', new Paradigm(this.languageID, partOfSpeech, paradigm65)],\r\n        ['verbpdgm66', new Paradigm(this.languageID, partOfSpeech, paradigm66)]\r\n    ])\r\n  }\r\n\r\n  static get verbParticipleParadigmRules () {\r\n    return verbParticipleParadigmRulesCSV\r\n  }\r\n\r\n  static get nounParadigmTables () {\r\n    const partOfSpeech = Constants.POFS_NOUN\r\n    return new Map([\r\n        ['nounpdgm1', new Paradigm(this.languageID, partOfSpeech, paradigmNoun1)],\r\n        ['nounpdgm2', new Paradigm(this.languageID, partOfSpeech, paradigmNoun2)],\r\n        ['nounpdgm3', new Paradigm(this.languageID, partOfSpeech, paradigmNoun3)],\r\n        ['nounpdgm4', new Paradigm(this.languageID, partOfSpeech, paradigmNoun4)],\r\n        ['nounpdgm5', new Paradigm(this.languageID, partOfSpeech, paradigmNoun5)],\r\n        ['nounpdgm6', new Paradigm(this.languageID, partOfSpeech, paradigmNoun6)],\r\n        ['nounpdgm7', new Paradigm(this.languageID, partOfSpeech, paradigmNoun7)],\r\n        ['nounpdgm8', new Paradigm(this.languageID, partOfSpeech, paradigmNoun8)],\r\n        ['nounpdgm9', new Paradigm(this.languageID, partOfSpeech, paradigmNoun9)],\r\n        ['nounpdgm10', new Paradigm(this.languageID, partOfSpeech, paradigmNoun10)],\r\n        ['nounpdgm11', new Paradigm(this.languageID, partOfSpeech, paradigmNoun11)],\r\n        ['nounpdgm12', new Paradigm(this.languageID, partOfSpeech, paradigmNoun12)],\r\n        ['nounpdgm13', new Paradigm(this.languageID, partOfSpeech, paradigmNoun13)],\r\n        ['nounpdgm14', new Paradigm(this.languageID, partOfSpeech, paradigmNoun14)],\r\n        ['nounpdgm15', new Paradigm(this.languageID, partOfSpeech, paradigmNoun15)],\r\n        ['nounpdgm16', new Paradigm(this.languageID, partOfSpeech, paradigmNoun16)],\r\n        ['nounpdgm17', new Paradigm(this.languageID, partOfSpeech, paradigmNoun17)],\r\n        ['nounpdgm18', new Paradigm(this.languageID, partOfSpeech, paradigmNoun18)]\r\n    ])\r\n  }\r\n\r\n  static get nounParadigmRules () {\r\n    return nounParadigmRulesCSV\r\n  }\r\n\r\n  static get adjectiveParadigmTables () {\r\n    const partOfSpeech = Constants.POFS_ADJECTIVE\r\n    return new Map([\r\n        ['adjpdgm1', new Paradigm(this.languageID, partOfSpeech, paradigmAdj1)],\r\n        ['adjpdgm2', new Paradigm(this.languageID, partOfSpeech, paradigmAdj2)],\r\n        ['adjpdgm3', new Paradigm(this.languageID, partOfSpeech, paradigmAdj3)],\r\n        ['adjpdgm4', new Paradigm(this.languageID, partOfSpeech, paradigmAdj4)],\r\n        ['adjpdgm5', new Paradigm(this.languageID, partOfSpeech, paradigmAdj5)],\r\n        ['adjpdgm6', new Paradigm(this.languageID, partOfSpeech, paradigmAdj6)],\r\n        ['adjpdgm7', new Paradigm(this.languageID, partOfSpeech, paradigmAdj7)],\r\n        ['adjpdgm8', new Paradigm(this.languageID, partOfSpeech, paradigmAdj8)]\r\n    ])\r\n  }\r\n\r\n  static get adjectiveParadigmRules () {\r\n    return adjectiveParadigmRulesCSV\r\n  }\r\n}","import { Constants, Feature, FeatureImporter, Lemma, Logger, Language } from 'alpheios-data-models'\r\nimport Paradigm from '@/paradigm/lib/paradigm.js'\r\nimport GreekParadigmData from '@/paradigm/data/greek/greek-paradigm-data.js'\r\n\r\nimport InflectionSet from '@lib//inflection-set.js'\r\n\r\nimport papaparse from 'papaparse'\r\nimport LanguageDataset from '@lib/language-dataset.js'\r\n\r\nexport default class GreekParadigmDataset extends LanguageDataset {\r\n  constructor () {\r\n    super(GreekParadigmDataset.languageID)\r\n\r\n    this.typeFeatures = this.model.typeFeatures\r\n    this.typeFeatures.set(Feature.types.footnote, new Feature(Feature.types.footnote, [], GreekParadigmDataset.languageID))\r\n    this.typeFeatures.set(Feature.types.dialect, new Feature(Feature.types.dialect, [], GreekParadigmDataset.languageID))\r\n\r\n    // Create an importer with default values for every feature\r\n    for (let feature of this.typeFeatures.values()) { // eslint-disable-line prefer-const\r\n      feature.addImporter(new FeatureImporter(feature.values, true))\r\n    }\r\n\r\n    this.typeFeatures.get(Feature.types.tense).getImporter()\r\n      .map('future_perfect', [Constants.TENSE_FUTURE_PERFECT])\r\n  }\r\n\r\n  static get language () {\r\n    return Language.GREEK\r\n  }\r\n\r\n  static get languageID () {\r\n    return Constants.LANG_GREEK\r\n  }\r\n\r\n  setVerbParadigmData (partOfSpeech, paradigms, rulesData, suppParadigmTables) {\r\n    // An order of columns in a data CSV file\r\n    const n = {\r\n      id: 0,\r\n      matchOrder: 1,\r\n      partOfSpeech: 2, // Ignored, an argument value will be used\r\n      stemtype: 3,\r\n      voice: 4,\r\n      mood: 5,\r\n      tense: 6,\r\n      lemma: 7,\r\n      morphFlags: 8,\r\n      dialect: 9\r\n    }\r\n\r\n    // First row contains headers\r\n    for (let i = 1; i < rulesData.length; i++) {\r\n      const item = rulesData[i]\r\n      const id = item[n.id]\r\n      const matchOrder = Number.parseInt(item[n.matchOrder])\r\n\r\n      let features = [partOfSpeech] // eslint-disable-line prefer-const\r\n\r\n      if (item[n.stemtype]) { features.push(this.typeFeatures.get(Feature.types.stemtype).createFromImporter(item[n.stemtype])) }\r\n      if (item[n.voice]) { features.push(this.typeFeatures.get(Feature.types.voice).createFromImporter(item[n.voice])) }\r\n      if (item[n.mood]) { features.push(this.typeFeatures.get(Feature.types.mood).createFromImporter(item[n.mood])) }\r\n      if (item[n.tense]) { features.push(this.typeFeatures.get(Feature.types.tense).createFromImporter(item[n.tense])) }\r\n      if (item[n.dialect]) { features.push(this.typeFeatures.get(Feature.types.dialect).createFromImporter(item[n.dialect])) }\r\n\r\n      let lemma\r\n      if (item[n.lemma]) {\r\n        lemma = new Lemma(item[n.lemma], this.constructor.language)\r\n      }\r\n\r\n      let morphFlags = ''\r\n      if (item[n.morphFlags]) {\r\n        morphFlags = item[n.morphFlags]\r\n      }\r\n\r\n      if (paradigms.has(id)) {\r\n        paradigms.get(id).addRule(matchOrder, features, lemma, morphFlags)\r\n      } else {\r\n        Logger.getInstance().warn(`Cannot find a paradigm table for \"${id}\" index`)\r\n      }\r\n    }\r\n    for (let paradigm of paradigms.values()) { // eslint-disable-line prefer-const\r\n      paradigm.sortRules()\r\n      paradigm.addSuppTables(suppParadigmTables)\r\n    }\r\n\r\n    return Array.from(paradigms.values())\r\n  }\r\n\r\n  setNounParadigmData (partOfSpeech, paradigms, rulesData) {\r\n    // An order of columns in a data CSV file\r\n    const n = {\r\n      id: 0,\r\n      matchOrder: 1,\r\n      partOfSpeech: 2, // Ignored, an argument value will be used\r\n      stemtype: 3,\r\n      declension: 4,\r\n      gender: 5,\r\n      lemma: 6,\r\n      morphFlags: 7,\r\n      dialect: 8\r\n    }\r\n\r\n    // First row contains headers\r\n    for (let i = 1; i < rulesData.length; i++) {\r\n      const item = rulesData[i]\r\n      const id = item[n.id]\r\n      const matchOrder = Number.parseInt(item[n.matchOrder])\r\n\r\n      let features = [partOfSpeech] // eslint-disable-line prefer-const\r\n\r\n      if (item[n.stemtype]) { features.push(this.typeFeatures.get(Feature.types.stemtype).createFromImporter(item[n.stemtype])) }\r\n      if (item[n.declension]) { features.push(this.typeFeatures.get(Feature.types.declension).createFromImporter(item[n.declension])) }\r\n      if (item[n.gender]) { features.push(this.typeFeatures.get(Feature.types.gender).createFromImporter(item[n.gender])) }\r\n      if (item[n.dialect]) { features.push(this.typeFeatures.get(Feature.types.dialect).createFromImporter(item[n.dialect])) }\r\n\r\n      let lemma\r\n      if (item[n.lemma]) {\r\n        lemma = new Lemma(item[n.lemma], this.constructor.language)\r\n      }\r\n\r\n      let morphFlags = ''\r\n      if (item[n.morphFlags]) {\r\n        morphFlags = item[n.morphFlags]\r\n      }\r\n\r\n      if (paradigms.has(id)) {\r\n        paradigms.get(id).addRule(matchOrder, features, lemma, morphFlags)\r\n      } else {\r\n        Logger.getInstance().warn(`Cannot find a paradigm table for \"${id}\" index`)\r\n      }\r\n    }\r\n    for (let paradigm of paradigms.values()) { // eslint-disable-line prefer-const\r\n      paradigm.sortRules()\r\n    }\r\n\r\n    return Array.from(paradigms.values())\r\n  }\r\n\r\n  loadData () {\r\n    this.loadVerbParadigmData()\r\n    this.loadVerbParticipleParadigmData()\r\n    this.loadNounParadigmData()\r\n    this.loadAdjectiveParadigmData()\r\n\r\n    this.dataLoaded = true\r\n  }\r\n\r\n  loadVerbParadigmData () {\r\n    const verbParadigmTables = GreekParadigmData.verbParadigmTables\r\n    const verbParticipleParadigmTables = GreekParadigmData.verbParticipleParadigmTables\r\n    const verbAndParticipleParadigmTables = new Map([...verbParadigmTables, ...verbParticipleParadigmTables])\r\n\r\n    const partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_VERB)\r\n    const paradigms = this.setVerbParadigmData(\r\n      partOfSpeech, verbParadigmTables,\r\n      papaparse.parse(GreekParadigmData.verbParadigmRules, { skipEmptyLines: true }).data, verbAndParticipleParadigmTables)\r\n\r\n    this.addParadigms(partOfSpeech, paradigms)\r\n    this.addFootnotes(partOfSpeech, Paradigm, papaparse.parse(GreekParadigmData.verbParadigmFootnotes, { skipEmptyLines: true }).data)\r\n  }\r\n\r\n  loadVerbParticipleParadigmData () {\r\n    const verbParadigmTables = GreekParadigmData.verbParadigmTables\r\n    const verbParticipleParadigmTables = GreekParadigmData.verbParticipleParadigmTables\r\n    const verbAndParticipleParadigmTables = new Map([...verbParadigmTables, ...verbParticipleParadigmTables])\r\n\r\n    const partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_VERB_PARTICIPLE)\r\n    const paradigms = this.setVerbParadigmData(\r\n      partOfSpeech, verbParticipleParadigmTables,\r\n      papaparse.parse(GreekParadigmData.verbParticipleParadigmRules, { skipEmptyLines: true }).data, verbAndParticipleParadigmTables)\r\n\r\n    this.addParadigms(partOfSpeech, paradigms)\r\n  }\r\n\r\n  loadNounParadigmData () {\r\n    const nounParadigmTables = GreekParadigmData.nounParadigmTables\r\n\r\n    const partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_NOUN)\r\n    const paradigms = this.setNounParadigmData(\r\n      partOfSpeech, nounParadigmTables,\r\n      papaparse.parse(GreekParadigmData.nounParadigmRules, { skipEmptyLines: true }).data, nounParadigmTables)\r\n\r\n    this.addParadigms(partOfSpeech, paradigms)\r\n  }\r\n\r\n  loadAdjectiveParadigmData () {\r\n    const adjectiveParadigmTables = GreekParadigmData.adjectiveParadigmTables\r\n\r\n    const partOfSpeech = this.typeFeatures.get(Feature.types.part).createFeature(Constants.POFS_ADJECTIVE)\r\n    const paradigms = this.setNounParadigmData(\r\n      partOfSpeech, adjectiveParadigmTables,\r\n      papaparse.parse(GreekParadigmData.adjectiveParadigmRules, { skipEmptyLines: true }).data, adjectiveParadigmTables)\r\n\r\n    this.addParadigms(partOfSpeech, paradigms)\r\n  }\r\n\r\n  addParadigms (partOfSpeech, paradigms) {\r\n    if (!this.pos.has(partOfSpeech.value)) {\r\n      this.pos.set(partOfSpeech.value, new InflectionSet(partOfSpeech.value, this.languageID))\r\n    }\r\n    this.pos.get(partOfSpeech.value).addInflectionItems(paradigms)\r\n  }\r\n\r\n  addFootnotes (partOfSpeech, classType, data) {\r\n    let footnotes = [] // eslint-disable-line prefer-const\r\n    // First row are headers\r\n    for (let i = 1; i < data.length; i++) {\r\n\r\n      const footnote = this.addFootnote(partOfSpeech.value, classType, data[i][0], data[i][1])\r\n      footnotes.push(footnote)\r\n    }\r\n    return footnotes\r\n  }\r\n\r\n  setBaseInflectionData (inflection, lemma) {\r\n    inflection.lemma = lemma\r\n    inflection.addFeature(new Feature(Feature.types.word, lemma.word, lemma.languageID))\r\n    inflection.constraints.implemented = this.isImplemented(inflection)\r\n  }\r\n\r\n  setInflectionData (inflection, lemma) {\r\n    let partOfSpeech = inflection[Feature.types.part].value\r\n    if (this.pos.get(partOfSpeech)) {\r\n      this.setBaseInflectionData(inflection, lemma)\r\n      inflection.constraints.paradigmBased = this.pos.get(partOfSpeech).hasMatchingItems(Paradigm, inflection)\r\n    }\r\n    return inflection\r\n  }\r\n\r\n  createInflectionSet (pofsValue, inflections, options) {\r\n\r\n    let inflectionSet = new InflectionSet(pofsValue, this.languageID) // eslint-disable-line prefer-const\r\n    inflectionSet.inflections = inflections.filter(i => i.constraints.implemented === true)\r\n    inflectionSet.isImplemented = inflectionSet.inflections.length > 0\r\n\r\n    const sourceSet = this.pos.get(pofsValue)\r\n    if (!sourceSet) {\r\n      return inflectionSet\r\n    }\r\n\r\n    if (inflectionSet.isImplemented) {\r\n      const paradigmBased = inflections.some(i => i.constraints.paradigmBased)\r\n      if (paradigmBased) {\r\n        const paradigms = sourceSet.getMatchingItems(Paradigm, inflections)\r\n        inflectionSet.addInflectionItems(paradigms)\r\n      }\r\n\r\n      this.createInflectionSetFootnote(inflectionSet, sourceSet)\r\n    }\r\n    return inflectionSet\r\n  }\r\n\r\n\r\n  static getParadigmStandardForm (partOfSpeech, paradigmID) {\r\n    return pos.get(partOfSpeech).types.get(Paradigm).getByID(paradigmID)\r\n  }\r\n}","import InflectionList from '@lib/inflection-list.js'\r\n\r\nexport default class ParadigmInflectionList extends InflectionList {\r\n  /**\r\n   * Checks if an array of items has at least one element that matches an inflection.\r\n   *  A match is determined as a result of item's `match` function.\r\n   * @param {Inflection|Inflection[]} inflections - One or several inflection to match against.\r\n   * @return {boolean} - True if there is at least one match, false otherwise\r\n   */\r\n  hasMatches (inflections) {\r\n    if (!Array.isArray(inflections)) {\r\n      inflections = [inflections]\r\n    }\r\n    for (const inflection of inflections) {\r\n      if (this.items.some(i => i.matchingRules(inflection).length > 0)) {\r\n        // There is at least one matching rule\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Finds a paradigm object by its paradigmID.\r\n   * @param {string} paradigmID - A paradigmID string value matching the one stored in Paradigm.paradigmID.\r\n   * @return {Paradigm}\r\n   */\r\n  getByID (paradigmID) {\r\n    return this.items.find(i => i.paradigmID === paradigmID)\r\n  }\r\n\r\n  /**\r\n   * Returns an array of paradigms that `matches` an array of inflections.\r\n   * A match is determined by the paradigm's `match` function.\r\n   * Returned value is determined by item's `match` function as well.\r\n   * @param {Inflection[]} inflections - One or several inflections to match against paradigms.\r\n   * @return {Paradigm[]|[]} An array of paradigms that matches inflections. Only those paradigms are returned\r\n   * whose matching rules have the highest `matchOrder`. If no matches found, an empty array will be returned.\r\n   */\r\n  getMatches (inflections) {\r\n    // Select only those inflections that are paradigm based\r\n    inflections = inflections.filter(i => i.constraints && i.constraints.paradigmBased)\r\n    let matchingParadigm = [] // eslint-disable-line prefer-const\r\n    // Get all matching paradigms for all inflections\r\n    for (const inflection of inflections) {\r\n      let matchingParadigmInflection = []\r\n      let highestMatchOrder = Number.MIN_SAFE_INTEGER\r\n      for (const paradigm of this.items) {\r\n        const matchingRules = paradigm.matchingRules(inflection)\r\n        if (matchingRules.length > 0) {\r\n          // There is one or several matching rules for this paradigm\r\n          const rulesMatchOrder = matchingRules.reduce((acc, rule) => rule.matchOrder > acc ? rule.matchOrder : acc, Number.MIN_SAFE_INTEGER)\r\n          if (rulesMatchOrder > highestMatchOrder) {\r\n            // This is the matching rule with the highers order. Scrap all previous matches and store this one\r\n            matchingParadigmInflection = [paradigm]\r\n            highestMatchOrder = rulesMatchOrder\r\n          } else if (rulesMatchOrder === highestMatchOrder) {\r\n            // Rule with the same matchOrder as we already have stored.\r\n\r\n            // Check if there is the same paradigm in matches already\r\n            if (!matchingParadigmInflection.find(p => p.id === paradigm.id)) {\r\n              matchingParadigmInflection.push(paradigm)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      for (const pi of matchingParadigmInflection) {\r\n        // deduple paradigms across all inflections\r\n        if (!matchingParadigm.find(p => p.id === pi.id)) {\r\n          matchingParadigm.push(pi)\r\n        }\r\n      }\r\n    }\r\n    return matchingParadigm\r\n  }\r\n}\r\n","export default class ParadigmRule {\r\n  /**\r\n   * @param {number} matchOrder\r\n   * @param {Feature[]} features\r\n   * @param {Lemma} lemma\r\n   * @param morphFlags\r\n   */\r\n  constructor (matchOrder, features, lemma, morphFlags) {\r\n    this.matchOrder = matchOrder\r\n    this.features = features\r\n    this.lemma = lemma\r\n    this.morphFlags = morphFlags\r\n  }\r\n\r\n  /**\r\n   * Checks if given inflection matches the rule.\r\n   * In order for rule to be considered a match, an inflection should have all features with values equal to those\r\n   * listed within a rule. If rule has a lemma, it should match a `word` property of an inflection\r\n   * (this property contains a target word).\r\n   * @param {Inflection} inflection\r\n   * @return {boolean}\r\n   */\r\n  matches (inflection) {\r\n    let match = true\r\n    for (const feature of this.features) {\r\n      match = match && inflection.hasOwnProperty(feature.type) && feature.value === inflection[feature.type].value // eslint-disable-line no-prototype-builtins\r\n      if (!match) {\r\n        return false\r\n      }\r\n    }\r\n    if (match && this.lemma) {\r\n      // If there is lemma present in the rule, check that it will match the target word\r\n      match = match && inflection.word && inflection.word.value === this.lemma.word\r\n    }\r\n\r\n    return match\r\n  }\r\n}\r\n","import uuidv4 from 'uuid/v4'\r\nimport { Feature, Logger } from 'alpheios-data-models'\r\nimport ParadigmRule from '@/paradigm/lib/paradigm-rule.js'\r\nimport ParadigmInflectionList from '@/paradigm/lib/paradigm-inflection-list.js'\r\n\r\nexport default class Paradigm {\r\n  constructor (languageID, partOfSpeech, paradigm) {\r\n    this.id = uuidv4()\r\n    this.paradigmID = paradigm.ID\r\n    this.languageID = languageID\r\n    this.partOfSpeech = partOfSpeech\r\n    this.title = paradigm.title\r\n\r\n    // this.table = paradigm.table\r\n    this.table = { rows: [] }\r\n    paradigm.table.rows.forEach(row => {\r\n      const newRow = { cells: [] }\r\n      row.cells.forEach(cell => { newRow.cells.push(Object.assign({}, cell)) })\r\n      this.table.rows.push(newRow)\r\n    })\r\n\r\n    this.hasCredits = !!paradigm.credits\r\n    this.creditsText = paradigm.credits ? paradigm.credits : ''\r\n    this.subTables = paradigm.subTables\r\n    this.rules = []\r\n\r\n    // Convert string feature values to Feature objects for later comparison\r\n    this.tableCellValuesToFeatures(this.table)\r\n    if (this.subTables) {\r\n      for (const table of this.subTables) {\r\n        this.tableCellValuesToFeatures(table)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Sometimes paradigm sub tables may have links to another paradigms.\r\n     * Those supplemental paradigms will be saved in the map.\r\n     * @type {Map<{string} paradigmID, {Paradigm} paradigm>}\r\n     * @private\r\n     */\r\n    this._suppParadigms = new Map()\r\n  }\r\n\r\n  // Convert string feature values of a table to Feature objects for later comparison\r\n  tableCellValuesToFeatures (table) {\r\n    for (const row of table.rows) {\r\n      for (let cell of row.cells) { // eslint-disable-line prefer-const\r\n        if (cell.role === 'data') {\r\n          let cellFeatures = [] // eslint-disable-line prefer-const\r\n          for (const prop of Object.keys(cell)) {\r\n            // Eliminate \"non-feature\" keys\r\n            if (prop !== 'role' && prop !== 'value'  && prop !== 'lemma') {\r\n              cellFeatures.push(prop)\r\n            }\r\n          }\r\n          for (const feature of cellFeatures) {\r\n            if (typeof cell[feature] === 'string') {\r\n              const values = cell[feature].split(' ')\r\n              // TODO this should be done via an importer but changing this code\r\n              // would require retesting of all of the paradigm table matching\r\n              // so hacking a specific workaround for now\r\n              values.forEach((v, index, values) => { values[index] = v.replace(/future_perfect/, 'future perfect') })\r\n              values.forEach((v, index, values) => { values[index] = v.replace(/verb_participle/, 'verb participle') })\r\n              cell[feature] = new Feature(feature, values, this.languageID)\r\n            }\r\n          }\r\n          // if the paradigm data doesn't explicitly define a part of speech, then set it from the paradigm\r\n          if (!cell[Feature.types.part]) {\r\n            cell[Feature.types.part] = new Feature(Feature.types.part, this.partOfSpeech, this.languageID)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a list of items of the same type as self\r\n   * @return {ParadigmInflectionList}\r\n   */\r\n  static createList () {\r\n    return new ParadigmInflectionList(this)\r\n  }\r\n\r\n  /**\r\n   * Adds a rule to the paradigm.\r\n   * @param {number} matchOrder\r\n   * @param {Feature[]} features\r\n   * @param {Lemma} lemma\r\n   * @param morphFlags\r\n   */\r\n  addRule (matchOrder, features, lemma, morphFlags) {\r\n    this.rules.push(new ParadigmRule(matchOrder, features, lemma, morphFlags))\r\n  }\r\n\r\n  sortRules () {\r\n    this.rules.sort((a, b) => b.matchOrder - a.matchOrder)\r\n  }\r\n\r\n  /**\r\n   * Scans paradigm sub tables for other paradigm tables links and, if found,\r\n   * stores paradigms the found links refers to into a `_suppParadigms` prop.\r\n   * @param {Map<{string} paradigmID, {Paradigm} paradigm>} paradigmMap - A map of all known paradigms.\r\n   */\r\n  addSuppTables (paradigmMap) {\r\n    for (const subTable of this.subTables) {\r\n      for (const row of subTable.rows) {\r\n        for (const cell of row.cells) {\r\n          if (cell.hasOwnProperty('reflink')) { // eslint-disable-line no-prototype-builtins\r\n            if (paradigmMap.has(cell.reflink.id)) {\r\n              this._suppParadigms.set(cell.reflink.id, paradigmMap.get(cell.reflink.id))\r\n            } else {\r\n              Logger.getInstance().warn(`\"${cell.reflink.id}\" supplemental table is not found`)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether this paradigm has any linked paradigms stored.\r\n   * @return {boolean}\r\n   */\r\n  get hasSuppParadigms () {\r\n    return this._suppParadigms.size > 0\r\n  }\r\n\r\n  /**\r\n   * Returns an array of linked paradigms.\r\n   * @return {Paradigm[]}\r\n   */\r\n  get suppParadigmList () {\r\n    return Array.from(this._suppParadigms.values())\r\n  }\r\n\r\n  /**\r\n   * Returns linked paradigms in a map.\r\n   * @return {Map<{string}, paradigmID, {Paradigm}, paradigm>}\r\n   */\r\n  get suppParadigmsMap () {\r\n    return this._suppParadigms\r\n  }\r\n\r\n  /**\r\n   * Returns an array of rules that matches an inflection or an empty array if not matching rules found.\r\n   * @param {Inflection} inflection.\r\n   * @return {ParadigmRule[] | []} Array of matching rules or an empty array if no matches found.\r\n   */\r\n  matchingRules (inflection) {\r\n    return this.rules.filter(r => r.matches(inflection))\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekParadigmView from '@/paradigm/views/greek/greek-paradigm-view.js'\r\n\r\nexport default class GreekAdjectiveParadigmView extends GreekParadigmView {\r\n  static get viewID () {\r\n    return 'greek_adjective_paradigm_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport Paradigm from '@/paradigm/lib/paradigm.js'\r\nimport View from '@views/lib/view.js'\r\nimport GreekView from '@views/lang/greek/greek-view.js'\r\n\r\nimport LDF from '@lib/language-dataset-factory.js'\r\n\r\n/**\r\n * This is a base class for all pronoun views. This class should not be used to create tables. Its purpose\r\n * is to define common features and properties for all pronoun classes.\r\n */\r\nexport default class GreekParadigmView extends GreekView {\r\n  /**\r\n   * @param {Paradigm} paradigm\r\n   * @param {Homonym} homonym\r\n   * @param {InflectionData} inflectionData\r\n   */\r\n  constructor (paradigm, homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = paradigm.id\r\n    this.name = paradigm.title.toLowerCase()\r\n    this.title = paradigm.title\r\n    this.paradigm = paradigm\r\n    this.featureTypes = {}\r\n\r\n    this.wideTable = this.paradigm.table\r\n    this.wideSubTables = this.paradigm.subTables\r\n    this.wideView = this.wideTable // For compatibility with non-prerendered tables\r\n\r\n    /**\r\n     * Whether there are any linked paradigms for this view\r\n     * @type {boolean}\r\n     */\r\n    this.hasSuppParadigms = this.paradigm.hasSuppParadigms\r\n\r\n    /**\r\n     * An array of linked paradigms\r\n     * @type {Paradigm[]}\r\n     */\r\n    this.suppParadigms = this.paradigm.suppParadigmList\r\n\r\n    /**\r\n     * Linked paradigms in a map\r\n     * @type {Map<{string}, paradigmID, {Paradigm}, paradigm>}\r\n     */\r\n    this.suppParadigmsMap = this.paradigm.suppParadigmsMap\r\n\r\n    this.hasCredits = this.paradigm.hasCredits\r\n    this.creditsText = this.paradigm.creditsText\r\n\r\n    this.fullMatchDefined = false\r\n  }\r\n\r\n  static get dataset () {\r\n    return LDF.getDataset(this.languageID, 'GreekParadigmDataset')\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_verb_paradigm_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Paradigm\r\n  }\r\n\r\n  static get hasPrerenderedTables () {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with.\r\n   * Should be defined in descendants.\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return []\r\n  }\r\n\r\n  static getID (grammarClass) {\r\n    return `${grammarClass}${View.toTitleCase(GreekVerbParadigmView.mainPartOfSpeech)}Paradigm`\r\n  }\r\n\r\n  static getName (grammarClass) {\r\n    return `${grammarClass} ${GreekVerbParadigmView.mainPartOfSpeech} paradigm`\r\n  }\r\n\r\n  static getTitle (grammarClass) {\r\n    return View.toTitleCase(`${grammarClass} ${GreekVerbParadigmView.mainPartOfSpeech} Paradigm`).trim()\r\n  }\r\n\r\n  /**\r\n   * Determines wither this view can be used to display an inflection table of any data\r\n   * within an `inflectionData` object.\r\n   * By default a view can be used if a view and an inflection data piece have the same language,\r\n   * the same part of speech, and the view is enabled for lexemes within an inflection data.\r\n   * @param {symbol} languageID\r\n   * @param {Inflection[]} inflections\r\n   * @param inflectionData\r\n   * @return {boolean}\r\n   */\r\n  static matchFilter (languageID, inflections, inflectionData) {\r\n    return (this.languageID === languageID &&\r\n      inflections.some(i => i[Feature.types.part] && i[Feature.types.part].value === this.mainPartOfSpeech)) &&\r\n      inflectionData.types.has(this.inflectionType)\r\n  }\r\n\r\n  static getMatchingInstances (homonym) {\r\n    const inflectionData = this.getInflectionsData(homonym)\r\n    if (this.matchFilter(homonym.languageID, homonym.inflections, inflectionData)) {\r\n      const paradigms = inflectionData.types.get(this.inflectionType).items\r\n      return paradigms.map(paradigm => new this(paradigm, homonym, inflectionData))\r\n    }\r\n    return []\r\n  }\r\n\r\n  render (options) {\r\n    // Do nothing as there is no need to render anything\r\n    if (!this.fullMatchDefined) { this.fillFullMatch() }\r\n    return this\r\n  }\r\n\r\n  fillFullMatch () {\r\n    this.checkTableForFullMatch(this.wideTable)\r\n\r\n    if (this.wideSubTables && this.wideSubTables.length > 0) {\r\n      this.wideSubTables.forEach(table => this.checkTableForFullMatch(table))\r\n    }\r\n    this.fullMatchDefined = true\r\n  }\r\n\r\n  checkTableForFullMatch (table) {\r\n    table.rows.forEach(row => {\r\n      row.cells.forEach(cell => {\r\n        cell.fullMatch = this.defineCellFullMatch(cell)\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  defineComparativeFeatures (cell) {\r\n    let comparativeFeatures = []\r\n    Object.keys(cell).forEach(prop => {\r\n      if (prop !== 'role' && prop !== 'value') {\r\n        comparativeFeatures.push(prop)\r\n      }\r\n    })\r\n\r\n    return comparativeFeatures\r\n  }\r\n\r\n  defineCellFullMatch (cell) {\r\n    /**\r\n     * the following default logic is normally used for paradigm cell matches\r\n     *   if the cell feature is a lemma, then it must be present for the inflection and match\r\n     *   if the cell feature is either NOT in the inflection or the inflection DOES\r\n     *   has that feature and one of the inflection feature's values matches\r\n     * sometimes we want to be able to specify that a feature must be present in the\r\n     *   the inflection data AND the cell data in order to match, in that case, the cell feature value\r\n     *   should be specified with a \"*\" as the first character which will mean if the inflection data doesn't have that\r\n     *   feature then it cannot be considered a full match\r\n     * and sometimes we want to be able to specify that a feature can be skipped and still produce a full match\r\n     *   if the inflection doesn't have that feature. In this case the cell feature value can be set to \"!\"\r\n     *   this will prevent words which have that feature from matching on the value  and will allow those\r\n     *   that don't have that feature to match on it\r\n     */\r\n    if (cell.role !== 'data') { return }\r\n    if (this.homonym && this.homonym.inflections) {\r\n      const comparativeFeatures = this.defineComparativeFeatures(cell)\r\n\r\n      const inflections = this.homonym.inflections.filter(i => i.constraints && i.constraints.paradigmBased)\r\n\r\n      for (const inflection of inflections) {\r\n        const matchingRules = this.paradigm.matchingRules(inflection)\r\n        if (matchingRules.length > 0) {\r\n          let fullMatch = true\r\n\r\n          for (const feature of comparativeFeatures) {\r\n            let requiredFeatureInInflection = false\r\n            if (cell[feature].value && cell[feature].value.match(/^\\*/))   {\r\n              requiredFeatureInInflection = true\r\n              let value = cell[feature].getValue(cell[feature].value)\r\n              //value.value = value.value.replace(/^\\*/,'')\r\n            }\r\n            let skipRequireMatch = false\r\n            if (cell[feature].value && cell[feature].value === '!') {\r\n              skipRequireMatch = true\r\n            }\r\n            if (skipRequireMatch && ! inflection.hasOwnProperty(feature)) {\r\n              continue\r\n            } else if (requiredFeatureInInflection || inflection.hasOwnProperty(feature) || (feature === 'lemma')) {\r\n\r\n              if (feature === 'lemma') {\r\n                fullMatch = fullMatch && inflection.word && this.constructor.model.compareWords(cell[feature],inflection.word.value)\r\n              } else if (requiredFeatureInInflection && ! inflection[feature]) {\r\n                fullMatch = false\r\n              } else if (requiredFeatureInInflection) {\r\n                fullMatch = fullMatch && cell[feature].value.replace(/^\\*/,'') === inflection[feature].value\r\n              } else {\r\n                fullMatch = fullMatch && cell[feature].hasValues(inflection[feature].values)\r\n              }\r\n              if (!fullMatch) {\r\n                break\r\n              } // If at least one feature does not match, there is no reason to check others\r\n            }\r\n          }\r\n\r\n          if (fullMatch) { return true }\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  get wideViewNodes () {\r\n    return this.nodes\r\n  }\r\n\r\n  hideEmptyColumns () {\r\n    return this\r\n  }\r\n\r\n  showEmptyColumns () {\r\n    return this\r\n  }\r\n\r\n  hideNoSuffixGroups () {\r\n    return this\r\n  }\r\n\r\n  showNoSuffixGroups () {\r\n    return this\r\n  }\r\n\r\n  static getStandardFormInstance (options) {\r\n    if (!options || !options.paradigmID) {\r\n      throw new Error(`Obligatory options property, \"paradigmID\", is missing`)\r\n    }\r\n    const paradigm = this.dataset.pos.get(this.mainPartOfSpeech).types.get(Paradigm).getByID(options.paradigmID)\r\n    if (paradigm) {\r\n      return new this(paradigm, null, null).render().noSuffixMatchesGroupsHidden(false)\r\n    }\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekParadigmView from '@/paradigm/views/greek/greek-paradigm-view.js'\r\n\r\nexport default class GreekNounParadigmView extends GreekParadigmView {\r\n  static get viewID () {\r\n    return 'greek_noun_paradigm_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_NOUN]\r\n  }\r\n\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekParadigmView from '@/paradigm/views/greek/greek-paradigm-view.js'\r\n\r\nexport default class GreekVerbParticipleParadigmView extends GreekParadigmView {\r\n  static get viewID () {\r\n    return 'greek_verb_participle_paradigm_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB_PARTICIPLE]\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekParadigmView from '@/paradigm/views/greek/greek-paradigm-view.js'\r\n\r\nexport default class GreekVerbParadigmView extends GreekParadigmView {\r\n  static get viewID () {\r\n    return 'greek_verb_paradigm_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB]\r\n  }\r\n}\r\n","import { Constants, Logger } from 'alpheios-data-models'\r\nimport Suffix from '@lib/suffix.js'\r\nimport GreekAdjectiveView from '@views/lang/greek/adjective/greek-adjective-view'\r\n\r\nexport default class GreekAdjectiveSimplifiedView extends GreekAdjectiveView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'adjectiveDeclensionSimplified'\r\n    this.name = 'adjective declension simplified'\r\n    this.title = 'Adjective declension (simplified)'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = GreekAdjectiveSimplifiedView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_adjective_simplified_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  static morphemeCellFilter (suffix) {\r\n    if (suffix.extendedLangData && suffix.extendedLangData[Constants.STR_LANG_CODE_GRC]) {\r\n      return suffix.extendedLangData[Constants.STR_LANG_CODE_GRC].primary\r\n    } else {\r\n      Logger.getInstance().warn(`Greek morpheme \"${suffix.value}\" has no extended language data attached.`)\r\n      return false\r\n    }\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport Suffix from '@lib/suffix.js'\r\nimport GreekView from '@views/lang/greek/greek-view.js'\r\n\r\nexport default class GreekAdjectiveView extends GreekView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'adjectiveDeclension'\r\n    this.name = 'adjective declension'\r\n    this.title = 'Adjective declension'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_adjective_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  static getOrderedGenders (ancestorFeatures) {\r\n    const ancestorValue = ancestorFeatures.length > 0 ? ancestorFeatures[ancestorFeatures.length - 1].value : ''\r\n    if (ancestorValue === Constants.ORD_2ND) {\r\n      return [\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    } else if (ancestorValue === Constants.ORD_3RD) {\r\n      return [\r\n        this.featureMap.get(Constants.GEND_FEMININE),\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    } else {\r\n      return [\r\n        this.featureMap.get(Constants.GEND_FEMININE),\r\n        this.featureMap.get(Constants.GEND_MASCULINE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    }\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport Form from '../../../../lib/form.js'\r\nimport GreekView from '../greek-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class GreekArticleView extends GreekView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'articleDeclension'\r\n    this.name = 'article declension'\r\n    this.title = 'Article Declension'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_article_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ARTICLE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Form\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.genders, this.features.types, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.genders]\r\n\r\n    features.rows = [this.features.numbers, this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = [this.features.numbers]\r\n  }\r\n}\r\n","import ViewSet from '../../lib/view-set.js'\r\n\r\nimport GreekNounView from '@views/lang/greek/noun/greek-noun-view.js'\r\nimport GreekNounSimplifiedView from '@views/lang/greek/noun/greek-noun-simplified-view.js'\r\n\r\nimport GreekNumeralView from '@views/lang/greek/numeral/greek-numeral-view.js'\r\n\r\nimport GreekArticleView from '@views/lang/greek/article/greek-article-view.js'\r\n\r\nimport GreekAdjectiveView from '@views/lang/greek/adjective/greek-adjective-view.js'\r\nimport GreekAdjectiveSimplifiedView from '@views/lang/greek/adjective/greek-adjective-simplified-view.js'\r\n\r\nimport GreekGenderPronounView from '@views/lang/greek/pronoun/greek-gender-pronoun-view.js'\r\nimport GreekLemmaGenderPronounView from '@views/lang/greek/pronoun/greek-lemma-gender-pronoun-view.js'\r\nimport GreekPersonGenderPronounView from '@views/lang/greek/pronoun/greek-person-gender-pronoun-view.js'\r\nimport GreekGenderPronounInterrogativeView from '@views/lang/greek/pronoun/greek-gender-pronoun-interr-view.js'\r\nimport GreekPersonPronounView from '@views/lang/greek/pronoun/greek-person-pronoun-view.js'\r\nimport GreekVerbParadigmView from '@/paradigm/views/greek/verb/greek-verb-paradigm-view.js'\r\nimport GreekVerbParticipleParadigmView from '@/paradigm/views/greek/verb-participle/greek-verb-participle-paradigm-view.js'\r\nimport GreekNounParadigmView from '@/paradigm/views/greek/noun/greek-noun-paradigm-view.js'\r\nimport GreekAdjectiveParadigmView from '@/paradigm/views/greek/adjective/greek-adjective-paradigm-view.js'\r\n\r\nexport default class GreekViewSet extends ViewSet {\r\n  /**\r\n   * Returns a list of views available within a view set.\r\n   * @return {View[]} A list of views available within the view set.\r\n   */\r\n  static get views () {\r\n    return [\r\n      GreekNounView,\r\n      GreekNounSimplifiedView,\r\n      GreekNumeralView,\r\n      GreekArticleView,\r\n      GreekAdjectiveView,\r\n      GreekAdjectiveSimplifiedView,\r\n      GreekGenderPronounView,\r\n      GreekPersonGenderPronounView,\r\n      GreekGenderPronounInterrogativeView,\r\n      GreekPersonPronounView,\r\n      GreekLemmaGenderPronounView,\r\n      GreekVerbParadigmView,\r\n      GreekVerbParticipleParadigmView,\r\n      GreekNounParadigmView,\r\n      GreekNounParadigmView,\r\n      GreekAdjectiveParadigmView\r\n    ]\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LDF from '@lib/language-dataset-factory.js'\r\nimport Table from '../../lib/table.js'\r\nimport View from '../../lib/view.js'\r\nimport GroupFeatureType from '../../lib/group-feature-type.js'\r\n\r\n// import GreekLanguageDataset from '@lib/lang/greek/greek-language-dataset.js'\r\n\r\nexport default class GreekView extends View {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    /*\r\n    Default grammatical features of a View. It child views need to have different feature values, redefine\r\n    those values in child objects.\r\n     */\r\n    this.features = {\r\n      numbers: GroupFeatureType.createFromType(Feature.types.number, this.constructor.languageID, 'Number'),\r\n      cases: GroupFeatureType.createFromType(Feature.types.grmCase, this.constructor.languageID, 'Case'),\r\n      declensions: GroupFeatureType.createFromType(Feature.types.declension, this.constructor.languageID, 'Declension Stem'),\r\n      genders: GroupFeatureType.createFromType(Feature.types.gender, this.constructor.languageID, 'Gender'),\r\n      types: GroupFeatureType.createFromType(Feature.types.type, this.constructor.languageID, 'Type'),\r\n      persons: GroupFeatureType.createFromType(Feature.types.person, this.constructor.languageID, 'Person')\r\n    }\r\n    this.features.numbers.getOrderedFeatures = this.constructor.getOrderedNumbers\r\n    this.features.genders.addFeature(GreekView.datasetConsts.GEND_MASCULINE_FEMININE,\r\n      [Constants.GEND_MASCULINE, Constants.GEND_FEMININE])\r\n    this.features.genders.addFeature(GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER,\r\n      [Constants.GEND_MASCULINE, Constants.GEND_FEMININE, Constants.GEND_NEUTER])\r\n    this.features.declensions.getTitle = this.constructor.getDeclensionTitle\r\n    this.features.genders.getOrderedFeatures = this.constructor.getOrderedGenders\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n    this.features.persons.getTitle = this.constructor.getOrdinalTitle\r\n  }\r\n\r\n  static get languageID () {\r\n    return Constants.LANG_GREEK\r\n  }\r\n\r\n  static get dataset () {\r\n    return LDF.getDataset(this.languageID, 'GreekLanguageDataset')\r\n  }\r\n\r\n  /**\r\n   * Creates and initializes an inflection table. Redefine this method in child objects in order to create\r\n   * an inflection table differently.\r\n   */\r\n  createTable () {\r\n    this.table = new Table([this.features.declensions, this.features.genders,\r\n      this.features.types, this.features.numbers, this.features.cases])\r\n\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.declension),\r\n      this.constructor.model.typeFeature(Feature.types.gender),\r\n      this.constructor.model.typeFeature(Feature.types.type)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)\r\n    ]\r\n    features.fullWidthRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number)\r\n    ]\r\n  }\r\n\r\n  /*\r\n  GetTitle and getOrderFeatures methods will be attached to a GroupFeatureType, so `this` value\r\n  will point to a GroupFeatureType object, not to the View instance.\r\n   */\r\n\r\n  static getOrdinalTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.ORD_1ST: return 'First'\r\n      case Constants.ORD_2ND: return 'Second'\r\n      case Constants.ORD_3RD: return 'Third'\r\n      case Constants.ORD_4TH: return 'Fourth'\r\n      case Constants.ORD_5TH: return 'Fifth'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  static getDeclensionTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.ORD_1ST: return 'First<br>α'\r\n      case Constants.ORD_2ND: return 'Second<br>ο'\r\n      case Constants.ORD_3RD: return 'Third<br>ι, ω'\r\n      case Constants.ORD_4TH: return 'Fourth'\r\n      case Constants.ORD_5TH: return 'Fifth'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  static getOrderedGenders (ancestorFeatures) {\r\n    const ancestorValue = ancestorFeatures.length > 0 ? ancestorFeatures[ancestorFeatures.length - 1].value : ''\r\n    if (ancestorValue === Constants.ORD_2ND) {\r\n      return [\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    } else if (ancestorValue === Constants.ORD_3RD) {\r\n      return [\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER)\r\n      ]\r\n    } else {\r\n      return [\r\n        this.featureMap.get(Constants.GEND_FEMININE),\r\n        this.featureMap.get(Constants.GEND_MASCULINE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    }\r\n  }\r\n\r\n  static getOrderedNumbers () {\r\n    return [\r\n      this.featureMap.get(Constants.NUM_SINGULAR),\r\n      this.featureMap.get(Constants.NUM_DUAL),\r\n      this.featureMap.get(Constants.NUM_PLURAL)\r\n    ]\r\n  }\r\n\r\n  static getGenderTitle (featureValue) {\r\n    if (featureValue === Constants.GEND_MASCULINE) { return 'm.' }\r\n    if (featureValue === Constants.GEND_FEMININE) { return 'f.' }\r\n    if (featureValue === Constants.GEND_NEUTER) { return 'n.' }\r\n    if (featureValue === GreekView.datasetConsts.GEND_MASCULINE_FEMININE) { return 'f./m.' }\r\n    if (featureValue === GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER) { return 'f./m./n.' }\r\n    return featureValue\r\n  }\r\n}\r\n","import { Constants, Logger } from 'alpheios-data-models'\r\nimport Morpheme from '@lib/morpheme.js'\r\nimport Suffix from '@lib/suffix.js'\r\nimport GreekView from '@views/lang/greek/greek-view.js'\r\nimport GreekNounView from './greek-noun-view'\r\n\r\nexport default class GreekNounSimplifiedView extends GreekNounView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'nounDeclensionSimplified'\r\n    this.name = 'noun declension simplified'\r\n    this.title = 'Noun declension (simplified)'\r\n\r\n    this.features.genders.addFeature(GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER,\r\n      [Constants.GEND_MASCULINE, Constants.GEND_FEMININE, Constants.GEND_NEUTER])\r\n    this.features.genders.comparisonType = Morpheme.comparisonTypes.ALL_VALUES\r\n    this.features.genders.getOrderedValues = GreekView.getOrderedGenders\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = GreekNounSimplifiedView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_noun_simplified_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_NOUN]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  static morphemeCellFilter (suffix) {\r\n    if (suffix.extendedLangData && suffix.extendedLangData[Constants.STR_LANG_CODE_GRC]) {\r\n      return suffix.extendedLangData[Constants.STR_LANG_CODE_GRC].primary\r\n    } else {\r\n      Logger.getInstance().warn(`Greek morpheme \"${suffix.value}\" has no extended language data attached.`)\r\n      return false\r\n    }\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport Morpheme from '@lib/morpheme.js'\r\nimport Suffix from '@lib/suffix.js'\r\nimport GreekView from '@views/lang/greek/greek-view.js'\r\n\r\nexport default class GreekNounView extends GreekView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'nounDeclension'\r\n    this.name = 'noun declension'\r\n    this.title = 'Noun declension'\r\n\r\n    this.features.genders.addFeature(GreekView.datasetConsts.GEND_MASCULINE_FEMININE, [Constants.GEND_MASCULINE, Constants.GEND_FEMININE])\r\n    this.features.genders.comparisonType = Morpheme.comparisonTypes.ALL_VALUES\r\n    this.features.genders.getOrderedValues = this.constructor.getOrderedGenders\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_noun_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_NOUN]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  static getOrderedGenders (ancestorFeatures) {\r\n    const ancestorValue = ancestorFeatures[ancestorFeatures.length - 1].value\r\n    if ([Constants.ORD_2ND, Constants.ORD_3RD].includes(ancestorValue)) {\r\n      return [\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    } else {\r\n      return [\r\n        this.featureMap.get(Constants.GEND_FEMININE),\r\n        this.featureMap.get(Constants.GEND_MASCULINE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    }\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport Morpheme from '@lib/morpheme.js'\r\nimport Form from '@lib/form.js'\r\nimport Table from '@views/lib/table.js'\r\n\r\nimport GreekView from '../greek-view.js'\r\nimport GroupFeatureType from '../../../lib/group-feature-type.js'\r\n\r\nexport default class GreekNumeralView extends GreekView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'numeralDeclension'\r\n    this.name = 'numeral declension'\r\n    this.title = 'Numeral declension'\r\n    this.partOfSpeech = this.constructor.mainPartOfSpeech\r\n\r\n    this.lemmaTypeFeature = new Feature(Feature.types.hdwd, this.constructor.dataset.getNumeralGroupingLemmas(), GreekNumeralView.languageID)\r\n    this.features.lemmas = new GroupFeatureType(Feature.types.hdwd, this.constructor.languageID, 'Lemma',\r\n      this.constructor.dataset.getNumeralGroupingLemmaFeatures())\r\n\r\n    this.features.genders.getOrderedFeatures = this.constructor.getOrderedGenders\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n    this.features.genders.filter = this.constructor.genderFilter\r\n    this.features.genders.comparisonType = Morpheme.comparisonTypes.PARTIAL\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_numeral_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_NUMERAL]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Form\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.lemmas, this.features.genders, this.features.types, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.lemmaTypeFeature,\r\n      this.constructor.model.typeFeature(Feature.types.gender),\r\n      this.constructor.model.typeFeature(Feature.types.type)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.number)]\r\n  }\r\n\r\n  static getOrderedGenders (ancestorFeatures) {\r\n    const lemmaValues = GreekView.dataset.getNumeralGroupingLemmas()\r\n    // Items below are lemmas\r\n    const ancestorValue = ancestorFeatures[ancestorFeatures.length - 1].value\r\n    if (ancestorValue === lemmaValues[1]) {\r\n      return [\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER)\r\n      ]\r\n    } else if ([lemmaValues[2], lemmaValues[3]].includes(ancestorValue)) {\r\n      return [\r\n        this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    } else {\r\n      return [\r\n        this.featureMap.get(Constants.GEND_FEMININE),\r\n        this.featureMap.get(Constants.GEND_MASCULINE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    }\r\n  }\r\n\r\n  static genderFilter (featureValues, suffix) {\r\n    // If not an array, convert it to array for uniformity\r\n    if (!Array.isArray(featureValues)) {\r\n      featureValues = [featureValues]\r\n    }\r\n    for (const value of featureValues) {\r\n      if (suffix.features[this.type] === value) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  static getGenderTitle (featureValue) {\r\n    if (featureValue === Constants.GEND_MASCULINE) { return 'm.' }\r\n    if (featureValue === Constants.GEND_FEMININE) { return 'f.' }\r\n    if (featureValue === Constants.GEND_NEUTER) { return 'n.' }\r\n    if (featureValue === GreekView.datasetConsts.GEND_MASCULINE_FEMININE) { return 'f./m.' }\r\n    if (featureValue === GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER) { return 'f./m./n.' }\r\n    return featureValue\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekPronounView from './greek-pronoun-view.js'\r\nimport GreekGenderPronounView from './greek-gender-pronoun-view.js'\r\n\r\n/**\r\n * Used for greek interrogative pronoun\r\n * Produces a table grouped into columns by gender.\r\n */\r\nexport default class GreekGenderPronounInterrogativeView extends GreekGenderPronounView {\r\n  constructor (homonym, inflectionData) {\r\n    const grammarClass = GreekPronounView.getClassesFromInflection(inflectionData.inflections).filter(c => GreekGenderPronounInterrogativeView.classes.includes(c))\r\n    super(homonym, inflectionData, grammarClass[0])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_gender_pronoun_interr_view'\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return [\r\n      Constants.CLASS_INTERROGATIVE\r\n    ]\r\n  }\r\n}\r\n","import { Constants, Logger } from 'alpheios-data-models'\r\nimport GreekView from '../greek-view.js'\r\nimport GreekPronounView from './greek-pronoun-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\n/**\r\n * Used for several classes of pronouns, see `classes` method for a full list.\r\n * Produces a table grouped into columns by gender.\r\n */\r\nexport default class GreekGenderPronounView extends GreekPronounView {\r\n  constructor (homonym, inflectionData, grammarClass) {\r\n    if (!grammarClass) {\r\n      const grammarClasses = GreekPronounView.getClassesFromInflection(inflectionData.inflections).filter(c => GreekGenderPronounView.classes.includes(c))\r\n      // we should only get 1 class here -- if we get more the view is likely to be wrong\r\n      if (grammarClasses.length > 1) {\r\n        Logger.getInstance().warn('more than one grammarClass found for homonym')\r\n      }\r\n      grammarClass = grammarClasses[0]\r\n    }\r\n    super(homonym, inflectionData, grammarClass)\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_gender_pronoun_view'\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return [\r\n      Constants.CLASS_GENERAL_RELATIVE,\r\n      Constants.CLASS_INDEFINITE,\r\n      Constants.CLASS_INTENSIVE,\r\n      Constants.CLASS_RECIPROCAL,\r\n      Constants.CLASS_RELATIVE\r\n    ]\r\n  }\r\n\r\n  createTable () {\r\n    /*\r\n    Define tables and table features.\r\n    Features should go as: column features first, row features last. This specifies the order of grouping\r\n    in which a table tree will be built.\r\n     */\r\n    this.table = new Table([this.features.genders, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.genders]\r\n    features.rows = [this.features.numbers, this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = [this.features.numbers]\r\n  }\r\n\r\n  static getOrderedGenders () {\r\n    return [\r\n      this.featureMap.get(Constants.GEND_FEMININE),\r\n      this.featureMap.get(Constants.GEND_MASCULINE),\r\n      this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n      this.featureMap.get(Constants.GEND_NEUTER),\r\n      this.featureMap.get(GreekView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER)\r\n    ]\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport GreekPronounView from './greek-pronoun-view.js'\r\nimport GroupFeatureType from '../../../lib/group-feature-type.js'\r\nimport Table from '../../../lib/table'\r\n\r\n/**\r\n * Used for demonstrative pronouns. Produces a table grouped into columns by lemma and gender\r\n */\r\nexport default class GreekLemmaGenderPronounView extends GreekPronounView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData, GreekLemmaGenderPronounView.classes[0])\r\n\r\n    // Add lemmas\r\n    /* this.lemmaTypeFeature = new Feature(\r\n      Feature.types.hdwd,\r\n      this.constructor.dataset.getPronounGroupingLemmas(GreekLemmaGenderPronounView.classes[0]),\r\n      GreekPronounView.languageID\r\n    ) */\r\n    this.features.lemmas = new GroupFeatureType(Feature.types.hdwd, this.constructor.languageID, 'Lemma',\r\n      this.constructor.dataset.getPronounGroupingLemmaFeatures(GreekLemmaGenderPronounView.classes[0]))\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_lemma_gender_pronoun_view'\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return [Constants.CLASS_DEMONSTRATIVE]\r\n  }\r\n\r\n  createTable () {\r\n    /*\r\n    Define tables and table features.\r\n    Features should go as: column features first, row features last. This specifies the order of grouping\r\n    in which a table tree will be built.\r\n     */\r\n    this.table = new Table([this.features.lemmas, this.features.genders, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.lemmas, this.features.genders]\r\n    features.rows = [this.features.numbers, this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = [this.features.numbers]\r\n  }\r\n\r\n  static getOrderedGenders () {\r\n    return [\r\n      this.featureMap.get(Constants.GEND_FEMININE),\r\n      this.featureMap.get(Constants.GEND_MASCULINE),\r\n      this.featureMap.get(Constants.GEND_NEUTER),\r\n      this.featureMap.get(GreekPronounView.datasetConsts.GEND_MASCULINE_FEMININE_NEUTER)\r\n    ]\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekPronounView from './greek-pronoun-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\n/**\r\n * Used for reflexive pronouns. Produces a table grouped into columns by person and gender\r\n */\r\nexport default class GreekPersonGenderPronounView extends GreekPronounView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData, GreekPersonGenderPronounView.classes[0])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_person_gender_pronoun_view'\r\n  }\r\n\r\n  createTable () {\r\n    /*\r\n    Define tables and table features.\r\n    Features should go as: column features first, row features last. This specifies the order of grouping\r\n    in which a table tree will be built.\r\n     */\r\n    this.table = new Table([this.features.persons, this.features.genders, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.persons, this.features.genders]\r\n    features.rows = [this.features.numbers, this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = [this.features.numbers]\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return [Constants.CLASS_REFLEXIVE]\r\n  }\r\n\r\n  static getOrderedGenders () {\r\n    return [\r\n      this.featureMap.get(Constants.GEND_FEMININE),\r\n      this.featureMap.get(Constants.GEND_MASCULINE),\r\n      this.featureMap.get(Constants.GEND_NEUTER)\r\n    ]\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport GreekPronounView from './greek-pronoun-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\n/**\r\n * Used for personal pronouns. Produces a table grouped into columns by person\r\n */\r\nexport default class GreekPersonPronounView extends GreekPronounView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData, GreekPersonPronounView.classes[0])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'greek_person_pronoun_view'\r\n  }\r\n\r\n  createTable () {\r\n    /*\r\n    Define tables and table features.\r\n    Features should go as: column features first, row features last. This specifies the order of grouping\r\n    in which a table tree will be built.\r\n     */\r\n    this.table = new Table([this.features.persons, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.persons]\r\n    features.rows = [this.features.numbers, this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = [this.features.numbers]\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return [Constants.CLASS_PERSONAL]\r\n  }\r\n}\r\n","import { Constants, Feature, Inflection, Homonym, LanguageModelFactory as LMF, Language } from 'alpheios-data-models'\r\nimport Form from '@lib/form.js'\r\nimport View from '@views/lib/view.js'\r\nimport GroupFeatureType from '@views/lib/group-feature-type.js'\r\nimport GreekView from '@views/lang/greek/greek-view.js'\r\n\r\n/**\r\n * This is a base class for all pronoun views. This class should not be used to create tables. Its purpose\r\n * is to define common features and properties for all pronoun classes.\r\n */\r\nexport default class GreekPronounView extends GreekView {\r\n  /**\r\n   * @param {Homonym} homonym\r\n   * @param {InflectionData} inflectionData\r\n   * @param {string} grammarClass - For what pronoun class a view will be created\r\n   */\r\n  constructor (homonym, inflectionData, grammarClass = 'Greek') {\r\n    super(homonym, inflectionData)\r\n    this.id = GreekPronounView.getID(grammarClass)\r\n    this.name = GreekPronounView.getName(grammarClass)\r\n    this.title = GreekPronounView.getTitle(grammarClass)\r\n    this.featureTypes = {}\r\n\r\n    this.lemmaTypeFeature = new Feature(Feature.types.hdwd, this.constructor.dataset.getNumeralGroupingLemmas(), GreekView.languageID)\r\n    this.features.lemmas = new GroupFeatureType(Feature.types.hdwd, this.constructor.languageID, 'Lemma',\r\n      this.constructor.dataset.getNumeralGroupingLemmaFeatures())\r\n\r\n    this.features.genders.filter = this.constructor.genderFilter\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_PRONOUN]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Form\r\n  }\r\n\r\n  /**\r\n   * What classes of pronouns this view should be used with.\r\n   * Should be defined in descendants.\r\n   * @return {string[]} Array of class names\r\n   */\r\n  static get classes () {\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * Returns a class of view from a list of inflections.\r\n   * Currently returns a class of a first inflection from the list.\r\n   * @param {Inflection} inflections - A list of inflections.\r\n   * @return {string} A name of a view's class name or an empty string if class cannot be determined.\r\n   */\r\n  static getClassesFromInflection (inflections) {\r\n    const allClasses = new Set()\r\n    if (inflections) {\r\n      inflections.forEach(i => {\r\n        if (i[Feature.types.grmClass]) {\r\n          for (const c of i[Feature.types.grmClass].values) {\r\n            allClasses.add(c)\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    return Array.from(allClasses)\r\n  }\r\n\r\n  static getID (grammarClass) {\r\n    return `${grammarClass}${View.toTitleCase(GreekPronounView.mainPartOfSpeech)}Declension`\r\n  }\r\n\r\n  static getName (grammarClass) {\r\n    return `${grammarClass} ${GreekPronounView.mainPartOfSpeech} declension`\r\n  }\r\n\r\n  static getTitle (grammarClass) {\r\n    return View.toTitleCase(`${grammarClass} ${GreekPronounView.mainPartOfSpeech} Declension`).trim()\r\n  }\r\n\r\n  static genderFilter (featureValues, suffix) {\r\n    // If not an array, convert it to array for uniformity\r\n    if (!Array.isArray(featureValues)) {\r\n      featureValues = [featureValues]\r\n    }\r\n    for (const value of featureValues) {\r\n      if (suffix.features[this.type] === value) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Determines whether this view can be used to display an inflection table of any data\r\n   * within an `inflectionData` object.\r\n   * By default a view can be used if a view and an inflection data piece have the same language,\r\n   * the same part of speech, and the view is enabled for lexemes within an inflection data.\r\n   * @param {symbol} languageID\r\n   * @param {Inflection[]} inflections\r\n   * @param inflectionData\r\n   * @return {boolean}\r\n   */\r\n  static matchFilter (languageID, inflections, inflectionData) {\r\n    if (this.languageID === languageID && inflections.some(i => i[Feature.types.part] && i[Feature.types.part].value === this.mainPartOfSpeech)) {\r\n      if (inflectionData.types.has(this.inflectionType)) {\r\n        const inflections = inflectionData.types.get(this.inflectionType)\r\n\r\n        const found = inflections.items.find(form => {\r\n          let match = false\r\n          for (const value of form.features[Feature.types.grmClass].values) {\r\n            match = match || this.classes.includes(value)\r\n          }\r\n          return match\r\n        })\r\n\r\n        if (found) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  static getMatchingInstances (homonym) {\r\n    const inflectionData = this.getInflectionsData(homonym)\r\n    if (this.matchFilter(homonym.languageID, homonym.inflections, inflectionData)) {\r\n      return [new this(homonym, inflectionData).render()]\r\n    }\r\n    return []\r\n  }\r\n\r\n  getMorphemes () {\r\n    return this.inflectionData.types.get(this.constructor.inflectionType).items\r\n      .filter(item => item.features.hasOwnProperty(Feature.types.grmClass) && // eslint-disable-line no-prototype-builtins\r\n            item.features[Feature.types.grmClass].hasSomeValues(this.constructor.classes)\r\n      )\r\n  }\r\n\r\n  static createStandardFormHomonym (options = {}) {\r\n    if (!options || !options.form) {\r\n      throw new Error('Obligatory options property, \"form\", is missing')\r\n    }\r\n    let inflection = new Inflection(options.form, this.languageID)\r\n    inflection.addFeature(new Feature(Feature.types.part, this.mainPartOfSpeech, this.languageID))\r\n    const langData = LMF.getLanguageAttrs(this.languageID)\r\n    const lang = new Language(langData.languageCode)\r\n    const homonym = Homonym.createSimpleForm(options.form, lang, [inflection])\r\n    inflection = this.dataset.setInflectionData(inflection, homonym.lexemes[0].lemma)\r\n    return homonym\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinView from '../latin-view.js'\r\n\r\nexport default class LatinAdjectiveView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'adjectiveDeclension'\r\n    this.name = 'adjective declension'\r\n    this.title = 'Adjective declension'\r\n\r\n    this.features.declensions.addFeature(LatinView.datasetConsts.ORD_1ST_2ND, [Constants.ORD_1ST, Constants.ORD_2ND])\r\n    this.features.declensions.getOrderedFeatures = this.constructor.getOrderedDeclensions\r\n    this.features.declensions.getTitle = this.constructor.getDeclensionTitle\r\n\r\n    this.features.genders = this.features.genders.createOfSameType() // Create a copy so that original object will not be affected by a change\r\n    this.features.genders.getOrderedFeatures = this.constructor.getOrderedGenders\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinAdjectiveView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_adjective_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  static getOrderedDeclensions () {\r\n    return [\r\n      this.featureMap.get(LatinView.datasetConsts.ORD_1ST_2ND),\r\n      this.featureMap.get(Constants.ORD_3RD)\r\n    ]\r\n  }\r\n\r\n  static getDeclensionTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case LatinView.datasetConsts.ORD_1ST_2ND: return 'First/Second<br>ā and o'\r\n      case Constants.ORD_3RD: return 'Third<br>consonant and i'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  static getOrderedGenders () {\r\n    return [\r\n      this.featureMap.get(Constants.GEND_FEMININE),\r\n      this.featureMap.get(Constants.GEND_MASCULINE),\r\n      this.featureMap.get(Constants.GEND_NEUTER)\r\n    ]\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return inflection[Feature.types.part].value === this.mainPartOfSpeech\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return !form.features[Feature.types.comparison]\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport Morpheme from '@lib/morpheme.js'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinView from '../latin-view.js'\r\nimport Table from '@views/lib/table.js'\r\n\r\nexport default class LatinAdjectiveComparativeView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'adjectiveComparativeDeclension'\r\n    this.name = 'adjective comparative declension'\r\n    this.title = 'Adjective Comparative Declension'\r\n\r\n    this.features.genders.addFeature(LatinView.datasetConsts.GEND_MASCULINE_FEMININE, [Constants.GEND_MASCULINE, Constants.GEND_FEMININE])\r\n    this.features.genders.getOrderedFeatures = this.constructor.getOrderedGenders\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n    this.features.genders.comparisonType = Morpheme.comparisonTypes.ALL_VALUES\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinAdjectiveComparativeView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_adjective_comparative_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.genders, this.features.types,\r\n      this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.gender),\r\n      this.constructor.model.typeFeature(Feature.types.type)]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.grmCase)]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.number)]\r\n  }\r\n\r\n  static getOrderedGenders () {\r\n    return [\r\n      this.featureMap.get(LatinView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n      this.featureMap.get(Constants.GEND_NEUTER)\r\n    ]\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.comparison] &&\r\n      inflection[Feature.types.comparison].value === Constants.COMP_COMPARITIVE\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return form.features[Feature.types.comparison] &&\r\n      form.features[Feature.types.comparison].value === Constants.COMP_COMPARITIVE\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinView from '../latin-view.js'\r\nimport Table from '@views/lib/table.js'\r\n\r\nexport default class LatinAdjectiveSuperlativeView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'adjectiveSuperlativeDeclension'\r\n    this.name = 'adjective superlative declension'\r\n    this.title = 'Adjective Superlative Declension'\r\n\r\n    this.features.genders = this.features.genders.createOfSameType() // Create a copy so that original object will not be affected by a change\r\n    this.features.genders.getOrderedFeatures = this.constructor.getOrderedGenders\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinAdjectiveSuperlativeView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_adjective_superlative_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.genders, this.features.types,\r\n      this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.gender),\r\n      this.constructor.model.typeFeature(Feature.types.type)]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.grmCase)]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.number)]\r\n  }\r\n\r\n  static getOrderedGenders () {\r\n    return [\r\n      this.featureMap.get(Constants.GEND_FEMININE),\r\n      this.featureMap.get(Constants.GEND_MASCULINE),\r\n      this.featureMap.get(Constants.GEND_NEUTER)\r\n    ]\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.comparison] &&\r\n      inflection[Feature.types.comparison].value === Constants.COMP_SUPERLATIVE\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return form.features[Feature.types.comparison] &&\r\n      form.features[Feature.types.comparison].value === Constants.COMP_SUPERLATIVE\r\n  }\r\n}\r\n","import ViewSet from '../../lib/view-set.js'\r\nimport LatinNounView from '@views/lang/latin/noun/latin-noun-view.js'\r\nimport LatinAdjectiveView from '@views/lang/latin/adjective/latin-adjective-view.js'\r\nimport LatinAdjectiveComparativeView from '@views/lang/latin/adjective/latin-comparative-view.js'\r\nimport LatinAdjectiveSuperlativeView from '@views/lang/latin/adjective/latin-superlative-view.js'\r\nimport LatinVoiceConjugationMoodView from '@views/lang/latin/verb/latin-voice-conjugation-mood-view.js'\r\nimport LatinVoiceMoodConjugationView from '@views/lang/latin/verb/latin-voice-mood-conjugation-view.js'\r\nimport LatinConjugationVoiceMoodView from '@views/lang/latin/verb/latin-conjugation-voice-mood-view.js'\r\nimport LatinConjugationMoodVoiceView from '@views/lang/latin/verb/latin-conjugation-mood-voice-view.js'\r\nimport LatinMoodVoiceConjugationView from '@views/lang/latin/verb/latin-mood-voice-conjugation-view.js'\r\nimport LatinMoodConjugationVoiceView from '@views/lang/latin/verb/latin-mood-conjugation-voice-view.js'\r\nimport LatinImperativeView from '@views/lang/latin/verb/latin-imperative-view.js'\r\nimport LatinSupineView from '@views/lang/latin/noun/latin-supine-view.js'\r\nimport LatinVerbIrregularView from '@views/lang/latin/verb/irregular/latin-verb-irregular-view.js'\r\nimport LatinVerbIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-irregular-voice-view.js'\r\nimport LatinVerbParticipleView from '@views/lang/latin/verb/latin-verb-participle-view.js'\r\nimport LatinVerbParticipleIrregularView from '@views/lang/latin/verb/irregular/latin-verb-participle-irregular-view.js'\r\nimport LatinVerbSupineIrregularView from '@views/lang/latin/verb/irregular/latin-verb-supine-irregular-view.js'\r\nimport LatinVerbInfinitiveIrregularView from '@views/lang/latin/verb/irregular/latin-verb-infinitive-irregular-view.js'\r\nimport LatinVerbInfinitiveIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-infinitive-irregular-voice-view.js'\r\nimport LatinVerbImperativeIrregularView from '@views/lang/latin/verb/irregular/latin-verb-imperative-irregular-view.js'\r\nimport LatinVerbImperativeIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-imperative-irregular-voice-view.js'\r\n// import LatinVerbGerundiveIrregularView from '@views/lang/latin/verb/irregular/latin-verb-gerundive-irregular-view.js'\r\nimport LatinInfinitiveView from '@views/lang/latin/verb/latin-infinitive-view.js'\r\nexport default class LatinViewSet extends ViewSet {\r\n  /**\r\n   * Returns a list of views available within a view set.\r\n   * @return {View[]} A list of views available within the view set.\r\n   */\r\n  static get views () {\r\n    return [\r\n      LatinNounView,\r\n      LatinAdjectiveComparativeView,\r\n      LatinAdjectiveSuperlativeView,\r\n      LatinAdjectiveView,\r\n      LatinVerbParticipleIrregularView,\r\n      LatinVerbParticipleView,\r\n      LatinVerbSupineIrregularView,\r\n      LatinSupineView,\r\n      LatinVerbInfinitiveIrregularView,\r\n      LatinVerbInfinitiveIrregularVoiceView,\r\n      LatinVerbImperativeIrregularView,\r\n      LatinVerbImperativeIrregularVoiceView,\r\n      LatinVerbIrregularView,\r\n      LatinVerbIrregularVoiceView,\r\n      LatinInfinitiveView,\r\n      LatinImperativeView,\r\n      //      LatinVerbGerundiveIrregularView, // Gerundive table is eliminated for now as per discussion in https://github.com/alpheios-project/inflection-tables/issues/76\r\n      LatinVoiceConjugationMoodView,\r\n      LatinVoiceMoodConjugationView,\r\n      LatinConjugationVoiceMoodView,\r\n      LatinConjugationMoodVoiceView,\r\n      LatinMoodVoiceConjugationView,\r\n      LatinMoodConjugationVoiceView\r\n    ]\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport View from '@views/lib/view.js'\r\nimport GroupFeatureType from '@views/lib/group-feature-type.js'\r\nimport Table from '@views/lib/table.js'\r\n\r\nexport default class LatinView extends View {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.features = {\r\n      numbers: GroupFeatureType.createFromType(Feature.types.number, this.constructor.languageID, 'Number'),\r\n      cases: GroupFeatureType.createFromType(Feature.types.grmCase, this.constructor.languageID, 'Case'),\r\n      declensions: GroupFeatureType.createFromType(Feature.types.declension, this.constructor.languageID, 'Declension Stem'),\r\n      genders: GroupFeatureType.createFromType(Feature.types.gender, this.constructor.languageID, 'Gender'),\r\n      types: GroupFeatureType.createFromType(Feature.types.type, this.constructor.languageID, 'Type'),\r\n      tenses: GroupFeatureType.createFromType(Feature.types.tense, this.constructor.languageID, 'Tense'),\r\n      voices: GroupFeatureType.createFromType(Feature.types.voice, this.constructor.languageID, 'Voice'),\r\n      moods: new GroupFeatureType(Feature.types.mood, this.constructor.languageID, 'Mood', [\r\n        this.constructor.model.typeFeature(Feature.types.mood).createFeature(Constants.MOOD_INDICATIVE),\r\n        this.constructor.model.typeFeature(Feature.types.mood).createFeature(Constants.MOOD_SUBJUNCTIVE)\r\n      ]),\r\n      persons: GroupFeatureType.createFromType(Feature.types.person, this.constructor.languageID, 'Person'),\r\n      conjugations: GroupFeatureType.createFromType(Feature.types.conjugation, this.constructor.languageID, 'Conjugation Stem')\r\n    }\r\n    this.features.declensions.getTitle = this.constructor.getDeclensionTitle\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n    this.features.conjugations.getTitle = this.constructor.getConjugationTitle\r\n    this.features.persons.getTitle = this.constructor.getOrdinalTitle\r\n    this.features.voices.getTitle = this.constructor.getVoiceTitle\r\n  }\r\n\r\n  /**\r\n   * Defines a language ID of a view. Should be redefined in child classes.\r\n   * @return {symbol}\r\n   */\r\n  static get languageID () {\r\n    return Constants.LANG_LATIN\r\n  }\r\n\r\n  /*\r\n    Creates and initializes an inflection table. Redefine this method in child objects in order to create\r\n    an inflection table differently\r\n     */\r\n  createTable () {\r\n    this.table = new Table([this.features.declensions, this.features.genders,\r\n      this.features.types, this.features.numbers, this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.declension),\r\n      this.constructor.model.typeFeature(Feature.types.gender),\r\n      this.constructor.model.typeFeature(Feature.types.type)]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.grmCase)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.grmCase)]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.number)]\r\n  }\r\n\r\n  /*\r\n  GetTitle and getOrderFeatures methods will be attached to a GroupFeatureType, so `this` value\r\n  will point to a GroupFeatureType object, not to the View instance.\r\n   */\r\n\r\n  /**\r\n   * Define ordinal group titles.\r\n   * @param {String} featureValue - A value of a declension.\r\n   * @return {string} - A title of a declension group.\r\n   */\r\n  static getOrdinalTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.ORD_1ST: return 'First'\r\n      case Constants.ORD_2ND: return 'Second'\r\n      case Constants.ORD_3RD: return 'Third'\r\n      case Constants.ORD_4TH: return 'Fourth'\r\n      case Constants.ORD_5TH: return 'Fifth'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define declension group titles.\r\n   * @param {String} featureValue - A value of a declension.\r\n   * @return {string} - A title of a declension group.\r\n   */\r\n  static getDeclensionTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.ORD_1ST: return 'First<br>ā'\r\n      case Constants.ORD_2ND: return 'Second<br>o'\r\n      case Constants.ORD_3RD: return 'Third<br>(mutes, liquids, nasals, i)'\r\n      case Constants.ORD_4TH: return 'Fourth<br>u'\r\n      case Constants.ORD_5TH: return 'Fifth<br>ē'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define gender group titles.\r\n   * @param {String} featureValue - A value of a gender.\r\n   * @return {string} - A title of a declension group.\r\n   */\r\n  static getGenderTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.GEND_MASCULINE: return 'm.'\r\n      case Constants.GEND_FEMININE: return 'f.'\r\n      case Constants.GEND_NEUTER: return 'n.'\r\n      case LatinView.datasetConsts.GEND_MASCULINE_FEMININE: return 'f./m.'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define voice group titles.\r\n   * @param {String} featureValue - A value of a declension.\r\n   * @return {string} - A title of a declension group.\r\n   */\r\n  static getVoiceTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.VOICE_ACTIVE: return 'Active'\r\n      case Constants.VOICE_PASSIVE: return 'Passive'\r\n      default: return featureValue\r\n    }\r\n  }\r\n\r\n  static getConjugationTitle (featureValue) {\r\n    switch (featureValue) {\r\n      case Constants.ORD_1ST: return 'First<br><span class=\"infl-cell__conj-stem\">ā</span>'\r\n      case Constants.ORD_2ND: return 'Second<br><span class=\"infl-cell__conj-stem\">ē</span>'\r\n      case Constants.ORD_3RD: return 'Third<br><span class=\"infl-cell__conj-stem\">e</span>'\r\n      case Constants.ORD_4TH: return 'Fourth<br><span class=\"infl-cell__conj-stem\">i</span>'\r\n      default: return featureValue\r\n    }\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport Morpheme from '@lib/morpheme.js'\r\nimport Suffix from '@lib/suffix.js'\r\nimport LatinView from '@views/lang/latin/latin-view.js'\r\n\r\nexport default class LatinNounView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'noun_declension'\r\n    this.name = 'noun declension'\r\n    this.title = 'Noun declension'\r\n\r\n    this.features.genders.addFeature(LatinView.datasetConsts.GEND_MASCULINE_FEMININE, [Constants.GEND_MASCULINE, Constants.GEND_FEMININE])\r\n    this.features.genders.getOrderedFeatures = this.constructor.getOrderedGenders\r\n    this.features.genders.getTitle = this.constructor.getGenderTitle\r\n    this.features.genders.comparisonType = Morpheme.comparisonTypes.ALL_VALUES\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_noun_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_NOUN]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  static getOrderedGenders (ancestorFeatures) {\r\n    const ancestorValue = ancestorFeatures[ancestorFeatures.length - 1].value\r\n    if ([Constants.ORD_2ND, Constants.ORD_3RD, Constants.ORD_4TH].includes(ancestorValue)) {\r\n      return [\r\n        this.featureMap.get(LatinView.datasetConsts.GEND_MASCULINE_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    } else {\r\n      return [\r\n        this.featureMap.get(Constants.GEND_MASCULINE),\r\n        this.featureMap.get(Constants.GEND_FEMININE),\r\n        this.featureMap.get(Constants.GEND_NEUTER)\r\n      ]\r\n    }\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinView from '../latin-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinSupineView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.partOfSpeech = this.constructor.mainPartOfSpeech\r\n    this.id = 'verbSupine'\r\n    this.name = 'supine'\r\n    this.title = 'Supine'\r\n\r\n    this.features = {\r\n      cases: this.features.cases\r\n    }\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_supine_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_SUPINE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = []\r\n    features.rows = [this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport GroupFeatureType from '@views/lib/group-feature-type.js'\r\nimport LatinVerbIrregularLinkedBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\nexport default class LatinVerbImperativeIrregularView extends LatinVerbIrregularLinkedBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbImperativeIrregular'\r\n    this.name = 'verb-imperative-irregular'\r\n    this.title = 'Verb Imperative Conjugation (Irregular)'\r\n    this.features.moods =\r\n      new GroupFeatureType(Feature.types.mood, this.constructor.languageID, 'Mood', [\r\n        this.constructor.model.typeFeature(Feature.types.mood).createFeature(Constants.MOOD_IMPERATIVE)])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinVerbImperativeIrregularView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.moods, this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.moods]\r\n    features.rows = [this.features.tenses, this.features.numbers, this.features.persons]\r\n    features.columnRowTitles = [this.features.numbers, this.features.persons]\r\n    features.fullWidthRowTitles = [this.features.tenses]\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_imperative_irregular_view'\r\n  }\r\n\r\n  static enabledForLinking (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      !this.voiceEnabledHdwds.includes(inflection.word.value) // Must NOT match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.mood].value === Constants.MOOD_IMPERATIVE &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      !this.voiceEnabledHdwds.includes(inflection.word.value) // Must NOT match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static getInflectionsData (homonym, options) {\r\n    // Select only those inflections that are required for this view\r\n    const inflections = homonym.inflections.filter(\r\n      i => i[Feature.types.part].value === this.mainPartOfSpeech &&\r\n        i.constraints && i.constraints.irregular\r\n    )\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, inflections, options)\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return form.features[Feature.types.mood].values.includes(Constants.MOOD_IMPERATIVE)\r\n  }\r\n\r\n  static linkedViewConstructors (homonym) {\r\n    return []\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinVerbIrregularLinkedBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\nexport default class LatinVerbImperativeIrregularVoiceView extends LatinVerbIrregularLinkedBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbImperativeIrregularVoice'\r\n    this.name = 'verb-imperative-irregular'\r\n    this.title = 'Verb Imperative Conjugation (Irregular)'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinVerbImperativeIrregularVoiceView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.voices]\r\n    features.rows = [this.features.tenses, this.features.numbers, this.features.persons]\r\n    features.columnRowTitles = [this.features.numbers, this.features.persons]\r\n    features.fullWidthRowTitles = [this.features.tenses]\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_imperative_irregular_voice_view'\r\n  }\r\n\r\n  static enabledForLinking (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      this.voiceEnabledHdwds.includes(inflection.word.value) // Must match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.mood].value === Constants.MOOD_IMPERATIVE &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      this.voiceEnabledHdwds.includes(inflection.word.value) // Must match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static getInflectionsData (homonym, options) {\r\n    // Select only those inflections that are required for this view\r\n    const inflections = homonym.inflections.filter(\r\n      i => i[Feature.types.part].value === this.mainPartOfSpeech &&\r\n        i.constraints && i.constraints.irregular\r\n    )\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, inflections, options)\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return form.features[Feature.types.mood].values.includes(Constants.MOOD_IMPERATIVE)\r\n  }\r\n\r\n  static linkedViewConstructors (homonym) {\r\n    return []\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport GroupFeatureType from '@views/lib/group-feature-type.js'\r\nimport LatinVerbIrregularLinkedBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\nexport default class LatinVerbInfinitiveIrregularView extends LatinVerbIrregularLinkedBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbInfinitiveIrregular'\r\n    this.name = 'verb-infinitive-irregular'\r\n    this.title = 'Verb Infinitive Conjugation (Irregular)'\r\n    this.features.moods =\r\n      new GroupFeatureType(Feature.types.mood, this.constructor.languageID, 'Mood', [\r\n        this.constructor.model.typeFeature(Feature.types.mood).createFeature(Constants.MOOD_INFINITIVE)])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinVerbInfinitiveIrregularView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.moods, this.features.tenses])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.mood)\r\n    ]\r\n    features.rows = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_infinitive_irregular_view'\r\n  }\r\n\r\n  static enabledForLinking (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word\r\n    )\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.mood].value === Constants.MOOD_INFINITIVE &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      !this.voiceEnabledHdwds.includes(inflection.word.value) // Must NOT match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static getInflectionsData (homonym, options) {\r\n    // Select only those inflections that are required for this view\r\n    const inflections = homonym.inflections.filter(\r\n      i => i[Feature.types.part].value === this.mainPartOfSpeech &&\r\n        i.constraints && i.constraints.irregular\r\n    )\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, inflections, options)\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return form.features[Feature.types.mood].values.includes(Constants.MOOD_INFINITIVE)\r\n  }\r\n\r\n  static linkedViewConstructors (homonym) {\r\n    return []\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinVerbIrregularLinkedBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\nexport default class LatinVerbInfinitiveIrregularVoiceView extends LatinVerbIrregularLinkedBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbInfinitiveIrregularVoice'\r\n    this.name = 'verb-infinitive-irregular'\r\n    this.title = 'Verb Infinitive Conjugation (Irregular)'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinVerbInfinitiveIrregularVoiceView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.tenses])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.voice)\r\n    ]\r\n    features.rows = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_infinitive_irregular_voice_view'\r\n  }\r\n\r\n  static enabledForLinking (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      this.voiceEnabledHdwds.includes(inflection.word.value) // Must match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.mood].value === Constants.MOOD_INFINITIVE &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      this.voiceEnabledHdwds.includes(inflection.word.value) // Must match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static getInflectionsData (homonym, options) {\r\n    // Select only those inflections that are required for this view\r\n    const inflections = homonym.inflections.filter(\r\n      i => i[Feature.types.part].value === this.mainPartOfSpeech &&\r\n        i.constraints && i.constraints.irregular\r\n    )\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, inflections, options)\r\n  }\r\n\r\n  static morphemeCellFilter (form) {\r\n    return form.features[Feature.types.mood].values.includes(Constants.MOOD_INFINITIVE)\r\n  }\r\n\r\n  static linkedViewConstructors (homonym) {\r\n    return []\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinView from '@views/lang/latin/latin-view.js'\r\nimport Form from '@lib/form.js'\r\nimport Table from '@views/lib/table'\r\n\r\n/**\r\n * A base view for all Latin irregular verb views.\r\n * It is supposed to serve as a base view only and never created directly.\r\n * That's why its match filter will always return false.\r\n */\r\nexport default class LatinVerbIrregularBaseView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbConjugationIrregularBase'\r\n    this.name = 'verb-irregular-base'\r\n    this.title = 'Base Verb Conjugation (Irregular)'\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_irregular_base_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Form\r\n  }\r\n\r\n  static get voiceEnabledHdwds () {\r\n    return ['fero', 'queo', 'adeo', 'ineo', 'odeo']\r\n  }\r\n\r\n  /**\r\n   * these headwords have a linked supine table\r\n   */\r\n  static get supineEnabledHdwds () {\r\n    return ['eo', 'fero', 'queo', 'nequeo', 'adeo', 'ineo', 'veneo']\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.moods, this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.voices, this.features.moods]\r\n    features.rows = [this.features.tenses, this.features.numbers, this.features.persons]\r\n    features.columnRowTitles = [this.features.numbers, this.features.persons]\r\n    features.fullWidthRowTitles = [this.features.tenses]\r\n  }\r\n\r\n  /**\r\n   * Will always return false because this view serves as base class and is never created directly.\r\n   * @param {symbol} languageID\r\n   * @param {Inflection[]} inflections\r\n   * @return {boolean} Always returns false\r\n   */\r\n  static matchFilter (languageID, inflections) {\r\n    return false\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return inflection[Feature.types.part] &&\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular\r\n  }\r\n\r\n  /**\r\n   * Gets inflection data for a homonym. For this view we need to use irregular verb inflections only.\r\n   * @param {Homonym} homonym - A homonym for which inflection data needs to be retrieved\r\n   * @param {Object} options\r\n   * @return {InflectionSet} Resulting inflection set.\r\n   */\r\n  static getInflectionsData (homonym, options) {\r\n    // Select only those inflections that are required for this view\r\n    const inflections = homonym.inflections.filter(\r\n      i => i[Feature.types.part].value === this.mainPartOfSpeech &&\r\n        i.constraints && i.constraints.irregular\r\n    )\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, inflections, options)\r\n  }\r\n\r\n  /**\r\n   * Creates an array of linked table views: views, that will be shown below the main table view.\r\n   * @return {View[]} - An array of linked views or an empty array if no linked views can be created.\r\n   */\r\n  createLinkedViews () {\r\n    let views = [] // eslint-disable-line prefer-const\r\n    // we want to restrict the inflections for the linked views to irregular verbs for now because inflections from other verbs seem to corrupt the match data constraints\r\n    // (e.g. sum, which has both an irregular and regular verb and one of the regular verbs has a different, non-matching lemma)\r\n    // this will fail if we want to link tables for irregular and regular verbs together this way\r\n    const inflections = this.homonym.inflections.filter(infl => infl[Feature.types.part].value === this.constructor.mainPartOfSpeech && infl.constraints && infl.constraints.irregular)\r\n    for (const Constructor of this.constructor.linkedViewConstructors(this.homonym)) {\r\n      try {\r\n        let linkedViewInflections = [] // eslint-disable-line prefer-const\r\n        for (const infl of inflections) {\r\n          let clone = infl.clone()\r\n          clone[Feature.types.part] = clone[Feature.types.part].createFeature(Constructor.mainPartOfSpeech)\r\n\r\n          clone = this.constructor.dataset.setInflectionData(clone, infl.lemma)\r\n          linkedViewInflections.push(clone)\r\n        }\r\n        const inflectionData = this.constructor.dataset.createInflectionSet(Constructor.mainPartOfSpeech, linkedViewInflections, { findMorphologyMatches: false })\r\n        if (Constructor.matchFilterForLink(this.homonym.languageID, linkedViewInflections)) {\r\n          const view = new Constructor(this.homonym, inflectionData)\r\n          for (let infl of inflections) { // eslint-disable-line prefer-const\r\n            infl[Feature.types.part] = infl[Feature.types.part].createFeature(this.constructor.mainPartOfSpeech)\r\n          }\r\n          views.push(view)\r\n        } else {\r\n          console.info('No match', Constructor)\r\n        }\r\n      } catch (e) {\r\n        console.info(e)\r\n      }\r\n    }\r\n    this.linkedViews = views\r\n    return views\r\n  }\r\n\r\n  // See base view for description\r\n  static getMatchingInstances (homonym) {\r\n    if (this.matchFilter(homonym.languageID, homonym.inflections)) {\r\n      const inflectionData = this.getInflectionsData(homonym)\r\n      let view = new this(homonym, inflectionData) // eslint-disable-line prefer-const\r\n      view.createLinkedViews()\r\n      return [view.render()]\r\n    }\r\n    return []\r\n  }\r\n}\r\n","import LatinVerbIrregularBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-base-view.js'\r\n\r\n/**\r\n * A base view for all Latin irregular verb views which are linked views.\r\n */\r\nexport default class LatinVerbIrregularLinkedBaseView extends LatinVerbIrregularBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbConjugationIrregularLinkedBase'\r\n    this.name = 'verb-irregular-linked-base'\r\n    this.title = 'Base Verb Linked View (Irregular)'\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_irregular_linked_base_view'\r\n  }\r\n\r\n  /**\r\n   * Linked views Match Filter\r\n   * @param {symbol} languageID\r\n   * @param {Inflection[]} inflections\r\n   * @return {boolean} Always returns false\r\n   */\r\n  static matchFilterForLink (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForLinking(i)))\r\n  }\r\n\r\n  static enabledForLinking (inflection) {\r\n    // default behavior is enabled for linking if enabled for viewing\r\n    return this.enabledForInflection(inflection)\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport LatinVerbIrregularBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-base-view.js'\r\nimport LatinVerbParicipleIrregularView from '@views/lang/latin/verb/irregular/latin-verb-participle-irregular-view.js'\r\nimport LatinVerbSupineIrregularView from '@views/lang/latin/verb/irregular/latin-verb-supine-irregular-view.js'\r\nimport LatinVerbInfinitiveIrregularView from '@views/lang/latin/verb/irregular/latin-verb-infinitive-irregular-view.js'\r\nimport LatinVerbImperativeIrregularView from '@views/lang/latin/verb/irregular/latin-verb-imperative-irregular-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\n/**\r\n * An inflection table for Latin irregular verbs that have no voice information in our local data.\r\n * For the ones that do, a LatinVerbIrregularVoiceView is used.\r\n * The only way to distinguish between them the two is to analyze a headword\r\n * which is stored in a `word` feature of an inflection.\r\n */\r\nexport default class LatinVerbIrregularView extends LatinVerbIrregularBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbConjugationIrregular'\r\n    this.name = 'verb-irregular'\r\n    this.title = 'Verb Conjugation (Irregular)'\r\n\r\n    if (this.isImplemented) {\r\n      const inflections = this.homonym.inflections.filter(item => item.constraints.implemented)\r\n      const lemmas = this.constructor.dataset.getMatchingIrregularLemmas(inflections)\r\n      this.additionalTitle = lemmas.length > 0 ? `${lemmas[0].word}, ${lemmas[0].principalParts}` : ''\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_irregular_view'\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.moods, this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.moods]\r\n    features.rows = [this.features.tenses, this.features.numbers, this.features.persons]\r\n    features.columnRowTitles = [this.features.numbers, this.features.persons]\r\n    features.fullWidthRowTitles = [this.features.tenses]\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID && inflections.some(i => this.enabledForInflection(i))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Checks whether this view shall be displayed for an inflection given.\r\n   * It should match all the requirements of an irregular verb view and\r\n   * should not match irregular verb voice view (either this or\r\n   * irregular verb voice view shall be shown for a single inflection).\r\n   * @param {Inflection} inflection - Inflection that is checked on matching this view.\r\n   * @return {boolean} - True if this view shall be displayed for an inflection, false otherwise.\r\n   */\r\n  static enabledForInflection (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular &&\r\n      inflection.word &&\r\n      !this.voiceEnabledHdwds.includes(inflection.word.value) // Must NOT match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  /**\r\n   * A list of constructors of linked views.\r\n   * @return {View[]}\r\n   */\r\n  static linkedViewConstructors (homonym) {\r\n    let views = [LatinVerbParicipleIrregularView, LatinVerbInfinitiveIrregularView, LatinVerbImperativeIrregularView] // eslint-disable-line prefer-const\r\n    if (homonym.inflections.some(i => this.supineEnabledHdwds.includes(i.word.value))) {\r\n      views.push(LatinVerbSupineIrregularView)\r\n    }\r\n    return views\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport LatinVerbIrregularBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-base-view.js'\r\nimport LatinVerbParicipleIrregularView from '@views/lang/latin/verb/irregular/latin-verb-participle-irregular-view.js'\r\nimport LatinVerbSupineIrregularView from '@views/lang/latin/verb/irregular/latin-verb-supine-irregular-view.js'\r\nimport LatinVerbInfinitiveIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-infinitive-irregular-voice-view.js'\r\nimport LatinVerbImperativeIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-imperative-irregular-voice-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\n/**\r\n * An inflection table for Latin irregular verbs that have voice information in our local data.\r\n * For the ones that don't, a LatinVerbIrregularView is used.\r\n * The only way to distinguish between them the two is to analyze a headword\r\n * which is stored in a `word` feature of an inflection.\r\n */\r\nexport default class LatinVerbIrregularVoiceView extends LatinVerbIrregularBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbConjugationIrregularVoice'\r\n    this.name = 'verb-irregular'\r\n    this.title = 'Verb Conjugation (Irregular)'\r\n\r\n    // Some irregular verbs can be unimplemented and shall be skipped\r\n    const inflections = this.homonym.inflections.filter(item => item.constraints.implemented)\r\n    this.isImplemented = inflections.length > 0\r\n    if (this.isImplemented) {\r\n      const lemmas = this.constructor.dataset.getMatchingIrregularLemmas(inflections)\r\n      this.additionalTitle = lemmas.length > 0 ? `${lemmas[0].word}, ${lemmas[0].principalParts}` : ''\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_irregular_voice_view'\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.moods, this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.voices, this.features.moods]\r\n    features.rows = [this.features.tenses, this.features.numbers, this.features.persons]\r\n    features.columnRowTitles = [this.features.numbers, this.features.persons]\r\n    features.fullWidthRowTitles = [this.features.tenses]\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID && inflections.some(i => this.enabledForInflection(i))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Checks whether this view shall be displayed for an inflection given.\r\n   * @param {Inflection} inflection - Inflection that is checked on matching this view.\r\n   * @return {boolean} - True if this view shall be displayed for an inflection, false otherwise.\r\n   */\r\n  static enabledForInflection (inflection) {\r\n    return Boolean(\r\n      inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection.constraints &&\r\n      inflection.constraints.irregular && // Must be an irregular verb\r\n      inflection.word &&\r\n      this.voiceEnabledHdwds.includes(inflection.word.value) // Must match headwords for irregular verb voice table\r\n    )\r\n  }\r\n\r\n  /**\r\n   * A list of constructors of linked views.\r\n   * @return {View[]}\r\n   */\r\n  static linkedViewConstructors (homonym) {\r\n    let views = [LatinVerbParicipleIrregularView, LatinVerbInfinitiveIrregularVoiceView, LatinVerbImperativeIrregularVoiceView] // eslint-disable-line prefer-const\r\n    if (homonym.inflections.some(i => this.supineEnabledHdwds.includes(i.word.value))) {\r\n      views.push(LatinVerbSupineIrregularView)\r\n    }\r\n    return views\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinVerbIrregularLinkedBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js'\r\nimport LatinVerbIrregularView from '@views/lang/latin/verb/irregular/latin-verb-irregular-view.js'\r\nimport LatinVerbIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-irregular-voice-view.js'\r\nimport LatinVerbSupineIrregularView from '@views/lang/latin/verb/irregular/latin-verb-supine-irregular-view.js'\r\nimport GroupFeatureType from '@views/lib/group-feature-type'\r\nimport Table from '@views/lib/table'\r\n\r\nexport default class LatinVerbParticipleIrregularView extends LatinVerbIrregularLinkedBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbParticipleConjugationIrregular'\r\n    this.name = 'verb-participle-irregular'\r\n    this.title = 'Verb Participle Conjugation (Irregular)'\r\n    this.features.tenses = new GroupFeatureType(Feature.types.tense, this.constructor.languageID, 'Tense', [\r\n      this.constructor.model.typeFeature(Feature.types.tense).createFeature(Constants.TENSE_PRESENT),\r\n      this.constructor.model.typeFeature(Feature.types.tense).createFeature(Constants.TENSE_PERFECT),\r\n      this.constructor.model.typeFeature(Feature.types.tense).createFeature(Constants.TENSE_FUTURE)\r\n    ])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_participle_irregular_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB_PARTICIPLE]\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.tenses])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [this.features.voices]\r\n    features.rows = [this.features.tenses]\r\n    features.columnRowTitles = [this.features.tenses]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  /**\r\n   * A list of constructors of linked views.\r\n   * @return {View[]}\r\n   */\r\n  static linkedViewConstructors (homonym) {\r\n    let views = [LatinVerbIrregularView, LatinVerbIrregularVoiceView] // eslint-disable-line prefer-const\r\n    if (homonym.inflections.some(i => this.supineEnabledHdwds.includes(i.word.value))) {\r\n      views.push(LatinVerbSupineIrregularView)\r\n    }\r\n    return views\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinVerbIrregularLinkedBaseView from '@views/lang/latin/verb/irregular/latin-verb-irregular-linked-base-view.js'\r\nimport LatinVerbIrregularView from '@views/lang/latin/verb/irregular/latin-verb-irregular-view.js'\r\nimport LatinVerbIrregularVoiceView from '@views/lang/latin/verb/irregular/latin-verb-irregular-voice-view.js'\r\nimport LatinVerbParticipleIrregularView from '@views/lang/latin/verb/irregular/latin-verb-participle-irregular-view.js'\r\nimport Table from '@views/lib/table'\r\n\r\nexport default class LatinVerbSupineIrregularView extends LatinVerbIrregularLinkedBaseView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n\r\n    this.id = 'verbSupineConjugationIrregular'\r\n    this.name = 'verb-supine-irregular'\r\n    this.title = 'Verb Supine Conjugation (Irregular)'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_supine_irregular_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_SUPINE]\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.cases])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = []\r\n    features.rows = [this.features.cases]\r\n    features.columnRowTitles = [this.features.cases]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  /**\r\n   * Gets inflection data for a homonym. For this view we need to use irregular verb inflections only.\r\n   * @param {Homonym} homonym - A homonym for which inflection data needs to be retrieved\r\n   * @param {Object} options\r\n   * @return {InflectionSet} Resulting inflection set.\r\n   */\r\n  static getInflectionsData (homonym, options) {\r\n    // Select only those inflections that are required for this view\r\n    const inflections = homonym.inflections.filter(\r\n      i => i[Feature.types.part].value === this.mainPartOfSpeech &&\r\n        i.constraints && i.constraints.irregular\r\n    )\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, inflections, options)\r\n  }\r\n\r\n  /**\r\n   * A list of constructors of linked views.\r\n   * @return {View[]}\r\n   */\r\n  static linkedViewConstructors (homonym) {\r\n    return [LatinVerbIrregularView, LatinVerbIrregularVoiceView, LatinVerbParticipleIrregularView]\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinConjugationMoodVoiceView extends LatinVerbView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbConjugationMoodVoice'\r\n    this.name = 'conjugation-mood-voice'\r\n    this.title = 'Verb Conjugation'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_conjugation_mood_voice_view'\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.conjugations, this.features.moods, this.features.voices,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.conjugation),\r\n      this.constructor.model.typeFeature(Feature.types.mood),\r\n      this.constructor.model.typeFeature(Feature.types.voice)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinConjugationVoiceMoodView extends LatinVerbView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbConjugationVoiceMood'\r\n    this.name = 'conjugation-voice-mood'\r\n    this.title = 'Verb Conjugation'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_conjugation_voice_mood_view'\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.conjugations, this.features.voices, this.features.moods,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.conjugation),\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.mood)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinVerbMoodView from './latin-verb-mood-view.js'\r\n// import GroupFeatureType from '../../../lib/group-feature-type'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinImperativeView extends LatinVerbMoodView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbImperative'\r\n    this.name = 'imperative'\r\n    this.title = 'Imperative'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinImperativeView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.conjugations,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_imperative_view'\r\n  }\r\n\r\n  /**\r\n   * Determines wither this view can be used to display an inflection table of any data\r\n   * within an `inflectionData` object.\r\n   * By default a view can be used if a view and an inflection data piece have the same language,\r\n   * the same part of speech, and the view is enabled for lexemes within an inflection data.\r\n   * @param {symbol} languageID\r\n   * @param {Inflection[]} inflections\r\n   * @return {boolean}\r\n   */\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.mood] &&\r\n      inflection[Feature.types.mood].values.includes(Constants.MOOD_IMPERATIVE)\r\n  }\r\n\r\n  static morphemeCellFilter (suffix) {\r\n    return suffix.features[Feature.types.mood].values.includes(Constants.MOOD_IMPERATIVE)\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport LatinVerbMoodView from './latin-verb-mood-view.js'\r\n// import GroupFeatureType from '../../../lib/group-feature-type'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinInfinitiveView extends LatinVerbMoodView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbInfinitive'\r\n    this.name = 'infinitive'\r\n    this.title = 'Infinitive'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n      this.table.morphemeCellFilter = LatinInfinitiveView.morphemeCellFilter\r\n    }\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.conjugations,\r\n      this.features.tenses])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation)\r\n    ]\r\n    features.rows = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_infinitive_view'\r\n  }\r\n\r\n  /**\r\n   * Determines wither this view can be used to display an inflection table of any data\r\n   * within an `inflectionData` object.\r\n   * By default a view can be used if a view and an inflection data piece have the same language,\r\n   * the same part of speech, and the view is enabled for lexemes within an inflection data.\r\n   * @param {symbol} languageID\r\n   * @param {Inflection[]} inflections\r\n   * @return {boolean}\r\n   */\r\n  static matchFilter (languageID, inflections) {\r\n    return Boolean(\r\n      this.languageID === languageID &&\r\n      inflections.some(i => this.enabledForInflection(i)))\r\n  }\r\n\r\n  static enabledForInflection (inflection) {\r\n    return inflection[Feature.types.part].value === this.mainPartOfSpeech &&\r\n      inflection[Feature.types.mood] &&\r\n      inflection[Feature.types.mood].values.includes(Constants.MOOD_INFINITIVE)\r\n  }\r\n\r\n  static morphemeCellFilter (suffix) {\r\n    return suffix.features[Feature.types.mood].values.includes(Constants.MOOD_INFINITIVE)\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinMoodConjugationVoiceView extends LatinVerbView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbMoodConjugationVoice'\r\n    this.name = 'mood-conjugation-voice'\r\n    this.title = 'Verb Conjugation'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_mood_conjugation_voice_view'\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.moods, this.features.conjugations, this.features.voices,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.mood),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation),\r\n      this.constructor.model.typeFeature(Feature.types.voice)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinMoodVoiceConjugationView extends LatinVerbView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbMoodVoiceConjugation'\r\n    this.name = 'mood-voice-conjugation'\r\n    this.title = 'Verb Conjugation'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_mood_voice_conjugation_view'\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.moods, this.features.voices, this.features.conjugations,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.mood),\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n}\r\n","import Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\n\r\nexport default class LatinVerbMoodView extends LatinVerbView {\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n}\r\n","import { Constants, Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinView from '../latin-view.js'\r\nimport GroupFeatureType from '../../../lib/group-feature-type'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinVerbParticipleView extends LatinView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.partOfSpeech = this.constructor.mainPartOfSpeech\r\n    this.id = 'verbParticiple'\r\n    this.name = 'participle'\r\n    this.title = 'Participle'\r\n\r\n    this.features.tenses = new GroupFeatureType(Feature.types.tense, this.constructor.languageID, 'Tense', [\r\n      this.constructor.model.typeFeature(Feature.types.tense).createFeature(Constants.TENSE_PRESENT),\r\n      this.constructor.model.typeFeature(Feature.types.tense).createFeature(Constants.TENSE_PERFECT),\r\n      this.constructor.model.typeFeature(Feature.types.tense).createFeature(Constants.TENSE_FUTURE)\r\n    ])\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_verb_participle_view'\r\n  }\r\n\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB_PARTICIPLE, Constants.POFS_ADJECTIVE]\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.conjugations, this.features.tenses])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation)\r\n    ]\r\n    features.rows = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.columnRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n    features.fullWidthRowTitles = []\r\n  }\r\n}\r\n","import { Constants } from 'alpheios-data-models'\r\nimport LatinView from '../latin-view.js'\r\n\r\nexport default class LatinVerbView extends LatinView {\r\n  static get partsOfSpeech () {\r\n    return [Constants.POFS_VERB]\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinVoiceConjugationMoodView extends LatinVerbView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbVoiceConjugationMood'\r\n    this.name = 'voice-conjugation-mood'\r\n    this.title = 'Verb Conjugation'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_voice_conjugation_mood_view'\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.conjugations, this.features.moods,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation),\r\n      this.constructor.model.typeFeature(Feature.types.mood)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n}\r\n","import { Feature } from 'alpheios-data-models'\r\nimport Suffix from '../../../../lib/suffix.js'\r\nimport LatinVerbView from './latin-verb-view.js'\r\nimport Table from '../../../lib/table'\r\n\r\nexport default class LatinVoiceMoodConjugationView extends LatinVerbView {\r\n  constructor (homonym, inflectionData) {\r\n    super(homonym, inflectionData)\r\n    this.id = 'verbVoiceMoodConjugation'\r\n    this.name = 'voice-mood-conjugation'\r\n    this.title = 'Verb Conjugation'\r\n\r\n    if (this.isImplemented) {\r\n      this.createTable()\r\n    }\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'latin_voice_mood_conjugation_view'\r\n  }\r\n\r\n  static get inflectionType () {\r\n    return Suffix\r\n  }\r\n\r\n  createTable () {\r\n    this.table = new Table([this.features.voices, this.features.moods, this.features.conjugations,\r\n      this.features.tenses, this.features.numbers, this.features.persons])\r\n    let features = this.table.features // eslint-disable-line prefer-const\r\n    features.columns = [\r\n      this.constructor.model.typeFeature(Feature.types.voice),\r\n      this.constructor.model.typeFeature(Feature.types.mood),\r\n      this.constructor.model.typeFeature(Feature.types.conjugation)\r\n    ]\r\n    features.rows = [\r\n      this.constructor.model.typeFeature(Feature.types.tense),\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.columnRowTitles = [\r\n      this.constructor.model.typeFeature(Feature.types.number),\r\n      this.constructor.model.typeFeature(Feature.types.person)\r\n    ]\r\n    features.fullWidthRowTitles = [this.constructor.model.typeFeature(Feature.types.tense)]\r\n  }\r\n}\r\n","export default class Cell {\r\n  /**\r\n   * Creates a cell for an inflection table.\r\n   * @param {Morpheme[]} morphemes - A list of morphemes that belongs to this cell.\r\n   * @param {Feature[]} features - A list of features this cell corresponds to.\r\n   */\r\n  constructor (morphemes, features) {\r\n    this.morphemes = morphemes\r\n    if (!this.morphemes) {\r\n      this.morphemes = []\r\n    }\r\n    this.features = features\r\n    this.empty = (this.morphemes.length === 0)\r\n    this.suffixMatches = !!this.morphemes.find(element => {\r\n      if (element.match && element.match.suffixMatch) {\r\n        return element.match.suffixMatch\r\n      }\r\n      return undefined\r\n    })\r\n    this.morphologyMatch = this.morphemes.length > 0 && this.morphemes.every(m => m.match && m.match.morphologyMatch)\r\n\r\n    this.column = undefined // A column this cell belongs to\r\n    this.row = undefined // A row this cell belongs to\r\n\r\n    this._index = undefined\r\n    this.hidden = false\r\n    this.highlighted = false\r\n  }\r\n\r\n  get isDataCell () {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Sets a unique index of the cell that can be used for cell identification via 'data-index' attribute.\r\n   * @param {number} index - A unique cell index.\r\n   */\r\n  set index (index) {\r\n    this._index = index\r\n  }\r\n\r\n  /**\r\n   * Hides an element.\r\n   */\r\n  hide () {\r\n    this.hidden = true\r\n  }\r\n\r\n  /**\r\n   * Shows a previously hidden element.\r\n   */\r\n  show () {\r\n    this.hidden = false\r\n  }\r\n\r\n  /**\r\n   * Highlights a cell with color.\r\n   */\r\n  highlight () {\r\n    this.highlighted = true\r\n  }\r\n\r\n  /**\r\n   * Removes highlighting from a previously highlighted cell.\r\n   */\r\n  clearHighlighting () {\r\n    this.highlighted = false\r\n  }\r\n\r\n  /**\r\n   * Highlights a row and a column this cell belongs to.\r\n   */\r\n  highlightRowAndColumn () {\r\n    if (!this.column) {\r\n      throw new Error('Column is undefined.')\r\n    }\r\n    if (!this.row) {\r\n      throw new Error('Row is undefined.')\r\n    }\r\n    this.column.highlight()\r\n    this.row.highlight()\r\n  }\r\n\r\n  /**\r\n   * Removes highlighting form a previously highlighted row and column.\r\n   */\r\n  clearRowAndColumnHighlighting () {\r\n    if (!this.column) {\r\n      throw new Error('Column is undefined.')\r\n    }\r\n    if (!this.row) {\r\n      throw new Error('Row is undefined.')\r\n    }\r\n    this.column.clearHighlighting()\r\n    this.row.clearHighlighting()\r\n  }\r\n}\r\n","/**\r\n * Represent a column of cells in an inflection table.\r\n */\r\nexport default class Column {\r\n  /**\r\n   * Initializes column with a provided set of cells.\r\n   * @param {Cell} cells - Cells that are within this column.\r\n   */\r\n  constructor (cells) {\r\n    this.cells = cells\r\n    if (!cells) {\r\n      this.cells = []\r\n    }\r\n    this._headerCell = undefined\r\n    this.hidden = false\r\n    this.empty = this.cells.every(cell => cell.empty)\r\n    // TODO we should rename this to be cellMatches\r\n    this.suffixMatches = !!this.cells.find(cell => cell.suffixMatches || cell.morphologyMatch)\r\n\r\n    for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n      cell.column = this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assigns a header cell to the column.\r\n   * @param {HeaderCell} headerCell - A header cell of this column.\r\n   */\r\n  set headerCell (headerCell) {\r\n    this._headerCell = headerCell\r\n    headerCell.addColumn(this)\r\n  }\r\n\r\n  /**\r\n   * Returns a number of cells within this column.\r\n   * @returns {Number} A number of cells this column contains.\r\n   */\r\n  get length () {\r\n    return this.cells.length\r\n  }\r\n\r\n  /**\r\n   * Hides the column. Notifies a header about a state change.\r\n   */\r\n  hide () {\r\n    if (!this.hidden) {\r\n      this.hidden = true\r\n\r\n      for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n        cell.hide()\r\n      }\r\n      if (this._headerCell) {\r\n        this._headerCell.columnStateChange()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the column. Notifies a header about a state change.\r\n   */\r\n  show () {\r\n    if (this.hidden) {\r\n      this.hidden = false\r\n\r\n      for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n        cell.show()\r\n      }\r\n      if (this._headerCell) {\r\n        this._headerCell.columnStateChange()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlights a column and its header.\r\n   */\r\n  highlight () {\r\n    for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n      cell.highlight()\r\n    }\r\n    if (this._headerCell) {\r\n      this._headerCell.highlight()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes highlighting from a column and its header.\r\n   */\r\n  clearHighlighting () {\r\n    for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n      cell.clearHighlighting()\r\n    }\r\n    if (this._headerCell) {\r\n      this._headerCell.clearHighlighting()\r\n    }\r\n  }\r\n}\r\n","import { Feature, FeatureList, Logger } from 'alpheios-data-models'\r\nimport GroupFeatureType from './group-feature-type.js'\r\n\r\n/**\r\n * Holds a list of all grouping features of a table.\r\n */\r\nexport default class GroupFeatureList extends FeatureList {\r\n  /**\r\n   * Initializes object with an array of grouping feature objects.\r\n   * @param {Feature[]} features - An array of features that form a table.\r\n   * An order of features defines in what order a table tree would be built.\r\n   */\r\n  constructor (features) {\r\n    super(features)\r\n    this._columnFeatures = [] // Features that group cells into columns\r\n    this._rowFeatures = [] // Features that group cells into rows\r\n\r\n    this.forEach((feature) => { feature.groupFeatureList = this })\r\n\r\n    // Data column represents a single column that holds data values in tables that has no features that form columns.\r\n    this._dataColFeature = null\r\n  }\r\n\r\n  /**\r\n   * Whether a list has any column features\r\n   * @return {boolean} True if list has any column features, false otherwise\r\n   */\r\n  get hasColumnFeatures () {\r\n    return this._columnFeatures.length > 0\r\n  }\r\n\r\n  /**\r\n   * Return a list of all grouping features that form columns.\r\n   * @returns {GroupFeatureType[]} - An array of grouping features.\r\n   */\r\n  get columnFeatures () {\r\n    return this._columnFeatures\r\n  }\r\n\r\n  /**\r\n   * Defines what features form columns. An order of items specifies an order in which columns be shown.\r\n   * @param {Feature[] | GroupingFeature[]} features - What features form columns and what order\r\n   * these columns would follow.\r\n   */\r\n  set columns (features) {\r\n    for (const feature of features) {\r\n      let matchingFeature = this.ofType(feature.type) // eslint-disable-line prefer-const\r\n      if (!matchingFeature) {\r\n        throw new Error(`Feature of ${feature.type} is not found.`)\r\n      }\r\n      matchingFeature.formsColumn = true\r\n      this._columnFeatures.push(matchingFeature)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a first column feature item.\r\n   * @returns {GroupFeatureType} A fist column feature.\r\n   */\r\n  get firstColumnFeature () {\r\n    if (this._columnFeatures && this._columnFeatures.length) {\r\n      return this._columnFeatures[0]\r\n    }\r\n  }\r\n\r\n  isFirstColumnFeature (groupFeature) {\r\n    return groupFeature.isSameType(this.firstColumnFeature)\r\n  }\r\n\r\n  /**\r\n   * Returns a last column feature item.\r\n   * @returns {GroupFeatureType} A last column feature.\r\n   */\r\n  get lastColumnFeature () {\r\n    if (this._columnFeatures && this._columnFeatures.length) {\r\n      return this._columnFeatures[this._columnFeatures.length - 1]\r\n    }\r\n  }\r\n\r\n  isLastColumnFeature (groupFeature) {\r\n    return groupFeature.isSameType(this.lastColumnFeature)\r\n  }\r\n\r\n  /**\r\n   * Return a list of all grouping features that form rows.\r\n   * @returns {GroupFeatureType[]} - An array of grouping rows.\r\n   */\r\n  get rowFeatures () {\r\n    return this._rowFeatures\r\n  }\r\n\r\n  /**\r\n   * Defines what features form rows. An order of items specifies an order in which columns be shown.\r\n   * @param {Feature[] | GroupFeatureType[]} features - What features form rows and what order\r\n   * these rows would follow.\r\n   */\r\n  set rows (features) {\r\n    for (const feature of features) {\r\n      let matchingFeature = this.ofType(feature.type) // eslint-disable-line prefer-const\r\n      if (!matchingFeature) {\r\n        throw new Error(`Feature of ${feature.type} is not found.`)\r\n      }\r\n      matchingFeature.formsRow = true\r\n      this._rowFeatures.push(matchingFeature)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Some tables has no features that form columns. In order to show them properly\r\n   * we need to create a single data column that will hold data values.\r\n   * @return {GroupFeatureType} - A data column feature.\r\n   */\r\n  createDataColumn () {\r\n    // Need to use a known type to pass a type check\r\n    let feature = new Feature('word', 'empty value', Symbol('data column language')) // eslint-disable-line prefer-const\r\n    feature.type = 'data column type' // To bypass a type check\r\n    this._dataColFeature = new GroupFeatureType('data column type', Symbol('data column language'), '', [feature])\r\n    this._dataColFeature.dataColumn = true\r\n    // this._columnFeatures.push(groupFeature)\r\n    return this._dataColFeature\r\n  }\r\n\r\n  /**\r\n   * Checks whether this table has a data column\r\n   * @return {boolean} True if data column exist, false otherwise.\r\n   */\r\n  get hasDataColumn () {\r\n    return Boolean(this._dataColFeature)\r\n  }\r\n\r\n  /**\r\n   * Get feature from a certain position. Will ignore data columns.\r\n   * @param {number} position - Position of a feature, starting from zero.\r\n   * @return {GroupFeatureType | null} A feature element or null if not found.\r\n   */\r\n  getFeature (position) {\r\n    if (position < this._features.length) {\r\n      return this._features[position]\r\n    } else {\r\n      Logger.getInstance().warn(`Attempting to get feature that is out of bounds, position ${position}`)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get feature from a certain position, including data column.\r\n   * @param {number} position - Position of a feature, starting from zero.\r\n   * @return {GroupFeatureType | null} A feature element or null if not found.\r\n   */\r\n  getGroupingFeature (position) {\r\n    if (this.hasDataColumn) {\r\n      if (position === 0) {\r\n        return this._dataColFeature\r\n      } else if (position <= this._features.length) {\r\n        return this._features[position - 1]\r\n      }\r\n    } else {\r\n      return this.getFeature(position)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a first row feature item.\r\n   * @returns {GroupFeatureType} A fist row feature.\r\n   */\r\n  get firstRowFeature () {\r\n    if (this._rowFeatures && this._rowFeatures.length) {\r\n      return this._rowFeatures[0]\r\n    }\r\n  }\r\n\r\n  isFirstRowFeature (groupFeature) {\r\n    return groupFeature.isSameType(this.firstRowFeature)\r\n  }\r\n\r\n  /**\r\n   * Returns a last row feature item.\r\n   * @returns {GroupFeatureType} A last row feature.\r\n   */\r\n  get lastRowFeature () {\r\n    if (this._rowFeatures && this._rowFeatures.length) {\r\n      return this._rowFeatures[this._rowFeatures.length - 1]\r\n    }\r\n  }\r\n\r\n  isLastRowFeature (groupFeature) {\r\n    return groupFeature.isSameType(this.lastRowFeature)\r\n  }\r\n\r\n  /**\r\n   * Defines what are the titles of suffix cell rows within a table body.\r\n   * The number of such items defines how many left-side title columns this table would have (default is one).\r\n   * Full width titles (see below) does not need to be specified here.\r\n   * @param {Feature | GroupFeatureType} features - What suffix row titles this table would have.\r\n   */\r\n  set columnRowTitles (features) {\r\n    for (const feature of features) {\r\n      let matchingFeature = this.ofType(feature.type) // eslint-disable-line prefer-const\r\n      if (!matchingFeature) {\r\n        throw new Error(`Feature of ${feature.type} is not found.`)\r\n      }\r\n      matchingFeature.hasColumnRowTitle = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * In inflection tables, titles of features are usually located in left-side columns. However, some titles that\r\n   * group several rows together may span the whole table width. This setters defines\r\n   * what those features are.\r\n   * @param {Feature | GroupingFeature} features - What feature titles would take a whole row\r\n   */\r\n  set fullWidthRowTitles (features) {\r\n    for (const feature of features) {\r\n      let matchingFeature = this.ofType(feature.type) // eslint-disable-line prefer-const\r\n      if (!matchingFeature) {\r\n        throw new Error(`Feature of ${feature.type} is not found.`)\r\n      }\r\n      matchingFeature.hasFullWidthRowTitle = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a quantity of grouping features.\r\n   * @returns {number} - A number of grouping features.\r\n   */\r\n  get length () {\r\n    return this._features.length\r\n  }\r\n\r\n  /**\r\n   * Calculate a number of title columns.\r\n   * @returns {number} A number of title columns.\r\n   */\r\n  get titleColumnsQuantity () {\r\n    let quantity = 0\r\n    for (const feature of this._features) {\r\n      if (feature.hasColumnRowTitle) {\r\n        quantity++\r\n      }\r\n    }\r\n    return quantity\r\n  }\r\n}\r\n","import { LanguageModelFactory } from 'alpheios-data-models'\r\nimport LDF from '@lib/language-dataset-factory.js'\r\nimport Morpheme from '@lib/morpheme.js'\r\nimport RowTitleCell from './row-title-cell.js'\r\nimport HeaderCell from './header-cell.js'\r\n\r\n// TODO: Rebase on Feature instead of FeatureType\r\n/**\r\n * This is a wrapper around a FeatureType object. When a Table object creates a\r\n * hierarchical tree of suffixes, it uses grammatical features as tree nodes.\r\n * GroupFeatureType extends a Feature object so that it'll be able to store additional information\r\n * that is required for that.\r\n */\r\nexport default class GroupFeatureType {\r\n  /**\r\n   * GroupFeatureType extends FeatureType to serve as a grouping feature (i.e. a feature that forms\r\n   * either a column or a row in an inflection table). For that, it adds some additional functionality,\r\n   * such as custom feature orders that will allow to combine suffixes from several grammatical features\r\n   * (i.e. masculine and feminine) into a one column of a table.\r\n   * @param {string} type - A type of a feature.\r\n   * @param {symbol} languageID - A language ID.\r\n   * @param {string} titleMessageID - A message ID of a title, used to get a formatted title from a\r\n   * language-specific message bundle.\r\n   * @param {Feature[]} features - A list of feature values for this type (i.e. gender, declension, etc.).\r\n   * @param {Morpheme.comparisonTypes} comparisonType - What matching algorithm to use (exact or partial).\r\n   * Each feature value is stored in a Feature object.\r\n   */\r\n  constructor (type, languageID, titleMessageID, features, comparisonType = Morpheme.comparisonTypes.EXACT) {\r\n    this.type = type\r\n    this.languageID = languageID\r\n    this.featureMap = new Map(features.map(f => [f.value, f]))\r\n    this.comparisonType = comparisonType\r\n    this.dataset = LDF.getDataset(this.languageID)\r\n\r\n    this.groupTitle = titleMessageID\r\n    this._groupType = undefined\r\n\r\n    // Properties below are required to store information during tree creation\r\n    this.subgroups = [] // Each value of the feature\r\n    this.cells = [] // All cells within this group and below\r\n    this.parent = undefined\r\n    this.header = undefined\r\n\r\n    this._formsColumn = false\r\n    this._formsRow = false\r\n    this.hasColumnRowTitle = false // Whether this feature has a title of a suffix row in the left-side column.\r\n    this.hasFullWidthRowTitle = false // Whether this feature has a title of suffix rows that spans the whole table width.\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of GroupFeatureType from a type feature of a language\r\n   * @param {string} type - A type of a feature.\r\n   * @param {symbol} languageID - A language ID\r\n   * @param {string} titleMessageID - A message ID of a title, used to get a formatted title from a\r\n   * language-specific message bundle.\r\n   * @return {GroupFeatureType} A newly created GroupFeatureType object.\r\n   */\r\n  static createFromType (type, languageID, titleMessageID) {\r\n    return new GroupFeatureType(type, languageID, titleMessageID,\r\n      LanguageModelFactory.getLanguageModel(languageID).typeFeature(type).ownFeatures\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of GroupFeatureType of the same type and with same feature set as the current one.\r\n   * Used when it is required to obtain a copy and modify certain characteristics of it\r\n   * so that the original won't be affected by the change.\r\n   * This function does not create a full copy of a GroupFeatureType object. It creates an object with only\r\n   * those properties that will be required during a view definition.\r\n   * @return {GroupFeatureType} - A new object with same type and same features as the current one.\r\n   */\r\n  createOfSameType () {\r\n    return this.constructor.createFromType(this.type, this.languageID, this.groupTitle)\r\n  }\r\n\r\n  addFeature (key, values) {\r\n    const typeFeature = LanguageModelFactory.getLanguageModel(this.languageID).typeFeature(this.type)\r\n    const newFeature = typeFeature.createFeatures(values)\r\n    this.featureMap.set(key, newFeature)\r\n  }\r\n\r\n  /**\r\n   * This is a wrapper around orderedFeatures() that allows to set a custom feature order for particular columns.\r\n   * @param {Feature[]|[]} ancestorFeatures - An array of features in an inflection table tree before the current feature.\r\n   * A feature with the highest index in the array is the closest to the current one. The feature with zero index\r\n   * is the most far away. Ancestor features array is empty if the current feature is the first one in the list.\r\n   * @returns {Feature[] | Feature[][]} A sorted array of feature values.\r\n   */\r\n  getOrderedFeatures (ancestorFeatures = []) {\r\n    return Array.from(this.featureMap.values())\r\n    // return this.getOrderedValues(ancestorFeatures).map((value) => new Feature(this.type, value, this.languageID))\r\n  }\r\n\r\n  /**\r\n   * This is a wrapper around orderedValues() that allows to set a custom feature order for particular columns.\r\n   * By default it returns features in the same order that is defined in a base FeatureType class.\r\n   * Redefine it to provide a custom grouping and sort order.\r\n   * @returns {string[] | string[][]} A sorted array of feature values.\r\n   */\r\n  /* getOrderedValues (ancestorFeatures) {\r\n    return this._orderIndex\r\n  } */\r\n\r\n  /**\r\n   * Returns a column or row title for a value of a feature provided.\r\n   * Redefine it if you want to display custom titles instead of feature values.\r\n   * @param {string} featureValue - A value of a Feature object\r\n   * @return {string} - A row or column title for a table\r\n   */\r\n  getTitle (featureValue) {\r\n    if (this.featureMap.has(featureValue)) {\r\n      return this.featureMap.get(featureValue).value\r\n    } else {\r\n      // Pass through for texts that are not feature values\r\n      return featureValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether this feature forms a columns group.\r\n   * @returns {boolean} True if this feature forms a column.\r\n   */\r\n  get formsColumn () {\r\n    return this._formsColumn\r\n  }\r\n\r\n  /**\r\n   * Sets that this feature would form a column.\r\n   * @param {boolean} value\r\n   */\r\n  set formsColumn (value) {\r\n    this._formsColumn = value\r\n    this._formsRow = !value // Can't do both\r\n  }\r\n\r\n  /**\r\n   * Whether this feature forms a row group.\r\n   * @returns {boolean} True if this feature forms a row.\r\n   */\r\n  get formsRow () {\r\n    return this._formsRow\r\n  }\r\n\r\n  /**\r\n   * Sets that this feature would form a row.\r\n   * @param {boolean} value\r\n   */\r\n  set formsRow (value) {\r\n    this._formsRow = value\r\n    this._formsColumn = !value // Can't do both\r\n  }\r\n\r\n  /**\r\n   * How many groups this feature would form.\r\n   * @returns {Number} A number of groupes formed by this feature.\r\n   */\r\n  get size () {\r\n    return this.featureMap.size\r\n  }\r\n\r\n  /**\r\n   * Checks if two grouping features are of the same type.\r\n   * @param {GroupFeatureType} groupingFeature - A grouping feature to compare with the current one.\r\n   * @returns {boolean} True if grouping features are of the same type.\r\n   */\r\n  isSameType (groupingFeature) {\r\n    return this.type === groupingFeature.type\r\n  }\r\n\r\n  /**\r\n   * Creates a row title cell for a feature from the current group.\r\n   * @param {string} value - A text that will be shown within a cell.\r\n   * @param {number} nvGroupQty - A number of narrow view groups.\r\n   * @returns {RowTitleCell} A created RowTitleCell object.\r\n   */\r\n  createRowTitleCell (value, nvGroupQty) {\r\n    return new RowTitleCell(value, this, nvGroupQty)\r\n  }\r\n\r\n  createHeaderCell (value, columnSpan) {\r\n    return new HeaderCell(value, this, columnSpan)\r\n  }\r\n}\r\n","/**\r\n * A cell in a header row, a column title cell.\r\n */\r\nexport default class HeaderCell {\r\n  /**\r\n   * Initializes a header cell.\r\n   * @param {string} featureValue - A title text that will be shown in the header cell.\r\n   * @param {GroupFeatureType} groupingFeature - A feature that defines one or several columns this header forms.\r\n   * @param {number} [span=1] - How many columns in a table this header cell forms.\r\n   */\r\n  constructor (featureValue, groupingFeature, span = 1) {\r\n    this.feature = groupingFeature\r\n    this.title = groupingFeature.getTitle(featureValue)\r\n    this.span = span\r\n\r\n    this.parent = undefined\r\n    this.children = []\r\n    this.columns = []\r\n\r\n    this.value = this.title\r\n  }\r\n\r\n  /**\r\n   * Registers a column that's being formed by this header cell. Adds column to itself and to its parent(s).\r\n   * @param {Column} column - A column that is formed by this header cell.\r\n   */\r\n  addColumn (column) {\r\n    this.columns = this.columns.concat([column])\r\n\r\n    if (this.parent) {\r\n      this.parent.addColumn(column)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Temporary changes a width of a header cell. This happens when one or several columns\r\n   * that this header forms are hidden or shown.\r\n   * @param value\r\n   */\r\n  changeSpan (value) {\r\n    this.span += value\r\n  }\r\n\r\n  /**\r\n   * This function will notify all parents and children of a title column that some columns under this headers cell\r\n   * changed their state (i.e. were hidden or shown). This way parents and children will be able to update their\r\n   * states accordingly.\r\n   */\r\n  columnStateChange () {\r\n    let visibleColumns = 0\r\n    for (const column of this.columns) {\r\n      if (!column.hidden) {\r\n        visibleColumns++\r\n      }\r\n    }\r\n    if (this.span !== visibleColumns) {\r\n      // Number of visible columns has been changed\r\n      const change = visibleColumns - this.span\r\n      this.changeSpan(change)\r\n\r\n      // Notify parents and children\r\n      if (this.children.length) {\r\n        for (let child of this.children) { // eslint-disable-line prefer-const\r\n          child.columnStateChange()\r\n        }\r\n      }\r\n      if (this.parent) {\r\n        this.parent.columnStateChange()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlights a header cell, its parent and children\r\n   */\r\n  highlight () {\r\n    if (!this.highlighted) {\r\n      this.highlighted = true\r\n      if (this.parent) {\r\n        this.parent.highlight()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes highlighting from a header cell, its parent and children\r\n   */\r\n  clearHighlighting () {\r\n    if (this.highlighted) {\r\n      this.highlighted = false\r\n      if (this.parent) {\r\n        this.parent.clearHighlighting()\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Stores group data during feature tree construction.\r\n */\r\nexport default class NodeGroup {\r\n  /**\r\n   * Creates feature group data structures.\r\n   */\r\n  constructor () {\r\n    this.subgroups = [] // Each value of the feature\r\n    this.cells = [] // All cells within this group and below\r\n    this.parent = undefined\r\n    this.header = undefined\r\n\r\n    this.groupFeatureType = undefined // Defines a feature type that forms a tree level this node is in.\r\n    this.ancestorFeatures = undefined // Defines feature values of this node's parents.\r\n  }\r\n}\r\n","/**\r\n * A cell that specifies a title for a row in an inflection table.\r\n */\r\nexport default class RowTitleCell {\r\n  /**\r\n   * Initializes a row title cell.\r\n   * @param {string} featureValue - A text that will be shown within the cell.\r\n   * @param {GroupFeatureType} groupingFeature - A grouping feature that specifies a row for which a title cell\r\n   * is created.\r\n   * @param {number} nvGroupQty - A number of narrow view groups. Because each group will be shown separately\r\n   * and will have its own title cells, we need to create a copy of a title cell for each such group.\r\n   */\r\n  constructor (featureValue, groupingFeature, nvGroupQty) {\r\n    this.parent = undefined\r\n    this.title = groupingFeature.getTitle(featureValue)\r\n    this.feature = groupingFeature\r\n    this.nvGroupQty = nvGroupQty\r\n    this.span = 1\r\n    this.formsColumn = this.feature.formsColumn\r\n    this.fullWidth = this.feature.hasFullWidthRowTitle\r\n    this.titleColumnsQuantity = this.feature.groupFeatureList.titleColumnsQuantity\r\n\r\n    this.value = this.title\r\n\r\n    if (this.feature.formsColumn && this.feature.groupFeatureList.titleColumnsQuantity > 1) {\r\n      this.span = this.titleColumnsQuantity\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Same as `placeholder`, but generates a cell in Vue.js style\r\n   * @param {number} width - How many columns this cell should span\r\n   * @return {Object}\r\n   */\r\n  /**\r\n  * Generates an empty cell placeholder of a certain width. Useful for situation when empty title cells need to be\r\n  * inserted into a table structure (i.e. when title cells occupy multiple columns).\r\n  * @param {number} span - A number of columns a placeholder cell would occupy.\r\n  * @returns {Object}\r\n   */\r\n  static placeholder (span = 1) {\r\n    return {\r\n      value: '', // This cell is empty\r\n      span: span\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Some table layouts require multiple title cells to be shown for a row. These could be, for example, a title\r\n   * cell for a parent category that will follow a title cell for a category that defines a row. In such situation a\r\n   * title cell will have a parent, which will represent a parent cell object.\r\n   * This function returns an array of title cells for a row, starting from the topmost parent and moving down\r\n   * tot the current title cell.\r\n   * @returns {RowTitleCell[]} An array of title row cells representing a title cell hierarchy list.\r\n   */\r\n  get hierarchyList () {\r\n    let parentCells = []\r\n    if (this.parent) {\r\n      parentCells = this.parent.hierarchyList\r\n    }\r\n    return parentCells.concat(this)\r\n  }\r\n\r\n  /**\r\n   * Highlights this row title cell\r\n   */\r\n  highlight () {\r\n    this.highlighted = true\r\n  }\r\n\r\n  /**\r\n   * Removes highlighting from this row title cell\r\n   */\r\n  clearHighlighting () {\r\n    this.highlighted = false\r\n  }\r\n}\r\n","/**\r\n * Represents a row of cells\r\n */\r\nexport default class Row {\r\n  /**\r\n   * Populates row with cells\r\n   * @param {Cell[]} cells - Cells that belong to this row\r\n   */\r\n  constructor (cells = []) {\r\n    this.cells = cells\r\n    if (!cells) {\r\n      this.cells = []\r\n    }\r\n    this.titleCell = undefined\r\n\r\n    for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n      cell.row = this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a cell to the row.\r\n   * This is a chainable function.\r\n   * @param {Cell} cell - A cell to be added to the row\r\n   */\r\n  add (cell) {\r\n    cell.row = this\r\n    this.cells.push(cell)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Returns a number of cells in a row\r\n   * @returns {Number} A number of cells in a row\r\n   */\r\n  get length () {\r\n    return this.cells.length\r\n  }\r\n\r\n  get empty () {\r\n    return this.cells.filter(c => !c.empty).length === 0\r\n  }\r\n\r\n  /**\r\n   * Cells are usually grouped into rows not by a single feature, but by combination of features.\r\n   * In such situations, a row might have not one, but several title cells.\r\n   * Those additional title cells will be stored in a `parent` property of each other.\r\n   * However, all parent feature values will be shown only for the first row in a group\r\n   * in the current table format. For other rows in a group parent values (the ones that are\r\n   * the same within a group) will be omitted and only. They will display only those feature values\r\n   * that are different between the rows in a group (i.e. the last grouping feature value).\r\n   * Thus, the first row in a group will have a title cell value and its parent values set.\r\n   * Other rows in a group will have only a title cell value set, but the parent value of it will be empty\r\n   * (this will indicate that those parent values will not be shown for rows that are not first in a group).\r\n   * This function checks if a current row is the first one in a group or not.\r\n   * @return {boolean}\r\n   */\r\n  get firstInGroup () {\r\n    return Boolean(this.titleCell && this.titleCell.parent)\r\n  }\r\n\r\n  /**\r\n   * Returns a portion of a cells array starting from `from` item and up to, but not including, `upto` element.\r\n   * It does not create new copies of cells to populate a newly created array; this array contains references to\r\n   * the same cells that original Row refers to. It also does not update row reference within Cell objects.\r\n   *\r\n   * This function presents a way to create another structure of existing table's cells.\r\n   * It can be useful for views that have a different structure (i.e. narrow view).\r\n   * @param {number} from\r\n   * @param {number} upto\r\n   */\r\n  slice (from, upto) {\r\n    let slice = new Row() // eslint-disable-line prefer-const\r\n    if (from < 0 && from > this.cells.length) {\r\n      throw new Error('\"from\" parameter is out of range.')\r\n    }\r\n    if (upto < 0 && upto > this.cells.length) {\r\n      throw new Error('\"upto\" parameter is out of range.')\r\n    }\r\n    for (let index = from; index < upto; index++) {\r\n      slice.cells.push(this.cells[index])\r\n    }\r\n    slice.titleCell = this.titleCell\r\n    return slice\r\n  }\r\n\r\n  /**\r\n   * Highlights all cells in a row, and a title cells\r\n   */\r\n  highlight () {\r\n    for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n      cell.highlight()\r\n    }\r\n    if (this.titleCell) {\r\n      this.titleCell.highlight()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes highlighting from all cells in a row, and from a title cell\r\n   */\r\n  clearHighlighting () {\r\n    for (let cell of this.cells) { // eslint-disable-line prefer-const\r\n      cell.clearHighlighting()\r\n    }\r\n    if (this.titleCell) {\r\n      this.titleCell.clearHighlighting()\r\n    }\r\n  }\r\n}\r\n","import Suffix from '../../lib/suffix.js'\r\nimport Cell from './cell.js'\r\nimport Column from './column.js'\r\nimport Row from './row.js'\r\nimport GroupFeatureList from './group-feature-list.js'\r\nimport NodeGroup from './node-group.js'\r\n\r\n/**\r\n * Represents an inflection table.\r\n */\r\nexport default class Table {\r\n  /**\r\n   * Initializes an inflection table.\r\n   * @param {GroupFeatureType[]} features - An array of grouping features. An order of elements in this array\r\n   */\r\n  constructor (features) {\r\n    this.features = new GroupFeatureList(features)\r\n    this.cells = [] // Will be populated by groupByFeature()\r\n\r\n    /*\r\n    This is a special filter function that, if defined will do additional filtering of morhpemes within a cell.\r\n     */\r\n    this.morphemeCellFilter = undefined\r\n  }\r\n\r\n  /**\r\n   * Creates a table tree and other data structures (columns, rows, headers).\r\n   * This function is chainabe.\r\n   * @param {Morpheme[]} morphemes - An array of morphemes to build table from.\r\n   * @param {Object} options - Table's options\r\n   * @returns {Table} Reference to self for chaining.\r\n   */\r\n  construct (morphemes, options = {\r\n    emptyColumnsHidden: true,\r\n    noSuffixMatchesHidden: true\r\n  }) {\r\n    this.morphemes = morphemes\r\n\r\n    this.hasHeaders = this.features.hasColumnFeatures\r\n    this.tree = this.groupByFeature(morphemes)\r\n    this.headers = this.hasHeaders ? this.constructHeaders() : []\r\n    this.columns = this.constructColumns()\r\n    this.rows = this.constructRows()\r\n    this.options = options\r\n    // A table can collapse if there are some columns with suffix matches and some without\r\n    this.canCollapse = this._canCollapse()\r\n    if (!this.canCollapse) {\r\n      // If table cannot be collapsed or expanded it should always be shown in full form\r\n      this.options.noSuffixMatchesHidden = false\r\n    }\r\n\r\n    if (this.options.emptyColumnsHidden) {\r\n      this.hideEmptyColumns()\r\n    } else {\r\n      this.showEmptyColumns()\r\n    }\r\n    if (this.options.noSuffixMatchesHidden) {\r\n      this.hideNoSuffixMatchesGroups()\r\n    } else {\r\n      this.showNoSuffixMatchesGroups()\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Returns a number of columns with data (suffix or morpheme) cells in a table.\r\n   * @returns {number} A number of columns with data cells in a table.\r\n   */\r\n  get dataColumnQty () {\r\n    if (!this.columns) {\r\n      throw new Error('Columns are not populated yet.')\r\n    }\r\n    return this.columns.length\r\n  }\r\n\r\n  /**\r\n   * Returns a number of columns with row titles in a table.\r\n   * @returns {number} A number of columns with row titles.\r\n   */\r\n  get titleColumnQty () {\r\n    if (!this.features) {\r\n      throw new Error('Features are not defined.')\r\n    }\r\n    return this.features.titleColumnsQuantity\r\n  }\r\n\r\n  /**\r\n   * Returns a number of rows with data (suffix or morpheme) cells in a table.\r\n   * @returns {number} A number of rows with suffix cells.\r\n   */\r\n  get dataRowQty () {\r\n    if (!this.columns) {\r\n      throw new Error('Columns are not populated yet.')\r\n    }\r\n    return this.columns[0].length\r\n  }\r\n\r\n  /**\r\n   * Groups all morphemes into a tree according to their grammatical features. There are several levels in this tree.\r\n   * Each level corresponds to a one grouping feature. The order of items in GroupingFeatures List object\r\n   * defines an order of those levels.\r\n   * Nodes on each level are values of a grammatical feature that forms this level. An order of those values\r\n   * is determined by the order of values within a GroupFeatureType object of each feature.\r\n   * This is a recursive function.\r\n   * @param {Morpheme[]} morphemes - Suffixes to be grouped.\r\n   * @param {Feature[]} ancestorFeatures - A list of feature values on levels above the current.\r\n   * @param {number} currentLevel - At what level in a tree we are now. Used to stop recursion.\r\n   * @returns {NodeGroup} A top level group of morphemes that contain subgroups all way down to the last group.\r\n   */\r\n  groupByFeature (morphemes, ancestorFeatures = [], currentLevel = 0) {\r\n    let group = new NodeGroup() // eslint-disable-line prefer-const\r\n    if (!this.features.hasColumnFeatures && !this.features.hasDataColumn) {\r\n      /*\r\n      Table has no column features and will have only one column with data values.\r\n      In that case we need to create a single placeholder column group.\r\n      Set placeholder's group feature to fake a last column.\r\n       */\r\n      group.groupFeatureType = this.features.createDataColumn()\r\n      const subGroup = this.groupByFeature(morphemes, ancestorFeatures, currentLevel)\r\n      group.subgroups.push(subGroup)\r\n      group.cells = group.cells.concat(subGroup.cells)\r\n    } else {\r\n      group.groupFeatureType = this.features.getFeature(currentLevel)\r\n      group.ancestorFeatures = ancestorFeatures.slice()\r\n\r\n      // Iterate over each value of the feature\r\n      for (const featureValue of group.groupFeatureType.getOrderedFeatures(ancestorFeatures)) {\r\n        if (ancestorFeatures.length > 0 && ancestorFeatures[ancestorFeatures.length - 1].type === group.groupFeatureType.type) {\r\n          // Remove previously inserted feature of the same type\r\n          ancestorFeatures.pop()\r\n        }\r\n        ancestorFeatures.push(featureValue)\r\n\r\n        // Suffixes that are selected for current combination of feature values\r\n        let selectedMorphemes = morphemes.filter(s => s.featureMatch(featureValue, group.groupFeatureType.comparisonType))\r\n\r\n        if (currentLevel < this.features.length - 1) {\r\n          // Divide to further groups\r\n          const subGroup = this.groupByFeature(selectedMorphemes, ancestorFeatures, currentLevel + 1)\r\n          group.subgroups.push(subGroup)\r\n          group.cells = group.cells.concat(subGroup.cells)\r\n        } else {\r\n          // This is the last level. This represent a cell with morphemes\r\n          // Split result has a list of morphemes in a table cell. We need to combine items with same endings.\r\n          if (selectedMorphemes.length > 0) {\r\n            if (this.morphemeCellFilter) {\r\n              selectedMorphemes = selectedMorphemes.filter(this.morphemeCellFilter)\r\n            }\r\n\r\n            selectedMorphemes = Suffix.combine(selectedMorphemes)\r\n          }\r\n\r\n          let cell = new Cell(selectedMorphemes, ancestorFeatures.slice()) // eslint-disable-line prefer-const\r\n          group.subgroups.push(cell)\r\n          group.cells.push(cell)\r\n          this.cells.push(cell)\r\n          cell.index = this.cells.length - 1\r\n        }\r\n      }\r\n      ancestorFeatures.pop()\r\n      return group\r\n    }\r\n    return group\r\n  }\r\n\r\n  /**\r\n   * Create columns out of a morphemes organized into a tree.\r\n   * This is a recursive function.\r\n   * @param {NodeGroup} tree - A tree of morphemes.\r\n   * @param {Column[]} columns - An array of columns to be constructed.\r\n   * @param {number} currentLevel - Current recursion level.\r\n   * @returns {Array} An array of columns of suffix cells.\r\n   */\r\n  constructColumns (tree = this.tree, columns = [], currentLevel = 0) {\r\n    const currentFeature = this.features.getGroupingFeature(currentLevel)\r\n    let groups = [] // eslint-disable-line prefer-const\r\n    for (const [index, feature] of currentFeature.getOrderedFeatures(tree.ancestorFeatures).entries()) {\r\n      const cellGroup = tree.subgroups[index]\r\n      // Iterate until it is the last row feature\r\n\r\n      if (!this.features.isLastRowFeature(currentFeature)) {\r\n        const currentResult = this.constructColumns(cellGroup, columns, currentLevel + 1)\r\n        if (currentFeature.formsRow) {\r\n          // TODO: Avoid creating extra cells\r\n\r\n          /**\r\n           * An array of cells that represent a group of rows. First cell in each group will show\r\n           * its title value of a row as well as all titles of parent values. As other cells in a group\r\n           * will have the same parent values, they will be omitted and only the current row title be shown.\r\n           * @type {{groups: Cell[], titleCell: RowTitleCell}}\r\n           */\r\n          let group = { // eslint-disable-line prefer-const\r\n            groups: currentResult,\r\n            titleCell: currentFeature.createRowTitleCell(feature.value, this.features.firstColumnFeature.size)\r\n          }\r\n          group.groups[0].titleCell.parent = group.titleCell\r\n          groups.push(group)\r\n        } else if (currentFeature.dataColumn || this.features.isLastColumnFeature(currentFeature)) {\r\n          let column = new Column(cellGroup.cells) // eslint-disable-line prefer-const\r\n          column.groups = currentResult\r\n          column.header = feature.value\r\n          column.index = columns.length\r\n          columns.push(column)\r\n          if (this.hasHeaders) {\r\n            // Don't need header cells for tables with no column features\r\n            column.headerCell = this.headers[this.headers.length - 1].cells[columns.length - 1]\r\n          }\r\n        }\r\n      } else {\r\n        // Last level, last row feature, will have a group consisting of a cell and a title cell\r\n        cellGroup.titleCell = currentFeature.createRowTitleCell(\r\n          feature.value,\r\n          this.features.firstColumnFeature && this.features.firstColumnFeature.size ? this.features.firstColumnFeature.size : 1\r\n        )\r\n        const group = {\r\n          cell: cellGroup,\r\n          titleCell: cellGroup.titleCell\r\n        }\r\n        groups.push(group)\r\n      }\r\n    }\r\n    if (currentFeature.formsRow) {\r\n      return groups\r\n    }\r\n    return columns\r\n  }\r\n\r\n  /**\r\n   * Creates an array of header cell rows.\r\n   * This is a recursive function.\r\n   * @param {NodeGroup} tree - A tree of morphemes.\r\n   * @param {Row[]} headers - An array of rows with header cells.\r\n   * @param {number} currentLevel - Current recursion level.\r\n   * @returns {Array} A two-dimensional array of header cell rows.\r\n   */\r\n  constructHeaders (tree = this.tree, headers = [], currentLevel = 0) {\r\n    const currentFeature = this.features.columnFeatures[currentLevel]\r\n\r\n    let cells = [] // eslint-disable-line prefer-const\r\n    for (const [index, feature] of currentFeature.getOrderedFeatures(tree.ancestorFeatures).entries()) {\r\n      const cellGroup = tree.subgroups[index]\r\n\r\n      // Iterate over all column features (features that form columns)\r\n      if (currentLevel < this.features.columnFeatures.length - 1) {\r\n        const subCells = this.constructHeaders(cellGroup, headers, currentLevel + 1)\r\n\r\n        let columnSpan = 0\r\n        for (const cell of subCells) {\r\n          columnSpan += cell.span\r\n        }\r\n\r\n        let headerCell = currentFeature.createHeaderCell(feature.value, columnSpan) // eslint-disable-line prefer-const\r\n        headerCell.children = subCells\r\n        for (let cell of subCells) { // eslint-disable-line prefer-const\r\n          cell.parent = headerCell\r\n        }\r\n\r\n        if (!headers[currentLevel]) {\r\n          headers[currentLevel] = new Row()\r\n        }\r\n        headers[currentLevel].titleCell = currentFeature.createRowTitleCell(\r\n          currentFeature.groupTitle, this.features.firstColumnFeature.size)\r\n\r\n        headers[currentLevel].add(headerCell)\r\n        cells.push(headerCell)\r\n      } else {\r\n        // Last level\r\n        const headerCell = currentFeature.createHeaderCell(feature.value)\r\n\r\n        if (!headers[currentLevel]) {\r\n          headers[currentLevel] = new Row()\r\n        }\r\n\r\n        headers[currentLevel].add(headerCell)\r\n        headers[currentLevel].titleCell = currentFeature.createRowTitleCell(\r\n          currentFeature.groupTitle, this.features.firstColumnFeature.size)\r\n        cells.push(headerCell)\r\n      }\r\n    }\r\n    if (currentLevel === 0) {\r\n      return headers\r\n    } else {\r\n      return cells\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an array of rows by parsing an array of columns.\r\n   * @returns {Row[]} An array of rows.\r\n   */\r\n  constructRows () {\r\n    let rows = [] // eslint-disable-line prefer-const\r\n    for (let rowIndex = 0; rowIndex < this.dataRowQty; rowIndex++) {\r\n      rows[rowIndex] = new Row()\r\n      rows[rowIndex].titleCell = this.columns[0].cells[rowIndex].titleCell\r\n      for (let columnIndex = 0; columnIndex < this.dataColumnQty; columnIndex++) {\r\n        rows[rowIndex].add(this.columns[columnIndex].cells[rowIndex])\r\n      }\r\n    }\r\n    let filtered = [] // eslint-disable-line prefer-const\r\n    for (const [index, row] of rows.entries()) {\r\n      if (!row.empty) {\r\n        filtered.push(row)\r\n      } else {\r\n        /*\r\n        This row is empty and will be removed. If it is a first row in a group,\r\n        parents of its titleCell shall be moved to the next row, if that row belongs to the same group\r\n        */\r\n        if (row.firstInGroup && index + 1 < rows.length && !rows[index + 1].firstInGroup) {\r\n          rows[index + 1].titleCell.parent = row.titleCell.parent\r\n        }\r\n      }\r\n    }\r\n    return filtered\r\n  }\r\n\r\n  /**\r\n   * Hides empty columns in a table.\r\n   */\r\n  hideEmptyColumns () {\r\n    for (let column of this.columns) { // eslint-disable-line prefer-const\r\n      if (column.empty) {\r\n        column.hide()\r\n      }\r\n    }\r\n    this.options.emptyColumnsHidden = true\r\n  }\r\n\r\n  /**\r\n   * Show all empty columns that were previously hidden.\r\n   */\r\n  showEmptyColumns () {\r\n    for (let column of this.columns) { // eslint-disable-line prefer-const\r\n      if (column.hidden) {\r\n        column.show()\r\n      }\r\n    }\r\n    this.options.emptyColumnsHidden = false\r\n  }\r\n\r\n  /**\r\n   * Checks wither a table can be collapsed\r\n   * @return {boolean} True if a table can collapse, false otherwise\r\n   * @private\r\n   */\r\n  _canCollapse () {\r\n    let colsWithMatches = 0\r\n    let nonEmptyColQty = 0\r\n    if (this.headers.length > 0) {\r\n      for (const headerCell of this.headers[0].cells) {\r\n        if (headerCell.columns.some(column => column.suffixMatches)) {\r\n          colsWithMatches++\r\n        }\r\n        if (!headerCell.columns.every(column => column.empty)) {\r\n          nonEmptyColQty++\r\n        }\r\n      }\r\n    }\r\n    // A table can collapse if it has all columns with matches, but not every column has matches in it.\r\n    return colsWithMatches > 0 && colsWithMatches < nonEmptyColQty\r\n  }\r\n\r\n  /**\r\n   * Hide groups that have no morpheme matches.\r\n   */\r\n  hideNoSuffixMatchesGroups () {\r\n    for (const headerCell of this.headers[0].cells) {\r\n      const matches = !!headerCell.columns.find(column => column.suffixMatches)\r\n      if (!matches) {\r\n        for (let column of headerCell.columns) { // eslint-disable-line prefer-const\r\n          column.hide()\r\n        }\r\n      }\r\n    }\r\n    this.options.noSuffixMatchesHidden = true\r\n  }\r\n\r\n  /**\r\n   * Show groups that have no suffix matches.\r\n   */\r\n  showNoSuffixMatchesGroups () {\r\n    for (let column of this.columns) { // eslint-disable-line prefer-const\r\n      column.show()\r\n    }\r\n    if (this.options.emptyColumnsHidden) {\r\n      this.hideEmptyColumns()\r\n    }\r\n    this.options.noSuffixMatchesHidden = false\r\n  }\r\n}\r\n","/* eslint-disable prefer-const */\r\nimport { Constants, LanguageModelFactory as LMF, Logger } from 'alpheios-data-models'\r\nimport ViewSet from './view-set.js'\r\nimport LatinViewSet from '../lang/latin/latin-view-set.js'\r\nimport GreekViewSet from '../lang/greek/greek-view-set.js'\r\n\r\nexport default class ViewSetFactory {\r\n  static create (homonym) {\r\n    let viewSet\r\n    try {\r\n      const Constructor = this.getConstructor(homonym.languageID)\r\n      viewSet = new Constructor(homonym)\r\n    } catch (e) {\r\n      Logger.getInstance().error(`Cannot build inflection tables: ${e}`)\r\n      // Create an empty ViewSet with no inflection data\r\n      viewSet = new ViewSet()\r\n    }\r\n\r\n    return viewSet\r\n  }\r\n\r\n  static hasInflectionsEnabled (languageID) {\r\n    return LMF.getLanguageModel(languageID).canInflect()\r\n  }\r\n\r\n  static getConstructor (languageID) {\r\n    switch (languageID) {\r\n      case Constants.LANG_LATIN:\r\n        return LatinViewSet\r\n      case Constants.LANG_GREEK:\r\n        return GreekViewSet\r\n      default:\r\n        return ViewSet\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a created and initialized instance of a standard form view\r\n   * @param standardFormData\r\n   * @param {Object} standardFormData - A data object for the standard form view\r\n   * @param {symbol} standardFormData.langID - A language ID\r\n   * @param {String} standardFormData.viewID - A view ID\r\n   * @param {String} [standardFormData.title] - A view title (optional)\r\n   * @param {String} [standardFormData.form] - A word form (optional)\r\n   * @param {String} [standardFormData.suffix] - A word suffix (optional)\r\n   * @param {String} [standardFormData.paradigmID] - A paradigm ID (for Greek paradigms only)\r\n   * @return {View} An initialized view\r\n   */\r\n  static getStandardForm (standardFormData) {\r\n    return this.getConstructor(standardFormData.langID).getStandardForm(standardFormData)\r\n  }\r\n}\r\n","import { LanguageModelFactory, Logger } from 'alpheios-data-models'\r\nimport LanguageDatasetFactory from '../../lib/language-dataset-factory.js'\r\n\r\n/**\r\n * A set of inflection table views that represent all possible forms of inflection data. A new ViewSet instance\r\n * mast be created for each new inflection data piece.\r\n */\r\nexport default class ViewSet {\r\n  /**\r\n   * @param {Homonym} homonym - Data about inflections we need to build views for\r\n   */\r\n  constructor (homonym = undefined) {\r\n    this.homonym = homonym\r\n    this.matchingViews = []\r\n    this.matchingViewsMap = new Map()\r\n    this.inflectionData = null\r\n    this.enabled = false\r\n\r\n    if (this.homonym) {\r\n      this.languageID = homonym.languageID\r\n      this.datasets = LanguageDatasetFactory.getDatasets(homonym.languageID)\r\n\r\n      /**\r\n       * Whether inflections are enabled for the homonym's language\r\n       */\r\n      this.enabled = LanguageModelFactory.getLanguageModel(homonym.languageID).canInflect()\r\n\r\n      if (this.enabled) {\r\n        for (const lexeme of homonym.lexemes) {\r\n          for (const inflection of lexeme.inflections) {\r\n            // Inflections are grouped by part of speech\r\n            try {\r\n              this.datasets.forEach(dataset => {\r\n                dataset.setInflectionData(inflection, lexeme.lemma)\r\n              })\r\n            } catch (e) {\r\n              Logger.getInstance().error(`Cannot set inflection data: ${e}`)\r\n            }\r\n          }\r\n        }\r\n        this.matchingViews.push(...this.constructor.views.reduce(\r\n          (acc, view) => acc.concat(...view.getMatchingInstances(this.homonym)), []))\r\n\r\n        this.updateMatchingViewsMap(this.matchingViews)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a list of views available within a view set. Should be redefined in descendant classes.\r\n   * @return {View[]} A list of views available within the view set.\r\n   */\r\n  static get views () {\r\n    return []\r\n  }\r\n\r\n  get partsOfSpeech () {\r\n    return Array.from(this.matchingViewsMap.keys())\r\n  }\r\n\r\n  get hasMatchingViews () {\r\n    return this.matchingViewsMap.size > 0\r\n  }\r\n\r\n  updateMatchingViewsMap (views) {\r\n    for (const view of views) {\r\n      if (!this.matchingViewsMap.has(view.partOfSpeech)) {\r\n        this.matchingViewsMap.set(view.partOfSpeech, [])\r\n      }\r\n      let storedInstances = this.matchingViewsMap.get(view.partOfSpeech) // eslint-disable-line prefer-const\r\n      // Filter out instances that are already stored in a view set\r\n      const isNew = !storedInstances.find(v => v.sameAs(view))\r\n      if (isNew) {\r\n        storedInstances.push(view)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all matching views available, or matching views available only for a particular part of speech.\r\n   * Views are sorted according to sorting rules defined for each part of speech.\r\n   * Each view might have linked views specified within a view class. Those view will be added after\r\n   * an original view\r\n   * @param {string | undefined} partOfSpeech - A part of speech for which views should be returned.\r\n   * If not specify, will result in views returned for all parts of speech available for ViewSet's inflection data.\r\n   * @return {View[]}\r\n   */\r\n  getViews (partOfSpeech = undefined) {\r\n    let viewsUnsorted // eslint-disable-line prefer-const\r\n    if (partOfSpeech) {\r\n      // Return views for a particular part of speech\r\n      viewsUnsorted = this.matchingViewsMap.has(partOfSpeech) ? this.matchingViewsMap.get(partOfSpeech) : []\r\n    } else {\r\n      // Return all matching views\r\n      viewsUnsorted = Array.from(this.matchingViewsMap.values()).reduce((acc, views) => acc.concat(...views), [])\r\n    }\r\n    const viewList = this.constructor.views\r\n    return viewsUnsorted.sort(function (a, b) {\r\n      return viewList.indexOf(a.constructor) - viewList.indexOf(b.constructor)\r\n    })\r\n  }\r\n\r\n  static getViewByID (viewID) {\r\n    return this.views.find(v => v.viewID === viewID)\r\n  }\r\n\r\n  static getStandardForm (options) {\r\n    if (!options || !options.viewID) {\r\n      throw new Error('Obligatory options property, \"viewID\", is missing')\r\n    }\r\n    const view = this.getViewByID(options.viewID)\r\n    return view ? view.getStandardFormInstance(options) : null\r\n  }\r\n}\r\n","import { Feature, Inflection, Homonym, LanguageModelFactory, Language } from 'alpheios-data-models'\r\nimport LDF from '../../lib/language-dataset-factory.js'\r\nimport WideView from './wide-view'\r\nimport Form from '@lib/form.js'\r\nimport uuidv4 from 'uuid/v4'\r\n\r\n/**\r\n * Represents a single view.\r\n */\r\nexport default class View {\r\n  /**\r\n   * Initializes a View object with options. There is at least one view per part of speech,\r\n   * but there could be several views for the same part of speech that show different table representation of a view.\r\n   * @param {Homonym} homonym - A homonym\r\n   * @param {InflectionSet} inflectionSet - An inflection data object.\r\n   */\r\n  constructor (homonym, inflectionSet) {\r\n    this.homonym = homonym\r\n    this.inflectionData = inflectionSet\r\n    this.pageHeader = {}\r\n    // A view can be rendered for different parts of speech. This is a part of speech this view currently uses\r\n    this.partOfSpeech = this.constructor.mainPartOfSpeech\r\n\r\n    // An HTML element where this view is rendered\r\n    this.container = undefined\r\n\r\n    /**\r\n     * A view ID that is unique not only for each view class, but also for each view instance.\r\n     * @type {string}\r\n     */\r\n    this.uid = uuidv4()\r\n\r\n    // The following three props must be implemented by descendant classes.\r\n    /**\r\n     * A unique ID of a view class. Can be used as a value in view selectors.\r\n     * Should consist of lowercase letters, numbers, and underscores only.\r\n     * @type {string}\r\n     */\r\n    this.id = 'base_view'\r\n    this.name = 'base view'\r\n    this.title = 'Base View'\r\n\r\n    // Indicates whether this view has a pre-rendered table, such as in case with Greek paradigms\r\n    this.hasPrerenderedTables = this.constructor.hasPrerenderedTables\r\n\r\n    if (!this.constructor.hasPrerenderedTables) {\r\n      this.isImplemented = this.inflectionData.isImplemented\r\n    } else {\r\n      this.isImplemented = true\r\n    }\r\n\r\n    this.forms = new Set()\r\n    this.table = {\r\n      options: {}\r\n    }\r\n    this.wideView = new WideView()\r\n\r\n    /**\r\n     * Whether this view has any credits\r\n     * @type {boolean}\r\n     */\r\n    this.hasCredits = false\r\n    /**\r\n     * A text of a credits string\r\n     * @type {string}\r\n     */\r\n    this.creditsText = ''\r\n\r\n    /**\r\n     * An array of views that should be shown below the current view by the UI component.\r\n     * It is view's responsibility to create and initialize them.\r\n     * @type {View[]}\r\n     */\r\n    this.linkedViews = []\r\n\r\n    this.isRendered = false\r\n  }\r\n\r\n  static get viewID () {\r\n    return 'base_view'\r\n  }\r\n\r\n  /**\r\n   * Defines a language ID of a view. Should be redefined in child classes.\r\n   * @return {symbol}\r\n   */\r\n  static get languageID () {\r\n    return Symbol('Undefined language')\r\n  }\r\n\r\n  /**\r\n   * Defines one or several parts of speech of a view.\r\n   * These are parts of speech for which a view will be rendered.\r\n   * Should be redefined in child classes.\r\n   * @return {string[] | []} A list of part of speech names.\r\n   * An empty array if not defined.\r\n   */\r\n  static get partsOfSpeech () {\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * Returns a main part of speech of a view: a part of speech for which this view is defined.\r\n   * It is always the first view in parts of speech array. If no parts of speech defined,\r\n   * returns an empty string.\r\n   * @return {string} A main part of speech name. An empty string in not defined.\r\n   */\r\n  static get mainPartOfSpeech () {\r\n    return this.partsOfSpeech.length > 0 ? this.partsOfSpeech[0] : ''\r\n  }\r\n\r\n  /**\r\n   * Returns a language dataset for a view data.\r\n   * @return {LanguageDataset}\r\n   */\r\n  static get dataset () {\r\n    // Every view should have its own dataset property.\r\n    // But if it is not defined explicitly then this would be used.\r\n    // At this case we get the first defined dataset in all datasets defined for the language (by default).\r\n    return LDF.getDatasets(this.languageID)[0]\r\n  }\r\n\r\n  static get model () {\r\n    return LanguageModelFactory.getLanguageModel(this.languageID)\r\n  }\r\n\r\n  static get datasetConsts () {\r\n    return this.dataset.constructor.constants\r\n  }\r\n\r\n  /**\r\n   * Defines an inflection type (Suffix/Form) of a view. Should be redefined in child classes.\r\n   * @return {Suffix|Form|Paradigm|undefined}\r\n   */\r\n  static get inflectionType () {\r\n  }\r\n\r\n  static get hasPrerenderedTables () {\r\n    // Usually views do not have pre-rendered tables\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Checks wither an inflection table has any data.\r\n   * If view has no pre-rendered tables, a presence of table object with correct row items is checked.\r\n   * @return {boolean} True if table has no inflection data, false otherwise.\r\n   */\r\n  get isEmpty () {\r\n    return !this.hasPrerenderedTables && (!this.table || !this.table.rows || this.table.rows.length === 0)\r\n  }\r\n\r\n  /**\r\n   * Sets a title of a view.\r\n   * This method is chainable.\r\n   * @param {string} title - A title to set.\r\n   * @return {View} A view instance (for chaining).\r\n   */\r\n  setTitle (title) {\r\n    this.title = title\r\n    return this\r\n  }\r\n\r\n  sameAs (view) {\r\n    return this.id === view.id\r\n  }\r\n\r\n  /**\r\n   * Determines wither this view can be used to display an inflection table of any data\r\n   * within an `inflectionData` object.\r\n   * By default a view can be used if a view has the same language as homonym\r\n   * and homonym's inflections has at least one with a part of speech that matches view\r\n   * @param {symbol} languageID - A language ID of an inflection data\r\n   * @param {Inflection[]} inflections - An array of inflections\r\n   * @return {boolean}\r\n   */\r\n  static matchFilter (languageID, inflections) {\r\n    // Disable multiple parts of speech for now\r\n    const res = (this.languageID === languageID && inflections.some(i => i[Feature.types.part] && i[Feature.types.part].value === this.mainPartOfSpeech))\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * test to see if a view is enabled for a specific inflection\r\n   * @param {Inflection[]} inflection\r\n   * @return {boolean} true if the view should be shown false if not\r\n   */\r\n  static enabledForInflection (inflection) {\r\n    // default returns true\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Checks whether this view can be and needs to be rendered (i.e. construct inflection table structures).\r\n   * Views that don't need to be rendered are the ones that are not implemented and the ones tha have\r\n   * tables already pre-rendered (i.e. Greek paradigm tables that are stored in JSON files).\r\n   * @return {boolean}\r\n   */\r\n  get isRenderable () {\r\n    return this.isImplemented && !this.hasPrerenderedTables\r\n  }\r\n\r\n  /**\r\n   * Whether this inflection table can be expanded or collapsed.\r\n   * It usually can't if it has no suffix no matches.\r\n   * In this cause, a full table will always be shown.\r\n   * @return {boolean}\r\n   */\r\n  get canCollapse () {\r\n    return !this.hasPrerenderedTables && this.table.canCollapse\r\n  }\r\n\r\n  /**\r\n   * Renders an inflection table view. Done once per view.\r\n   * @param {Object} options - Render options\r\n   */\r\n  render (options = {\r\n    emptyColumnsHidden: true,\r\n    noSuffixMatchesHidden: true\r\n  }) {\r\n    if (!this.isRendered && this.isRenderable) {\r\n      this.footnotes = this.getFootnotes()\r\n      this.table.messages = this.messages\r\n      this.morphemes = this.getMorphemes()\r\n\r\n      this.table.construct(this.morphemes, options)\r\n      this.wideView.render(this.table)\r\n\r\n      // Render linked views (if any)\r\n      for (const view of this.linkedViews) {\r\n        view.render()\r\n      }\r\n      this.isRendered = true\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * A compatibility function to get morphemes, either suffixes or forms, depending on the view type.\r\n   * By default, it returns suffixes\r\n   */\r\n  getMorphemes () {\r\n    return this.inflectionData.types.has(this.constructor.inflectionType)\r\n      ? this.inflectionData.types.get(this.constructor.inflectionType).items\r\n      : []\r\n  }\r\n\r\n  /**\r\n   * A compatibility function to get footnotes for either suffixes or forms, depending on the view type\r\n   */\r\n  getFootnotes () {\r\n    return this.inflectionData.types.has(this.constructor.inflectionType)\r\n      ? this.inflectionData.types.get(this.constructor.inflectionType).footnotesMap\r\n      : new Map()\r\n  }\r\n\r\n  get isEmptyColumnsHidden () {\r\n    return this.table.options.emptyColumnsHidden\r\n  }\r\n\r\n  /**\r\n   * Hide or show column groups with no morphemes depending on the `value`.\r\n   * @param {boolean} value - Whether to hide or show column groups with no morphemes.\r\n   *                  true - hide groups with no morphemes in them;\r\n   *                  false - show groups with no morphemes in them.\r\n   */\r\n  emptyColumnsHidden (value) {\r\n    // Pre-rendered tables cannot collapse and expand\r\n    if (!this.hasPrerenderedTables && this.table.options.emptyColumnsHidden !== value) {\r\n      // If settings were actually changed\r\n      if (value) {\r\n        this.table.hideEmptyColumns()\r\n      } else {\r\n        this.table.showEmptyColumns()\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  get isNoSuffixMatchesGroupsHidden () {\r\n    return this.table.options ? this.table.options.noSuffixMatchesHidden : null\r\n  }\r\n\r\n  /**\r\n   * Hide or show column groups with no morpheme matches depending on the `value`.\r\n   * @param {boolean} value - Whether to hide or show groups with not suffix matches.\r\n   *                  true - hide groups with no suffix matches;\r\n   *                  false - show groups with no suffix matches.\r\n   */\r\n  noSuffixMatchesGroupsHidden (value) {\r\n    // Pre-rendered tables cannot collapse and expand\r\n    if (!this.hasPrerenderedTables && this.table.options.noSuffixMatchesHidden !== value) {\r\n      // If settings were actually changed\r\n      if (value) {\r\n        if (this.table.canCollapse) {\r\n          this.table.hideNoSuffixMatchesGroups()\r\n        }\r\n      } else {\r\n        this.table.showNoSuffixMatchesGroups()\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  highlightRowAndColumn (cell) {\r\n    cell.highlightRowAndColumn()\r\n  }\r\n\r\n  /**\r\n   * A utility function to convert a string to a Sentence case.\r\n   * @param {string} string - A source string.\r\n   * @return {string} A string capitalized to a Sentence case.\r\n   */\r\n  static toSentenceCase (string) {\r\n    string = string.toLowerCase()\r\n    return string[0].toUpperCase() + string.substr(1)\r\n  }\r\n\r\n  /**\r\n   * A utility function to convert a string to a Title Case.\r\n   * @param {string} string - A source string.\r\n   * @return {string} A string capitalized to a Title Case.\r\n   */\r\n  static toTitleCase (string) {\r\n    return string\r\n      .toLowerCase()\r\n      .split(' ')\r\n      .map(word => word.length >= 1 ? `${word[0].toUpperCase()}${word.substr(1)}` : '')\r\n      .join(' ')\r\n  }\r\n\r\n  /**\r\n   * Return inflection that this view will use to retrieve inflection data.\r\n   * @param {Inflection[]} inflections\r\n   * @return {Inflection[]}\r\n   */\r\n  static getRelatedInflections (inflections) {\r\n    return inflections.filter(i => i[Feature.types.part] && i[Feature.types.part].value === this.mainPartOfSpeech)\r\n  }\r\n\r\n  static getInflectionsData (homonym, options) {\r\n    // Select inflections this view needs\r\n    return this.dataset.createInflectionSet(this.mainPartOfSpeech, this.getRelatedInflections(homonym.inflections), options)\r\n  }\r\n\r\n  /**\r\n   * Finds out what views match inflection data and return initialized instances of those views.\r\n   * By default only one instance of the view is returned, by views can override this method\r\n   * to return multiple views if necessary (e.g. paradigm view can return multiple instances of the view\r\n   * with different data).\r\n   * @param {Inflection} homonym - An inflection for which matching instances to be found.\r\n   * @return {View[] | []} Array of view instances or an empty array if view instance does not match inflection data.\r\n   */\r\n  static getMatchingInstances (homonym) {\r\n    if (this.matchFilter(homonym.languageID, homonym.inflections)) {\r\n      const inflectionData = this.getInflectionsData(homonym)\r\n\r\n      if (inflectionData.types.has(this.inflectionType)) {\r\n        // There is some inflection data found for the view's morpheme type\r\n        const view = new this(homonym, inflectionData)\r\n\r\n        return [view]\r\n      }\r\n    }\r\n    return []\r\n  }\r\n\r\n  static createStandardFormHomonym (options) {\r\n    if (this.inflectionType === Form && !options.form) {\r\n      throw new Error('Obligatory options property, \"form\", is missing')\r\n    }\r\n    const stem = options.form ? options.form : 'stem'\r\n    const suffix = options.suffix ? options.suffix : 'suffix'\r\n    let inflection = new Inflection(stem, this.languageID, suffix)\r\n    inflection.addFeature(new Feature(Feature.types.part, this.mainPartOfSpeech, this.languageID))\r\n    const langData = LanguageModelFactory.getLanguageAttrs(this.languageID)\r\n    const lang = new Language(langData.languageCode)\r\n    const homonym = Homonym.createSimpleForm(stem, lang, [inflection])\r\n    inflection = this.dataset.setInflectionData(inflection, homonym.lexemes[0].lemma)\r\n    return homonym\r\n  }\r\n\r\n  static getStandardFormInstance (options) {\r\n    const homonym = this.createStandardFormHomonym(options)\r\n    const inflectionData = this.getInflectionsData(homonym, { findMatches: false })\r\n    // Standard form tables should have no suffix matches columns visible\r\n    let view = new this(homonym, inflectionData) // eslint-disable-line prefer-const\r\n    if (options.title) {\r\n      view.setTitle(options.title)\r\n    }\r\n    return view\r\n  }\r\n}\r\n","import RowTitleCell from './row-title-cell'\r\n\r\n/**\r\n * A representation of a table that is shown on wide screens (desktops).\r\n */\r\nexport default class WideView {\r\n  /**\r\n   * Initializes a wide view.\r\n   */\r\n  constructor () {\r\n    this.rows = [] // To store rows of view's inflection table\r\n\r\n    // Wither this view is collapsed in a UI component\r\n    this.collapsed = false\r\n  }\r\n\r\n  /**\r\n   * Calculates a number of visible columns in this view.\r\n   * @returns {number} A number of visible columns.\r\n   */\r\n  get visibleColumnQty () {\r\n    let qty = 0\r\n    for (const column of this.table.columns) {\r\n      if (!column.hidden) {\r\n        qty++\r\n      }\r\n    }\r\n    return qty\r\n  }\r\n\r\n  get titleColumnQty () {\r\n    return this.table.titleColumnQty\r\n  }\r\n\r\n  /**\r\n   * Renders a table in a size suitable for Vue.js display\r\n   * @param {Table} table - An inflection table object.\r\n   * @return {{rows: Array}}\r\n   */\r\n  render (table) {\r\n    this.rows = []\r\n    this.table = table\r\n    for (const row of table.headers) {\r\n      let cells = [] // eslint-disable-line prefer-const\r\n      cells.push(row.titleCell)\r\n      for (const cell of row.cells) {\r\n        cells.push(cell)\r\n      }\r\n      this.rows.push({ cells: cells })\r\n    }\r\n\r\n    for (const row of table.rows) {\r\n      let cells = [] // eslint-disable-line prefer-const\r\n      const titleCells = row.titleCell.hierarchyList\r\n      if (titleCells.length < this.table.titleColumnQty) {\r\n        cells.push(RowTitleCell.placeholder(this.titleColumnQty - titleCells.length))\r\n      }\r\n      for (const titleCell of titleCells) {\r\n        cells.push(titleCell)\r\n      }\r\n\r\n      for (const cell of row.cells) {\r\n        cells.push(cell)\r\n      }\r\n      this.rows.push({ cells: cells })\r\n    }\r\n  }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_alpheios_data_models__;","module.exports = __WEBPACK_EXTERNAL_MODULE_papaparse__;","module.exports = __WEBPACK_EXTERNAL_MODULE_uuid_v4__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./index.js\");\n"],"sourceRoot":""}