/* eslint-env jest */
/* eslint-disable no-unused-vars */
import 'whatwg-fetch'
import Table from '@views/lib/table.js'
import NarrowView from '@views/lib/narrow-view'
import WideView from '@views/lib/wide-view'

import GroupFeatureList from '@views/lib/group-feature-list.js'

import Form from '@lib/form.js'

import { Feature, Constants } from 'alpheios-data-models'
import { AlpheiosTuftsAdapter } from 'alpheios-morph-client'
import GreekLanguageDatasetJSON from '@tests/lib/lang/greek-language-dataset-json.js'
import LanguageDatasetFactory from '@lib/language-dataset-factory.js'
import GreekLanguageDataset from '@lib/lang/greek/greek-language-dataset.js'

import GroupFeatureType from '@views/lib/group-feature-type.js'

describe('table.test.js', () => {
  console.error = function () {}
  console.log = function () {}
  console.warn = function () {}

  let testGFT = []
  testGFT.push(new GroupFeatureType(new Feature(Feature.types.hdwd, 'δύο (2)', Constants.LANG_GREEK), 'Lemma'))
  testGFT.push(new GroupFeatureType(new Feature(Feature.types.gender, 'masculine', Constants.LANG_GREEK), 'Gender'))
  testGFT.push(new GroupFeatureType(new Feature(Feature.types.type, 'regular', Constants.LANG_GREEK), 'Type'))
  testGFT.push(new GroupFeatureType(new Feature(Feature.types.number, 'singular', Constants.LANG_GREEK), 'Number'))
  testGFT.push(new GroupFeatureType(new Feature(Feature.types.case, 'nominative', Constants.LANG_GREEK), 'Case'))

  let maAdapter, testHomonym, testInflectionData, testMorphemes, testFeatures, testCells

  Object.defineProperty(GreekLanguageDataset, 'verbParadigmTables', {
    get: jest.fn(() => GreekLanguageDatasetJSON.verbParadigmTables),
    set: jest.fn()
  })
  Object.defineProperty(GreekLanguageDataset, 'verbParticipleParadigmTables', {
    get: jest.fn(() => GreekLanguageDatasetJSON.verbParticipleParadigmTables),
    set: jest.fn()
  })

  beforeAll(async () => {
    maAdapter = new AlpheiosTuftsAdapter()
    testHomonym = await maAdapter.getHomonym('grc', 'δύο')
    testInflectionData = await LanguageDatasetFactory.getInflectionData(testHomonym)
    testMorphemes = testInflectionData.pos.get('numeral').types.get(Form).items
  })

  beforeEach(() => {
    jest.spyOn(console, 'error')
    jest.spyOn(console, 'log')
    jest.spyOn(console, 'warn')
  })
  afterEach(() => {
    jest.resetModules()
  })
  afterAll(() => {
    jest.clearAllMocks()
  })

  it('1 Table - constructor creates empty table with defined features', () => {
    let table = new Table(testGFT)
    expect(table.features).toBeInstanceOf(GroupFeatureList)
    expect(table.features._features.length).toEqual(5)
    expect(table.emptyColumnsHidden).toBeFalsy()
    expect(table.cells.length).toEqual(0)
  })

  it('2 Table - construct inits suffixes, executes groupByFeature, constructHeaders, constructColumns, constructRows, _hasAnyMatches and returns Table', () => {
    let table = new Table(testGFT)
    table.groupByFeature = jest.fn()
    table.constructHeaders = jest.fn()
    table.constructColumns = jest.fn()
    table.constructRows = jest.fn()
    table._hasAnyMatches = jest.fn()

    let result = table.construct(testMorphemes)

    expect(result).toBeInstanceOf(Table)
    expect(table.suffixes.length).toEqual(testMorphemes.length)

    expect(table.groupByFeature).toHaveBeenCalledWith(testMorphemes)
    expect(table.constructHeaders).toHaveBeenCalled()
    expect(table.constructColumns).toHaveBeenCalled()
    expect(table.constructRows).toHaveBeenCalled()
    expect(table._hasAnyMatches).toHaveBeenCalled()
  })

  it('3 Table - groupByFeature creates tree for rendering', () => {
    let table = new Table(testGFT)
    let tree = table.groupByFeature(testMorphemes)
    expect(tree.cells.length).toEqual(600)
  })

  it('10 Table - constructViews inits WideView, NarrowView and returns Table', () => {
    /*    let table = new Table(testGFT)

    table.groupByFeature = jest.fn()
    table.constructHeaders = jest.fn()
    table.constructColumns = jest.fn()
    table.constructRows = jest.fn()
    table._hasAnyMatches = jest.fn()

    table.construct(testMorphemes)

    let result = table.constructViews()

    expect(result).toBeInstanceOf(Table)
    expect(table.wideView).toBeInstanceOf(WideView)
    expect(table.narrowView).toBeInstanceOf(NarrowView) */
  })
})
