{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///../node_modules/axios/index.js","webpack:///../node_modules/axios/lib/adapters/xhr.js","webpack:///../node_modules/axios/lib/axios.js","webpack:///../node_modules/axios/lib/cancel/Cancel.js","webpack:///../node_modules/axios/lib/cancel/CancelToken.js","webpack:///../node_modules/axios/lib/cancel/isCancel.js","webpack:///../node_modules/axios/lib/core/Axios.js","webpack:///../node_modules/axios/lib/core/InterceptorManager.js","webpack:///../node_modules/axios/lib/core/createError.js","webpack:///../node_modules/axios/lib/core/dispatchRequest.js","webpack:///../node_modules/axios/lib/core/enhanceError.js","webpack:///../node_modules/axios/lib/core/settle.js","webpack:///../node_modules/axios/lib/core/transformData.js","webpack:///../node_modules/axios/lib/defaults.js","webpack:///../node_modules/axios/lib/helpers/bind.js","webpack:///../node_modules/axios/lib/helpers/buildURL.js","webpack:///../node_modules/axios/lib/helpers/combineURLs.js","webpack:///../node_modules/axios/lib/helpers/cookies.js","webpack:///../node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///../node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///../node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///../node_modules/axios/lib/helpers/parseHeaders.js","webpack:///../node_modules/axios/lib/helpers/spread.js","webpack:///../node_modules/axios/lib/utils.js","webpack:///../node_modules/axios/node_modules/is-buffer/index.js","webpack:///../node_modules/process/browser.js","webpack:///./controllers/user-data-manager.js","webpack:///./controllers/wordlist-controller.js","webpack:///./index.js","webpack:///./storage/indexed-db-adapter.js","webpack:///./storage/indexeddbDriver/indexed-db-load-process.js","webpack:///./storage/indexeddbDriver/indexed-db-object-stores-structure.js","webpack:///./storage/remote-db-adapter.js","webpack:///./storage/worditem-indexeddb-driver.js","webpack:///./storage/worditem-remotedb-driver.js","webpack:///external \"alpheios-data-models\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,uDAAa,E;;;;;;;;;;;;ACAzB;;AAEb,YAAY,mBAAO,CAAC,sDAAY;AAChC,aAAa,mBAAO,CAAC,kEAAkB;AACvC,eAAe,mBAAO,CAAC,4EAAuB;AAC9C,mBAAmB,mBAAO,CAAC,oFAA2B;AACtD,sBAAsB,mBAAO,CAAC,0FAA8B;AAC5D,kBAAkB,mBAAO,CAAC,0EAAqB;;AAE/C;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,0EAAsB;;AAElD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACjKa;;AAEb,YAAY,mBAAO,CAAC,mDAAS;AAC7B,WAAW,mBAAO,CAAC,iEAAgB;AACnC,YAAY,mBAAO,CAAC,6DAAc;AAClC,eAAe,mBAAO,CAAC,yDAAY;;AAEnC;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,mEAAiB;AACxC,oBAAoB,mBAAO,CAAC,6EAAsB;AAClD,iBAAiB,mBAAO,CAAC,uEAAmB;;AAE5C;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,qEAAkB;;AAEzC;;AAEA;AACA;;;;;;;;;;;;;ACnDa;;AAEb;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;AClBa;;AAEb,aAAa,mBAAO,CAAC,4DAAU;;AAE/B;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACxDa;;AAEb;AACA;AACA;;;;;;;;;;;;;ACJa;;AAEb,eAAe,mBAAO,CAAC,4DAAe;AACtC,YAAY,mBAAO,CAAC,sDAAY;AAChC,yBAAyB,mBAAO,CAAC,kFAAsB;AACvD,sBAAsB,mBAAO,CAAC,4EAAmB;;AAEjD;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,kCAAkC,cAAc;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;;;;;;;;;;;;;AC9Ea;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;;ACnDa;;AAEb,mBAAmB,mBAAO,CAAC,sEAAgB;;AAE3C;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;AAChC,oBAAoB,mBAAO,CAAC,wEAAiB;AAC7C,eAAe,mBAAO,CAAC,wEAAoB;AAC3C,eAAe,mBAAO,CAAC,0DAAa;AACpC,oBAAoB,mBAAO,CAAC,sFAA4B;AACxD,kBAAkB,mBAAO,CAAC,kFAA0B;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;;;;;;;;;;;;ACrFa;;AAEb;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBa;;AAEb,kBAAkB,mBAAO,CAAC,oEAAe;;AAEzC;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;;;ACnBA,+CAAa;;AAEb,YAAY,mBAAO,CAAC,mDAAS;AAC7B,0BAA0B,mBAAO,CAAC,+FAA+B;;AAEjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,iEAAgB;AACtC,GAAG;AACH;AACA,cAAc,mBAAO,CAAC,kEAAiB;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO,YAAY;AACnB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;;AC/Fa;;AAEb;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACjEa;;AAEb;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACba;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wCAAwC;AACxC,OAAO;;AAEP;AACA,0DAA0D,wBAAwB;AAClF;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,gCAAgC;AAChC,6BAA6B,aAAa,EAAE;AAC5C;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACpDa;;AAEb;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACba;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACnEa;;AAEb,YAAY,mBAAO,CAAC,oDAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;ACXa;;AAEb,YAAY,mBAAO,CAAC,sDAAY;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,eAAe;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;;;ACpDa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1Ba;;AAEb,WAAW,mBAAO,CAAC,iEAAgB;AACnC,eAAe,mBAAO,CAAC,wEAAW;;AAElC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,GAAG,SAAS;AAC5C,2BAA2B;AAC3B;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9SA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;;ACvLtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4E;AACF;AACZ;AACF;;AAE7C;;AAEf;AACA;AACA,aAAa,WAAW;AACxB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA,eAAe,sEAAgB;AAC/B;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA,eAAe,qEAAe;AAC9B;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gDAAgD,yBAAyB;AACzE;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,aAAa,OAAO,WAAW;AAC/B,cAAc,QAAQ;AACtB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,aAAa,OAAO,WAAW;AAC/B,cAAc,QAAQ;AACtB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,OAAO,UAAU,eAAe;AAC7C,cAAc,QAAQ;AACtB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,aAAa,OAAO,UAAU,+CAA+C;AAC7E;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,gCAAgC;AAChC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,+CAA+C,eAAe;AAC9D;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qEAAqE,MAAM;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,6EAAuB;AACnC;AACA;AACA,YAAY,4EAAsB;AAClC;;;;;;;;;;;;;AC7WA;AAAA;AAAA;AAAA;AAAqF;;AAEtE;AACf;AACA;AACA,aAAa,SAAS;AACtB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,KAAK;AACL;AACA;AACA;AACA,iDAAiD,+BAA+B,4BAA4B,GAAG,mBAAmB;AAClI;AACA,6CAA6C,6DAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sEAAiB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,yBAAyB,6DAAQ;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,iDAAiD,+BAA+B,4BAA4B;AAC5G;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,aAAa,GAAG,WAAW;AAC1F;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B,yBAAyB;AACtG;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO,OAAO,kCAAkC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,wBAAwB;AACvG,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,wBAAwB;AACvG,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,oBAAoB;AACnG;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,mBAAmB;AAClG,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B,mBAAmB;AAClG,KAAK;AACL;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO,UAAU;AACjB;AACA;AACA,wBAAwB,4DAAO;;AAE/B;AACA;AACA;AACA,OAAO,UAAU;AACjB;AACA;AACA,wBAAwB,4DAAO;;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4DAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;;AAE/B;;;;;;;;;;;;;AClTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqE;AACL;;AAElB;;;;;;;;;;;;;ACH9C;AAAA;AAAA;AAAA;AAA+C;;AAE/C;AACA;AACA;AACe;;AAEf;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,gE;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAQ;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8CAA8C,WAAW;AACzD;AACA,mCAAmC,oBAAoB;AACvD;;AAEA,8CAA8C,UAAU;;AAExD;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA,oEAAoE,QAAQ;AAC5E;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA,cAAc,IAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,IAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,uBAAuB;AACvB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,8GAA8G,yBAAyB;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,6CAA6C;AACjH,SAAS;AACT;AACA;;AAEA;AACA;AACA,qEAAqE,uBAAuB;AAC5F;AACA,SAAS;AACT;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,2BAA2B;AAC3B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,cAAc;AACd,aAAa,OAAO;AACpB,2BAA2B;AAC3B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,2BAA2B;AAC3B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,2BAA2B;AAC3B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,C;;;;;;;;;;;;ACpcA;AAAA;AAAA;AAAA;AAAoG;;AAErF;AACf;AACA;AACA,aAAa,OAAO;AACpB,cAAc,S;AACd;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAQ;AACvB;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,cAAc,S;AACd;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAQ;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,cAAc,S;AACd;AACA;AACA;;AAEA;AACA,yBAAyB,6DAAQ;AACjC,KAAK;AACL,uBAAuB,yEAAG;AAC1B;;AAEA;AACA;AACA;AACA,2BAA2B,2DAAM,KAAK,0DAAK;AAC3C;AACA,OAAO;AACP,uBAAuB,2DAAM,KAAK,0DAAK;AACvC;AACA,6BAA6B,4DAAO;AACpC;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAe;AACf;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS,8CAA8C;AACvD,SAAS,uDAAuD;AAChE,SAAS,uDAAuD;AAChE,SAAS,mEAAmE;AAC5E,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAyB;;AAEV;AACf;AACA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,4CAAK;;AAE9B;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,yBAAyB,4CAAK;AAC9B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA,yBAAyB,4CAAK;AAC9B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwG;;AAEC;AACrB;;AAErE;;AAEf;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mGAA8B;AACnD,SAAS;AACT,cAAc,wFAAoB;AAClC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB,mGAA8B;AACnD,SAAS;AACT;AACA,cAAc,wFAAoB;AAClC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB,mGAA8B;AACnD,SAAS;AACT;AACA,cAAc,wFAAoB;AAClC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,qBAAqB,mGAA8B;AACnD,SAAS;AACT;AACA,cAAc,wFAAoB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS,kCAAkC;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO,IAAI;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,cAAc,OAAO,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,cAAc,OAAO,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO,IAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA,yEAAyE,4DAAO;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACncA;AAAA;AAAA;AAAA;AAAwD;;AAEzC;AACf;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAiB;AAChC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA,eAAe,8BAA8B;AAC7C;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA,6BAA6B,kBAAkB;AAC/C;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB,cAAc;AACd;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChTA,kE","file":"alpheios-wordlist.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"alpheios-data-models\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"alpheios-data-models\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"alpheios-data-models\")) : factory(root[\"alpheios-data-models\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE_alpheios_data_models__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import WordItemIndexedDbDriver from '@/storage/worditem-indexeddb-driver.js'\r\nimport WordItemRemoteDbDriver from '@/storage/worditem-remotedb-driver.js'\r\nimport IndexedDBAdapter from '@/storage/indexed-db-adapter.js'\r\nimport RemoteDBAdapter from '@/storage/remote-db-adapter.js'\r\n\r\nexport default class UserDataManager {\r\n\r\n  /**\r\n   * Creates with auth argument, subscribe to WordItem and WorList events, inits blocked property and request queue\r\n   * @param {AuthModule} auth - auth object with userId and accessToken properties\r\n   * @param {String} events - events object of the WordlistController, passed in UIController\r\n   */\r\n  constructor (auth, events) {\r\n    this.auth = auth\r\n    this.subscriptions = []\r\n    if (events) {\r\n      this.subscriptions.push(events.WORDITEM_UPDATED.sub(this.update.bind(this)))\r\n      this.subscriptions.push(events.WORDITEM_DELETED.sub(this.delete.bind(this)))\r\n      this.subscriptions.push(events.WORDLIST_DELETED.sub(this.deleteMany.bind(this)))\r\n    }\r\n    this.blocked = false\r\n    this.requestsQueue = []\r\n  }\r\n\r\n  /**\r\n   * Clear this instance\r\n   * TODO we should make the UserDataManager a singleton so that it can\r\n   * fully accomodate switching users gracefully\r\n   */\r\n  clear() {\r\n    if (this.blocked) {\r\n      // TODO we should wait on the request queue completion\r\n      console.error(\"Destroying User Data Manager with requests pending\")\r\n    }\r\n    for (let unsub of this.subscriptions) {\r\n      unsub()\r\n    }\r\n    this.subscriptions = []\r\n  }\r\n\r\n  /**\r\n   * Initializes IndexedDBAdapter with appropriate local dbDriver (WordItemIndexedDbDriver)\r\n   * @param {String} dataType - data type for choosing a proper dbDriver (WordItem)\r\n   * @return {IndexedDBAdapter}\r\n   */\r\n  _localStorageAdapter(dataType) {\r\n    let dbDriver = new UserDataManager.LOCAL_DRIVER_CLASSES[dataType](this.auth.userId)\r\n    return new IndexedDBAdapter(dbDriver)\r\n  }\r\n\r\n  /**\r\n   * Initializes RemoteDBAdapter with appropriate remote dbDriver (WordItemRemoteDbDriver)\r\n   * @param {String} dataType - data type for choosing a proper dbDriver (WordItem)\r\n   * @return {RemoteDBAdapter}\r\n   */\r\n  _remoteStorageAdapter(dataType) {\r\n    let dbDriver = new UserDataManager.REMOTE_DRIVER_CLASSES[dataType](this.auth)\r\n    return new RemoteDBAdapter(dbDriver)\r\n  }\r\n\r\n  /**\r\n   * Checks availability of remote and local adapter according to params.source value\r\n   * @param {String} dataType - data type for choosing a proper dbDriver (WordItem)\r\n   * @return {RemoteDBAdapter}\r\n   */\r\n  checkAdapters (localAdapter, remoteAdapter, params) {\r\n    let localCheck = false\r\n    let remoteCheck = false\r\n\r\n    if (params.source === 'remote') {\r\n      localCheck = true\r\n      remoteCheck = remoteAdapter.available\r\n    } else if (params.source === 'local') {\r\n      localCheck = localAdapter.available\r\n      remoteCheck = true\r\n    } else {\r\n      localCheck = localAdapter.available\r\n      remoteCheck = remoteAdapter.available\r\n      if (!localAdapter.available) {\r\n        this.printErrorAdapterUnvailable(localAdapter)\r\n      }\r\n      if (!remoteAdapter.available) {\r\n        this.printErrorAdapterUnvailable(remoteAdapter)\r\n      }\r\n    }\r\n\r\n    return localCheck && remoteCheck\r\n  }\r\n\r\n  printErrorAdapterUnvailable(adapter) {\r\n    console.error(`Adapter is not available - ${adapter.constructor.name}`)\r\n  }\r\n\r\n  /**\r\n   * Promise-based method - updates object in local/remote storage\r\n   * uses blocking workflow:\r\n   * @param {Object} data\r\n   * @param {WordItem} data.dataObj - object for saving to local/remote storage\r\n   * @param {WordItem} data.params - could have segment property to define exact segment for updating\r\n   * @param {Object} [params={}] - additional parameters for updating, now it is only params.source = [local, remote, both]\r\n   * @return {Boolean} true if updated successful, false if not\r\n   */\r\n  async update(data, params = {}) {\r\n    if (this.blocked) {\r\n      this.requestsQueue.push({\r\n        method: 'update',\r\n        data, params\r\n      })\r\n      return\r\n    }\r\n    try {\r\n      params.source = params.source||'both'\r\n      let finalConstrName = this.defineConstructorName(data.dataObj.constructor.name)\r\n\r\n      let localAdapter = this._localStorageAdapter(finalConstrName)\r\n      let remoteAdapter = this._remoteStorageAdapter(finalConstrName)\r\n\r\n      let result = false\r\n      let segment = data.params && data.params.segment ? data.params.segment : localAdapter.dbDriver.segments\r\n\r\n      if (this.checkAdapters(localAdapter, remoteAdapter, params)) {\r\n        this.blocked = true\r\n        if (params.source === 'local') {\r\n          result = await localAdapter.update(data.dataObj, data.params)\r\n        } else if (params.source === 'remote') {\r\n          result = await remoteAdapter.update(data.dataObj, data.params)\r\n        } else {\r\n          let currentRemoteItems = await remoteAdapter.checkAndUpdate(data.dataObj, segment)\r\n          result = await localAdapter.checkAndUpdate(data.dataObj, segment, currentRemoteItems)\r\n        }\r\n\r\n        this.printErrors(remoteAdapter)\r\n        this.printErrors(localAdapter)\r\n\r\n        this.blocked = false\r\n        this.checkRequestQueue()\r\n      }\r\n      return result\r\n    } catch (error) {\r\n      console.error('Some errors happen on updating data in IndexedDB or RemoteDBAdapter', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Promise-based method - deletes single object in local/remote storage\r\n   * uses blocking workflow:\r\n   * @param {Object} data\r\n   * @param {WordItem} data.dataObj - object for saving to local/remote storage\r\n   * @param {WordItem} data.params - could have segment property to define exact segment for updating\r\n   * @param {Object} [params={}] - additional parameters for updating, now it is only params.source = [local, remote, both]\r\n   * @return {Boolean} true if deleted successful, false if not\r\n   */\r\n  async delete(data, params = {}) {\r\n    if (this.blocked) {\r\n      this.requestsQueue.push({\r\n        method: 'delete',\r\n        data, params\r\n      })\r\n      return\r\n    }\r\n    try {\r\n      this.blocked = true\r\n      let finalConstrName = this.defineConstructorName(data.dataObj.constructor.name)\r\n\r\n      let localAdapter = this._localStorageAdapter(finalConstrName)\r\n      let remoteAdapter = this._remoteStorageAdapter(finalConstrName)\r\n\r\n      let remoteResult = false\r\n      let localResult = false\r\n\r\n      if (this.checkAdapters(localAdapter, remoteAdapter, params)) {\r\n        this.blocked = true\r\n\r\n        remoteResult = true\r\n        localResult = true\r\n\r\n        if (params.source !== 'local') {\r\n          remoteResult = await remoteAdapter.deleteOne(data.dataObj)\r\n        }\r\n        if (params.source !== 'remote') {\r\n          localResult = await localAdapter.deleteOne(data.dataObj)\r\n        }\r\n\r\n        this.printErrors(remoteAdapter)\r\n        this.printErrors(localAdapter)\r\n\r\n        this.blocked = false\r\n        this.checkRequestQueue()\r\n      }\r\n      return remoteResult && localResult\r\n    } catch (error) {\r\n      console.error('Some errors happen on deleting item from IndexedDB or RemoteDBAdapter', error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Promise-based method - deletes all objects from the wordlist by languageCode in local/remote storage\r\n   * uses blocking workflow:\r\n   * @param {Object} data\r\n   * @param {String} data.languageCode - languageCode of Wordlist to be deleted\r\n   * @param {WordItem} data.params - could have segment property to define exact segment for updating\r\n   * @param {Object} [params={ source: both }] - additional parameters for updating, now it is only params.source = [local, remote, both]\r\n   * @return {Boolean} true if deleted successful, false if not\r\n   */\r\n  async deleteMany(data, params = {}) {\r\n    if (this.blocked) {\r\n      this.requestsQueue.push({\r\n        method: 'deleteMany',\r\n        data, params\r\n      })\r\n      return\r\n    }\r\n    try {\r\n\r\n      let remoteAdapter =  this._remoteStorageAdapter(data.dataType)\r\n      let localAdapter = this._localStorageAdapter(data.dataType)\r\n\r\n      let deletedLocal = false\r\n      let deletedRemote = false\r\n\r\n      if (this.checkAdapters(localAdapter, remoteAdapter, params)) {\r\n        deletedLocal = true\r\n        deletedRemote = true\r\n\r\n        this.blocked = true\r\n        if (params.source !== 'local') {\r\n          deletedRemote = await remoteAdapter.deleteMany(data.params)\r\n        }\r\n        if (params.source !== 'remote') {\r\n          deletedLocal = await localAdapter.deleteMany(data.params)\r\n        }\r\n\r\n        this.printErrors(remoteAdapter)\r\n        this.printErrors(localAdapter)\r\n\r\n        console.warn('Result of deleted many from IndexedDB', deletedLocal)\r\n\r\n        this.blocked = false\r\n        this.checkRequestQueue()\r\n      }\r\n\r\n      return deletedLocal && deletedRemote\r\n    } catch (error) {\r\n      console.error('Some errors happen on deleting data from IndexedDB or RemoteDBAdapter', error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Promise-based method - queries all objects from the wordlist by languageCode , only for only one wordItem\r\n   * or one wordItem from local/remote storage\r\n   * @param {Object} data\r\n   *                 data.languageCode - for quering all wordItems from wordList by languageCode\r\n   *                 data.wordItem - for quering one wordItem\r\n   *                 data.params - type specific query parameters\r\n   * @param {Object} [params={ source: both, type: short, syncDelete: false }] - additional parameters for updating, now there are the following:\r\n   *                  params.source = [local, remote, both]\r\n   *                  params.type = [short, full] - short - short data for homonym, full - homonym with definitions data\r\n   *                  params.syncDelete = [true, false] - if true (and params.source = both, and languageCode is defined in params),\r\n   *                                      than localItems would be compared with remoteItems, items that are existed only in local would be removed\r\n   * @return {WordItem[]}\r\n   */\r\n  async query (data, params = {}) {\r\n    try {\r\n      params.type = params.type||'short'\r\n      params.source = params.source||'both'\r\n      params.syncDelete = params.syncDelete||false\r\n\r\n      let remoteAdapter =  this._remoteStorageAdapter(data.dataType)\r\n      let localAdapter = this._localStorageAdapter(data.dataType)\r\n\r\n      let finalItems = []\r\n      let remoteItems\r\n\r\n      if (params.source === 'local') {\r\n        finalItems = await localAdapter.query(data.params)\r\n      } else if (params.source === 'remote') {\r\n        remoteItems = await remoteAdapter.query(data.params)\r\n        for(let remoteItem of remoteItems) {\r\n          finalItems.push(localAdapter.dbDriver.createFromRemoteData(remoteItem))\r\n        }\r\n      } else {\r\n        remoteItems = await remoteAdapter.query(data.params)\r\n        if (params.type === 'full') {\r\n          for (let remoteItem of remoteItems) {\r\n            await localAdapter.checkAndUpdate(remoteItem, data.params.segment, [remoteItem])\r\n          }\r\n          let localItems = await localAdapter.query(data.params)\r\n          finalItems = localItems\r\n        } else {\r\n          remoteItems = await remoteAdapter.query(data.params)\r\n          for(let remoteItem of remoteItems) {\r\n            let wordItem = localAdapter.dbDriver.createFromRemoteData(remoteItem)\r\n            finalItems.push(wordItem)\r\n            localAdapter.checkAndUpdate(wordItem, null, [remoteItem])\r\n          }\r\n        }\r\n        if (params.syncDelete && data.params.languageCode) {\r\n          this.deleteAbsentInRemote(localAdapter, remoteItems, data.params.languageCode)\r\n        }\r\n      }\r\n\r\n      this.printErrors(remoteAdapter)\r\n      this.printErrors(localAdapter)\r\n      return finalItems\r\n    } catch (error) {\r\n      console.error('Some errors happen on quiring data from IndexedDB or RemoteDBAdapter', error.message)\r\n    }\r\n  }\r\n\r\n  async deleteAbsentInRemote (localAdapter, remoteItems, languageCode) {\r\n    let localItems = await localAdapter.query({ languageCode })\r\n    for (let localItem of localItems) {\r\n      let checkID  = localAdapter.dbDriver.makeIDCompareWithRemote(localItem)\r\n      if (!remoteItems.find(remoteItem => remoteItem.ID === checkID)) {\r\n        console.warn('Need to delete from local', checkID)\r\n        this.delete({ dataObj: localItem})\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method prints errors from the errors property of the given adapter\r\n   */\r\n  printErrors (adapter) {\r\n    if (adapter.errors && adapter.errors.length > 0) {\r\n      adapter.errors.forEach(error => console.error(`Print error - ${error}`))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method checks request queue, and if it is not empty executes the first in the queue\r\n   */\r\n  checkRequestQueue () {\r\n    if (this.requestsQueue.length > 0) {\r\n      let curRequest = this.requestsQueue.shift()\r\n      this[curRequest.method](curRequest.data, curRequest.params)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks and formats Class name (if neccessary) to a normal state (after uglifying pugins)\r\n   * @param {String} sourceConstrName recieved class name\r\n   * @return {String} formatted class name\r\n   */\r\n  defineConstructorName (sourceConstrName) {\r\n    let firstLetter = sourceConstrName.substr(0,1)\r\n    let finalConstrName\r\n\r\n    if (firstLetter == firstLetter.toUpperCase()) {\r\n      finalConstrName = sourceConstrName\r\n    } else {\r\n      let removed = sourceConstrName.split('_').length-1\r\n      let classNameStart = sourceConstrName.replace('_', '').toLowerCase().length/2\r\n      finalConstrName = sourceConstrName.substr(-(classNameStart+removed-2))\r\n    }\r\n    return finalConstrName\r\n  }\r\n}\r\n\r\n// Constants (could be done better, dynamically, etc.)\r\nUserDataManager.LOCAL_DRIVER_CLASSES = {\r\n  WordItem: WordItemIndexedDbDriver\r\n}\r\nUserDataManager.REMOTE_DRIVER_CLASSES = {\r\n  WordItem: WordItemRemoteDbDriver\r\n}\r\n","import { PsEvent, WordList, WordItem, TextQuoteSelector } from 'alpheios-data-models'\r\n\r\nexport default class WordlistController {\r\n  /**\r\n   * @constructor\r\n   * @param {String[]} availableLangs language codes\r\n   * @param {PSEvent[]} events events that the controller can subscribe to\r\n   */\r\n  constructor (availableLangs, events) {\r\n    this.wordLists = {}\r\n    this.availableLangs = availableLangs\r\n    events.TEXT_QUOTE_SELECTOR_RECEIVED.sub(this.onTextQuoteSelectorReceived.bind(this))\r\n    events.HOMONYM_READY.sub(this.onHomonymReady.bind(this))\r\n    events.SHORT_DEFS_READY.sub(this.onDefinitionsReady.bind(this))\r\n    events.FULL_DEFS_READY.sub(this.onDefinitionsReady.bind(this))\r\n    events.LEMMA_TRANSL_READY.sub(this.onLemmaTranslationsReady.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Asynchronously initialize the word lists managed by this controller\r\n   * @param {UserDataManager} dataManager a user data manager to retrieve initial wordlist data from\r\n   * Emits a WORDLIST_UPDATED event when the wordlists are available\r\n   */\r\n  async initLists (dataManager) {\r\n    if (! dataManager) {\r\n      // if we don't have a data manager we don't need to preserve any existing data, just clear it out\r\n      this.wordLists = {} // clear out any existing lists\r\n    } else {\r\n      for (let languageCode of this.availableLangs) {\r\n        let cachedList = this.wordLists[languageCode]\r\n        delete this.wordLists[languageCode]\r\n        let wordItems = await dataManager.query({dataType: 'WordItem', params: {languageCode: languageCode}}, { syncDelete: true })\r\n        if (wordItems.length > 0) {\r\n          this.wordLists[languageCode] = new WordList(languageCode,wordItems)\r\n          WordlistController.evt.WORDLIST_UPDATED.pub(this.wordLists)\r\n        }\r\n        if (cachedList) {\r\n          for (let cachedItem of cachedList.values) {\r\n            try {\r\n              // replay the word selection events for the cached list\r\n              let cachedTqs = cachedItem.context.map(c => new TextQuoteSelector(c.languageCode,c.normalizedText,c.prefix,c.suffix,c.source))\r\n              for (let tq of cachedTqs) {\r\n                this.onTextQuoteSelectorReceived(tq)\r\n              }\r\n              if (cachedItem.homonym) {\r\n                this.onHomonymReady(cachedItem.homonym)\r\n              }\r\n            } catch (e) {\r\n              console.error(\"Error replaying cached wordlist item\",e)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return this.wordLists\r\n  }\r\n\r\n  getWordListItemCount() {\r\n    let count = 0\r\n    for (let languageCode of this.availableLangs) {\r\n      if (this.wordLists[languageCode]) {\r\n        count = count + this.wordLists[languageCode].size\r\n      }\r\n    }\r\n    return count\r\n  }\r\n\r\n  /**\r\n   * Get the wordlist for a specific language code\r\n   * @param {String} languageCode the language for the list\r\n   * @param {Boolean} create set to true to create the list of it doesn't exist\r\n   * Emits a WORDLIST_CREATED event if a new list is created\r\n   * @return {WordList} the wordlist\r\n   */\r\n  getWordList (languageCode, create=true) {\r\n    if (create && ! this._wordListExist(languageCode)) {\r\n      let wordList = new WordList(languageCode,[])\r\n      this.wordLists[languageCode] = wordList\r\n      WordlistController.evt.WORDLIST_CREATED.pub(wordList)\r\n    }\r\n    return this.wordLists[languageCode]\r\n  }\r\n\r\n  /**\r\n   * Remove a wordlist for a specific language code and all if its items\r\n   * @param {String} languageCode the language for the list\r\n   * Emits a WORDLIST_DELETED event\r\n   */\r\n  removeWordList (languageCode) {\r\n    delete this.wordLists[languageCode]\r\n    WordlistController.evt.WORDLIST_DELETED.pub({dataType: 'WordItem', params: {languageCode: languageCode}})\r\n    WordlistController.evt.WORDLIST_UPDATED.pub(this.wordLists)\r\n  }\r\n\r\n  /**\r\n   * Remove a WordItem from a WordList\r\n   * @param {String} languageCode the language of the item to be removed\r\n   * @param {String} targetWord the word to be removed\r\n   * Emits a WORDITEM_DELETED event for for the item that was deleted\r\n   */\r\n  removeWordListItem (languageCode, targetWord) {\r\n    let wordList = this.getWordList(languageCode, false)\r\n    if (wordList) {\r\n      let deleted = wordList.deleteWordItem(targetWord)\r\n      if (deleted) {\r\n        WordlistController.evt.WORDITEM_DELETED.pub({dataObj: deleted})\r\n        if (wordList.isEmpty) {\r\n          this.removeWordList(languageCode)\r\n        }\r\n      } else {\r\n        console.error('Trying to delete an absent element')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get an item from a word list\r\n   * @param {String} languageCode the language code of the item\r\n   * @param {String} targetWord the word of the item\r\n   * @param {Boolean} create true to create the item if it doesn't exist\r\n   * @return {WordItem} the retrieved or created WordItem\r\n   */\r\n  getWordListItem (languageCode, targetWord, create=false) {\r\n    let wordList = this.getWordList(languageCode, create)\r\n    let wordItem\r\n    if (wordList) {\r\n      wordItem = wordList.getWordItem(targetWord, create, WordlistController.evt.WORDITEM_UPDATED)\r\n    }\r\n    if (!wordItem) {\r\n      console.error(`There are no items for these parameters ${languageCode} ${targetWord}`)\r\n    }\r\n    return wordItem\r\n  }\r\n\r\n  /**\r\n   * Responds to a HOMONYM_READY event by creating or updating a wordlist item for a retrieved Homonym\r\n   * @param {Homonym} data\r\n   * Emits WORDITEM_UPDATED and WORDLIST_UPDATED events\r\n   */\r\n   onHomonymReady (data) {\r\n    // when receiving this event, it's possible this is the first time we are seeing the word so\r\n    // create the item in the word list if it doesn't exist\r\n    let wordItem = this.getWordListItem(data.language, data.targetWord, true)\r\n    wordItem.homonym = data\r\n    WordlistController.evt.WORDITEM_UPDATED.pub({dataObj: wordItem, params: {segment: 'shortHomonym'}})\r\n    // emit a wordlist updated event too in case the wordlist was updated\r\n    WordlistController.evt.WORDLIST_UPDATED.pub(this.wordLists)\r\n  }\r\n\r\n  /**\r\n  * Responds to a DEFINITIONS_READY event by updating a wordlist item for retrieved Definitions\r\n  * @param {Object} data {requestType: 'fullDefs',homonym: {Homonym}}\r\n  * Emits a WORDITEM_UPDATED event\r\n  */\r\n  onDefinitionsReady (data) {\r\n    let wordItem = this.getWordListItem(data.homonym.language,data.homonym.targetWord)\r\n    if (wordItem) {\r\n      wordItem.homonym = data.homonym\r\n      WordlistController.evt.WORDITEM_UPDATED.pub({dataObj: wordItem, params: {segment: 'fullHomonym'}})\r\n    } else {\r\n      // TODO error handling\r\n      console.error(\"Something went wrong: request to add definitions to non-existent item\")\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Responds to a LEMMA_TRANSLATIONS_READY event by updating a wordlist item for retrieved translations\r\n  * (because lemma translations could come much later we need to resave homonym with translations data to database)\r\n  * @param {Homonym} data\r\n  * Emits a WORDITEM_UPDATED event\r\n  */\r\n  onLemmaTranslationsReady (data) {\r\n    let wordItem = this.getWordListItem(data.language, data.targetWord)\r\n    if (wordItem) {\r\n      wordItem.homonym = data\r\n      WordlistController.evt.WORDITEM_UPDATED.pub({dataObj: wordItem, params: {segment: 'fullHomonym'}})\r\n    } else {\r\n      console.error(\"Something went wrong: request to add translations to non-existent item\")\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Responds to a TextQuoteSelectorReceived  event by creating or updating a wordlist item for a retrieved Homonym\r\n  * @param {TextQuoteSelector} data\r\n  * Emits a WORDITEM_UPDATED and WORDLIST_UPDATED events\r\n  */\r\n  onTextQuoteSelectorReceived (data) {\r\n    // when receiving this event, it's possible this is the first time we are seeing the word so\r\n    // create the item in the word list if it doesn't exist\r\n    let wordItem = this.getWordListItem(data.languageCode, data.normalizedText, true)\r\n    if (wordItem) {\r\n      wordItem.addContext([data])\r\n      WordlistController.evt.WORDITEM_UPDATED.pub({dataObj: wordItem, params: {segment: 'context'}})\r\n      // emit a wordlist updated event too in case the wordlist was updated\r\n      WordlistController.evt.WORDLIST_UPDATED.pub([this.getWordList(wordItem.languageCode)])\r\n    } else {\r\n      console.error(\"Unable to create or retrieve worditem\")\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  * Update a wordlist item's important flag\r\n  * @param {String} languageCode  the language of the item\r\n  * @param {String} targetWord the word of the item\r\n  * @param {Boolean} important true or false\r\n  * Emits a WORDITEM_UPDATED event\r\n  */\r\n  updateWordItemImportant (languageCode, targetWord, important) {\r\n    let wordItem = this.getWordListItem(languageCode, targetWord,false)\r\n    if (wordItem) {\r\n      wordItem.important = important\r\n      WordlistController.evt.WORDITEM_UPDATED.pub({dataObj: wordItem, params: {segment: 'common'}})\r\n    } else {\r\n      console.error(\"Something went wrong: request to set important flag on non-existent item\")\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Update the important flag of all the items in a WordList\r\n  * @param {String} languageCode  the language of the list\r\n  * @param {Boolean} important true or false\r\n  * Emits a WORDITEM_UPDATED event for each updated item\r\n  */\r\n  updateAllImportant (languageCode, important) {\r\n    let wordList = this.getWordList(languageCode, false)\r\n    wordList.values.forEach(wordItem => {\r\n      wordItem.important = important\r\n      WordlistController.evt.WORDITEM_UPDATED.pub({dataObj: wordItem, params: {segment: 'common'}})\r\n    })\r\n  }\r\n\r\n  /**\r\n  * Select an item in a word list\r\n  * @param {String} languageCode  the language of the item\r\n  * @param {String} targetWord the word of the item\r\n  * Emits a WORDITEM_SELECTED event for the selected item\r\n  */\r\n  async selectWordItem (languageCode, targetWord) {\r\n    let wordItem = this.getWordListItem(languageCode, targetWord, false)\r\n    WordlistController.evt.WORDITEM_SELECTED.pub(wordItem)\r\n  }\r\n\r\n  /**\r\n   * Private method - check to see if we have a wordlist for a specific language code\r\n   * @param {String} languageCode the language code\r\n   * @return {Boolean} true if the wordlist exists otherwise false\r\n   */\r\n  _wordListExist (languageCode) {\r\n    return Object.keys(this.wordLists).includes(languageCode)\r\n  }\r\n\r\n}\r\n\r\nWordlistController.evt = {\r\n  /**\r\n   * Published when a WordList was updated.\r\n   * Data: {\r\n   *  {wordLists} an Array with WordLists object\r\n   * }\r\n   */\r\n  WORDLIST_UPDATED: new PsEvent('Wordlist updated', WordlistController),\r\n\r\n  /**\r\n   * Published when a WordList was created\r\n   * Data: {\r\n   *  {wordLists} an Array with WordLists object\r\n   * }\r\n   */\r\n  WORDLIST_CREATED: new PsEvent('Wordlist created', WordlistController),\r\n\r\n\r\n  /**\r\n   * Published when a WordList was deleted\r\n   * Data: {\r\n   *  dataType: constructor name for the contained word list items\r\n   *  params: parameters to identify the items to be deleted\r\n   * }\r\n   */\r\n  WORDLIST_DELETED: new PsEvent('Wordlist deleted', WordlistController),\r\n\r\n  /**\r\n   * Published when a WordItem was selected.\r\n   * Data: {\r\n   *  dataObj: the selected WordItem\r\n   * }\r\n   */\r\n  WORDITEM_SELECTED: new PsEvent('WordItem selected', WordlistController),\r\n\r\n  /**\r\n   * Published when a WordItem was updated\r\n   * Data: {\r\n   *   dataObj: the selected WordItem\r\n   *   params: additional update parameters\r\n   * }\r\n   */\r\n  WORDITEM_UPDATED: new PsEvent('WordItem updated', WordlistController),\r\n\r\n  /**\r\n   * Published when a WordItem was deleted\r\n   * Data: {\r\n   *   dataObj: the deleted WordItem\r\n   * }\r\n   */\r\n  WORDITEM_DELETED: new PsEvent('WordItem deleted', WordlistController)\r\n\r\n}\r\n","import WordlistController from '@/controllers/wordlist-controller.js'\r\nimport UserDataManager from '@/controllers/user-data-manager.js'\r\n\r\nexport { WordlistController, UserDataManager }\r\n","import { WordItem } from 'alpheios-data-models'\r\n\r\n/**\r\n * An interface to IndexedDB Storage\r\n */\r\nexport default class IndexedDBAdapter {\r\n\r\n  /**\r\n   * @param {String} domain the storage domain\r\n   * @param {Object} dbDriver a driver for a specific data type\r\n   */\r\n  constructor (dbDriver) {\r\n    this.available = this._initIndexedDBNamespaces()\r\n    this.dbDriver = dbDriver\r\n    this.errors = []\r\n  }\r\n\r\n  async checkAndUpdate (wordItem, segment, currentRemoteItems) {  \r\n    if (segment === 'context' || !segment)  {\r\n      if (currentRemoteItems.length > 0 && currentRemoteItems[0].context && Array.isArray(currentRemoteItems[0].context)) {\r\n        wordItem.context = []\r\n        for(let contextItem of currentRemoteItems[0].context) {\r\n          wordItem.context.push(WordItem.readContext([contextItem])[0])\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!segment) {\r\n      segment = this.dbDriver.segmentsSync\r\n    }\r\n    \r\n    let currentLocalItems = await this.query({ wordItem })\r\n    if (currentLocalItems.length === 0 && segment && segment !== 'common') {\r\n      await this.update(wordItem, { segment: 'common' })  \r\n    }\r\n\r\n    let result = await this.update(wordItem, { segment })\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Create a new data item in the data base\r\n   * @param {Object} data the data model item to be created\r\n   * @return {Boolean} true if create succeeded false if not\r\n   */\r\n  async create(data) {\r\n    try {\r\n      let segments = this.dbDriver.segments\r\n      let updated\r\n      // iterate through the declared segmentation of the object\r\n      // and store accordingly\r\n      // TODO we need transaction handling here\r\n      for (let segment of segments) {\r\n        updated = await this.update(data, {segment: segment})\r\n        if (!updated) {\r\n          throw new Error(`Unknown problems with updating segment ${segment}`)\r\n        }\r\n      }\r\n      return updated > 0\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the datastore of many items of a given type\r\n   * @param {Object} params data type specific parameters for identifying the items\r\n   *                        to be deleted\r\n   * @return {int} number of items deleted\r\n   *\r\n   */\r\n  async deleteMany(params) {\r\n    try {\r\n      let deletedResult = {}\r\n      for (let segment of this.dbDriver.segments) {\r\n        let q = this.dbDriver.segmentDeleteManyQuery(segment,params)\r\n        let deletedItems = await this._deleteFromStore(q)\r\n        deletedResult[segment] = deletedItems\r\n      }\r\n      return deletedResult\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a single item from the data store\r\n   * @param {Object} data the deta model object to be deleted\r\n   * @return {int} number of items deleted\r\n   *\r\n   */\r\n  async deleteOne(data) {\r\n    try {\r\n      for (let segment of this.dbDriver.segments) {\r\n        let q = this.dbDriver.segmentDeleteQuery(segment,data)\r\n        await this._deleteFromStore(q)\r\n      }\r\n      return true\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a data item, creating it if it doesn't exist\r\n   * @param {Object} data the data model object to update\r\n   * @param {Object} params update params\r\n   *                  { segment: name of segment needing update }\r\n   * @return {Boolean} true if update succeeded false if not\r\n   */\r\n  async update (data, params) {\r\n    try {\r\n      let segments = params && params.segment ? (Array.isArray(params.segment) ? params.segment : [params.segment]) : []\r\n\r\n      let result\r\n      if (segments.length === 0)  {\r\n        segments = this.dbDriver.segments\r\n      }\r\n\r\n      for (let segment of segments) {\r\n        let query = this.dbDriver.updateSegmentQuery(segment, data)\r\n\r\n        if (query.dataItems && query.dataItems.length > 0) {\r\n          result = await this._set(query)\r\n        } else {\r\n          result = true\r\n        }\r\n      }\r\n      return result\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query for a set of data items\r\n   * @param {Object} params datatype specific query parameters\r\n   * @return Object[] array of data model items\r\n   */\r\n  async query(params) {\r\n    try {\r\n      let listItemsQuery = this.dbDriver.listItemsQuery(params)\r\n      let listItemsQueryResult = await this._getFromStore(listItemsQuery)\r\n      \r\n      let items = []\r\n\r\n      for (let itemQuery of listItemsQueryResult) {\r\n        let resultObject = this.dbDriver.loadFirst(itemQuery)\r\n\r\n        for (let segment of this.dbDriver.segmentsNotFirst) {\r\n          let query = this.dbDriver.segmentSelectQuery(segment, resultObject)\r\n          let result = await this._getFromStore(query)\r\n\r\n          if (result.length > 0) {           \r\n            this.dbDriver.loadSegment(segment, result, resultObject)\r\n          }\r\n        }\r\n        items.push(resultObject)\r\n      }\r\n\r\n      return items\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all the object stores\r\n   * Used primarily for testing right now\r\n   * TODO needs to be enhanced to support async removal of old database versions\r\n   */\r\n  async clear () {\r\n    let idba = this\r\n\r\n    let promiseDB = await new Promise((resolve, reject) => {\r\n      let request = idba.indexedDB.open(idba.dbDriver.dbName, idba.dbDriver.dbVersion)\r\n      request.onsuccess = (event) => {\r\n        try {\r\n          let db = event.target.result\r\n          let objectStores = idba.dbDriver.objectStores\r\n          let objectStoresRemaining = objectStores.length\r\n\r\n          for (let store of objectStores) {\r\n            // open a read/write db transaction, ready for clearing the data\r\n            let transaction = db.transaction([store], 'readwrite')\r\n            // create an object store on the transaction\r\n            let objectStore = transaction.objectStore(store)\r\n            // Make a request to clear all the data out of the object store\r\n            let objectStoreRequest = objectStore.clear()\r\n            objectStoreRequest.onsuccess = function(event) {\r\n              console.warn(`store ${store} cleared`)\r\n              objectStoresRemaining = objectStoresRemaining - 1\r\n              if (objectStoresRemaining === 0) {\r\n                resolve(true)\r\n              }\r\n            }\r\n            objectStoreRequest.onerror = function(event) {\r\n              idba.errors.push(event.target)\r\n              reject(event.target)\r\n            }\r\n          }\r\n        } catch (error) {\r\n          idba.errors.push(error)\r\n          reject(error)\r\n        }\r\n      }\r\n      request.onerror = (event) => {\r\n        idba.errors.push(event.target)\r\n        reject(event.target)\r\n      }\r\n    })\r\n    return promiseDB\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * This method checks if IndexedDB is used in the current browser\r\n   */\r\n  _initIndexedDBNamespaces () {\r\n    this.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n    this.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction || {READ_WRITE: \"readwrite\"}; // This line should only be needed if it is needed to support the object's constants for older browsers\r\n    this.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n    if (!this.indexedDB) {\r\n      console.warn(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n\r\n  /**\r\n   * utility method ot open a database. Sets a callback which causes the database to be created if it doesn't exist\r\n   */\r\n  _openDatabaseRequest () {\r\n    let request = this.indexedDB.open(this.dbDriver.dbName, this.dbDriver.dbVersion)\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result\r\n      const upgradeTransaction = event.target.transaction\r\n      this._createObjectStores(db, upgradeTransaction)\r\n    }\r\n    return request\r\n  }\r\n\r\n  /**\r\n   * Iniitalize the object store(s) for for an IndexedDb adapter\r\n   */\r\n  _createObjectStores (db, upgradeTransaction) {\r\n    try {\r\n      for (let objectStoreData of this.dbDriver.allObjectStoreData) {\r\n        let objectStore\r\n\r\n        if (!db.objectStoreNames.contains(objectStoreData.name)) {\r\n          objectStore = db.createObjectStore(objectStoreData.name, { keyPath: objectStoreData.structure.keyPath })\r\n        } else {\r\n          objectStore = upgradeTransaction.objectStore(objectStoreData.name)\r\n        }\r\n\r\n        objectStoreData.structure.indexes.forEach(index => {\r\n          if (!objectStore.indexNames.contains(index.indexName)) {\r\n            objectStore.createIndex(index.indexName, index.keyPath, { unique: index.unique })\r\n          }\r\n        })\r\n      }\r\n    \r\n    } catch (error) {\r\n      this.errors.push(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal method to open a database and update one or items in a specific store\r\n   * @param {Object} data data item to be updated  in the format\r\n   *                      { objectStoreName: name of the object store,\r\n   *                        dataItems: array of data items to be updated }\r\n   * @return {Promise} resolves to true on success\r\n   */\r\n  async _set (data) {\r\n    let idba = this\r\n\r\n    let promiseOpenDB = await new Promise((resolve, reject) => {\r\n      let request = this._openDatabaseRequest()\r\n      request.onsuccess = async (event) => {\r\n        const db = event.target.result\r\n        let rv = await this._putItem(db, data)\r\n        resolve(rv)\r\n      }\r\n      request.onerror = (event) => {\r\n        idba.errors.push(event.target)\r\n        reject()\r\n      }\r\n    })\r\n    return promiseOpenDB\r\n  }\r\n\r\n  /**\r\n   * Internal method to put an item into a database\r\n   * @param {} db the database handle\r\n   * @param {Object} data data item to be updated  in the format\r\n   *                      { objectStoreName: name of the object store,\r\n   *                        dataItems: array of data items to be updated }\r\n   * @return {Promise} resolves to true on success\r\n   */\r\n  async _putItem (db, data) {\r\n    let idba = this\r\n\r\n    let promisePut = await new Promise((resolve, reject) => {\r\n      try {\r\n        const transaction = db.transaction([data.objectStoreName], 'readwrite')\r\n        transaction.onerror = (event) => {\r\n          idba.errors.push(event.target)\r\n          reject()\r\n        }\r\n        const objectStore = transaction.objectStore(data.objectStoreName)\r\n        let objectsDone = data.dataItems.length\r\n        for (let dataItem of data.dataItems) {\r\n          const requestPut = objectStore.put(dataItem)\r\n          requestPut.onsuccess = () => {\r\n            objectsDone = objectsDone - 1\r\n            if (objectsDone === 0) {\r\n              resolve(true)\r\n            }\r\n          }\r\n          requestPut.onerror = () => {\r\n            idba.errors.push(event.target)\r\n            reject()\r\n          }\r\n        }\r\n        if (objectsDone === 0) {\r\n          resolve(true)\r\n        }\r\n      } catch (error) {\r\n        if (error) {\r\n          idba.errors.push(error)\r\n          return\r\n        }\r\n      }\r\n    })\r\n    return promisePut\r\n  }\r\n\r\n  /**\r\n   * Internal method to get an item from a database store\r\n   * @param {Object} data data item to be retrieved  in the format\r\n   *                      { objectStoreName: name of the object store,\r\n   *                        condition: query parameters }\r\n   * @return {Promise} resolves to the retrieved items\r\n   */\r\n  async _getFromStore (data) {\r\n    let idba = this\r\n    let promiseOpenDB = await new Promise((resolve, reject) => {\r\n      let request = this._openDatabaseRequest()\r\n      request.onsuccess = (event) => {\r\n        try {\r\n          const db = event.target.result\r\n          const transaction = db.transaction([data.objectStoreName])\r\n          const objectStore = transaction.objectStore(data.objectStoreName)\r\n\r\n          const index = objectStore.index(data.condition.indexName)\r\n          const keyRange = this.IDBKeyRange[data.condition.type](data.condition.value)\r\n          \r\n          const requestOpenCursor = index.getAll(keyRange, 0)\r\n          requestOpenCursor.onsuccess = (event) => {\r\n            resolve(event.target.result)\r\n          }\r\n\r\n          requestOpenCursor.onerror = (event) => {\r\n            idba.errors.push(event.target)\r\n            reject()\r\n          }\r\n        } catch (error) {\r\n          idba.errors.push(error)\r\n          reject()\r\n        }\r\n      }\r\n      request.onerror = (event) => {\r\n        reject(event.target)\r\n      }\r\n    })\r\n    return promiseOpenDB\r\n    \r\n  }\r\n\r\n  /**\r\n   * Internal method to delete an item from  a specific data store\r\n   * @param {Object} data data item to be retrieved  in the format\r\n   *                      { objectStoreName: name of the object store,\r\n   *                        condition: query parameters }\r\n   * @return {Promise} resolves to the number of deleted items\r\n   */\r\n  async _deleteFromStore (data) {\r\n    let idba = this\r\n    let promiseOpenDB = await new Promise((resolve, reject) => {\r\n      let request = this._openDatabaseRequest()\r\n      request.onsuccess = (event) => {\r\n        try {\r\n          const db = event.target.result\r\n          const transaction = db.transaction([data.objectStoreName], 'readwrite')\r\n          const objectStore = transaction.objectStore(data.objectStoreName)\r\n\r\n          const index = objectStore.index(data.condition.indexName)\r\n          const keyRange = this.IDBKeyRange[data.condition.type](data.condition.value)\r\n\r\n          let requestOpenCursor = index.openCursor(keyRange)\r\n          let deletedItems = 0\r\n          requestOpenCursor.onsuccess = (event) => {\r\n            const cursor = event.target.result\r\n            if (cursor) {\r\n              const requestDelete = cursor.delete()\r\n              requestDelete.onerror = (event) => {\r\n                idba.errors.push(event.target)\r\n                reject()\r\n              }\r\n              requestDelete.onsuccess = (event) => {\r\n                deletedItems = deletedItems + 1\r\n              }\r\n              cursor.continue()\r\n            } else {\r\n              resolve(deletedItems)\r\n            }\r\n          }\r\n        } catch (error) {\r\n          idba.errors.push(error)\r\n          reject()\r\n        }\r\n      }\r\n\r\n      request.onerror = (event) => {\r\n        idba.errors.push(event.target)\r\n        reject()\r\n      }\r\n    })\r\n\r\n    return promiseOpenDB\r\n  }\r\n\r\n}","import { Homonym, WordItem, Lexeme, Lemma, LanguageModelFactory as LMF } from 'alpheios-data-models'\r\n\r\nexport default class IndexedDBLoadProcess {\r\n  /**\r\n   * Creates WordItem with properties from json and sets currentSession = false\r\n   * @param {Object} jsonObj - data from common segment\r\n   * @return {WordItem} \r\n   */\r\n  static loadBaseObject(jsonObj) {\r\n    // make sure when we create from the database\r\n    // that the currentSession flag is set to false\r\n    jsonObj.currentSession = false\r\n    return new WordItem(jsonObj)\r\n  }\r\n\r\n  /**\r\n   * Creates TextQuoteSelectors from jsonObjs and loads them to context property of wordItem\r\n   * @param {Object[]} jsonObjs - data from context segment\r\n   * @param {WordItem} wordItem\r\n   * @return {WordItem} \r\n   */\r\n  static loadContext (jsonObjs, wordItem) {\r\n    if (! Array.isArray(jsonObjs)) {\r\n      jsonObjs = [jsonObjs]  \r\n    }\r\n    wordItem.context = WordItem.readContext(jsonObjs)\r\n    return wordItem\r\n  }\r\n\r\n  /**\r\n   * Creates Homonym from jsonObj and loads it to homonym property of wordItem\r\n   *   if jsonObjs[0] has homonym property with full data from local DB, then it uses readHomonym method\r\n   *   if jsonObjs[0] has homonym property with short data from remote DB, \r\n   *        it creates empty homonym with data for lexemes from lemmasList\r\n   *   if jsonObjs[0] has empty homonym property it creates empty homonym with languageCode and targetWord only\r\n   * @param {Object[]} jsonObjs - data from homonym segment\r\n   * @param {WordItem} wordItem\r\n   * @return {WordItem} \r\n   */\r\n  static loadHomonym (jsonObjs, wordItem) {\r\n    let jsonHomonym = jsonObjs[0].homonym\r\n\r\n    if (jsonHomonym.lexemes && Array.isArray(jsonHomonym.lexemes) && jsonHomonym.lexemes.length >0) {\r\n      wordItem.homonym = WordItem.readHomonym(jsonObjs[0])\r\n    } else {\r\n      let languageID = LMF.getLanguageIdFromCode(jsonObjs[0].languageCode)\r\n      let lexemes = []\r\n\r\n      if (jsonHomonym.lemmasList) {\r\n        let lexemesForms = jsonHomonym.lemmasList.split(', ')\r\n        for (let lexForm of lexemesForms) {\r\n          lexemes.push(new Lexeme(new Lemma(lexForm, languageID), []))\r\n        }\r\n      } else {\r\n        lexemes = [new Lexeme(new Lemma(jsonObjs[0].targetWord, languageID), [])]\r\n      }\r\n      wordItem.homonym = new Homonym(lexemes, jsonHomonym.targetWord)\r\n    }\r\n    return wordItem\r\n  }\r\n}\r\n","export default class IndexedDBObjectStoresStructure {\r\n  /**\r\n   * Defines basic template for creating objectStore\r\n   * @return {Object} - objectStore structure\r\n   */\r\n  static _objectStoreTemplate () {\r\n    return {\r\n      keyPath: 'ID',\r\n      indexes: [\r\n        { indexName: 'ID', keyPath: 'ID', unique: true},\r\n        { indexName: 'listID', keyPath: 'listID', unique: false},\r\n        { indexName: 'userID', keyPath: 'userID', unique: false},\r\n        { indexName: 'languageCode', keyPath: 'languageCode', unique: false},\r\n        { indexName: 'targetWord', keyPath: 'targetWord', unique: false}\r\n      ]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Defines objectStore structure for common segment\r\n   * @return {Object} - objectStore structure\r\n   */\r\n  static get WordListsCommon () {\r\n    return IndexedDBObjectStoresStructure._objectStoreTemplate()\r\n  }\r\n\r\n  /**\r\n   * Defines objectStore structure for context segment\r\n   * adds additional index\r\n   * @return {Object} - objectStore structure\r\n   */\r\n  static get WordListsContext () {\r\n    let structure = IndexedDBObjectStoresStructure._objectStoreTemplate()\r\n    structure.indexes.push(\r\n      { indexName: 'wordItemID', keyPath: 'wordItemID', unique: false}\r\n    )\r\n    return structure\r\n  }\r\n\r\n  /**\r\n   * Defines objectStore structure for short homonym segment\r\n   * @return {Object} - objectStore structure\r\n   */\r\n  static get WordListsHomonym () {\r\n    return IndexedDBObjectStoresStructure._objectStoreTemplate()\r\n  }\r\n\r\n  /**\r\n   * Defines objectStore structure for full homonym segment\r\n   * @return {Object} - objectStore structure\r\n   */\r\n  static get WordListsFullHomonym () {\r\n    return IndexedDBObjectStoresStructure._objectStoreTemplate()\r\n  }\r\n\r\n}","import axios from 'axios'\r\n\r\nexport default class RemoteDBAdapter {\r\n  /**\r\n   *\r\n   * @param {WordItemRemoteDbDriver} dbDriver\r\n   */\r\n  constructor (dbDriver) {\r\n    this.dbDriver = dbDriver\r\n    this.available = this._checkRemoteDBAvailability()\r\n    this.errors = []\r\n  }\r\n\r\n  /**\r\n   * Checks if defined obligatory params - userID and headers for request\r\n   * @return {Boolean} - true - adapter could be used, false - couldn't\r\n   */\r\n  _checkRemoteDBAvailability () {\r\n    return Boolean(this.dbDriver.accessToken) && Boolean(this.dbDriver.userId) && Boolean(this.dbDriver.requestsParams.headers)\r\n  }\r\n\r\n  async checkAndUpdate (wordItem, segments) {\r\n    let segmentsForUpdate = this.dbDriver.segmentsForUpdate\r\n    let segmentsForMerge = this.dbDriver.segmentsForMerge\r\n    if (! Array.isArray(segments)) {\r\n      segments = [segments]\r\n    }\r\n    let update = false\r\n    let merge = false\r\n    for (let segment of segments) {\r\n      if (segmentsForUpdate.includes(segment)) {\r\n        update = true\r\n      }\r\n      if (segmentsForMerge.includes(segment)) {\r\n        merge = true\r\n      }\r\n    }\r\n    if (update) {\r\n      let updateWordItem\r\n      // if we are updating a segment which requires merging, then we\r\n      // first query the remote item so that we have the values that need to be merged\r\n      let currentItems = []\r\n      if (merge) {\r\n        currentItems = await this.query({ wordItem })\r\n      }\r\n      if (! currentItems || currentItems.length === 0) {\r\n        // if there isn't anything that needs to be merged then\r\n        // we just replace the old wiht the new\r\n        updateWordItem = wordItem\r\n      } else {\r\n        // otherwise we need to create a merged item for update\r\n        updateWordItem = this.dbDriver.mergeLocalRemote(currentItems[0], wordItem)\r\n      }\r\n      await this.update(updateWordItem)\r\n      return [updateWordItem]\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an item in remote storage\r\n   * @param {WordItem} data\r\n   * @return {Boolean} - successful/failed result\r\n   */\r\n  async create(data) {\r\n    try {\r\n      let url = this.dbDriver.storageMap.post.url(data)\r\n      let content = this.dbDriver.storageMap.post.serialize(data)\r\n\r\n      let result = await axios.post(url, content, this.dbDriver.requestsParams)\r\n\r\n      let updated = this.dbDriver.storageMap.post.checkResult(result)\r\n\r\n      return updated\r\n    } catch (error) {\r\n      console.error(error)\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates an item in remote storage\r\n   * we could receive here data in two formats - wordItem (if updated from selected wordItem) and object (if updated from already serialized when merged)\r\n   * so if it is already an object - we skip serialization\r\n   * @param {WordItem/Object} data\r\n   * @return {Boolean} - successful/failed result\r\n   */\r\n  async update(data) {\r\n    try {\r\n      let url = this.dbDriver.storageMap.put.url(data)\r\n      let skipSerialize = !data.constructor.name.match(/WordItem/)\r\n\r\n      let content\r\n      if (skipSerialize) {\r\n        content = data\r\n      } else {\r\n        content = this.dbDriver.storageMap.put.serialize(data)\r\n      }\r\n\r\n      let result = await axios.put(url, content, this.dbDriver.requestsParams)\r\n      let updated = this.dbDriver.storageMap.put.checkResult(result)\r\n      return updated\r\n    } catch (error) {\r\n      console.error(error)\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a single item in remote storage\r\n   * @param {WordItem} data\r\n   * @return {Boolean} - successful/failed result\r\n   */\r\n  async deleteOne(data) {\r\n    try {\r\n      let url = this.dbDriver.storageMap.deleteOne.url(data)\r\n      let result = await axios.delete(url, this.dbDriver.requestsParams)\r\n      let updated = this.dbDriver.storageMap.deleteOne.checkResult(result)\r\n      return updated\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes all items by languageCode in remote storage\r\n   * @param {Object} data\r\n   * @param {String} data.languageCode\r\n   * @return {Boolean} - successful/failed result\r\n   */\r\n  async deleteMany(data) {\r\n    try {\r\n      let url = this.dbDriver.storageMap.deleteMany.url(data)\r\n\r\n      let result = await axios.delete(url, this.dbDriver.requestsParams)\r\n      let updated = this.dbDriver.storageMap.deleteMany.checkResult(result)\r\n      return updated\r\n    } catch (error) {\r\n      if (error) {\r\n        this.errors.push(error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queries data for one wordItem or wordList by languageID\r\n   * @param {Object} data\r\n   * @param {WordItem} data.wordItem\r\n   * @param {String} data.languageCode\r\n   * @return {WordItem[]}\r\n   */\r\n  async query(data) {\r\n    try {\r\n      let url = this.dbDriver.storageMap.get.url(data)\r\n      let result = await axios.get(url, this.dbDriver.requestsParams)\r\n      let final = this.dbDriver.storageMap.get.checkResult(result)\r\n      return final\r\n    } catch (error) {\r\n      let errorFinal = this.dbDriver.storageMap.get.checkErrorResult(error)\r\n      if (!errorFinal && error) {\r\n        if (error) {\r\n          this.errors.push(error)\r\n        }\r\n      }\r\n      return errorFinal\r\n    }\r\n  }\r\n}\r\n","import { Homonym, WordItem, TextQuoteSelector, LanguageModelFactory as LMF } from 'alpheios-data-models'\r\n\r\nimport IndexedDBObjectStoresStructure from '@/storage/indexeddbDriver/indexed-db-object-stores-structure'\r\nimport IndexedDBLoadProcess from '@/storage/indexeddbDriver/indexed-db-load-process'\r\n\r\nexport default class WordItemIndexedDbDriver {\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {String} userId user id for the database\r\n   */\r\n  constructor(userId) {\r\n    this.userId = userId\r\n    this.storageMap = {\r\n      _loadFirst: 'common',\r\n      common: {\r\n        type: 'segment',\r\n        sync: true,\r\n        objectStoreData: {\r\n          name: 'WordListsCommon',\r\n          structure: IndexedDBObjectStoresStructure.WordListsCommon\r\n        },\r\n        load: IndexedDBLoadProcess.loadBaseObject,\r\n        serialize: this._serializeCommon.bind(this),\r\n        delete: this._segmentSelectQueryByID.bind(this),\r\n        select: this._segmentSelectQueryByID.bind(this)\r\n      },\r\n      context: {\r\n        type: 'segment',\r\n        sync: true,\r\n        objectStoreData: {\r\n          name: 'WordListsContext',\r\n          structure: IndexedDBObjectStoresStructure.WordListsContext\r\n        },\r\n        serialize: this._serializeContext.bind(this),\r\n        load: IndexedDBLoadProcess.loadContext,\r\n        delete: this._segmentSelectQueryByWordItemID.bind(this),\r\n        select: this._segmentSelectQueryByWordItemID.bind(this)\r\n      },\r\n      shortHomonym: {\r\n        type: 'segment',\r\n        sync: true,\r\n        objectStoreData: {\r\n          name: 'WordListsHomonym',\r\n          structure: IndexedDBObjectStoresStructure.WordListsHomonym\r\n        },\r\n        serialize: this._serializeHomonym.bind(this),\r\n        load: IndexedDBLoadProcess.loadHomonym,\r\n        delete: this._segmentSelectQueryByID.bind(this),\r\n        select: this._segmentSelectQueryByID.bind(this)\r\n      },\r\n      fullHomonym: {\r\n        type: 'segment',\r\n        objectStoreData: {\r\n          name: 'WordListsFullHomonym',\r\n          structure: IndexedDBObjectStoresStructure.WordListsFullHomonym\r\n        },\r\n        serialize: this._serializeHomonymWithFullDefs.bind(this),\r\n        load: IndexedDBLoadProcess.loadHomonym,\r\n        delete: this._segmentSelectQueryByID.bind(this),\r\n        select: this._segmentSelectQueryByID.bind(this)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * dbName getter\r\n  * @return {String}\r\n  */\r\n  get dbName () {\r\n    return 'AlpheiosWordLists'\r\n  }\r\n\r\n  /**\r\n   * dbVersion getter\r\n   * @return {Number}\r\n   */\r\n  get dbVersion () {\r\n    return 3\r\n  }\r\n\r\n  /**\r\n   * db segments that we are updating from remote data\r\n   * @return {String[]} - array with segments name\r\n   */\r\n  get segmentsSync() {\r\n    return Object.keys(this.storageMap).filter(key => this.storageMap[key].type === 'segment' && this.storageMap[key].sync)\r\n  }\r\n\r\n  /**\r\n   * db segments getter\r\n   * @return {String[]} - array with segments name\r\n   */\r\n  get segments() {\r\n    return Object.keys(this.storageMap).filter(key => this.storageMap[key].type === 'segment')\r\n  }\r\n\r\n  /**\r\n   * db segments getter - segments that needs already created wordItem\r\n   * @return {String[]} - array with segment's names\r\n   */\r\n  get segmentsNotFirst () {\r\n    return this.segments.filter(segment => segment !== this.storageMap._loadFirst)\r\n  }\r\n\r\n  /**\r\n   * objectStore's names getter\r\n   * @return {String[]} - array with objectStore's names\r\n   */\r\n  get objectStores () {\r\n    return this.allObjectStoreData.map(objectStoreData => objectStoreData.name)\r\n  }\r\n\r\n  /**\r\n   * objectStore's full data getter\r\n   * @return {String[]} - array with objectStore's data { name, structure }\r\n   */\r\n  get allObjectStoreData () {\r\n    return this.segments.map(segment => this.storageMap[segment].objectStoreData)\r\n  }\r\n\r\n  /**\r\n   * objectStore's data by segment name\r\n   * @param {String} segment - segment name\r\n   * @return {Object} - { name, structure }\r\n   */\r\n  _objectStoreData (segment) {\r\n    return this.storageMap[segment].objectStoreData\r\n  }\r\n\r\n  /**\r\n   * Prepares query data for creating IndexedDB Request\r\n   * @param {String} segment\r\n   * @param {Object} indexData - index data for condition\r\n   * @param {String} indexData.name - index name\r\n   * @param {String} indexData.value - index value\r\n   * @param {String} indexData.type - index type (in our queries it is ussually only)\r\n   * @return {Object} - { objectStoreName, condition }\r\n   */\r\n  _formatQuery (segment, indexData) {\r\n    return {\r\n      objectStoreName: this._objectStoreData(segment).name,\r\n      condition: indexData\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares indexData for formatQuery when we select by ID from objectStore\r\n   * @param {WordItem} wordItem\r\n   * @param {String} [type=only] - type of index\r\n   * @return {Object} - { indexName, value , type}\r\n   */\r\n  _selectByID(wordItem, type = 'only') {\r\n    return {\r\n      indexName: 'ID',\r\n      value: this._makeStorageID(wordItem),\r\n      type: type\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares indexData for formatQuery when we select by wordItemID from objectStore (for example context)\r\n   * @param {WordItem} wordItem\r\n   * @param {String} [type=only] - type of index\r\n   * @return {Object} - { indexName, value , type}\r\n   */\r\n  _selectByWordItemID(wordItem, type = 'only') {\r\n    return {\r\n      indexName: 'wordItemID',\r\n      value: this._makeStorageID(wordItem),\r\n      type: type\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares indexData for formatQuery when we select by listID from objectStore (for example all values for languageCode)\r\n   * @param {String} languageCode\r\n   * @param {String} [type=only] - type of index\r\n   * @return {Object} - { indexName, value , type}\r\n   */\r\n  _selectByListID(languageCode, type = 'only') {\r\n    return {\r\n      indexName: 'listID',\r\n      value: this._makeStorageListID(languageCode),\r\n      type: type\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads a segment that is defined as first\r\n   * @param {Object} jsonObj\r\n   * @return {WordItem}\r\n   */\r\n  loadFirst (jsonObj) {\r\n    return this.loadSegment(this.storageMap._loadFirst, jsonObj)\r\n  }\r\n\r\n  /**\r\n   * Loads a segment of a data model object from the database\r\n   * @param {String} segment - segment name\r\n   * @param {Object} jsonObj - json data to load to worditem\r\n   * @param {WordItem} worditem - worditem\r\n   * @return {WordItem}\r\n   */\r\n  loadSegment(segment, jsonObj, worditem) {\r\n    if (this.storageMap[segment].load) {\r\n      return this.storageMap[segment].load(jsonObj, worditem)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates query for getting list of wordItems or one wordItem\r\n   * @param {Object} params - stores one of the following properties:\r\n   * @param {String} [params.languageCode] - for selecting all wordItems for the current langugeCode\r\n   * @param {WordItem} [params.worditem] - for selecting one wordItem\r\n   * @return {WordItem}\r\n   */\r\n  listItemsQuery(params) {\r\n    if (params.languageCode) {\r\n      return this._formatQuery('common', this._selectByListID(params.languageCode))\r\n    } else if (params.wordItem) {\r\n      return this._formatQuery('common', this._selectByID(params.wordItem))\r\n    } else {\r\n      throw new Error(\"Invalid query parameters - missing languageCode\")\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates query for selecting data from the segment\r\n   * @param {String} segment - segment name\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object} - data for creating IndexedDB Request\r\n   */\r\n  segmentSelectQuery(segment, worditem) {\r\n    if (this.storageMap[segment].select) {\r\n      return this.storageMap[segment].select(segment, worditem)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates query for selecting data from the segment by wordItem\r\n   * @param {String} segment - segment name\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object} - data for creating IndexedDB Request\r\n   */\r\n  _segmentSelectQueryByWordItemID (segment, worditem) {\r\n    return this._formatQuery(segment, this._selectByWordItemID(worditem))\r\n  }\r\n\r\n  /**\r\n   * Creates query for selecting data from the segment by ID\r\n   * @param {String} segment - segment name\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object} - data for creating IndexedDB Request\r\n   */\r\n  _segmentSelectQueryByID (segment, worditem) {\r\n    return this._formatQuery(segment, this._selectByID(worditem))\r\n  }\r\n\r\n  /**\r\n   * Creates query for deleting one item from the segment\r\n   * @param {String} segment - segment name\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object} - data for creating IndexedDB Request\r\n   */\r\n  segmentDeleteQuery (segment, worditem) {\r\n    if (this.storageMap[segment].delete) {\r\n      return this.storageMap[segment].delete(segment, worditem)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates query for deleting all list items from the segment\r\n   * @param {String} segment - segment name\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object} - data for creating IndexedDB Request\r\n   */\r\n  segmentDeleteManyQuery(segment, params) {\r\n    if (params.languageCode) {\r\n      return this._formatQuery(segment, this._selectByListID(params.languageCode))\r\n    } else {\r\n      throw new Error(\"Invalid query parameters - missing languageCode\")\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates data for updating items in a segment\r\n   * @param {String} segment - segment name\r\n   * @param {Object} data - the worditem object\r\n   * @return {Object} data for creating IndexedDB Request\r\n   */\r\n  updateSegmentQuery(segment, data) {\r\n    return {\r\n      objectStoreName: this._objectStoreData(segment).name,\r\n      dataItems: this.storageMap[segment].serialize(data)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates jsonObj for saving to IndexedDB for common segment\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object[]}\r\n   */\r\n  _serializeCommon (worditem) {\r\n    return [{\r\n      ID: this._makeStorageID(worditem),\r\n      listID: this.userId + '-' + worditem.languageCode,\r\n      userID: this.userId,\r\n      languageCode: worditem.languageCode,\r\n      targetWord: worditem.targetWord,\r\n      important: worditem.important,\r\n      createdDT: WordItemIndexedDbDriver.currentDate\r\n    }]\r\n  }\r\n\r\n  /**\r\n   * Creates jsonObj for saving to IndexedDB for context segment\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {Object[]}\r\n   */\r\n  _serializeContext (worditem) {\r\n    let result = []\r\n    let index = 0\r\n    let wordItemId = this._makeStorageID(worditem)\r\n    for (let tq of worditem.context) {\r\n      index++\r\n      let resultItem = {\r\n        ID: wordItemId + '-' + index,\r\n        listID: this.userId + '-' + worditem.languageCode,\r\n        userID: this.userId,\r\n        languageCode: worditem.languageCode,\r\n        targetWord: worditem.targetWord,\r\n        wordItemID: wordItemId,\r\n        target: {\r\n          source: tq.source,\r\n          selector: {\r\n            type: 'TextQuoteSelector',\r\n            exact: tq.text,\r\n            prefix: tq.prefix && tq.prefix.length > 0 ? tq.prefix : ' ',\r\n            suffix: tq.suffix && tq.suffix.length > 0 ? tq.suffix : ' ',\r\n            contextHTML: tq.contextHTML,\r\n            languageCode: tq.languageCode\r\n          }\r\n        },\r\n        createdDT: WordItemIndexedDbDriver.currentDate\r\n      }\r\n      result.push(resultItem)\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Creates jsonObj for saving to IndexedDB for homonyms segment\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @param {Boolean} [addMeaning = false] - if true it adds definitions\r\n   * @return {Object[]}\r\n   */\r\n  _serializeHomonym (worditem, addMeaning = false) {\r\n    let resultHomonym = worditem.homonym && (worditem.homonym instanceof Homonym) ? worditem.homonym.convertToJSONObject(addMeaning) : null\r\n    if (resultHomonym) {\r\n      return [{\r\n        ID: this._makeStorageID(worditem),\r\n        listID: this.userId + '-' + worditem.languageCode,\r\n        userID: this.userId,\r\n        languageCode: worditem.languageCode,\r\n        targetWord: worditem.targetWord,\r\n        homonym: resultHomonym\r\n      }]\r\n    }\r\n    return []\r\n  }\r\n\r\n\r\n/**\r\n * Creates jsonObj for saving to IndexedDB for full homonym segment\r\n * @param {WordItem} worditem - the worditem object\r\n * @return {Object[]}\r\n */\r\n_serializeHomonymWithFullDefs (worditem) {\r\n  return this._serializeHomonym(worditem, true)\r\n}\r\n\r\n/**\r\n * Returns formatted date/time for saving to IndexedDB\r\n * @return {String}\r\n */\r\nstatic get currentDate () {\r\n  let dt = new Date()\r\n  return dt.getFullYear() + '/'\r\n      + ((dt.getMonth()+1) < 10 ? '0' : '') + (dt.getMonth()+1)  + '/'\r\n      + ((dt.getDate() < 10) ? '0' : '') + dt.getDate() + ' @ '\r\n              + ((dt.getHours() < 10) ? '0' : '') + dt.getHours() + \":\"\r\n              + ((dt.getMinutes() < 10) ? '0' : '') + dt.getMinutes() + \":\"\r\n              + ((dt.getSeconds() < 10) ? '0' : '') + dt.getSeconds()\r\n\r\n}\r\n\r\n  /**\r\n   * Creates ID for wordItem for saving to IndexedDB\r\n   * @param {WordItem} worditem - the worditem object\r\n   * @return {String}\r\n   */\r\n  _makeStorageID(worditem) {\r\n    return this.userId + '-' + worditem.languageCode + '-' + worditem.targetWord\r\n  }\r\n\r\n  /**\r\n   * Creates ID for wordList for saving to IndexedDB\r\n   * @param {String} languageCode - languageCode of the wordList\r\n   * @return {String}\r\n   */\r\n  _makeStorageListID(languageCode) {\r\n    return this.userId + '-' + languageCode\r\n  }\r\n\r\n  /**\r\n   * Creates ID for wordItem similiar to remote format (without userID)\r\n   * @param {String} languageCode - languageCode of the wordList\r\n   * @return {String}\r\n   */\r\n  makeIDCompareWithRemote (worditem) {\r\n    return worditem.languageCode + '-' + worditem.targetWord\r\n  }\r\n\r\n  /**\r\n   * Creates array of IDs for comparing with remote items\r\n   * @param {WordItem[]} wordItems - languageCode of the wordList\r\n   * @return {String[]}\r\n   */\r\n  getCheckArray (wordItems) {\r\n    return wordItems.map(wordItem => this.makeIDCompareWithRemote(wordItem))\r\n  }\r\n\r\n  /**\r\n   * Creates wordItem from remote data\r\n   * @param {Object} remoteDataItem - wordItem from remote source in json format\r\n   * @return {WordItem}\r\n   */\r\n  createFromRemoteData (remoteDataItem) {\r\n    let wordItem = this.loadFirst(remoteDataItem)\r\n\r\n    if (remoteDataItem.context) {\r\n      this.loadSegment('context', remoteDataItem.context, wordItem)\r\n    }\r\n\r\n    if (remoteDataItem.homonym) {\r\n      this.loadSegment('shortHomonym', [ remoteDataItem ], wordItem)\r\n    }\r\n    return wordItem\r\n  }\r\n\r\n}\r\n","import { TextQuoteSelector } from 'alpheios-data-models'\r\n\r\nexport default class WordItemRemoteDbDriver {\r\n  /**\r\n   * Defines proper headers for access to remote storage, defines storageMap\r\n   * @param {Object} auth object with accessToken and userId\r\n   */\r\n  constructor (auth) {\r\n    this.accessToken = auth.accessToken\r\n    this.userId = auth.userId\r\n\r\n    this.requestsParams = {\r\n      baseURL: auth.endpoints.wordlist,\r\n      headers: {\r\n        common: {\r\n          Authorization: 'bearer ' + this.accessToken,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    }\r\n\r\n    this.storageMap = {\r\n      post: {\r\n        url: this._constructPostURL.bind(this),\r\n        serialize: this._serialize.bind(this),\r\n        checkResult: this._checkPostResult.bind(this)\r\n      },\r\n      put: {\r\n        url: this._constructPostURL.bind(this),\r\n        serialize: this._serialize.bind(this),\r\n        checkResult: this._checkPutResult.bind(this)\r\n      },\r\n      get: {\r\n        url: this._constructGetURL.bind(this),\r\n        checkResult: this._checkGetResult.bind(this),\r\n        checkErrorResult: this._checkGetErrorResult.bind(this),\r\n      },\r\n      deleteOne: {\r\n        url: this._constructPostURL.bind(this),\r\n        checkResult: this._checkPutResult.bind(this)\r\n      },\r\n      deleteMany: {\r\n        url: this._constructDeleteManyURL.bind(this),\r\n        checkResult: this._checkPutResult.bind(this)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * db segments that would be merged\r\n   * @return {String[]} - array with segments name\r\n   */\r\n  get segmentsForUpdate () {\r\n    return ['common', 'context', 'shortHomonym']\r\n  }\r\n\r\n /**\r\n   * db segments that require merging upon update\r\n   */\r\n  get segmentsForMerge () {\r\n    return ['context']\r\n  }\r\n\r\n  /**\r\n   * merge current item with new item - common, shortHomonym and context parts\r\n   * @return {WordItem}\r\n   */\r\n  mergeLocalRemote (currentItem, newItem) {\r\n    currentItem = this.mergeCommonPart(currentItem, newItem)\r\n    currentItem = this.mergeHommonymPart(currentItem, newItem)\r\n    currentItem = this.mergeContextPart(currentItem, newItem)\r\n    return currentItem\r\n  }\r\n\r\n  /**\r\n   * merge common part to current item from new item\r\n   * @return {WordItem}\r\n   */\r\n  mergeCommonPart  (currentItem, newItem) {\r\n    currentItem.important = currentItem.important || newItem.important\r\n    return currentItem\r\n  }\r\n\r\n  /**\r\n   * merge short hommonym part to current item from new item\r\n   * @return {WordItem}\r\n   */\r\n  mergeHommonymPart  (currentItem, newItem) {\r\n    currentItem.homonym = currentItem.homonym || this._serializeHomonym(newItem)\r\n    return currentItem\r\n  }\r\n\r\n  /**\r\n   * merge context part to current item from new item\r\n   * @return {WordItem}\r\n   */\r\n  mergeContextPart  (currentItem, newItem) {\r\n    let pushContext = currentItem.context || []\r\n    for (let contextItem of newItem.context) {\r\n      let hasCheck = currentItem.context.some(tqCurrent => {\r\n        return TextQuoteSelector.readObject(tqCurrent).isEqual(contextItem)\r\n      })\r\n      if (!hasCheck) {\r\n        pushContext.push(this._serializeContextItem(contextItem, currentItem))\r\n      }\r\n    }\r\n    currentItem.context = pushContext\r\n    return currentItem\r\n  }\r\n\r\n   /**\r\n   * Defines url for creating item in remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {String}\r\n   */\r\n  _constructPostURL (wordItem) {\r\n    return `/${this._makeStorageID(wordItem)}`\r\n  }\r\n\r\n   /**\r\n   * Defines url for getting wordItem or wordList from remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {String}\r\n   */\r\n  _constructGetURL (data) {\r\n    if (data.wordItem) {\r\n      return `/${this._makeStorageID(data.wordItem)}`\r\n    }\r\n    if (data.languageCode) {\r\n      return `/?languageCode=${data.languageCode}`\r\n    }\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Defines url for deleting items from wordList from languageCode in remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {String}\r\n   */\r\n  _constructDeleteManyURL (data) {\r\n    return `/?languageCode=${data.languageCode}`\r\n  }\r\n\r\n  /**\r\n   * Defines ID to use in remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {String}\r\n   */\r\n  _makeStorageID (wordItem) {\r\n    return wordItem.languageCode + '-' + wordItem.targetWord\r\n  }\r\n\r\n  /**\r\n   * Defines json object from wordItem to save to remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Object}\r\n   */\r\n  _serialize (wordItem) {\r\n    let result = {\r\n      ID: this._makeStorageID(wordItem),\r\n      listID: this.userId + '-' + wordItem.languageCode,\r\n      userID: this.userId,\r\n      languageCode: wordItem.languageCode,\r\n      targetWord: wordItem.targetWord,\r\n      important: wordItem.important,\r\n      createdDT: WordItemRemoteDbDriver.currentDate\r\n    }\r\n\r\n    let homonym = this._serializeHomonym(wordItem)\r\n    if (homonym) {\r\n      result.homonym = homonym\r\n    }\r\n    let context = this._serializeContext(wordItem)\r\n\r\n    if (context && context.length > 0) {\r\n      result.context = context\r\n    } else {\r\n      result.context = []\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Defines json object from homonym to save to remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Object}\r\n   */\r\n  _serializeHomonym (wordItem) {\r\n    if (wordItem.homonym && wordItem.homonym.targetWord) {\r\n      return {\r\n        targetWord: wordItem.homonym.targetWord,\r\n        lemmasList: wordItem.lemmasList\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Defines json object from textQuoteSelectors to save to remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Object[]}\r\n   */\r\n  _serializeContext (wordItem) {\r\n    let result = []\r\n    for (let tq of wordItem.context) {\r\n      result.push(this._serializeContextItem(tq, wordItem))\r\n    }\r\n    return result\r\n  }\r\n\r\n\r\n  /**\r\n   * Defines json object from a single textQuoteSelector to save to remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Object[]}\r\n   */\r\n  _serializeContextItem (tq, wordItem) {\r\n    return {\r\n      target: {\r\n        source: tq.source,\r\n        selector: {\r\n          type: 'TextQuoteSelector',\r\n          exact: tq.text,\r\n          prefix: tq.prefix && tq.prefix.length > 0 ? tq.prefix : ' ',\r\n          suffix: tq.suffix && tq.suffix.length > 0 ? tq.suffix : ' ',\r\n          languageCode: tq.languageCode\r\n        }\r\n      },\r\n      languageCode: wordItem.languageCode,\r\n      targetWord: wordItem.targetWord,\r\n      createdDT: WordItemRemoteDbDriver.currentDate\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks status of response (post) from remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Boolean}\r\n   */\r\n  _checkPostResult (result) {\r\n    return result.status === 201\r\n  }\r\n\r\n  /**\r\n   * Checks status of response (put) from remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Boolean}\r\n   */\r\n  _checkPutResult (result) {\r\n    return result.status === 200\r\n  }\r\n\r\n  /**\r\n   * Checks status of response (get) from remote storage\r\n   * @param {WordItem} wordItem\r\n   * @return {Object/Object[]}\r\n   */\r\n  _checkGetResult (result) {\r\n    if (result.status !== 200) {\r\n      return []\r\n    }\r\n    if (Array.isArray(result.data)) {\r\n      return result.data.map(item => item.body ? item.body : item)\r\n    } else {\r\n      return [ result.data ]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks status of response error (get) from remote storage\r\n   * If error message consists of 'Item not found.' - it is not an error. Return empty error instead of error.\r\n   * @param {Error} error\r\n   * @return {[]/Boolean}\r\n   */\r\n  _checkGetErrorResult (error) {\r\n    if (error.response && error.response.data && (error.response.data.error === 'Item not found.')) {\r\n      return []\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Defines date\r\n   */\r\n  static get currentDate () {\r\n    let dt = new Date()\r\n    return dt.getFullYear() + '/'\r\n        + ((dt.getMonth()+1) < 10 ? '0' : '') + (dt.getMonth()+1)  + '/'\r\n        + ((dt.getDate() < 10) ? '0' : '') + dt.getDate() + ' @ '\r\n                + ((dt.getHours() < 10) ? '0' : '') + dt.getHours() + \":\"\r\n                + ((dt.getMinutes() < 10) ? '0' : '') + dt.getMinutes() + \":\"\r\n                + ((dt.getSeconds() < 10) ? '0' : '') + dt.getSeconds()\r\n\r\n  }\r\n\r\n  /**\r\n   * Creates array is IDs from wordItems for comparing with remote storage data\r\n   * @param {WordItem[]} wordItems\r\n   * @return {String[]}\r\n   */\r\n  getCheckArray (dataItems) {\r\n    return dataItems.map(item => this._makeStorageID(item))\r\n  }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_alpheios_data_models__;"],"sourceRoot":""}